/**
 * –ò–∑—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Dart AI API –∏ –ø–æ–∏—Å–∫ endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á
 */

const axios = require('axios');
require('dotenv').config();

const API_KEY = process.env.DART_AI_API_KEY;
const API_URL = process.env.DART_AI_API_URL;

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

async function makeAPIRequest(endpoint, method = 'GET', data = null) {
  try {
    const config = {
      method,
      url: `${API_URL}${endpoint}`,
      headers: {
        'Authorization': `Bearer ${API_KEY}`,
        'Content-Type': 'application/json',
        'User-Agent': 'AI-Server-DartAI-Integration/1.0.0'
      },
      timeout: 10000
    };

    if (data && (method === 'POST' || method === 'PUT' || method === 'PATCH')) {
      config.data = data;
    }

    const response = await axios(config);
    return { success: true, data: response.data, status: response.status };
  } catch (error) {
    return {
      success: false,
      error: error.message,
      status: error.response?.status,
      data: error.response?.data
    };
  }
}

async function exploreAPI() {
  log('\nüîç –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Dart AI API\n', colors.bold);

  // 1. –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∏ –∏–∑—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
  log('üìã 1. –ò–∑—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–¥–∞—á...', colors.blue);
  
  const tasksResponse = await makeAPIRequest('/tasks');
  if (tasksResponse.success) {
    const tasks = tasksResponse.data.results || [];
    log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${tasksResponse.data.count} –∑–∞–¥–∞—á`, colors.green);
    
    if (tasks.length > 0) {
      const firstTask = tasks[0];
      log('\nüì¶ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏:', colors.yellow);
      log(JSON.stringify(firstTask, null, 2).slice(0, 1000) + '...', colors.reset);
      
      // –ö–ª—é—á–µ–≤—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
      const importantFields = ['title', 'description', 'status', 'priority', 'spaceDuid', 'kind', 'duid'];
      log('\nüîë –í–∞–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á:', colors.yellow);
      importantFields.forEach(field => {
        if (firstTask[field] !== undefined) {
          log(`   ‚Ä¢ ${field}: ${JSON.stringify(firstTask[field])}`, colors.reset);
        }
      });
    }
  } else {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: ${tasksResponse.error}`, colors.red);
    return;
  }

  // 2. –ü–æ–ª—É—á–∞–µ–º spaces –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –≥–¥–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏
  log('\nüè¢ 2. –ò–∑—É—á–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ (spaces)...', colors.blue);
  
  const spacesResponse = await makeAPIRequest('/spaces');
  if (spacesResponse.success) {
    const spaces = spacesResponse.data.results || [];
    log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${spacesResponse.data.count} –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤`, colors.green);
    
    if (spaces.length > 0) {
      log('\nüè¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞:', colors.yellow);
      spaces.forEach((space, index) => {
        log(`   ${index + 1}. "${space.title}" (${space.duid}) - ${space.kind}`, colors.reset);
        if (space.description) {
          log(`      üìù ${space.description}`, colors.reset);
        }
      });
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º DUID –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤
      global.TEST_SPACE_DUID = spaces[0].duid;
      log(`\nüìå –ë—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ: "${spaces[0].title}" (${spaces[0].duid})`, colors.green);
    }
  }

  // 3. –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ endpoints –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è
  log('\nüî® 3. –ü–æ–∏—Å–∫ endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á...', colors.blue);
  
  const createEndpoints = [
    '/tasks',
    '/tasks/create', 
    '/task',
    '/task/create',
    '/items',
    '/items/create',
    '/spaces/{spaceDuid}/tasks',
    '/spaces/{spaceDuid}/items'
  ];

  const testTaskData = {
    title: '[TEST] GitHub Integration Test Task',
    description: '# –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞\n\n–°–æ–∑–¥–∞–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ GitHub ‚Üí Dart AI',
    kind: 'Task', // –ò–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á
    spaceDuid: global.TEST_SPACE_DUID,
    status: 'open',
    priority: 'medium'
  };

  for (let endpoint of createEndpoints) {
    // –ü–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π spaceDuid –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (endpoint.includes('{spaceDuid}') && global.TEST_SPACE_DUID) {
      endpoint = endpoint.replace('{spaceDuid}', global.TEST_SPACE_DUID);
    }
    
    log(`\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º POST ${endpoint}...`, colors.yellow);
    
    const createResponse = await makeAPIRequest(endpoint, 'POST', testTaskData);
    
    if (createResponse.success) {
      log(`üéâ –£–°–ü–ï–•! –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ ${endpoint}`, colors.green);
      log(`üì¶ Response: ${JSON.stringify(createResponse.data, null, 2)}`, colors.green);
      
      // –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è —á–∏—Å—Ç–æ—Ç—ã
      if (createResponse.data.duid) {
        const deleteResponse = await makeAPIRequest(`/tasks/${createResponse.data.duid}`, 'DELETE');
        if (deleteResponse.success) {
          log(`üóëÔ∏è  –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞`, colors.yellow);
        }
      }
      
      return {
        success: true,
        working_endpoint: endpoint,
        task_structure: testTaskData,
        response_structure: createResponse.data
      };
      
    } else {
      const statusColor = createResponse.status === 405 ? colors.yellow : colors.red;
      log(`   ${createResponse.status}: ${createResponse.error}`, statusColor);
      if (createResponse.data) {
        log(`   üìã ${JSON.stringify(createResponse.data)}`, colors.reset);
      }
    }
  }

  // 4. –ò–∑—É—á–∞–µ–º OPTIONS –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
  log('\nüîç 4. –ò–∑—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö HTTP –º–µ—Ç–æ–¥–æ–≤...', colors.blue);
  
  try {
    const optionsResponse = await axios.options(`${API_URL}/tasks`, {
      headers: {
        'Authorization': `Bearer ${API_KEY}`,
        'User-Agent': 'AI-Server-DartAI-Integration/1.0.0'
      }
    });
    
    const allowedMethods = optionsResponse.headers.allow || optionsResponse.headers.Allow;
    if (allowedMethods) {
      log(`‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è /tasks: ${allowedMethods}`, colors.green);
    }
    
  } catch (error) {
    log(`‚ö†Ô∏è  OPTIONS –∑–∞–ø—Ä–æ—Å –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è`, colors.yellow);
  }

  // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏
  if (tasksResponse.success && tasksResponse.data.results.length > 0) {
    const firstTask = tasksResponse.data.results[0];
    log(`\nüìù 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ ${firstTask.duid}...`, colors.blue);
    
    const updateData = {
      title: firstTask.title + ' [UPDATED by API Test]'
    };
    
    const updateResponse = await makeAPIRequest(`/tasks/${firstTask.duid}`, 'PATCH', updateData);
    if (updateResponse.success) {
      log(`‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ PATCH`, colors.green);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
      const revertResponse = await makeAPIRequest(`/tasks/${firstTask.duid}`, 'PATCH', { title: firstTask.title });
      if (revertResponse.success) {
        log(`‚Ü©Ô∏è  –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã`, colors.yellow);
      }
    } else {
      log(`‚ùå PATCH –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${updateResponse.error}`, colors.red);
    }
  }

  return {
    success: false,
    message: '–ù–µ –Ω–∞–π–¥–µ–Ω —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ API'
  };
}

if (require.main === module) {
  exploreAPI()
    .then(result => {
      if (result && result.success) {
        log('\nüéâ –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π endpoint –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á!', colors.bold + colors.green);
        log(`\nüîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:`, colors.blue);
        log(`Endpoint: ${result.working_endpoint}`, colors.green);
        log(`–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–¥–∞—á–∏: ${JSON.stringify(result.task_structure, null, 2)}`, colors.reset);
      } else {
        log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:', colors.yellow);
        log('   1. API —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è (read-only)', colors.reset);
        log('   2. –°–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –ø–æ—Å–ª–µ–¥—É—é—â–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–µ–π', colors.reset);
        log('   3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ webhooks –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π', colors.reset);
        log('   4. –û–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É –∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π –∫ API', colors.reset);
      }
    })
    .catch(error => {
      log(`\nüí• –û—à–∏–±–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: ${error.message}`, colors.bold + colors.red);
      console.error(error);
    });
}

module.exports = { exploreAPI };