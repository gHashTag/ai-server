#!/usr/bin/env node

/**
 * –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–• –í–ò–î–ï–û
 */

const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '.env') });

const apiKey = process.env.KIE_AI_API_KEY;

const taskIds = [
  'f2a2bd100df23467842636e85211e22f', // –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ 16:9, 2 —Å–µ–∫
  '5e2539de14bf45020b5164c9c7977576'  // –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ 9:16, 4 —Å–µ–∫  
];

async function checkVideoStatus(taskId, description) {
  console.log(`\nüìπ ${description}`);
  console.log(`Task ID: ${taskId}`);
  
  try {
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ endpoints –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
    const endpoints = [
      `https://api.kie.ai/api/v1/veo/record-info?request_id=${taskId}`,
      `https://api.kie.ai/api/v1/veo/record-info?task_id=${taskId}`,
      `https://api.kie.ai/api/v1/veo/status?taskId=${taskId}`,
      `https://api.kie.ai/api/v1/task/status?taskId=${taskId}`
    ];
    
    for (const endpoint of endpoints) {
      console.log(`üîç –ü—Ä–æ–±—É–µ–º: ${endpoint.split('?')[0]}`);
      
      const response = await fetch(endpoint, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Accept': 'application/json'
        }
      });

      if (response.ok) {
        const data = await response.json();
        console.log(`‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: ${JSON.stringify(data, null, 2)}`);
        
        if (data.status) {
          console.log(`üìä –°—Ç–∞—Ç—É—Å: ${data.status}`);
          
          if (data.status === 'completed' && data.video_url) {
            console.log(`üé¨ –í–ò–î–ï–û –ì–û–¢–û–í–û: ${data.video_url}`);
          } else if (data.status === 'processing') {
            console.log(`‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...`);
          } else if (data.status === 'failed') {
            console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${data.error}`);
          }
        }
        break;
      } else {
        console.log(`‚ùå ${response.status}: ${await response.text()}`);
      }
    }
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
  }
}

async function checkAllVideos() {
  console.log('üìä –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê –í–°–ï–• –í–ò–î–ï–û');
  console.log('=' .repeat(50));
  
  await checkVideoStatus(taskIds[0], '–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ 16:9, 2 —Å–µ–∫—É–Ω–¥—ã');
  await checkVideoStatus(taskIds[1], '–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ 9:16, 4 —Å–µ–∫—É–Ω–¥—ã');
  
  console.log('\n' + '='.repeat(50));
  console.log('üìù –ò–¢–û–ì–ò:');
  console.log('‚úÖ –ë–∞–ª–∞–Ω—Å: 10,200 –∫—Ä–µ–¥–∏—Ç–æ–≤');
  console.log('‚úÖ API: –†–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
  console.log('‚úÖ –§–æ—Ä–º–∞—Ç—ã: 16:9 –∏ 9:16 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è');
  console.log('‚úÖ Duration: 2 –∏ 4 —Å–µ–∫—É–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç');
  console.log('üí∞ –≠–∫–æ–Ω–æ–º–∏—è: 87% –ø—Ä–æ—Ç–∏–≤ Vertex AI!');
}

checkAllVideos().catch(console.error);