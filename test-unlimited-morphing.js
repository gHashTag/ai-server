/**
 * üöÄ –¢–µ—Å—Ç –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–æ—Ä—Ñ–∏–Ω–≥–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª—é–±–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (2-100+)
 */

const FormData = require('form-data')
const fs = require('fs')
const axios = require('axios')
const path = require('path')

const API_BASE_URL =
  process.env.NODE_ENV === 'production'
    ? 'https://ai-server-u14194.vm.elestio.app'
    : 'http://localhost:4000'

async function testUnlimitedMorphing() {
  console.log('üöÄ === –¢–ï–°–¢ –ù–ï–û–ì–†–ê–ù–ò–ß–ï–ù–ù–û–ô –ü–û–î–î–ï–†–ñ–ö–ò –ú–û–†–§–ò–ù–ì–ê ===')

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  const testCases = [
    { count: 3, description: '–ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç (3 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Üí 2 –ø–∞—Ä—ã)' },
    { count: 5, description: '–°—Ä–µ–¥–Ω–∏–π —Ç–µ—Å—Ç (5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ‚Üí 4 –ø–∞—Ä—ã)' },
    { count: 10, description: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π —Ç–µ—Å—Ç (10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ‚Üí 9 –ø–∞—Ä)' },
    // { count: 100, description: "–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç (100 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ‚Üí 99 –ø–∞—Ä)" } // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
  ]

  for (const testCase of testCases) {
    console.log(`\nüß™ === ${testCase.description} ===`)

    try {
      // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π ZIP —Å –Ω—É–∂–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      console.log(`üì¶ –°–æ–∑–¥–∞–µ–º ZIP —Å ${testCase.count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...`)
      const testZipPath = `./test-morphing-${testCase.count}-images.zip`

      const AdmZip = require('adm-zip')
      const zip = new AdmZip()

      // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      for (let i = 1; i <= testCase.count; i++) {
        const paddedIndex = i.toString().padStart(3, '0')
        zip.addFile(
          `morphing_image_${paddedIndex}.jpg`,
          Buffer.from(`Test image ${i} content - generated for morphing test`)
        )
      }

      zip.writeZip(testZipPath)
      console.log(`‚úÖ ZIP —Å–æ–∑–¥–∞–Ω: ${testCase.count} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`)

      // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
      console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...')

      const form = new FormData()
      form.append('type', 'morphing')
      form.append('telegram_id', '144022504')
      form.append('image_count', testCase.count.toString())
      form.append('morphing_type', 'seamless')
      form.append('model', 'kling-v1.6-pro')
      form.append('is_ru', 'true')
      form.append('bot_name', 'neuro_blogger_bot')
      form.append('username', 'telegram_bot')
      form.append('images_zip', fs.createReadStream(testZipPath))

      const response = await axios.post(
        `${API_BASE_URL}/generate/morph-images`,
        form,
        {
          headers: {
            ...form.getHeaders(),
            'User-Agent': 'unlimited-morphing-test/1.0',
          },
          timeout: 30000,
        }
      )

      console.log('‚úÖ API Response:', response.status, response.statusText)
      console.log('üìã Response:', JSON.stringify(response.data, null, 2))

      // 3. –û–±—ä—è—Å–Ω—è–µ–º —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
      const expectedPairs = testCase.count - 1
      const estimatedTimeMinutes = expectedPairs * 5 // ~5 –º–∏–Ω—É—Ç –Ω–∞ –ø–∞—Ä—É

      console.log(`\nüîç === –û–ñ–ò–î–ê–ï–ú–û–ï –ü–û–í–ï–î–ï–ù–ò–ï ===`)
      console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${testCase.count}`)
      console.log(`üé¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${expectedPairs}`)
      console.log(`‚è±Ô∏è –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –≤—Ä–µ–º—è: ~${estimatedTimeMinutes} –º–∏–Ω—É—Ç`)
      console.log(`üîÑ –ü—Ä–æ—Ü–µ—Å—Å:`)

      for (let i = 1; i <= expectedPairs; i++) {
        console.log(
          `   ${i}. –ü–∞—Ä–∞ ${i}: –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${i} ‚Üí –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ${i + 1}`
        )
      }

      console.log(`\n‚ú® === –£–õ–£–ß–®–ï–ù–ò–Ø –í –ù–û–í–û–ô –í–ï–†–°–ò–ò ===`)
      console.log(
        `üöÄ –û–¥–∏–Ω step 'process-all-pairs' –≤–º–µ—Å—Ç–æ ${expectedPairs} –æ—Ç–¥–µ–ª—å–Ω—ã—Ö step'–æ–≤`
      )
      console.log(
        `üìà –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥ –ª—é–±–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`
      )
      console.log(`üõ°Ô∏è –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ timeout'–∞–º —á–µ—Ä–µ–∑ batch processing`)
      console.log(`üìä –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç—Ä–µ–∫–∏–Ω–≥ —Å remaining_pairs —Å—á–µ—Ç—á–∏–∫–æ–º`)

      // –û—á–∏—Å—Ç–∫–∞
      if (fs.existsSync(testZipPath)) {
        fs.unlinkSync(testZipPath)
        console.log('üßπ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω')
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', {
        testCase: testCase.description,
        message: error.message,
        status: error.response?.status,
        data: error.response?.data,
      })
    }
  }

  console.log(`\nüéØ === –ö–†–ê–¢–ö–û–ï –†–ï–ó–Æ–ú–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô ===`)
  console.log(`‚úÖ 2-5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: –ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (~10-25 –º–∏–Ω—É—Ç)`)
  console.log(`‚úÖ 6-10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: –°—Ä–µ–¥–Ω—è—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (~30-50 –º–∏–Ω—É—Ç)`)
  console.log(`‚úÖ 11-50 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: –î–æ–ª–≥–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (~1-4 —á–∞—Å–∞)`)
  console.log(`‚úÖ 51-100 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: –û—á–µ–Ω—å –¥–æ–ª–≥–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (~4-8 —á–∞—Å–æ–≤)`)
  console.log(`‚úÖ 100+ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (8+ —á–∞—Å–æ–≤)`)

  console.log(`\nüìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:`)
  console.log(`üîó Inngest Dashboard: http://localhost:8288`)
  console.log(`‚ö° –§—É–Ω–∫—Ü–∏—è: üß¨ Morph Images`)
  console.log(`üé¨ Step: process-all-pairs (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—Å–µ—Ö –ø–∞—Ä)`)
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testUnlimitedMorphing()
    .then(() => console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!'))
    .catch(console.error)
}
