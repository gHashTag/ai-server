import { Request, Response } from 'express'
import { updatePrompt } from '@/core/supabase/'
import { pulse } from '@/helpers/pulse'
import { processApiResponse } from '@/helpers/processApiResponse'
import { getBotByName } from '@/core/bot'
import { errorMessageAdmin } from '@/helpers'

export class WebhookBFLNeurophotoController {
  public async handleWebhookNeurophoto(
    req: Request,
    res: Response
  ): Promise<void> {
    try {
      const { task_id, status, result } = req.body
      const imageUrl = await processApiResponse(result.sample)

      const { telegram_id, username, bot_name, language_code } =
        await updatePrompt(task_id, result.sample)
      const is_ru = language_code === 'ru'
      const { bot } = getBotByName(bot_name)
      if (status === 'SUCCESS') {
        console.log('Webhook received:', req.body)

        console.log('Sending image:', imageUrl)

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º URL –Ω–∞–ø—Ä—è–º—É—é, –±–µ–∑ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä
        await bot.telegram.sendPhoto(telegram_id, imageUrl)

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ pulse
        const pulseImage = imageUrl
        console.log('pulseImage', pulseImage)

        await pulse(
          pulseImage,
          result.prompt,
          'neurophoto',
          telegram_id,
          username,
          is_ru
        )

        await bot.telegram.sendMessage(
          telegram_id,
          is_ru ? `üì∏ –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ –≥–æ—Ç–æ–≤–æ!` : `üì∏ Neurophoto is ready!`,
          {
            reply_markup: {
              keyboard: [
                [
                  { text: '1Ô∏è‚É£' },
                  { text: '2Ô∏è‚É£' },
                  { text: '3Ô∏è‚É£' },
                  { text: '4Ô∏è‚É£' },
                ],
                [
                  { text: is_ru ? '‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç' : '‚¨ÜÔ∏è Improve prompt' },
                  { text: is_ru ? 'üìê –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä' : 'üìê Change size' },
                ],
                [{ text: is_ru ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu' }],
              ],
              resize_keyboard: true,
              one_time_keyboard: false,
            },
          }
        )

        res.status(200).json({ message: 'Webhook processed successfully' })
      } else if (status === 'Content Moderated') {
        await bot.telegram.sendMessage(
          telegram_id,
          is_ru
            ? `üö´ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –ø—Ä–æ–º–ø—Ç –∏–ª–∏ –µ—â–µ —Ä–∞–∑.`
            : `üö´ Content rejected by moderation. Try another prompt or try again.`
        )
        res.status(200).json({ message: 'Webhook processed successfully' })
      } else {
        errorMessageAdmin(
          new Error(`üö´ Webhook received: ${JSON.stringify(req.body)}`)
        )
        res.status(200).json({ message: 'Webhook processed successfully' })
      }
    } catch (error) {
      console.error('Error processing webhook:', error)
      res.status(500).json({ error: 'Internal server error' })
    }
  }
}
