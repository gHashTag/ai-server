import { Request, Response, NextFunction } from 'express'
import { generateTextToImage } from '@/services/generateTextToImage'
import { generateSpeech } from '@/services/generateSpeech'
import { generateTextToVideo } from '@/services/generateTextToVideo'
import { generateImageToVideo } from '@/services/generateImageToVideo'
import { generateImageToPrompt } from '@/services/generateImageToPrompt'
import { createVoiceAvatar } from '@/services/createVoiceAvatar'
import { generateNeuroImage } from '@/services/generateNeuroImage'
import { generateNeuroImageV2 } from '@/services/generateNeuroImageV2'
import { generateLipSync } from '@/services/generateLipSync'
import { generateModelTraining } from '@/services/generateModelTraining'

import { API_URL } from '@/config'
import { deleteFile } from '@/helpers'
import path from 'path'
import { getBotByName } from '@/core/bot'
import { inngest } from '@/core/inngest/clients'
import { logger } from '@/utils/logger'

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Zod —Å—Ö–µ–º—ã –∏ —Ç–∏–ø—ã
import {
  TextToImageRequest,
  NeuroPhotoRequest,
  NeuroPhotoV2Request,
  TextToSpeechRequest,
  TextToVideoRequest,
  ImageToVideoRequest,
  ImageToPromptRequest,
  CreateAvatarVoiceRequest,
  CreateModelTrainingRequest,
  CreateLipSyncRequest,
  NeuroPhotoSyncRequest,
} from '@/schemas/api/generation.schemas'

/**
 * –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è Generation Controller —Å –ø–æ–ª–Ω–æ–π Zod –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
 * –ó–∞–º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å —Ä—É—á–Ω–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
 */
export class GenerationControllerZod {
  /**
   * Text to Image –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å Zod –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
   * –ó–∞–º–µ–Ω—è–µ—Ç —Ä—É—á–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ if (!prompt) –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é
   */
  public textToImage = async (
    req: Request,
    res: Response,
    next: NextFunction
  ): Promise<void> => {
    try {
      // req.body —É–∂–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω Zod middleware
      const validatedData = req.body as TextToImageRequest

      logger.info('üé® Text-to-Image –∑–∞–ø—Ä–æ—Å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω', {
        description: 'Text-to-Image request validated',
        telegram_id: validatedData.telegram_id,
        prompt: validatedData.prompt.substring(0, 50) + '...',
        model: validatedData.model,
        num_images: validatedData.num_images,
      })

      res.status(200).json({ message: 'Processing started' })

      const { bot } = getBotByName(validatedData.bot_name)

      await generateTextToImage(
        validatedData.prompt,
        validatedData.model,
        validatedData.num_images,
        validatedData.telegram_id,
        validatedData.username,
        validatedData.is_ru,
        bot,
        validatedData.bot_name
      )
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ textToImage –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ', {
        description: 'Error in textToImage controller',
        error: error instanceof Error ? error.message : String(error),
        telegram_id: req.body?.telegram_id,
      })
      next(error)
    }
  }

  /**
   * Neuro Photo –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å Zod –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
   */
  public neuroPhoto = async (
    req: Request,
    res: Response,
    next: NextFunction
  ): Promise<void> => {
    try {
      const validatedData = req.body as NeuroPhotoRequest

      logger.info('üñºÔ∏è Neuro Photo –∑–∞–ø—Ä–æ—Å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω', {
        description: 'Neuro Photo request validated',
        telegram_id: validatedData.telegram_id,
        model_url: validatedData.model_url,
        gender: validatedData.gender,
        num_images: validatedData.num_images,
      })

      res.status(200).json({ message: 'Processing started' })

      const { bot } = getBotByName(validatedData.bot_name)

      await generateNeuroImage(
        validatedData.prompt,
        validatedData.model_url as
          | `${string}/${string}`
          | `${string}/${string}:${string}`,
        validatedData.num_images,
        validatedData.telegram_id,
        validatedData.username,
        validatedData.is_ru,
        validatedData.bot_name,
        validatedData.gender
      )
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ neuroPhoto –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ', {
        description: 'Error in neuroPhoto controller',
        error: error instanceof Error ? error.message : String(error),
        telegram_id: req.body?.telegram_id,
      })
      next(error)
    }
  }

  /**
   * Neuro Photo V2 –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å Zod –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
   */
  public neuroPhotoV2 = async (
    req: Request,
    res: Response,
    next: NextFunction
  ): Promise<void> => {
    try {
      const validatedData = req.body as NeuroPhotoV2Request

      logger.info('üñºÔ∏è Neuro Photo V2 –∑–∞–ø—Ä–æ—Å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω', {
        description: 'Neuro Photo V2 request validated',
        telegram_id: validatedData.telegram_id,
        gender: validatedData.gender,
        num_images: validatedData.num_images,
      })

      res.status(200).json({ message: 'Processing started' })

      generateNeuroImageV2(
        validatedData.prompt,
        validatedData.num_images,
        validatedData.telegram_id,
        validatedData.is_ru,
        validatedData.bot_name,
        validatedData.gender
      ).catch(error => {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è V2', {
          description: 'Error in image generation V2',
          error: error instanceof Error ? error.message : String(error),
          telegram_id: validatedData.telegram_id,
        })
      })
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ neuroPhotoV2 –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ', {
        description: 'Error in neuroPhotoV2 controller',
        error: error instanceof Error ? error.message : String(error),
        telegram_id: req.body?.telegram_id,
      })
      next(error)
    }
  }

  /**
   * Text to Speech —Å Zod –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
   */
  public textToSpeech = async (
    req: Request,
    res: Response,
    next: NextFunction
  ): Promise<void> => {
    try {
      const validatedData = req.body as TextToSpeechRequest

      logger.info('üé§ Text-to-Speech –∑–∞–ø—Ä–æ—Å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω', {
        description: 'Text-to-Speech request validated',
        telegram_id: validatedData.telegram_id,
        voice_id: validatedData.voice_id,
        text_length: validatedData.text.length,
      })

      res.status(200).json({ message: 'Processing started' })

      const { bot } = getBotByName(validatedData.bot_name)

      await generateSpeech({
        text: validatedData.text,
        voice_id: validatedData.voice_id,
        telegram_id: validatedData.telegram_id,
        is_ru: validatedData.is_ru,
        bot,
        bot_name: validatedData.bot_name,
      })
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ textToSpeech –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ', {
        description: 'Error in textToSpeech controller',
        error: error instanceof Error ? error.message : String(error),
        telegram_id: req.body?.telegram_id,
      })
      next(error)
    }
  }

  /**
   * Text to Video —Å Zod –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
   */
  public textToVideo = async (
    req: Request,
    res: Response,
    next: NextFunction
  ): Promise<void> => {
    try {
      const validatedData = req.body as TextToVideoRequest

      logger.info('üé¨ Text-to-Video –∑–∞–ø—Ä–æ—Å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω', {
        description: 'Text-to-Video request validated',
        telegram_id: validatedData.telegram_id,
        videoModel: validatedData.videoModel,
        prompt: validatedData.prompt.substring(0, 50) + '...',
      })

      res.status(200).json({ message: 'Processing started' })

      await generateTextToVideo(
        validatedData.prompt,
        validatedData.videoModel,
        validatedData.telegram_id,
        validatedData.username,
        validatedData.is_ru,
        validatedData.bot_name
      )
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ textToVideo –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ', {
        description: 'Error in textToVideo controller',
        error: error instanceof Error ? error.message : String(error),
        telegram_id: req.body?.telegram_id,
      })
      next(error)
    }
  }

  /**
   * Image to Video —Å Zod –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–æ—Ä—Ñ–∏–Ω–≥)
   */
  public imageToVideo = async (
    req: Request,
    res: Response,
    next: NextFunction
  ): Promise<void> => {
    try {
      const validatedData = req.body as ImageToVideoRequest

      logger.info('üé¨ Image-to-Video –∑–∞–ø—Ä–æ—Å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω', {
        description: 'Image-to-Video request validated',
        telegram_id: validatedData.telegram_id,
        videoModel: validatedData.videoModel,
        is_morphing: validatedData.is_morphing || false,
        imageUrl: validatedData.imageUrl,
        imageAUrl: validatedData.imageAUrl,
        imageBUrl: validatedData.imageBUrl,
      })

      res.status(202).json({ message: 'Request accepted, processing started.' })

      await generateImageToVideo(
        validatedData.imageUrl,
        validatedData.prompt,
        validatedData.videoModel,
        validatedData.telegram_id,
        validatedData.username,
        validatedData.is_ru,
        validatedData.bot_name,
        validatedData.is_morphing || false,
        validatedData.imageAUrl,
        validatedData.imageBUrl
      )
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ imageToVideo –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ', {
        description: 'Error in imageToVideo controller',
        error: error instanceof Error ? error.message : String(error),
        telegram_id: req.body?.telegram_id,
      })
      next(error)
    }
  }

  /**
   * Image to Prompt —Å Zod –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
   */
  public imageToPrompt = async (
    req: Request,
    res: Response,
    next: NextFunction
  ): Promise<void> => {
    try {
      const validatedData = req.body as ImageToPromptRequest

      logger.info('üîç Image-to-Prompt –∑–∞–ø—Ä–æ—Å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω', {
        description: 'Image-to-Prompt request validated',
        telegram_id: validatedData.telegram_id,
        image: validatedData.image,
      })

      res.status(200).json({ message: 'Processing started' })

      const { bot } = getBotByName(validatedData.bot_name)

      generateImageToPrompt(
        validatedData.image,
        validatedData.telegram_id,
        validatedData.username,
        validatedData.is_ru,
        bot,
        validatedData.bot_name
      )
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ imageToPrompt –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ', {
        description: 'Error in imageToPrompt controller',
        error: error instanceof Error ? error.message : String(error),
        telegram_id: req.body?.telegram_id,
      })
      next(error)
    }
  }

  /**
   * Create Avatar Voice —Å Zod –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
   */
  public createAvatarVoice = async (
    req: Request,
    res: Response,
    next: NextFunction
  ): Promise<void> => {
    try {
      const validatedData = req.body as CreateAvatarVoiceRequest

      logger.info('üéôÔ∏è Create Avatar Voice –∑–∞–ø—Ä–æ—Å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω', {
        description: 'Create Avatar Voice request validated',
        telegram_id: validatedData.telegram_id,
        fileUrl: validatedData.fileUrl,
      })

      res.status(200).json({ message: 'Voice creation started' })

      const { bot } = getBotByName(validatedData.bot_name)

      createVoiceAvatar(
        validatedData.fileUrl,
        validatedData.telegram_id,
        validatedData.username,
        validatedData.is_ru,
        bot
      )
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ createAvatarVoice –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ', {
        description: 'Error in createAvatarVoice controller',
        error: error instanceof Error ? error.message : String(error),
        telegram_id: req.body?.telegram_id,
      })
      next(error)
    }
  }

  /**
   * Create Model Training —Å Zod –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
   * –§–∞–π–ª –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ multer middleware
   */
  public createModelTraining = async (
    req: Request,
    res: Response,
    next: NextFunction
  ): Promise<void> => {
    try {
      const validatedData = req.body as CreateModelTrainingRequest

      logger.info('ü§ñ Create Model Training –∑–∞–ø—Ä–æ—Å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω', {
        description: 'Create Model Training request validated',
        telegram_id: validatedData.telegram_id,
        modelName: validatedData.modelName,
        triggerWord: validatedData.triggerWord,
        steps: validatedData.steps,
        gender: validatedData.gender,
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ multer)
      const zipFile = req.file
      if (!zipFile || zipFile.fieldname !== 'zipUrl') {
        logger.error('‚ùå –§–∞–π–ª zipUrl –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç', {
          description: 'zipUrl file missing',
          receivedFile: req.file,
          telegram_id: validatedData.telegram_id,
        })
        res
          .status(400)
          .json({ message: "zipFile with fieldname 'zipUrl' is required" })
        return
      }

      const zipUrl = `https://${req.headers.host}/uploads/${validatedData.telegram_id}/${validatedData.type}/${zipFile.filename}`

      logger.info('üìÅ –§–∞–π–ª –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω', {
        description: 'Training file processed',
        zipUrl,
        filename: zipFile.filename,
        telegram_id: validatedData.telegram_id,
      })

      res.status(200).json({ message: 'Model training started' })

      const { bot } = getBotByName(validatedData.bot_name)

      await generateModelTraining(
        zipUrl,
        validatedData.triggerWord,
        validatedData.modelName,
        validatedData.steps,
        validatedData.telegram_id,
        validatedData.is_ru,
        bot,
        validatedData.bot_name,
        validatedData.gender
      )
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ createModelTraining –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ', {
        description: 'Error in createModelTraining controller',
        error: error instanceof Error ? error.message : String(error),
        stack: error instanceof Error ? error.stack : undefined,
        body: req.body,
        file: req.file,
        telegram_id: req.body?.telegram_id,
      })

      if (!res.headersSent) {
        next(error)
      }
    }
  }

  /**
   * Create Lip Sync —Å Zod –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
   * –§–∞–π–ª—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ multer middleware
   */
  public createLipSync = async (
    req: Request,
    res: Response,
    next: NextFunction
  ): Promise<void> => {
    try {
      const validatedData = req.body as CreateLipSyncRequest

      logger.info('üíã Create Lip Sync –∑–∞–ø—Ä–æ—Å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω', {
        description: 'Create Lip Sync request validated',
        telegram_id: validatedData.telegram_id,
        type: validatedData.type,
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤ (–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö multer)
      const videoFile = Array.isArray(req.files)
        ? req.files.find(file => file.fieldname === 'video')
        : req.files?.['video']

      const audioFile = Array.isArray(req.files)
        ? req.files.find(file => file.fieldname === 'audio')
        : req.files?.['audio']

      if (!videoFile) {
        res.status(400).json({ message: 'videoFile is required' })
        return
      }

      if (!audioFile) {
        res.status(400).json({ message: 'audioFile is required' })
        return
      }

      const video = `${API_URL}/uploads/${validatedData.telegram_id}/lip-sync/${videoFile.filename}`
      const audio = `${API_URL}/uploads/${validatedData.telegram_id}/lip-sync/${audioFile.filename}`

      logger.info('üìÅ –§–∞–π–ª—ã –¥–ª—è Lip Sync –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã', {
        description: 'Lip Sync files processed',
        video,
        audio,
        telegram_id: validatedData.telegram_id,
      })

      const lipSyncResponse = await generateLipSync(
        validatedData.telegram_id,
        video,
        audio,
        validatedData.is_ru
      )

      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
      const videoLocalPath = path.join(
        __dirname,
        '../uploads',
        validatedData.telegram_id,
        'lip-sync',
        videoFile.filename
      )
      const audioLocalPath = path.join(
        __dirname,
        '../uploads',
        validatedData.telegram_id,
        'lip-sync',
        audioFile.filename
      )

      await deleteFile(videoLocalPath)
      await deleteFile(audioLocalPath)

      res.status(200).json(lipSyncResponse)
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ createLipSync –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ', {
        description: 'Error in createLipSync controller',
        error: error instanceof Error ? error.message : String(error),
        telegram_id: req.body?.telegram_id,
      })
      next(error)
    }
  }

  /**
   * Neuro Photo Sync (–¥–ª—è MCP) —Å Zod –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
   */
  public neuroPhotoSync = async (
    req: Request,
    res: Response,
    next: NextFunction
  ): Promise<void> => {
    try {
      const validatedData = req.body as NeuroPhotoSyncRequest

      logger.info('üîÑ MCP Neuro Photo Sync –∑–∞–ø—Ä–æ—Å –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω', {
        description: 'MCP Neuro Photo Sync request validated',
        telegram_id: validatedData.telegram_id,
        model_url: validatedData.model_url,
      })

      // –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è - –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const result = await generateNeuroImage(
        validatedData.prompt,
        validatedData.model_url as
          | `${string}/${string}`
          | `${string}/${string}:${string}`,
        validatedData.num_images,
        validatedData.telegram_id,
        validatedData.username || `mcp_user_${validatedData.telegram_id}`,
        validatedData.is_ru,
        validatedData.bot_name
      )

      if (result && result.length > 0) {
        res.status(200).json({
          success: true,
          message: '–ù–µ–π—Ä–æ—Ñ–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ',
          images: result.map(img => ({
            url: img.image,
            prompt_id: img.prompt_id,
          })),
          count: result.length,
        })
      } else {
        res.status(500).json({
          success: false,
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
        })
      }
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ neuroPhotoSync –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ', {
        description: 'Error in neuroPhotoSync controller',
        error: error instanceof Error ? error.message : String(error),
        telegram_id: req.body?.telegram_id,
      })
      next(error)
    }
  }
}
