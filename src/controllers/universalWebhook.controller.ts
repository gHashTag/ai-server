import { Request, Response } from 'express'
import { supabase } from '@/core/supabase'
import { errorMessageAdmin } from '@/helpers'
import { getBotByName } from '@/helpers'
import { logger } from '@/utils/logger'

/**
 * –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook'–æ–≤ –æ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
 *
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
 * - Kie.ai
 * - Replicate
 * - BFL (Black Forest Labs)
 * - SyncLabs
 * - –î—Ä—É–≥–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã
 */
export class UniversalWebhookController {
  /**
   * –ï–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –≤—Å–µ—Ö webhook'–æ–≤
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
   */
  public async handleWebhook(req: Request, res: Response): Promise<void> {
    try {
      const provider = this.identifyProvider(req)

      logger.info(`üîî Webhook received from ${provider}`, {
        provider,
        headers: req.headers,
        body: req.body,
      })

      switch (provider) {
        case 'kie-ai':
          await this.handleKieAiWebhook(req, res)
          break
        case 'replicate':
          await this.handleReplicateWebhook(req, res)
          break
        case 'bfl':
          await this.handleBflWebhook(req, res)
          break
        case 'synclabs':
          await this.handleSyncLabsWebhook(req, res)
          break
        default:
          logger.warn(`‚ö†Ô∏è Unknown provider: ${provider}`)
          res.status(400).json({ error: 'Unknown provider' })
      }
    } catch (error) {
      logger.error('‚ùå Error processing webhook:', error)
      errorMessageAdmin(error)
      res.status(500).json({ error: 'Internal server error' })
    }
  }

  /**
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∑–∞–ø—Ä–æ—Å–∞
   */
  private identifyProvider(req: Request): string {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    if (req.headers['x-kie-signature']) {
      return 'kie-ai'
    }
    if (req.headers['x-replicate-signature']) {
      return 'replicate'
    }
    if (req.headers['x-bfl-signature']) {
      return 'bfl'
    }
    if (req.headers['x-synclabs-signature']) {
      return 'synclabs'
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É body
    const body = req.body

    // Kie.ai –æ–±—ã—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç taskId –∏ videoUrl
    if (body.taskId && body.videoUrl && !body.prediction) {
      return 'kie-ai'
    }

    // Replicate –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç prediction
    if (body.prediction || body.status === 'succeeded') {
      return 'replicate'
    }

    // BFL –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    if (body.model_id && body.result) {
      return 'bfl'
    }

    // SyncLabs –∏—Å–ø–æ–ª—å–∑—É–µ—Ç outputUrl
    if (body.outputUrl && body.status) {
      return 'synclabs'
    }

    return 'unknown'
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook'–æ–≤ –æ—Ç Kie.ai
   */
  private async handleKieAiWebhook(req: Request, res: Response): Promise<void> {
    try {
      // Kie.ai –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–µ—Ä—Å–∏–∏ API
      const {
        taskId,
        videoUrl,
        status,
        error,
        result, // –Ω–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        metadata, // –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
      } = req.body

      logger.info(`üìπ Kie.ai webhook received`, {
        taskId,
        status,
        videoUrl: videoUrl ? 'present' : 'absent',
        result: result ? 'present' : 'absent',
        metadata: metadata || null,
      })

      // –ò—â–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const { data: taskData, error: dbError } = await supabase
        .from('video_tasks')
        .select('*')
        .eq('task_id', taskId)
        .single()

      if (dbError || !taskData) {
        // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–¥–∏–º –µ—ë
        if (dbError?.code === '42P01') {
          await this.createVideoTasksTable()
          logger.warn('Created video_tasks table')
        } else {
          logger.error('Task not found:', taskId)
          res.status(404).json({ error: 'Task not found' })
          return
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏
      // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (videoUrl), —Ç–∞–∫ –∏ –Ω–æ–≤–æ–≥–æ (result.videoUrl)
      const finalVideoUrl = videoUrl || result?.videoUrl || result?.url

      if ((status === 'completed' || status === 'success') && finalVideoUrl) {
        const updateData: any = {
          status: 'completed',
          video_url: finalVideoUrl,
          completed_at: new Date().toISOString(),
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if (metadata || result?.metadata) {
          updateData.metadata = {
            ...taskData?.metadata,
            ...(metadata || result?.metadata),
          }
        }

        await supabase
          .from('video_tasks')
          .update(updateData)
          .eq('task_id', taskId)

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ Telegram
        if (taskData?.telegram_id && taskData?.bot_name) {
          const { bot } = getBotByName(taskData.bot_name)

          // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
          let caption = taskData.is_ru
            ? `üé¨ –í–∞—à–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!\n‚ö° –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ Kie.ai (—ç–∫–æ–Ω–æ–º–∏—è 87%)\nüìπ –ú–æ–¥–µ–ª—å: ${
                taskData.model || 'veo-3-fast'
              }`
            : `üé¨ Your video is ready!\n‚ö° Generated via Kie.ai (87% savings)\nüìπ Model: ${
                taskData.model || 'veo-3-fast'
              }`

          // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–¥—è–Ω–æ–º –∑–Ω–∞–∫–µ –µ—Å–ª–∏ –æ–Ω –±—ã–ª
          if (taskData.metadata?.watermark) {
            caption += taskData.is_ru
              ? `\nüíß –í–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫: ${taskData.metadata.watermark}`
              : `\nüíß Watermark: ${taskData.metadata.watermark}`
          }

          await bot.telegram.sendVideo(taskData.telegram_id, finalVideoUrl, {
            caption,
          })

          logger.info(`‚úÖ Video sent to user ${taskData.telegram_id}`)
        }
      } else if (status === 'failed') {
        await supabase
          .from('video_tasks')
          .update({
            status: 'failed',
            error_message: error || 'Unknown error',
            completed_at: new Date().toISOString(),
          })
          .eq('task_id', taskId)

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
        if (taskData?.telegram_id && taskData?.bot_name) {
          const { bot } = getBotByName(taskData.bot_name)

          await bot.telegram.sendMessage(
            taskData.telegram_id,
            taskData.is_ru
              ? `‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: ${error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`
              : `‚ùå Video generation failed: ${error || 'Unknown error'}`
          )
        }
      }

      res.status(200).json({ success: true, message: 'Webhook processed' })
    } catch (error) {
      logger.error('Error processing Kie.ai webhook:', error)
      res.status(500).json({ error: 'Internal server error' })
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook'–æ–≤ –æ—Ç Replicate
   */
  private async handleReplicateWebhook(
    req: Request,
    res: Response
  ): Promise<void> {
    // –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑ replicateWebhook.controller.ts
    logger.info('Processing Replicate webhook')
    res.status(200).json({ success: true })
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook'–æ–≤ –æ—Ç BFL
   */
  private async handleBflWebhook(req: Request, res: Response): Promise<void> {
    // –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑ webhook-bfl.controller.ts
    logger.info('Processing BFL webhook')
    res.status(200).json({ success: true })
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook'–æ–≤ –æ—Ç SyncLabs
   */
  private async handleSyncLabsWebhook(
    req: Request,
    res: Response
  ): Promise<void> {
    // –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑ webhook.controller.ts
    logger.info('Processing SyncLabs webhook')
    res.status(200).json({ success: true })
  }

  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –≤–∏–¥–µ–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  private async createVideoTasksTable(): Promise<void> {
    const createTableQuery = `
      CREATE TABLE IF NOT EXISTS video_tasks (
        id SERIAL PRIMARY KEY,
        task_id VARCHAR(255) UNIQUE NOT NULL,
        provider VARCHAR(50) NOT NULL,
        telegram_id VARCHAR(255),
        bot_name VARCHAR(100),
        model VARCHAR(100),
        prompt TEXT,
        status VARCHAR(50) DEFAULT 'processing',
        video_url TEXT,
        error_message TEXT,
        is_ru BOOLEAN DEFAULT false,
        metadata JSONB,
        created_at TIMESTAMP DEFAULT NOW(),
        completed_at TIMESTAMP,
        CONSTRAINT unique_task_id UNIQUE (task_id)
      );
      
      CREATE INDEX IF NOT EXISTS idx_video_tasks_telegram_id ON video_tasks(telegram_id);
      CREATE INDEX IF NOT EXISTS idx_video_tasks_status ON video_tasks(status);
      CREATE INDEX IF NOT EXISTS idx_video_tasks_provider ON video_tasks(provider);
    `

    try {
      await supabase.rpc('exec_sql', { sql: createTableQuery })
      logger.info('‚úÖ video_tasks table created successfully')
    } catch (error) {
      logger.error('Failed to create video_tasks table:', error)
    }
  }
}
