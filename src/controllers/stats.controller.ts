import { Request, Response, NextFunction } from 'express'
import {
  getUserBalanceStats,
  getUserDetailsSubscription,
} from '@/core/supabase'
import { supabase } from '@/core/supabase'
import { logger } from '@/utils/logger'
import { getBotByName } from '@/core/bot'

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Zod —Å—Ö–µ–º—ã –∏ —Ç–∏–ø—ã
import {
  UserStatsRequest,
  BotStatsRequest,
  UserStatsResponse,
  BotStatsResponse,
} from '@/schemas/api/stats.schemas'

/**
 * –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –º–µ–Ω—é
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –ø–æ –±–æ—Ç–∞–º
 */
export class StatsController {
  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–≤–æ–∏—Ö –±–æ—Ç–æ–≤
   */
  public getUserStats = async (
    req: Request,
    res: Response,
    next: NextFunction
  ): Promise<void> => {
    try {
      const validatedData = req.body as UserStatsRequest

      logger.info('üìä –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
        description: 'User stats request',
        telegram_id: validatedData.telegram_id,
        bot_name: validatedData.bot_name,
      })

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–ª–∞–Ω—Å–∞
      const balanceStats = await getUserBalanceStats(
        validatedData.telegram_id,
        validatedData.bot_name
      )

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–ø–∏—Å–∫–∏
      const subscriptionDetails = await getUserDetailsSubscription(
        validatedData.telegram_id
      )

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
      const { data: userData, error: userError } = await supabase
        .from('users')
        .select('level, created_at, last_activity')
        .eq('telegram_id', validatedData.telegram_id)
        .single()

      if (userError) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
          description: 'Error getting user data',
          telegram_id: validatedData.telegram_id,
          error: userError.message,
        })
        res.status(404).json({
          success: false,
          message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
        })
        return
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
      const { data: generationsData } = await supabase
        .from('payments_v2')
        .select('service_type')
        .eq('telegram_id', validatedData.telegram_id)
        .eq('type', 'MONEY_OUTCOME')
        .eq('status', 'COMPLETED')
        .not('service_type', 'is', null)

      const totalGenerations = generationsData?.length || 0

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ª—é–±–∏–º—ã–µ —Å–µ—Ä–≤–∏—Å—ã
      const serviceCount: Record<string, number> = {}
      generationsData?.forEach(payment => {
        if (payment.service_type) {
          serviceCount[payment.service_type] =
            (serviceCount[payment.service_type] || 0) + 1
        }
      })

      const favoriteServices = Object.entries(serviceCount)
        .sort(([, a], [, b]) => b - a)
        .slice(0, 3)
        .map(([service]) => service)

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–Ω–∏ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
      let daysRemaining: number | null = null
      if (
        subscriptionDetails.isSubscriptionActive &&
        subscriptionDetails.subscriptionStartDate
      ) {
        const startDate = new Date(subscriptionDetails.subscriptionStartDate)
        const endDate = new Date(startDate.getTime() + 30 * 24 * 60 * 60 * 1000) // +30 –¥–Ω–µ–π
        const now = new Date()
        daysRemaining = Math.ceil(
          (endDate.getTime() - now.getTime()) / (24 * 60 * 60 * 1000)
        )
      }

      const response: UserStatsResponse = {
        success: true,
        message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
        data: {
          balance: {
            stars: balanceStats.stars,
            total_added: balanceStats.total_added,
            total_spent: balanceStats.total_spent,
            bonus_stars: balanceStats.bonus_stars,
            added_stars: balanceStats.added_stars,
            added_rub: balanceStats.added_rub,
            services: balanceStats.services,
            payment_methods: balanceStats.payment_methods,
          },
          subscription: {
            isSubscriptionActive: subscriptionDetails.isSubscriptionActive,
            subscriptionType: subscriptionDetails.subscriptionType,
            subscriptionStartDate: subscriptionDetails.subscriptionStartDate,
            daysRemaining,
          },
          user_level: userData.level || 0,
          registration_date: userData.created_at,
          last_activity: userData.last_activity,
          total_generations: totalGenerations,
          favorite_services: favoriteServices,
        },
      }

      logger.info('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞', {
        description: 'User stats sent successfully',
        telegram_id: validatedData.telegram_id,
        total_generations: totalGenerations,
        balance: balanceStats.stars,
      })

      res.status(200).json(response)
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ getUserStats –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ', {
        description: 'Error in getUserStats controller',
        error: error instanceof Error ? error.message : String(error),
        telegram_id: req.body?.telegram_id,
      })
      next(error)
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –±–æ—Ç–∞–º
   * –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –±–æ—Ç—ã, –∞–¥–º–∏–Ω—ã - –≤—Å–µ
   */
  public getBotStats = async (
    req: Request,
    res: Response,
    next: NextFunction
  ): Promise<void> => {
    try {
      const validatedData = req.body as BotStatsRequest

      logger.info('ü§ñ –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –±–æ—Ç–∞–º', {
        description: 'Bot stats request',
        telegram_id: validatedData.telegram_id,
        bot_name: validatedData.bot_name,
        target_bot: validatedData.target_bot,
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
      const { data: userData } = await supabase
        .from('users')
        .select('role')
        .eq('telegram_id', validatedData.telegram_id)
        .single()

      const isAdmin =
        userData?.role === 'admin' || userData?.role === 'super_admin'

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: userBots } = await supabase
        .from('payments_v2')
        .select('bot_name')
        .eq('telegram_id', validatedData.telegram_id)
        .eq('status', 'COMPLETED')

      const userBotNames = [...new Set(userBots?.map(p => p.bot_name) || [])]

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –±–æ—Ç—ã –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
      let botsToShow: string[] = []
      if (isAdmin) {
        // –ê–¥–º–∏–Ω—ã –≤–∏–¥—è—Ç –≤—Å–µ –±–æ—Ç—ã
        const { data: allBots } = await supabase
          .from('payments_v2')
          .select('bot_name')
          .eq('status', 'COMPLETED')

        botsToShow = [...new Set(allBots?.map(p => p.bot_name) || [])]
      } else {
        // –û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –±–æ—Ç—ã
        botsToShow = userBotNames
      }

      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –±–æ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
      if (validatedData.target_bot) {
        if (!isAdmin && !userBotNames.includes(validatedData.target_bot)) {
          res.status(403).json({
            success: false,
            message: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞',
          })
          return
        }
        botsToShow = [validatedData.target_bot]
      }

      // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
      const botStatsPromises = botsToShow.map(async botName => {
        // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞
        const { data: totalUsersData } = await supabase
          .from('payments_v2')
          .select('telegram_id')
          .eq('bot_name', botName)
          .eq('status', 'COMPLETED')

        const totalUsers = new Set(
          totalUsersData?.map(p => p.telegram_id) || []
        ).size

        // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–µ–≥–æ–¥–Ω—è
        const today = new Date().toISOString().split('T')[0]
        const { data: activeTodayData } = await supabase
          .from('payments_v2')
          .select('telegram_id')
          .eq('bot_name', botName)
          .eq('status', 'COMPLETED')
          .gte('created_at', today)

        const activeUsersToday = new Set(
          activeTodayData?.map(p => p.telegram_id) || []
        ).size

        // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π
        const { data: generationsData } = await supabase
          .from('payments_v2')
          .select('id')
          .eq('bot_name', botName)
          .eq('type', 'MONEY_OUTCOME')
          .eq('status', 'COMPLETED')

        const totalGenerations = generationsData?.length || 0

        // –î–æ—Ö–æ–¥ —Å–µ–≥–æ–¥–Ω—è
        const { data: revenueTodayData } = await supabase
          .from('payments_v2')
          .select('stars')
          .eq('bot_name', botName)
          .eq('type', 'MONEY_INCOME')
          .eq('status', 'COMPLETED')
          .gte('created_at', today)

        const revenueToday =
          revenueTodayData?.reduce((sum, p) => sum + (p.stars || 0), 0) || 0

        // –û–±—â–∏–π –¥–æ—Ö–æ–¥
        const { data: revenueTotalData } = await supabase
          .from('payments_v2')
          .select('stars')
          .eq('bot_name', botName)
          .eq('type', 'MONEY_INCOME')
          .eq('status', 'COMPLETED')

        const revenueTotal =
          revenueTotalData?.reduce((sum, p) => sum + (p.stars || 0), 0) || 0

        return {
          bot_name: botName,
          total_users: totalUsers,
          active_users_today: activeUsersToday,
          total_generations: totalGenerations,
          revenue_today: revenueToday,
          revenue_total: revenueTotal,
        }
      })

      const botStats = await Promise.all(botStatsPromises)

      const response: BotStatsResponse = {
        success: true,
        message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–æ—Ç–∞–º –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
        data: {
          user_bots: botStats,
          accessible_bots: botsToShow,
        },
      }

      logger.info('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–æ—Ç–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞', {
        description: 'Bot stats sent successfully',
        telegram_id: validatedData.telegram_id,
        bots_count: botStats.length,
        is_admin: isAdmin,
      })

      res.status(200).json(response)
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ getBotStats –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ', {
        description: 'Error in getBotStats controller',
        error: error instanceof Error ? error.message : String(error),
        telegram_id: req.body?.telegram_id,
      })
      next(error)
    }
  }

  /**
   * –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∞—Å–∏–≤–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤ Telegram
   */
  public sendInteractiveStatsMenu = async (
    req: Request,
    res: Response,
    next: NextFunction
  ): Promise<void> => {
    try {
      const validatedData = req.body as UserStatsRequest

      logger.info('üì± –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', {
        description: 'Sending interactive stats menu',
        telegram_id: validatedData.telegram_id,
        bot_name: validatedData.bot_name,
      })

      const { bot } = getBotByName(validatedData.bot_name)
      if (!bot) {
        res.status(400).json({
          success: false,
          message: '–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω',
        })
        return
      }

      // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const balanceStats = await getUserBalanceStats(
        validatedData.telegram_id,
        validatedData.bot_name
      )

      const subscriptionDetails = await getUserDetailsSubscription(
        validatedData.telegram_id
      )

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –º–µ–Ω—é
      const menuText = validatedData.is_ru
        ? `üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n` +
          `üí∞ *–ë–∞–ª–∞–Ω—Å:* ${balanceStats.stars.toFixed(2)} ‚≠êÔ∏è\n` +
          `üìà *–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:* ${balanceStats.total_spent.toFixed(2)} ‚≠êÔ∏è\n` +
          `üìä *–í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ:* ${balanceStats.total_added.toFixed(2)} ‚≠êÔ∏è\n` +
          `üéÅ *–ë–æ–Ω—É—Å—ã:* ${balanceStats.bonus_stars.toFixed(2)} ‚≠êÔ∏è\n\n` +
          `${
            subscriptionDetails.isSubscriptionActive
              ? `‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞:* ${
                  subscriptionDetails.subscriptionType || '–ê–∫—Ç–∏–≤–Ω–∞'
                }`
              : '‚ùå *–ü–æ–¥–ø–∏—Å–∫–∞:* –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'
          }\n\n` +
          `–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:`
        : `üìä *Your Statistics*\n\n` +
          `üí∞ *Balance:* ${balanceStats.stars.toFixed(2)} ‚≠êÔ∏è\n` +
          `üìà *Total Spent:* ${balanceStats.total_spent.toFixed(2)} ‚≠êÔ∏è\n` +
          `üìä *Total Added:* ${balanceStats.total_added.toFixed(2)} ‚≠êÔ∏è\n` +
          `üéÅ *Bonuses:* ${balanceStats.bonus_stars.toFixed(2)} ‚≠êÔ∏è\n\n` +
          `${
            subscriptionDetails.isSubscriptionActive
              ? `‚úÖ *Subscription:* ${
                  subscriptionDetails.subscriptionType || 'Active'
                }`
              : '‚ùå *Subscription:* Inactive'
          }\n\n` +
          `Choose a section for detailed information:`

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
      const keyboard = {
        inline_keyboard: [
          [
            {
              text: validatedData.is_ru
                ? 'üí∞ –î–µ—Ç–∞–ª–∏ –±–∞–ª–∞–Ω—Å–∞'
                : 'üí∞ Balance Details',
              callback_data: `stats_balance_${validatedData.telegram_id}`,
            },
            {
              text: validatedData.is_ru
                ? 'üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤'
                : 'üìä Service Usage',
              callback_data: `stats_services_${validatedData.telegram_id}`,
            },
          ],
          [
            {
              text: validatedData.is_ru
                ? 'üí≥ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π'
                : 'üí≥ Payment History',
              callback_data: `stats_payments_${validatedData.telegram_id}`,
            },
            {
              text: validatedData.is_ru ? 'ü§ñ –ú–æ–∏ –±–æ—Ç—ã' : 'ü§ñ My Bots',
              callback_data: `stats_bots_${validatedData.telegram_id}`,
            },
          ],
          [
            {
              text: validatedData.is_ru ? 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å' : 'üîÑ Refresh',
              callback_data: `stats_refresh_${validatedData.telegram_id}`,
            },
            {
              text: validatedData.is_ru ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main Menu',
              callback_data: `main_menu_${validatedData.telegram_id}`,
            },
          ],
        ],
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é
      await bot.telegram.sendMessage(validatedData.telegram_id, menuText, {
        parse_mode: 'Markdown',
        reply_markup: keyboard,
      })

      logger.info('‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', {
        description: 'Interactive stats menu sent successfully',
        telegram_id: validatedData.telegram_id,
        balance: balanceStats.stars,
        subscription_active: subscriptionDetails.isSubscriptionActive,
      })

      res.status(200).json({
        success: true,
        message: '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
      })
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ sendInteractiveStatsMenu –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ', {
        description: 'Error in sendInteractiveStatsMenu controller',
        error: error instanceof Error ? error.message : String(error),
        telegram_id: req.body?.telegram_id,
      })
      next(error)
    }
  }
}
