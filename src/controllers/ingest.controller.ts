import { Request, Response } from 'express'
import { logger } from '@utils/logger'

interface IngestData {
  url: string
  title: string
  price: string
  description: string
  imageUrl: string
}

export const ingest = async (req: Request, res: Response) => {
  try {
    const { url, title, price, description, imageUrl }: IngestData = req.body

    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    logger.info('üîÑ Ingest function called with data:', {
      url,
      title,
      price,
      description,
      imageUrl
    })

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö:
    // - –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    // - –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    // - –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    // - –ü–∞—Ä—Å–∏–Ω–≥ —Ü–µ–Ω—ã
    // –∏ —Ç.–¥.

    // –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    const processedData = {
      id: Date.now().toString(),
      url,
      title: title.trim(),
      price: price.replace(/[^\d.,]/g, ''), // –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –∑–∞–ø—è—Ç—ã–µ –∏ —Ç–æ—á–∫–∏
      description: description.trim(),
      imageUrl,
      processedAt: new Date().toISOString(),
      status: 'processed'
    }

    logger.info('‚úÖ Data processed successfully:', processedData)

    return res.status(200).json({
      success: true,
      message: 'Data ingested successfully',
      data: processedData
    })

  } catch (error) {
    logger.error('‚ùå Error in ingest function:', error)
    
    return res.status(500).json({
      success: false,
      message: 'Failed to ingest data',
      error: error instanceof Error ? error.message : 'Unknown error'
    })
  }
}