import { Request, Response, NextFunction } from 'express'
import { inngest } from '@/core/inngest/clients'
import { logger } from '@utils/logger'
import { getBotByName } from '@/core/bot'
import { avatarService } from '@/services/avatar.service'
import { broadcastService } from '@/services/broadcast.service'
import { errorMessageAdmin } from '@/helpers/errorMessageAdmin'

interface BroadcastRequest {
  imageUrl?: string
  videoFileId?: string
  textRu: string
  textEn: string
  botName?: string
  sender_telegram_id?: string
  contentType?: 'photo' | 'video' | 'post_link'
  postLink?: string
  botToken?: string
  test_mode?: boolean
  test_telegram_id?: string
}

export const broadcastController = {
  /**
   * –ú–µ—Ç–æ–¥ –¥–ª—è API: –°–æ–∑–¥–∞–µ—Ç –∑–∞–¥–∞—á—É –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —á–µ—Ä–µ–∑ Inngest
   */
  createBroadcastTask: async (
    req: Request,
    res: Response,
    next: NextFunction
  ) => {
    try {
      const requestData = req.body as BroadcastRequest

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Ñ–æ—Ä–º–∞—Ç, –æ–∂–∏–¥–∞–µ–º—ã–π —Å–µ—Ä–≤–µ—Ä–æ–º
      const serverParams = {
        imageUrl:
          requestData.contentType === 'photo'
            ? requestData.imageUrl
            : undefined,
        videoFileId:
          requestData.contentType === 'video'
            ? requestData.videoFileId
            : undefined,
        textRu: requestData.textRu,
        textEn: requestData.textEn,
        bot_name: requestData.botName,
        sender_telegram_id: requestData.sender_telegram_id,
        contentType: requestData.contentType,
        postLink:
          requestData.contentType === 'post_link'
            ? requestData.postLink
            : undefined,
        test_mode: requestData.test_mode,
        test_telegram_id: requestData.test_telegram_id,
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      if (!serverParams.textRu || !serverParams.textEn) {
        return res.status(400).json({
          success: false,
          message: '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ —è–∑—ã–∫–æ–≤',
        })
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
      if (serverParams.contentType === 'photo' && !serverParams.imageUrl) {
        return res.status(400).json({
          success: false,
          message: 'URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è —Ñ–æ—Ç–æ-—Ä–∞—Å—Å—ã–ª–∫–∏',
        })
      }

      if (serverParams.contentType === 'video' && !serverParams.videoFileId) {
        return res.status(400).json({
          success: false,
          message: 'ID –≤–∏–¥–µ–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è –≤–∏–¥–µ–æ-—Ä–∞—Å—Å—ã–ª–∫–∏',
        })
      }

      if (serverParams.contentType === 'post_link' && !serverParams.postLink) {
        return res.status(400).json({
          success: false,
          message: 'URL –ø–æ—Å—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å—Å—ã–ª–∫–∏',
        })
      }

      // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
      await inngest.send({
        name: 'broadcast/send-message',
        data: serverParams,
      })

      return res.json({
        success: true,
        message: serverParams.test_mode
          ? '–¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞'
          : serverParams.bot_name
          ? `–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ ${serverParams.bot_name}`
          : '–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π',
      })
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏:', {
        description: 'Error starting broadcast',
        error: error?.message || 'Unknown error',
      })

      next(error) // –ü–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
    }
  },

  /**
   * –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
   * (—ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–æ–º–∞–Ω–¥ Telegram)
   */
  sendBroadcastByOwner: async (
    telegram_id: string,
    bot_name: string,
    content: {
      imageUrl?: string
      textRu: string
      textEn: string
      contentType?: 'photo' | 'video' | 'post_link'
      postLink?: string
      videoFileId?: string
    },
    test_mode?: boolean
  ) => {
    try {
      const { imageUrl, textRu, textEn, contentType, postLink, videoFileId } =
        content

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞
      const isOwner = await avatarService.isAvatarOwner(telegram_id, bot_name)
      if (!isOwner) {
        logger.warn('‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ Telegram:', {
          description: 'Unauthorized broadcast attempt from Telegram',
          telegram_id,
          bot_name,
        })

        return {
          success: false,
          message: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏',
        }
      }

      // –ü–ª–∞–Ω –ê: –ü–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ Inngest
      try {
        logger.info(
          'üöÄ –ü–ª–∞–Ω –ê: –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ Inngest broadcast/send-message',
          { telegram_id, bot_name, contentType }
        )
        // –í—ã–∑—ã–≤–∞–µ–º Inngest-—Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
        await inngest.send({
          name: 'broadcast/send-message',
          data: {
            imageUrl,
            textRu,
            textEn,
            bot_name,
            sender_telegram_id: telegram_id,
            test_mode: test_mode || false,
            contentType,
            postLink,
            videoFileId,
            // –£–±–∏—Ä–∞–µ–º parse_mode, –ø—É—Å—Ç—å Inngest —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ—à–∞–µ—Ç
          },
        })
        logger.info(
          '‚úÖ –ü–ª–∞–Ω –ê: –°–æ–±—ã—Ç–∏–µ Inngest broadcast/send-message —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
          { telegram_id, bot_name, contentType }
        )

        return {
          success: true,
          message: 'Broadcast initiated via Inngest (Plan A)',
        }
      } catch (inngestError) {
        // –ü–ª–∞–Ω –ë: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Å–µ—Ä–≤–∏—Å–∞
        logger.error(
          '‚ùå –ü–ª–∞–Ω –ê (Inngest) –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è broadcast/send-message:',
          { error: inngestError.message, telegram_id, bot_name }
        )
        errorMessageAdmin(
          new Error(
            `üö® –û—à–∏–±–∫–∞ Inngest (broadcast/send-message) –¥–ª—è ${telegram_id}, –±–æ—Ç ${bot_name}. –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –ü–ª–∞–Ω –ë (–ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Inngest —Ñ—É–Ω–∫—Ü–∏—é! –û—à–∏–±–∫–∞: ${inngestError.message}`
          )
        )

        logger.info(
          'üßò –ü–ª–∞–Ω –ë: –ó–∞–ø—É—Å–∫ –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ broadcastService.sendToAllUsers',
          { telegram_id, bot_name, contentType }
        )
        try {
          // –í—ã–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å –Ω–∞–ø—Ä—è–º—É—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º –º–µ—Ç–æ–¥–∞
          const result = await broadcastService.sendToAllUsers(
            imageUrl,
            textRu,
            {
              // –ü–µ—Ä–µ–¥–∞–µ–º –æ–ø—Ü–∏–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
              textEn,
              bot_name,
              sender_telegram_id: telegram_id,
              test_mode: test_mode || false,
              contentType,
              postLink,
              videoFileId,
            }
          )

          logger.info(
            '‚úÖ –ü–ª–∞–Ω –ë: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ broadcastService.sendToAllUsers –∑–∞–≤–µ—Ä—à–µ–Ω',
            {
              success: result.success,
              successCount: result.successCount,
              errorCount: result.errorCount,
            }
          )

          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞
          return {
            success: result.success,
            message: result.success
              ? 'Broadcast completed via fallback (Plan B)'
              : 'Broadcast failed in fallback (Plan B)',
            successCount: result.successCount,
            errorCount: result.errorCount,
          }
        } catch (planBError) {
          logger.error('‚ùå –ü–ª–∞–Ω –ë (–ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤) —Ç–∞–∫–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:', {
            error: planBError.message,
            telegram_id,
            bot_name,
          })
          errorMessageAdmin(
            new Error(
              `üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ü–õ–ê–ù–ê –ë (–ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ sendToAllUsers) –¥–ª—è ${telegram_id}, –±–æ—Ç ${bot_name}. –û—à–∏–±–∫–∞: ${planBError.message}`
            )
          )
          return {
            success: false,
            message: 'Broadcast failed completely (Inngest and fallback)',
            error: planBError.message,
          }
        }
      }
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º:', {
        description: 'Error sending broadcast by owner',
        error: error?.message || 'Unknown error',
        telegram_id,
        bot_name,
      })
      return {
        success: false,
        message: 'Internal server error during broadcast',
        error: error?.message || 'Unknown error',
      }
    }
  },

  // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–∏–ª—Å—è —Ä–∞–Ω–µ–µ
  sendBroadcastMessage: async (
    req: Request,
    res: Response,
    next: NextFunction
  ): Promise<void> => {
    try {
      const { imageUrl, textRu, options } = req.body

      if (!textRu) {
        res.status(400).json({ message: 'TextRu is required' })
        return
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
      res.status(200).json({ message: 'Broadcast processing started' })

      // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
      broadcastService
        .sendToAllUsers(imageUrl, textRu, options)
        .then(result => {
          console.log('Broadcast result:', result) // –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        })
        .catch(error => {
          // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –Ω–æ –Ω–µ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç, —Ç.–∫. –æ–Ω —É–∂–µ —É—à–µ–ª
          console.error('Error in background sendToAllUsers:', error)
          errorMessageAdmin(error as Error)
        })
    } catch (error) {
      console.error('Error preparing broadcast message:', error)
      // –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—à–∏–±–∫–∞ –¥–æ res.status(200))
      if (!res.headersSent) {
        next(error) // –ü–µ—Ä–µ–¥–∞–µ–º –æ—à–∏–±–∫—É –≤ middleware
      }
    }
  },

  // –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–æ–≤
  checkBots: async (req: Request, res: Response) => {
    try {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–∞–ø—Ä–æ—Å–∞ –≤ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫
      const botNamesParam = req.query.botNames
      let botNames: string[] = ['neuro_blogger_bot'] // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

      if (botNamesParam) {
        if (Array.isArray(botNamesParam)) {
          botNames = botNamesParam.map(name => String(name))
        } else {
          botNames = [String(botNamesParam)]
        }
      }

      const results: Record<
        string,
        { found: boolean; error: string | null; hasValidToken: boolean }
      > = {}

      for (const botName of botNames) {
        const result = getBotByName(botName)
        results[botName] = {
          found: !!result.bot,
          error: result.error || null,
          hasValidToken: !!result.bot?.telegram?.token,
        }
      }

      logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –±–æ—Ç–æ–≤', {
        description: 'Bot availability check',
        results,
      })

      res.status(200).json({
        success: true,
        results,
      })
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–æ—Ç–æ–≤:', {
        description: 'Error checking bots',
        error: error?.message || 'Unknown error',
      })

      res.status(500).json({
        success: false,
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–æ—Ç–æ–≤',
        error: error?.message || 'Unknown error',
      })
    }
  },

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –±–æ—Ç–∞
   */
  checkOwnerStatus: async (req: Request, res: Response) => {
    try {
      const { telegram_id, bot_name } = req.query

      if (!telegram_id) {
        return res.status(400).json({
          success: false,
          message: 'Telegram ID is required',
        })
      }

      const isOwner = await avatarService.isAvatarOwner(
        String(telegram_id),
        bot_name ? String(bot_name) : undefined
      )

      res.status(200).json({
        success: true,
        isOwner,
        telegram_id,
        bot_name: bot_name || 'any',
      })
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞:', {
        description: 'Error checking owner status',
        error: error?.message || 'Unknown error',
      })

      res.status(500).json({
        success: false,
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞',
        error: error?.message || 'Unknown error',
      })
    }
  },

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞
   * –¢–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
   */
  addBotOwner: async (req: Request, res: Response) => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      if (process.env.NODE_ENV !== 'development') {
        // TODO: –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        return res.status(403).json({
          success: false,
          message: 'This endpoint is only available in development mode',
        })
      }

      const { telegram_id, bot_name, avatar_url, group } = req.body

      if (!telegram_id || !bot_name) {
        return res.status(400).json({
          success: false,
          message: 'telegram_id and bot_name are required',
        })
      }

      const result = await avatarService.addAvatarOwner(
        telegram_id,
        bot_name,
        avatar_url,
        group
      )

      if (!result.success) {
        return res.status(500).json({
          success: false,
          message: 'Failed to add bot owner',
          error: result.error,
        })
      }

      res.status(200).json({
        success: true,
        message: 'Bot owner added successfully',
        data: result.data,
      })
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –±–æ—Ç–∞:', {
        description: 'Error adding bot owner',
        error: error?.message || 'Unknown error',
      })

      res.status(500).json({
        success: false,
        message: 'Internal server error',
        error: error?.message || 'Unknown error',
      })
    }
  },
}
