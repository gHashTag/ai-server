import { Request, Response } from 'express';
import { logger } from '@utils/logger';
import { GitHubWebhookService } from '@services/github-webhook.service';

/**
 * GitHub Webhook Controller
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç webhook'–∏ –æ—Ç GitHub –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è PR
 */
export class GitHubWebhookController {
  private githubWebhookService = new GitHubWebhookService();

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook'–æ–≤ –¥–ª—è –ø—Ä–æ–±–ª–µ–º –≤ PR
   * POST /webhooks/github/pr-issues
   */
  public handlePRIssues = async (req: Request, res: Response): Promise<void> => {
    const startTime = Date.now();
    
    try {
      const { body, headers } = req;
      const event = headers['x-github-event'] as string;
      const signature = headers['x-hub-signature-256'] as string;
      const delivery = headers['x-github-delivery'] as string;

      logger.info('üîî GitHub webhook received', {
        event,
        delivery,
        repository: body.repository?.full_name,
        action: body.action,
        pr: body.pull_request?.number
      });

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ GitHub
      if (!this.githubWebhookService.validateSignature(JSON.stringify(body), signature)) {
        logger.error('‚ùå Invalid GitHub webhook signature', { delivery });
        res.status(401).json({ error: 'Invalid signature' });
        return;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–±—ã—Ç–∏–π GitHub
      let result = null;
      
      switch (event) {
        case 'pull_request':
          result = await this.handlePullRequestEvent(body);
          break;
          
        case 'check_suite':
          result = await this.handleCheckSuiteEvent(body);
          break;
          
        case 'check_run':  
          result = await this.handleCheckRunEvent(body);
          break;
          
        case 'pull_request_review':
          result = await this.handlePullRequestReviewEvent(body);
          break;
          
        default:
          logger.info('üìã Unsupported GitHub event, skipping', { event });
          res.status(200).json({ message: 'Event type not supported', event });
          return;
      }

      const processingTime = Date.now() - startTime;
      
      logger.info('‚úÖ GitHub webhook processed successfully', {
        event,
        delivery,
        processingTime,
        result: result ? 'action_taken' : 'no_action_needed'
      });

      res.status(200).json({
        success: true,
        message: 'Webhook processed successfully',
        event,
        delivery,
        processing_time_ms: processingTime,
        result: result || 'no_action_needed'
      });

    } catch (error) {
      const processingTime = Date.now() - startTime;
      
      logger.error('üí• GitHub webhook processing failed', {
        error: error.message,
        stack: error.stack,
        processingTime,
        body: req.body ? Object.keys(req.body) : null
      });

      res.status(500).json({
        success: false,
        error: 'Webhook processing failed',
        message: error.message,
        processing_time_ms: processingTime
      });
    }
  };

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π Pull Request
   */
  private async handlePullRequestEvent(body: any): Promise<any> {
    const { action, pull_request, repository } = body;
    
    // –ò–Ω—Ç–µ—Ä–µ—Å—É—é—Ç —Ç–æ–ª—å–∫–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    if (!['opened', 'synchronize', 'reopened'].includes(action)) {
      logger.info('üìã PR action not relevant for auto-fix', { action });
      return null;
    }

    const prInfo = {
      number: pull_request.number,
      title: pull_request.title,
      head_sha: pull_request.head.sha,
      head_branch: pull_request.head.ref,
      base_branch: pull_request.base.ref,
      repository: repository.full_name,
      author: pull_request.user.login,
      mergeable: pull_request.mergeable,
      state: pull_request.state
    };

    logger.info('üîÑ Processing PR for auto-fix', prInfo);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ PR —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è (GitHub –Ω—É–∂–Ω–æ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ checks)
    setTimeout(async () => {
      try {
        await this.githubWebhookService.analyzePRForAutoFix(prInfo);
      } catch (error) {
        logger.error('üí• Failed to analyze PR for auto-fix', { 
          pr: prInfo.number, 
          error: error.message 
        });
      }
    }, 30000); // 30 —Å–µ–∫—É–Ω–¥ –∑–∞–¥–µ—Ä–∂–∫–∞

    return { action: 'pr_queued_for_analysis', pr: prInfo.number };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π Check Suite (–∫–æ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∞—é—Ç—Å—è CI/CD –ø—Ä–æ–≤–µ—Ä–∫–∏)
   */
  private async handleCheckSuiteEvent(body: any): Promise<any> {
    const { action, check_suite, repository } = body;
    
    if (action !== 'completed') {
      return null;
    }

    // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å failures
    if (check_suite.conclusion !== 'failure') {
      return null;
    }

    // –ù–∞–π—Ç–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ PR
    const prs = check_suite.pull_requests || [];
    if (prs.length === 0) {
      return null;
    }

    logger.info('üö® Check suite failed, analyzing PRs for auto-fix', {
      check_suite_id: check_suite.id,
      conclusion: check_suite.conclusion,
      prs: prs.map(pr => pr.number)
    });

    // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∂–¥—ã–π PR —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏
    const results = [];
    for (const pr of prs) {
      try {
        const result = await this.githubWebhookService.analyzePRForAutoFix({
          number: pr.number,
          repository: repository.full_name,
          head_sha: pr.head.sha,
          head_branch: pr.head.ref,
          failed_checks: true
        });
        results.push(result);
      } catch (error) {
        logger.error('üí• Failed to process failed check suite for PR', {
          pr: pr.number,
          error: error.message
        });
      }
    }

    return { action: 'failed_checks_processed', prs: results };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö Check Run —Å–æ–±—ã—Ç–∏–π  
   */
  private async handleCheckRunEvent(body: any): Promise<any> {
    const { action, check_run } = body;
    
    if (action !== 'completed' || check_run.conclusion !== 'failure') {
      return null;
    }

    logger.info('üî¥ Individual check run failed', {
      check_run_name: check_run.name,
      conclusion: check_run.conclusion,
      head_sha: check_run.head_sha
    });

    // –ü–æ–∫–∞ —á—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, –≤ –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    return { action: 'check_failure_logged', check: check_run.name };
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ PR Review —Å–æ–±—ã—Ç–∏–π
   */
  private async handlePullRequestReviewEvent(body: any): Promise<any> {
    const { action, review, pull_request } = body;
    
    // –ï—Å–ª–∏ review –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è - —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–≤–æ–¥–æ–º –¥–ª—è auto-fix
    if (action === 'submitted' && review.state === 'changes_requested') {
      logger.info('üìù PR review requests changes', {
        pr: pull_request.number,
        reviewer: review.user.login,
        comment: review.body?.substring(0, 100) + '...'
      });

      // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ review
      // –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ –∏—Ö –æ—Å–Ω–æ–≤–µ
      
      return { action: 'review_changes_noted', pr: pull_request.number };
    }

    return null;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å webhook —Å–∏—Å—Ç–µ–º—ã
   * GET /webhooks/github/status  
   */
  public getStatus = async (req: Request, res: Response): Promise<void> => {
    try {
      const status = await this.githubWebhookService.getSystemStatus();
      
      res.json({
        success: true,
        status: 'operational',
        ...status,
        timestamp: new Date().toISOString()
      });
      
    } catch (error) {
      logger.error('Failed to get GitHub webhook status', error);
      res.status(500).json({
        success: false,
        status: 'error',
        error: error.message
      });
    }
  };

  /**
   * –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ PR
   * POST /webhooks/github/analyze/:pr_number
   */
  public manualAnalyzePR = async (req: Request, res: Response): Promise<void> => {
    try {
      const { pr_number } = req.params;
      const { repository = 'gHashTag/ai-server' } = req.body;

      logger.info('üîç Manual PR analysis requested', { pr_number, repository });

      const result = await this.githubWebhookService.analyzePRForAutoFix({
        number: parseInt(pr_number),
        repository,
        manual_trigger: true
      });

      res.json({
        success: true,
        message: 'PR analysis completed',
        pr_number: parseInt(pr_number),
        result
      });
      
    } catch (error) {
      logger.error('Failed manual PR analysis', { 
        pr_number: req.params.pr_number, 
        error: error.message 
      });
      
      res.status(500).json({
        success: false,
        error: 'Manual analysis failed',
        message: error.message,
        pr_number: req.params.pr_number
      });
    }
  };
}