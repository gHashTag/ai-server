/**
 * üß¨ –°–µ—Ä–≤–∏—Å –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ú–æ—Ä—Ñ–∏–Ω–≥ –í–∏–¥–µ–æ
 * –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ—Ä—Ñ–∏–Ω–≥ –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */

import {
  ProcessedMorphRequest,
  MorphingJobResult,
  MorphingStatus,
  MorphingType,
  VideoStorageResult,
  TelegramDeliveryResult,
} from '@/interfaces/morphing.interface'
import {
  extractImagesFromZip,
  cleanupExtractionFiles,
  validateImageSequence,
} from '@/helpers/morphing/zipProcessor'
import { processKlingMorphing, downloadKlingVideo } from '@/core/kling'
import { logger } from '@/utils/logger'
import { getBotByName } from '@/core/bot'
import { API_URL } from '@/config'
import * as fs from 'fs'
import * as path from 'path'

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–∏–¥–µ–æ –≤ –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
 */
async function uploadVideoToStorage(
  videoBuffer: Buffer,
  telegramId: string,
  jobId: string
): Promise<VideoStorageResult> {
  logger.info('üß¨ –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:', {
    telegram_id: telegramId,
    job_id: jobId,
    video_size: videoBuffer.length,
  })

  try {
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    const uploadDir = path.join(__dirname, '../uploads', telegramId, 'morphing')

    await fs.promises.mkdir(uploadDir, { recursive: true })

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    const filename = `morphing_${jobId}_${Date.now()}.mp4`
    const filePath = path.join(uploadDir, filename)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    await fs.promises.writeFile(filePath, videoBuffer)

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π URL
    const publicUrl = `${API_URL}/uploads/${telegramId}/morphing/${filename}`

    const result: VideoStorageResult = {
      success: true,
      public_url: publicUrl,
      file_size: videoBuffer.length,
      file_path: filePath,
    }

    logger.info('üß¨ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:', {
      telegram_id: telegramId,
      public_url: publicUrl,
      file_size: videoBuffer.length,
      file_path: filePath,
    })

    return result
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error)

    logger.error('üß¨ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:', {
      telegram_id: telegramId,
      job_id: jobId,
      error: errorMessage,
    })

    return {
      success: false,
      public_url: '',
      file_size: 0,
      file_path: '',
      error: errorMessage,
    }
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥–æ—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram
 */
async function sendVideoToTelegram(
  videoUrl: string,
  telegramId: string,
  isRu: boolean,
  botName: string,
  morphingType: MorphingType
): Promise<TelegramDeliveryResult> {
  logger.info('üß¨ –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –≤ Telegram:', {
    telegram_id: telegramId,
    video_url: videoUrl,
    bot_name: botName,
    morphing_type: morphingType,
  })

  try {
    const { bot } = getBotByName(botName)

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const message = isRu
      ? `üß¨ –í–∞—à –º–æ—Ä—Ñ–∏–Ω–≥ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤! ‚ú®\n\n–¢–∏–ø: ${
          morphingType === 'seamless' ? '–ü–ª–∞–≤–Ω—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã' : '–ó–∞—Ü–∏–∫–ª–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ'
        }`
      : `üß¨ Your morphing video is ready! ‚ú®\n\nType: ${
          morphingType === 'seamless' ? 'Seamless transitions' : 'Loop video'
        }`

    const startTime = Date.now()

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
    const sentMessage = await bot.telegram.sendVideo(telegramId, videoUrl, {
      caption: message,
      parse_mode: 'HTML',
    })

    const deliveryTime = Date.now() - startTime

    const result: TelegramDeliveryResult = {
      success: true,
      message_id: sentMessage.message_id,
      delivery_time: deliveryTime,
    }

    logger.info('üß¨ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram:', {
      telegram_id: telegramId,
      message_id: sentMessage.message_id,
      delivery_time: deliveryTime,
    })

    return result
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error)

    logger.error('üß¨ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ –≤ Telegram:', {
      telegram_id: telegramId,
      video_url: videoUrl,
      bot_name: botName,
      error: errorMessage,
    })

    return {
      success: false,
      error: errorMessage,
    }
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ—Ä—Ñ–∏–Ω–≥ –≤–∏–¥–µ–æ
 */
export async function generateMorphingVideo(
  request: ProcessedMorphRequest
): Promise<MorphingJobResult> {
  const startTime = Date.now()
  const jobId = `morph_${request.telegram_id}_${Date.now()}`

  logger.info('üß¨ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º–æ—Ä—Ñ–∏–Ω–≥ –≤–∏–¥–µ–æ:', {
    job_id: jobId,
    telegram_id: request.telegram_id,
    morphing_type: request.morphing_type,
    image_count: request.image_count,
    model: request.model,
  })

  // –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
  const result: MorphingJobResult = {
    job_id: jobId,
    telegram_id: request.telegram_id,
    status: MorphingStatus.PROCESSING,
    original_request: request,
    zip_extraction: {
      success: false,
      images: [],
      totalCount: 0,
      extractionPath: '',
    },
    kling_processing: { success: false, job_id: '' },
    video_storage: {
      success: false,
      public_url: '',
      file_size: 0,
      file_path: '',
    },
    telegram_delivery: { success: false },
    created_at: new Date(),
  }

  try {
    // 1. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ ZIP
    logger.info('üß¨ –≠—Ç–∞–ø 1: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ ZIP')

    const zipExtractionResult = await extractImagesFromZip(
      request.zip_file_path,
      request.telegram_id,
      request.image_count
    )

    result.zip_extraction = zipExtractionResult

    if (!zipExtractionResult.success) {
      throw new Error(`ZIP extraction failed: ${zipExtractionResult.error}`)
    }

    logger.info('üß¨ ZIP –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:', {
      extracted_count: zipExtractionResult.totalCount,
      extraction_path: zipExtractionResult.extractionPath,
    })

    // 2. –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    logger.info('üß¨ –≠—Ç–∞–ø 2: –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π')

    const validation = validateImageSequence(zipExtractionResult.images)

    if (!validation.isValid) {
      throw new Error(
        `Image sequence validation failed: ${validation.errors.join(', ')}`
      )
    }

    logger.info('üß¨ –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ')

    // 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ—Ä—Ñ–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ Kling API
    logger.info('üß¨ –≠—Ç–∞–ø 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ—Ä—Ñ–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ Kling API')

    const klingResult = await processKlingMorphing(
      zipExtractionResult.images,
      request.morphing_type,
      request.telegram_id
    )

    result.kling_processing = klingResult

    if (!klingResult.success) {
      throw new Error(`Kling processing failed: ${klingResult.error}`)
    }

    if (!klingResult.video_url) {
      throw new Error('Kling processing completed but no video URL provided')
    }

    logger.info('üß¨ Kling –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', {
      job_id: klingResult.job_id,
      video_url: klingResult.video_url,
    })

    // 4. –ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ç–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ
    logger.info('üß¨ –≠—Ç–∞–ø 4: –ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ç–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ')

    const videoBuffer = await downloadKlingVideo(klingResult.video_url)

    // 5. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    logger.info('üß¨ –≠—Ç–∞–ø 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ')

    const storageResult = await uploadVideoToStorage(
      videoBuffer,
      request.telegram_id,
      jobId
    )

    result.video_storage = storageResult

    if (!storageResult.success) {
      throw new Error(`Video storage failed: ${storageResult.error}`)
    }

    logger.info('üß¨ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ:', {
      public_url: storageResult.public_url,
      file_size: storageResult.file_size,
    })

    // 6. –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram
    logger.info('üß¨ –≠—Ç–∞–ø 6: –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –≤ Telegram')

    const deliveryResult = await sendVideoToTelegram(
      storageResult.public_url,
      request.telegram_id,
      request.is_ru,
      request.bot_name,
      request.morphing_type
    )

    result.telegram_delivery = deliveryResult

    if (!deliveryResult.success) {
      throw new Error(`Telegram delivery failed: ${deliveryResult.error}`)
    }

    logger.info('üß¨ –í–∏–¥–µ–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', {
      message_id: deliveryResult.message_id,
      delivery_time: deliveryResult.delivery_time,
    })

    // 7. –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    const processingTime = Date.now() - startTime

    result.status = MorphingStatus.COMPLETED
    result.completed_at = new Date()
    result.processing_time = processingTime
    result.final_video_url = storageResult.public_url

    logger.info('üß¨ –ú–æ—Ä—Ñ–∏–Ω–≥ –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:', {
      job_id: jobId,
      telegram_id: request.telegram_id,
      processing_time: processingTime,
      final_video_url: storageResult.public_url,
    })
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error)
    const processingTime = Date.now() - startTime

    result.status = MorphingStatus.FAILED
    result.completed_at = new Date()
    result.processing_time = processingTime
    result.error = errorMessage

    logger.error('üß¨ –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ—Ä—Ñ–∏–Ω–≥ –≤–∏–¥–µ–æ:', {
      job_id: jobId,
      telegram_id: request.telegram_id,
      processing_time: processingTime,
      error: errorMessage,
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try {
      const { bot } = getBotByName(request.bot_name)
      const errorMsg = request.is_ru
        ? `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ—Ä—Ñ–∏–Ω–≥ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.`
        : `‚ùå An error occurred while creating the morphing video. Please try again later.`

      await bot.telegram.sendMessage(request.telegram_id, errorMsg)

      logger.info('üß¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
    } catch (notificationError) {
      logger.error('üß¨ –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ:', {
        notification_error:
          notificationError instanceof Error
            ? notificationError.message
            : String(notificationError),
      })
    }
  } finally {
    // 8. –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if (result.zip_extraction.extractionPath) {
      logger.info('üß¨ –≠—Ç–∞–ø 8: –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤')

      setTimeout(async () => {
        try {
          await cleanupExtractionFiles(result.zip_extraction.extractionPath)
          logger.info('üß¨ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã —á–µ—Ä–µ–∑ 1 —á–∞—Å')
        } catch (cleanupError) {
          logger.error('üß¨ –û—à–∏–±–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏:', {
            cleanup_error:
              cleanupError instanceof Error
                ? cleanupError.message
                : String(cleanupError),
          })
        }
      }, 3600000) // –û—á–∏—â–∞–µ–º —á–µ—Ä–µ–∑ 1 —á–∞—Å
    }
  }

  return result
}

/**
 * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ—Ä—Ñ–∏–Ω–≥ –≤–∏–¥–µ–æ (fire-and-forget)
 */
export function startMorphingVideoGeneration(
  request: ProcessedMorphRequest
): void {
  logger.info('üß¨ –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ—Ä—Ñ–∏–Ω–≥ –≤–∏–¥–µ–æ:', {
    telegram_id: request.telegram_id,
    morphing_type: request.morphing_type,
    zip_file: request.zip_file_path,
  })

  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
  generateMorphingVideo(request)
    .then(result => {
      logger.info('üß¨ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', {
        job_id: result.job_id,
        status: result.status,
        processing_time: result.processing_time,
      })
    })
    .catch(error => {
      logger.error('üß¨ –û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', {
        telegram_id: request.telegram_id,
        error: error instanceof Error ? error.message : String(error),
      })
    })
}
