import { getBotByName } from '@/core/bot'
import type { Telegraf } from 'telegraf'

interface NotificationOptions {
  truncateError?: boolean
  maxLength?: number
}

export class NotificationService {
  private async getBotInstance(botName: string): Promise<Telegraf> {
    try {
      const { bot } = getBotByName(botName)
      if (!bot) throw new Error(`–ë–æ—Ç ${botName} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
      return bot
    } catch (error) {
      console.error('ü§ñ –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ—Ç–∞:', error)
      throw error
    }
  }

  async sendTrainingError(
    telegramId: string | undefined,
    botName: string,
    error: string,
    options: NotificationOptions = {}
  ): Promise<void> {
    if (!telegramId) {
      console.warn('‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω Telegram ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–∫–∏')
      return
    }

    try {
      const bot = await this.getBotInstance(botName)
      const maxLength = options.maxLength || 2000
      const message = options.truncateError
        ? `‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è:\n${error.substring(0, maxLength)}...`
        : error

      await bot.telegram.sendMessage(
        telegramId,
        `üö® *–û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏*\n\n\`\`\`\n${message}\n\`\`\``,
        { parse_mode: 'Markdown' }
      )

      console.log(`üì© –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${telegramId}`)
    } catch (error) {
      console.error('üí• –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', {
        telegramId,
        error: error.message,
      })
      // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å fallback-–ª–æ–≥–∏–∫—É (email, SMS –∏ —Ç.–¥.)
    }
  }

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å–µ—Ä–≤–∏—Å–∞
  async sendSuccessNotification(
    telegramId: string,
    botName: string,
    is_ru: boolean
  ): Promise<void> {
    try {
      const bot = await this.getBotInstance(botName)
      const message = is_ru
        ? 'üéâ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! üéâ\n\n–ú–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!\n\n–ù–∞–∂–º–∏—Ç–µ üì∏ –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å.'
        : 'üéâ Training completed! üéâ\n\nModel is ready to use!\n\nClick üì∏ Neurophoto in the main menu to use the model.'
      await bot.telegram.sendMessage(telegramId, message, {
        parse_mode: 'Markdown',
      })
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error)
    }
  }
}
