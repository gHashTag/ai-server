import { replicate } from '../core/replicate'
import { getAspectRatio } from '../core/supabase/ai'
import { savePrompt } from '../core/supabase/savePrompt'
import { getUserByTelegramId, updateUserLevelPlusOne } from '@/core/supabase'
import { processApiResponse } from '@/helpers/processApiResponse'
import { GenerationResult } from '@/interfaces'
import { downloadFile } from '@/helpers/downloadFile'
import { saveFileLocally } from '@/helpers'
import { pulse } from '@/helpers/pulse'
import { processBalanceOperation } from '@/price/helpers'
import { errorMessageAdmin } from '@/helpers/errorMessageAdmin'
import { Telegraf } from 'telegraf'
import { MyContext } from '@/interfaces'
import { modeCosts, ModeEnum } from '@/price/helpers/modelsCost'
import path from 'path'
import { API_URL } from '@/config'
import fs from 'fs'

export async function generateNeuroImage(
  prompt: string,
  model_url: `${string}/${string}` | `${string}/${string}:${string}`,
  num_images: number,
  telegram_id: string,
  username: string,
  is_ru: boolean,
  bot: Telegraf<MyContext>
): Promise<GenerationResult | null> {
  try {
    const userExists = await getUserByTelegramId(telegram_id)
    if (!userExists) {
      throw new Error(`User with ID ${telegram_id} does not exist.`)
    }
    const level = userExists.level
    if (level === 1) {
      await updateUserLevelPlusOne(telegram_id, level)
    }
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    let costPerImage: number
    if (typeof modeCosts[ModeEnum.NeuroPhoto] === 'function') {
      costPerImage = modeCosts[ModeEnum.NeuroPhoto](num_images)
    } else {
      costPerImage = modeCosts[ModeEnum.NeuroPhoto]
    }

    const balanceCheck = await processBalanceOperation({
      telegram_id,
      paymentAmount: costPerImage * num_images,
      is_ru,
      bot,
    })
    if (!balanceCheck.success) {
      throw new Error(balanceCheck.error)
    }

    const aspect_ratio = await getAspectRatio(telegram_id)
    const results: GenerationResult[] = []
    const input = {
      prompt: `Fashionable: ${prompt}. Cinematic Lighting, realistic, intricate details, extremely detailed, incredible details, full colored, complex details, insanely detailed and intricate, hypermaximalist, extremely detailed with rich colors. Masterpiece, best quality, aerial view, HDR, UHD, unreal engine, Representative, fair skin, beautiful face, Rich in details, high quality, gorgeous, glamorous, 8K, super detail, gorgeous light and shadow, detailed decoration, detailed lines.`,
      negative_prompt: 'nsfw, erotic, violence, bad anatomy...',
      num_inference_steps: 40,
      guidance_scale: 3,
      lora_scale: 1,
      megapixels: '1',
      output_quality: 80,
      prompt_strength: 0.8,
      extra_lora_scale: 1,
      go_fast: false,
      ...(aspect_ratio === '1:1'
        ? { width: 1024, height: 1024 }
        : aspect_ratio === '16:9'
        ? { width: 1368, height: 768 }
        : aspect_ratio === '9:16'
        ? { width: 768, height: 1368 }
        : { width: 1024, height: 1024 }),
      sampler: 'flowmatch',
      num_outputs: 1,
      aspect_ratio,
    }

    // –¶–∏–∫–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    for (let i = 0; i < num_images; i++) {
      if (num_images > 1) {
        bot.telegram.sendMessage(
          telegram_id,
          is_ru
            ? `‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${i + 1} –∏–∑ ${num_images}`
            : `‚è≥ Generating image ${i + 1} of ${num_images}`
        )
      } else {
        bot.telegram.sendMessage(
          telegram_id,
          is_ru ? '‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '‚è≥ Generating...',
          {
            reply_markup: { remove_keyboard: true },
          }
        )
      }

      const output = await replicate.run(model_url, { input })
      const imageUrl = await processApiResponse(output)

      if (!imageUrl || imageUrl.endsWith('empty.zip')) {
        console.error(`Failed to generate image ${i + 1}`)
        continue
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
      const imageLocalPath = await saveFileLocally(
        telegram_id,
        imageUrl,
        'neuro-photo-v2',
        '.jpeg'
      )

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
      const imageLocalUrl = `${API_URL}/uploads/${telegram_id}/neuro-photo/${path.basename(
        imageLocalPath
      )}`

      const prompt_id = await savePrompt(
        prompt,
        model_url,
        ModeEnum.NeuroPhoto,
        imageLocalUrl,
        telegram_id,
        'SUCCESS'
      )

      if (prompt_id === null) {
        console.error(`Failed to save prompt for image ${i + 1}`)
        continue
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await bot.telegram.sendPhoto(telegram_id, {
        source: fs.createReadStream(imageLocalPath),
      })

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      results.push({ image: imageLocalUrl, prompt_id })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ pulse
      await pulse(
        imageLocalUrl,
        prompt,
        `/${model_url}`,
        telegram_id,
        username,
        is_ru
      )
    }

    await bot.telegram.sendMessage(
      telegram_id,
      is_ru
        ? `–í–∞—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ, —Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –º–µ–Ω—é 1Ô∏è‚É£, 2Ô∏è‚É£, 3Ô∏è‚É£, 4Ô∏è‚É£.\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å: ${(
            costPerImage * num_images
          ).toFixed(
            2
          )} ‚≠êÔ∏è\n–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${balanceCheck.newBalance.toFixed(2)} ‚≠êÔ∏è`
        : `Your images have been generated!\n\nGenerate more?\n\nCost: ${(
            costPerImage * num_images
          ).toFixed(
            2
          )} ‚≠êÔ∏è\nYour new balance: ${balanceCheck.newBalance.toFixed(2)} ‚≠êÔ∏è`,
      {
        reply_markup: {
          keyboard: [
            [{ text: '1Ô∏è‚É£' }, { text: '2Ô∏è‚É£' }, { text: '3Ô∏è‚É£' }, { text: '4Ô∏è‚É£' }],
            [
              { text: is_ru ? '‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç' : '‚¨ÜÔ∏è Improve prompt' },
              { text: is_ru ? 'üìê –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä' : 'üìê Change size' },
            ],
            [{ text: is_ru ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu' }],
          ],
          resize_keyboard: true,
          one_time_keyboard: false,
        },
      }
    )

    return results[0] || null
  } catch (error) {
    console.error(`Error:`, error)

    let errorMessageToUser = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.'

    if (error.message && error.message.includes('NSFW content detected')) {
      errorMessageToUser = is_ru
        ? '‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω NSFW –∫–æ–Ω—Ç–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.'
        : '‚ùå NSFW content detected. Please try another prompt.'
    } else if (error.message) {
      const match = error.message.match(/{"detail":"(.*?)"/)
      if (match && match[1]) {
        errorMessageToUser = is_ru
          ? `‚ùå –û—à–∏–±–∫–∞: ${match[1]}`
          : `‚ùå Error: ${match[1]}`
      }
    } else {
      errorMessageToUser = is_ru
        ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        : '‚ùå An error occurred. Please try again.'
    }
    await bot.telegram.sendMessage(telegram_id, errorMessageToUser)
    errorMessageAdmin(error as Error)
    throw error
  }
}
