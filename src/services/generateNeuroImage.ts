import { replicate } from '../core/replicate'
import { getAspectRatio, savePrompt } from '../core/supabase/ai'

import { processApiResponse } from '@/helpers/processApiResponse'
import { GenerationResult } from '@/interfaces'
import { downloadFile } from '@/helpers/downloadFile'
import bot from '@/core/bot'

import { pulse } from '@/helpers/pulse'
import {
  imageNeuroGenerationCost,
  processBalanceOperation,
} from '@/price/helpers'
import { errorMessageAdmin } from '@/helpers/errorMessageAdmin'

export async function generateNeuroImage(
  prompt: string,
  model_url: `${string}/${string}` | `${string}/${string}:${string}`,
  num_images: number,
  telegram_id: number,
  username: string,
  is_ru: boolean
): Promise<GenerationResult | null> {
  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const totalCost = imageNeuroGenerationCost * num_images
    const balanceCheck = await processBalanceOperation({
      telegram_id,
      paymentAmount: totalCost,
      is_ru,
    })
    if (!balanceCheck.success) {
      throw new Error(balanceCheck.error)
    }

    const aspect_ratio = await getAspectRatio(telegram_id)
    const results: GenerationResult[] = []
    const input = {
      prompt: `Fashionable: ${prompt}`,
      negative_prompt: 'nsfw, erotic, violence, bad anatomy...',
      num_inference_steps: 28,
      guidance_scale: 2,
      ...(aspect_ratio === '1:1'
        ? { width: 1024, height: 1024 }
        : aspect_ratio === '16:9'
        ? { width: 1368, height: 768 }
        : aspect_ratio === '9:16'
        ? { width: 768, height: 1368 }
        : { width: 1024, height: 1024 }),
      sampler: 'flowmatch',
      num_outputs: 1,
      aspect_ratio,
    }

    // –¶–∏–∫–ª –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    for (let i = 0; i < num_images; i++) {
      if (num_images > 1) {
        bot.telegram.sendMessage(
          telegram_id,
          is_ru
            ? `‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${i + 1} –∏–∑ ${num_images}`
            : `‚è≥ Generating image ${i + 1} of ${num_images}`
        )
      } else {
        bot.telegram.sendMessage(
          telegram_id,
          is_ru ? '‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '‚è≥ Generating...',
          {
            reply_markup: { remove_keyboard: true },
          }
        )
      }

      const output = await replicate.run(model_url, { input })
      const imageUrl = await processApiResponse(output)

      if (!imageUrl || imageUrl.endsWith('empty.zip')) {
        console.error(`Failed to generate image ${i + 1}`)
        continue
      }

      const image = await downloadFile(imageUrl)
      const prompt_id = await savePrompt(
        prompt,
        model_url,
        imageUrl,
        telegram_id
      )

      if (prompt_id === null) {
        console.error(`Failed to save prompt for image ${i + 1}`)
        continue
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      const imageBuffer = Buffer.isBuffer(image) ? image : Buffer.from(image)
      await bot.telegram.sendPhoto(telegram_id, { source: imageBuffer })

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      results.push({ image, prompt_id })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ pulse
      const pulseImage = Buffer.isBuffer(image)
        ? `data:image/jpeg;base64,${image.toString('base64')}`
        : image
      await pulse(
        pulseImage,
        prompt,
        `/${model_url}`,
        telegram_id,
        username,
        is_ru
      )
    }

    await bot.telegram.sendMessage(
      telegram_id,
      is_ru
        ? `–í–∞—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ, —Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –º–µ–Ω—é 1Ô∏è‚É£, 2Ô∏è‚É£, 3Ô∏è‚É£, 4Ô∏è‚É£.\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å: ${(
            imageNeuroGenerationCost * num_images
          ).toFixed(
            2
          )} ‚≠êÔ∏è\n–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${balanceCheck.newBalance.toFixed(2)} ‚≠êÔ∏è`
        : `Your images have been generated!\n\nGenerate more?\n\nCost: ${(
            imageNeuroGenerationCost * num_images
          ).toFixed(
            2
          )} ‚≠êÔ∏è\nYour new balance: ${balanceCheck.newBalance.toFixed(2)} ‚≠êÔ∏è`,
      {
        reply_markup: {
          keyboard: [
            [{ text: '1Ô∏è‚É£' }, { text: '2Ô∏è‚É£' }, { text: '3Ô∏è‚É£' }, { text: '4Ô∏è‚É£' }],
            [
              { text: is_ru ? '‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç' : '‚¨ÜÔ∏è Improve prompt' },
              { text: is_ru ? 'üìê –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä' : 'üìê Change size' },
            ],
            [{ text: is_ru ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu' }],
          ],
          resize_keyboard: true,
          one_time_keyboard: false,
        },
      }
    )

    return results[0] || null
  } catch (error) {
    console.error(`Error:`, error)

    let errorMessageToUser = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.'

    if (error.message && error.message.includes('NSFW content detected')) {
      errorMessageToUser = is_ru
        ? '‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω NSFW –∫–æ–Ω—Ç–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.'
        : '‚ùå NSFW content detected. Please try another prompt.'
    } else if (error.message) {
      const match = error.message.match(/{"detail":"(.*?)"/)
      if (match && match[1]) {
        errorMessageToUser = is_ru
          ? `‚ùå –û—à–∏–±–∫–∞: ${match[1]}`
          : `‚ùå Error: ${match[1]}`
      }
    } else {
      errorMessageToUser = is_ru
        ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
        : '‚ùå An error occurred. Please try again.'
    }
    await bot.telegram.sendMessage(telegram_id, errorMessageToUser)
    errorMessageAdmin(error as Error)
    throw error
  }
}
