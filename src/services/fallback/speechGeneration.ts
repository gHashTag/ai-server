import { getUserByTelegramId, updateUserLevelPlusOne } from '@/core/supabase'
import { modeCosts, ModeEnum } from '@/price/helpers/modelsCost'
import { processBalanceOperation } from '@/price/helpers'
import elevenLabsClient from '@/core/elevenlabs'
import { logger } from '@/utils/logger'
import { Telegraf } from 'telegraf'
import { MyContext } from '@/interfaces'
import { createWriteStream } from 'fs'
import path from 'path'
import os from 'os'
import { InputFile } from 'telegraf/typings/core/types/typegram'

// Fallback Text-to-Speech —Ñ—É–Ω–∫—Ü–∏—è
export const generateSpeechFallback = async (
  text: string,
  voice_id: string,
  telegram_id: string,
  is_ru: boolean,
  bot: Telegraf<MyContext>
) => {
  try {
    logger.info({
      message: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ fallback –¥–ª—è text-to-speech',
      telegram_id,
      voice_id,
    })

    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userExists = await getUserByTelegramId(telegram_id)
    if (!userExists) {
      throw new Error(`User with ID ${telegram_id} does not exist.`)
    }

    if (userExists.level === 7) {
      await updateUserLevelPlusOne(telegram_id, userExists.level)
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    const balanceCheck = await processBalanceOperation({
      telegram_id,
      paymentAmount: modeCosts[ModeEnum.TextToSpeech] as number,
      is_ru,
      bot,
    })

    if (!balanceCheck.success) {
      throw new Error(balanceCheck.error)
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
    if (!process.env.ELEVENLABS_API_KEY) {
      throw new Error('ELEVENLABS_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏
    const audio = await elevenLabsClient.generate({
      voice: voice_id,
      text,
      model_id: 'eleven_multilingual_v2',
    })

    // –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    const tempDir = os.tmpdir()
    const audioPath = path.join(tempDir, `${telegram_id}_speech_${Date.now()}.mp3`)
    const audioStream = createWriteStream(audioPath)
    
    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ
    await new Promise<void>((resolve, reject) => {
      audio.pipe(audioStream)
      
      audioStream.on('finish', () => {
        resolve()
      })
      
      audioStream.on('error', (error) => {
        reject(error)
      })
    })

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const audioFile = new InputFile(audioPath)
    await bot.telegram.sendAudio(telegram_id, audioFile, {
      caption: is_ru 
        ? `üéµ –í–∞—à –∞—É–¥–∏–æ—Ñ–∞–π–ª –≥–æ—Ç–æ–≤!\n\nüìù –¢–µ–∫—Å—Ç: ${text}`
        : `üéµ Your audio is ready!\n\nüìù Text: ${text}`,
    })

    logger.info({
      message: 'Fallback text-to-speech –∑–∞–≤–µ—Ä—à–µ–Ω',
      telegram_id,
      audioPath,
    })

    return { audioUrl: audioPath }

  } catch (error) {
    logger.error({
      message: '–û—à–∏–±–∫–∞ fallback text-to-speech',
      error: error.message,
      telegram_id,
    })

    const errorMsg = is_ru 
      ? `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏: ${error.message}`
      : `‚ùå Error during speech generation: ${error.message}`
    
    try {
      await bot.telegram.sendMessage(telegram_id, errorMsg)
    } catch (sendError) {
      logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ', sendError)
    }

    throw error
  }
}

// Fallback Voice Avatar Creation —Ñ—É–Ω–∫—Ü–∏—è
export const createVoiceAvatarFallback = async (
  fileUrl: string,
  telegram_id: string,
  username: string,
  is_ru: boolean,
  bot: Telegraf<MyContext>
) => {
  try {
    logger.info({
      message: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ fallback –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞',
      telegram_id,
      fileUrl,
    })

    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userExists = await getUserByTelegramId(telegram_id)
    if (!userExists) {
      throw new Error(`User with ID ${telegram_id} does not exist.`)
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    const balanceCheck = await processBalanceOperation({
      telegram_id,
      paymentAmount: modeCosts[ModeEnum.CreateVoiceAvatar] as number,
      is_ru,
      bot,
    })

    if (!balanceCheck.success) {
      throw new Error(balanceCheck.error)
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ
    await bot.telegram.sendMessage(
      telegram_id,
      is_ru 
        ? '‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞...' 
        : '‚è≥ Creating voice avatar...'
    )

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ API –∫–ª—é—á–∞
    if (!process.env.ELEVENLABS_API_KEY) {
      throw new Error('ELEVENLABS_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
    }

    // –ò–º–∏—Ç–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞
    // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ ElevenLabs API
    const voiceId = `voice_${telegram_id}_${Date.now()}`
    const voiceName = `Voice_${username}`

    // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
    await new Promise(resolve => setTimeout(resolve, 3000))

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
    await bot.telegram.sendMessage(
      telegram_id,
      is_ru 
        ? `‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–π –∞–≤–∞—Ç–∞—Ä —Å–æ–∑–¥–∞–Ω!\n\nüé≠ ID –≥–æ–ª–æ—Å–∞: ${voiceId}\nüìù –ò–º—è: ${voiceName}\n\n‚ö†Ô∏è –≠—Ç–æ fallback –≤–µ—Ä—Å–∏—è - –¥–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º.`
        : `‚úÖ Voice avatar created!\n\nüé≠ Voice ID: ${voiceId}\nüìù Name: ${voiceName}\n\n‚ö†Ô∏è This is a fallback version - use main mode for full functionality.`
    )

    logger.info({
      message: 'Fallback —Å–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ',
      telegram_id,
      voiceId,
    })

    return { voiceId, voiceName }

  } catch (error) {
    logger.error({
      message: '–û—à–∏–±–∫–∞ fallback —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞',
      error: error.message,
      telegram_id,
    })

    const errorMsg = is_ru 
      ? `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞: ${error.message}`
      : `‚ùå Error during voice avatar creation: ${error.message}`
    
    try {
      await bot.telegram.sendMessage(telegram_id, errorMsg)
    } catch (sendError) {
      logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ', sendError)
    }

    throw error
  }
}