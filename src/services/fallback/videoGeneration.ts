import { replicate } from '@/core/replicate'
import { getUserByTelegramId, updateUserLevelPlusOne } from '@/core/supabase'
import { VIDEO_MODELS_CONFIG } from '@/helpers/VIDEO_MODELS'
import { processBalanceVideoOperation } from '@/price/helpers'
import { downloadFile } from '@/helpers/downloadFile'
import { saveVideoUrlToSupabase } from '@/core/supabase/saveVideoUrlToSupabase'
import { pulse } from '@/helpers/pulse'
import { logger } from '@/utils/logger'
import { Telegraf } from 'telegraf'
import { MyContext } from '@/interfaces'
import { InputFile } from 'telegraf/typings/core/types/typegram'

// –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
const processVideoGenerationFallback = async (
  videoModel: string,
  prompt: string,
  imageUrl?: string
) => {
  const modelConfig = VIDEO_MODELS_CONFIG[videoModel]

  if (!modelConfig) {
    throw new Error('Invalid video model')
  }

  const input: any = {
    prompt,
    ...modelConfig.api.input,
  }

  if (imageUrl) {
    input.image = imageUrl
  }

  const output = await replicate.run(
    modelConfig.api.model as `${string}/${string}`,
    { input }
  )

  return output
}

// Fallback Text-to-Video —Ñ—É–Ω–∫—Ü–∏—è
export const generateTextToVideoFallback = async (
  prompt: string,
  videoModel: string,
  telegram_id: string,
  username: string,
  is_ru: boolean,
  bot: Telegraf<MyContext>
) => {
  try {
    logger.info({
      message: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ fallback –¥–ª—è text-to-video',
      telegram_id,
      videoModel,
    })

    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userExists = await getUserByTelegramId(telegram_id)
    if (!userExists) {
      throw new Error(`User with ID ${telegram_id} does not exist.`)
    }

    if (userExists.level === 9) {
      await updateUserLevelPlusOne(telegram_id, userExists.level)
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    await processBalanceVideoOperation({
      videoModel,
      telegram_id,
      is_ru,
      bot,
    })

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ
    await bot.telegram.sendMessage(
      telegram_id,
      is_ru ? '‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ...' : '‚è≥ Generating video...',
      { reply_markup: { remove_keyboard: true } }
    )

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ
    const videoOutput = await processVideoGenerationFallback(videoModel, prompt)
    const videoUrl = Array.isArray(videoOutput) ? videoOutput[0] : videoOutput

    if (!videoUrl) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –≤–∏–¥–µ–æ')
    }

    // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞
    const videoLocalPath = await downloadFile(videoUrl, telegram_id, 'video')
    const video = new InputFile(videoLocalPath)
    
    await bot.telegram.sendVideo(telegram_id, video, {
      caption: is_ru
        ? `‚úÖ –í–∞—à–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!\n\nüìù –ü—Ä–æ–º—Ç: ${prompt}`
        : `‚úÖ Your video is ready!\n\nüìù Prompt: ${prompt}`,
    })

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É
    await saveVideoUrlToSupabase(
      telegram_id,
      username,
      videoUrl,
      prompt,
      'text_to_video'
    )

    // Pulse —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await pulse(telegram_id, username, prompt)

    logger.info({
      message: 'Fallback text-to-video –∑–∞–≤–µ—Ä—à–µ–Ω',
      telegram_id,
      videoUrl,
    })

    return { videoUrl, videoLocalPath }

  } catch (error) {
    logger.error({
      message: '–û—à–∏–±–∫–∞ fallback text-to-video',
      error: error.message,
      telegram_id,
    })

    const errorMsg = is_ru 
      ? `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: ${error.message}`
      : `‚ùå Error during video generation: ${error.message}`
    
    try {
      await bot.telegram.sendMessage(telegram_id, errorMsg)
    } catch (sendError) {
      logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ', sendError)
    }

    throw error
  }
}

// Fallback Image-to-Video —Ñ—É–Ω–∫—Ü–∏—è
export const generateImageToVideoFallback = async (
  imageUrl: string,
  prompt: string,
  videoModel: string,
  telegram_id: string,
  username: string,
  is_ru: boolean,
  bot: Telegraf<MyContext>
) => {
  try {
    logger.info({
      message: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ fallback –¥–ª—è image-to-video',
      telegram_id,
      videoModel,
    })

    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userExists = await getUserByTelegramId(telegram_id)
    if (!userExists) {
      throw new Error(`User with ID ${telegram_id} does not exist.`)
    }

    if (userExists.level === 9) {
      await updateUserLevelPlusOne(telegram_id, userExists.level)
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
    await processBalanceVideoOperation({
      videoModel,
      telegram_id,
      is_ru,
      bot,
    })

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    await bot.telegram.sendMessage(
      telegram_id,
      is_ru ? '‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...' : '‚è≥ Generating video from image...',
      { reply_markup: { remove_keyboard: true } }
    )

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
    const videoOutput = await processVideoGenerationFallback(
      videoModel,
      prompt,
      imageUrl
    )
    
    const videoUrl = Array.isArray(videoOutput) ? videoOutput[0] : videoOutput

    if (!videoUrl) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –≤–∏–¥–µ–æ')
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const videoLocalPath = await downloadFile(videoUrl, telegram_id, 'video')
    const video = new InputFile(videoLocalPath)
    
    await bot.telegram.sendVideo(telegram_id, video, {
      caption: is_ru
        ? `‚úÖ –í–∞—à–µ –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–æ—Ç–æ–≤–æ!\n\nüìù –ü—Ä–æ–º—Ç: ${prompt}`
        : `‚úÖ Your video from image is ready!\n\nüìù Prompt: ${prompt}`,
    })

    await saveVideoUrlToSupabase(
      telegram_id,
      username,
      videoUrl,
      prompt,
      'image_to_video'
    )

    await pulse(telegram_id, username, prompt)

    logger.info({
      message: 'Fallback image-to-video –∑–∞–≤–µ—Ä—à–µ–Ω',
      telegram_id,
      videoUrl,
    })

    return { videoUrl, videoLocalPath }

  } catch (error) {
    logger.error({
      message: '–û—à–∏–±–∫–∞ fallback image-to-video',
      error: error.message,
      telegram_id,
    })

    const errorMsg = is_ru 
      ? `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: ${error.message}`
      : `‚ùå Error during video generation: ${error.message}`
    
    try {
      await bot.telegram.sendMessage(telegram_id, errorMsg)
    } catch (sendError) {
      logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ', sendError)
    }

    throw error
  }
}