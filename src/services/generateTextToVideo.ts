import { replicate } from '@/core/replicate'
import { downloadFile } from '@/helpers/downloadFile'
import { errorMessage, errorMessageAdmin, pulse } from '@/helpers'
import { processBalanceVideoOperation } from '@/price/helpers'
import { mkdir, writeFile } from 'fs/promises'
import { InputFile } from 'telegraf/typings/core/types/typegram'
import { saveVideoUrlToSupabase } from '@/core/supabase/saveVideoUrlToSupabase'
import path from 'path'
import { getBotByName } from '@/core/bot'
import {
  getUserByTelegramId,
  updateUserLevelPlusOne,
  updateUserBalance,
} from '@/core/supabase'
import { VIDEO_MODELS_CONFIG } from '@/config/models.config'
import { PaymentType } from '@/interfaces/payments.interface'
import { ModeEnum } from '@/interfaces/modes'
import { GoogleVeo3Service } from './googleVeo3Service'

export const processVideoGeneration = async (
  videoModel: string,
  aspect_ratio: string,
  prompt: string,
  imageUrl?: string
) => {
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è Google Veo —á–µ—Ä–µ–∑ Vertex AI
  if (videoModel === 'veo-3' || videoModel === 'veo-3-fast' || videoModel === 'veo-2') {
    const { VertexVeoService } = await import('./vertexVeoService');
    const projectId = process.env.GOOGLE_CLOUD_PROJECT || 'neuroblogger';
    
    const veoService = new VertexVeoService(projectId);
    
    // Veo 3 –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ 16:9, –ø–æ—ç—Ç–æ–º—É –≤—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    // TODO: –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥—Ä—É–≥–∏—Ö —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–π
    let veoAspectRatio: '16:9' | '9:16' | '1:1' = '16:9';
    console.log('Using aspect ratio 16:9 for Veo (other ratios not supported yet)');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–æ–¥–µ–ª—å
    let modelId: string;
    if (videoModel === 'veo-3') {
      modelId = 'veo-3.0-generate-preview';
    } else if (videoModel === 'veo-3-fast') {
      modelId = 'veo-3.0-generate-fast';
      console.log('‚ö° Using Veo 3 Fast mode for quicker generation');
    } else {
      modelId = 'veo-2.0-generate-001';
    }
    
    // –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º GCS, –ø–æ–ª—É—á–∞–µ–º –≤–∏–¥–µ–æ –≤ base64
    // const storageUri = `gs://veo-videos-${projectId}/`;
    
    const result = await veoService.generateAndWaitForVideo({
      prompt,
      modelId,
      aspectRatio: veoAspectRatio,
      // storageUri, // –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ - –ø–æ–ª—É—á–∞–µ–º base64 –≤–º–µ—Å—Ç–æ GCS
      image: imageUrl ? {
        gcsUri: imageUrl,
        mimeType: 'image/jpeg'
      } : undefined
    });
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –≤–∏–¥–µ–æ –∏–ª–∏ base64
    if (result.videos && result.videos[0]) {
      const video = result.videos[0];
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å GCS URL, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
      if (video.gcsUri) {
        return video.gcsUri;
      }
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å base64, —Ñ–æ—Ä–º–∏—Ä—É–µ–º data URL
      if (video.bytesBase64Encoded) {
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º base64 —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º data URL
        return `data:video/mp4;base64,${video.bytesBase64Encoded}`;
      }
    }
    throw new Error('No video generated');
  }
  
  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Replicate –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
  const modelConfig = VIDEO_MODELS_CONFIG[videoModel]

  if (!modelConfig) {
    throw new Error('Invalid video model')
  }

  const output = await replicate.run(
    modelConfig.api.model as `${string}/${string}`,
    {
      input: {
        prompt,
        ...modelConfig.api.input,
        aspect_ratio,
      },
    }
  )

  return output
}

export const generateTextToVideo = async (
  prompt: string,
  videoModel: string,
  telegram_id: string,
  username: string,
  is_ru: boolean,
  bot_name: string
): Promise<{ videoLocalPath: string }> => {
  try {
    console.log('videoModel', videoModel)
    if (!prompt) throw new Error('Prompt is required')
    if (!videoModel) throw new Error('Video model is required')
    if (!telegram_id) throw new Error('Telegram ID is required')
    if (!username) throw new Error('Username is required')
    if (!bot_name) throw new Error('Bot name is required')

    const userExists = await getUserByTelegramId(telegram_id)
    if (!userExists) {
      throw new Error(`User with ID ${telegram_id} does not exist.`)
    }
    const level = userExists.level
    if (level === 9) {
      await updateUserLevelPlusOne(telegram_id, level)
    }
    const { bot } = getBotByName(bot_name)
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    const balanceResult = await processBalanceVideoOperation({
      videoModel,
      telegram_id,
      is_ru,
      bot_name,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞
    if (!balanceResult.success) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      if (balanceResult.error) {
        await bot.telegram.sendMessage(
          telegram_id.toString(),
          balanceResult.error
        )
      }
      // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –±–∞–ª–∞–Ω—Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–µ–Ω
      throw new Error(
        balanceResult.error ||
          (is_ru ? '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞' : 'Balance check failed')
      )
    }

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —É—Å–ø–µ—à–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    const { newBalance, paymentAmount } = balanceResult

    await bot.telegram.sendMessage(
      telegram_id,
      is_ru ? '‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ...' : '‚è≥ Generating video...',
      {
        reply_markup: {
          remove_keyboard: true,
        },
      }
    )

    const output = await processVideoGeneration(
      videoModel,
      userExists.aspect_ratio,
      prompt,
      undefined // imageUrl –¥–ª—è text-to-video –ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    )
    //const videoUrl = 'https://yuukfqcsdhkyxegfwlcb.supabase.co/storage/v1/object/public/dev/2025-01-15T06%2011%2018.236Z.mp4';
    let videoUrl: string
    if (Array.isArray(output)) {
      if (!output[0]) {
        throw new Error('Empty array or first element is undefined')
      }
      videoUrl = output[0]
    } else if (typeof output === 'string') {
      videoUrl = output
    } else {
      console.error(
        'Unexpected output format:',
        JSON.stringify(output, null, 2)
      )
      throw new Error(`Unexpected output format from API: ${typeof output}`)
    }
    const videoLocalPath = path.join(
      __dirname,
      '../uploads',
      telegram_id.toString(),
      'text-to-video',
      `${new Date().toISOString()}.mp4`
    )
    console.log(videoLocalPath, 'videoLocalPath')
    await mkdir(path.dirname(videoLocalPath), { recursive: true })

    const videoBuffer = await downloadFile(videoUrl as string)
    await writeFile(videoLocalPath, videoBuffer)
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ç–∞–±–ª–∏—Ü—É assets

    await saveVideoUrlToSupabase(
      telegram_id,
      videoUrl as string,
      videoLocalPath,
      videoModel
    )

    const video = { source: videoLocalPath }
    await bot.telegram.sendVideo(telegram_id.toString(), video as InputFile)

    // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    try {
      await updateUserBalance(
        telegram_id,
        paymentAmount,
        PaymentType.MONEY_OUTCOME,
        `Text-to-Video generation (${videoModel})`,
        {
          stars: paymentAmount,
          payment_method: 'Internal',
          service_type: ModeEnum.TextToVideo,
          bot_name: bot_name,
          language: is_ru ? 'ru' : 'en',
          cost: paymentAmount / 1.5, // —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
        }
      )
      console.log('Balance updated successfully for Text-to-Video')
    } catch (balanceError) {
      console.error('Error updating balance for text-to-video:', balanceError)
      errorMessageAdmin(balanceError as Error)
    }

    await bot.telegram.sendMessage(
      telegram_id,
      is_ru
        ? `‚úÖ –í–∞—à–µ –≤–∏–¥–µ–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!\n\n–°–ø–∏—Å–∞–Ω–æ: ${paymentAmount.toFixed(
            2
          )} ‚≠êÔ∏è\n–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance.toFixed(2)} ‚≠êÔ∏è`
        : `‚úÖ Your video has been generated!\n\nDeducted: ${paymentAmount.toFixed(
            2
          )} ‚≠êÔ∏è\nYour new balance: ${newBalance.toFixed(2)} ‚≠êÔ∏è`,
      {
        reply_markup: {
          keyboard: [
            [
              {
                text: is_ru
                  ? 'üé• –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ?'
                  : 'üé• Generate new video?',
              },
            ],
          ],
          resize_keyboard: false,
        },
      }
    )

    await pulse(
      videoLocalPath,
      prompt,
      'text-to-video',
      telegram_id,
      username,
      is_ru,
      bot_name
    )

    return { videoLocalPath }
  } catch (error) {
    errorMessage(error as Error, telegram_id.toString(), is_ru)
    errorMessageAdmin(error as Error)
    console.error('Error generating video:', error)
    if (error instanceof Error) {
      console.error('Error name:', error.name)
      console.error('Error message:', error.message)
      console.error('Error stack:', error.stack)
    }
    throw error
  }
}
