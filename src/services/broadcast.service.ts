import { supabase } from '../core/supabase'
import { getBotByName } from '../core/bot'
import { logger } from '@utils/logger'
import { avatarService } from './avatar.service'

export interface BroadcastResult {
  successCount: number
  errorCount: number
  reason?: string
  success?: boolean
  users?: any[]
}

export interface BroadcastOptions {
  bot_name?: string // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω, —Ä–∞—Å—Å—ã–ª–∫–∞ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —ç—Ç–æ–≥–æ –±–æ—Ç–∞
  sender_telegram_id?: string // Telegram ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤
  test_mode?: boolean // –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è - –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
  test_telegram_id?: string // ID –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
  contentType?: 'photo' | 'video' | 'post_link' // –¢–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
  postLink?: string // –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç –¥–ª—è —Ç–∏–ø–∞ 'post_link'
  videoFileId?: string // ID –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞ –¥–ª—è —Ç–∏–ø–∞ 'video'
  textEn?: string // –¢–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
}

export interface FetchUsersOptions {
  bot_name?: string
  test_mode?: boolean
  test_telegram_id?: string
  sender_telegram_id?: string
}

export const broadcastService = {
  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏
   */
  checkOwnerPermissions: async (
    telegram_id: string,
    bot_name: string
  ): Promise<BroadcastResult> => {
    try {
      const isOwner = await avatarService.isAvatarOwner(telegram_id, bot_name)
      if (!isOwner) {
        logger.warn('‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:', {
          description: 'Unauthorized broadcast attempt',
          telegram_id,
          bot_name,
        })
        return {
          success: false,
          successCount: 0,
          errorCount: 0,
          reason: 'unauthorized',
        }
      }
      return { success: true, successCount: 0, errorCount: 0 }
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤:', {
        description: 'Error checking permissions',
        error: error?.message || 'Unknown error',
      })
      return {
        success: false,
        successCount: 0,
        errorCount: 0,
        reason: 'permission_check_error',
      }
    }
  },

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
   */
  fetchUsers: async (options: FetchUsersOptions): Promise<BroadcastResult> => {
    const { bot_name, test_mode, test_telegram_id, sender_telegram_id } =
      options

    try {
      if (test_mode) {
        const testId = test_telegram_id || sender_telegram_id || '144022504'
        const users = bot_name
          ? [{ telegram_id: testId, bot_name }]
          : await supabase
              .from('users')
              .select('telegram_id, bot_name')
              .eq('telegram_id', testId)
              .single()
              .then(({ data }) => (data ? [data] : []))

        return { success: true, successCount: 0, errorCount: 0, users }
      }

      let query = supabase.from('users').select('telegram_id, bot_name')
      if (bot_name) {
        query = query.eq('bot_name', bot_name)
      }

      const { data: users, error } = await query
      if (error) {
        throw error
      }

      return {
        success: true,
        successCount: 0,
        errorCount: 0,
        users: users || [],
      }
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', {
        description: 'Error fetching users',
        error: error?.message || 'Unknown error',
      })
      return {
        success: false,
        successCount: 0,
        errorCount: 0,
        reason: 'fetch_users_error',
        users: [],
      }
    }
  },

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –ø–æ –∏–º–µ–Ω–∏
   */
  getBotInstance: async (botName: string) => {
    try {
      const result = getBotByName(botName)
      if (!result || !result.bot) {
        logger.error(`‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${botName}`, {
          description: `Bot not found: ${botName}`,
        })
        return null
      }
      return result.bot
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ—Ç–∞:', {
        description: 'Error getting bot instance',
        error: error?.message || 'Unknown error',
        botName,
      })
      return null
    }
  },

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –±–æ—Ç–∞
   * @param imageUrl URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @param textRu –¢–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º
   * @param options –û–ø—Ü–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏
   */
  sendToAllUsers: async (
    imageUrl: string | undefined,
    textRu: string,
    options: BroadcastOptions = {}
  ): Promise<BroadcastResult> => {
    const {
      bot_name,
      sender_telegram_id,
      test_mode,
      test_telegram_id,
      contentType,
      postLink,
      videoFileId,
      textEn,
    } = options

    // –°—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è bot_name
    if (!bot_name || typeof bot_name !== 'string' || bot_name.trim() === '') {
      logger.error('‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π bot_name –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', {
        description: 'Invalid or missing bot_name for broadcast',
        bot_name,
        options: JSON.stringify(options),
      })
      return {
        successCount: 0,
        errorCount: 0,
        reason: 'invalid_bot_name',
      }
    }

    logger.info('üöÄ –ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', {
      description: 'Starting broadcast with parameters',
      bot_name,
      test_mode: test_mode || false,
      contentType: contentType || 'photo',
      has_image: !!imageUrl,
      has_video: !!videoFileId,
      has_post_link: !!postLink,
      sender_telegram_id: sender_telegram_id || 'not_provided',
    })

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –∏–º—è –±–æ—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if (sender_telegram_id && bot_name) {
      const isOwner = await avatarService.isAvatarOwner(
        sender_telegram_id,
        bot_name
      )
      if (!isOwner) {
        logger.warn('‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ –Ω–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:', {
          description: 'Unauthorized broadcast attempt',
          sender_telegram_id,
          bot_name,
        })
        return {
          successCount: 0,
          errorCount: 0,
          reason: 'unauthorized',
        }
      }
    }

    logger.info('üìä –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...', {
      description: 'Starting to fetch users from database',
      bot_name,
      test_mode: test_mode || false,
    })

    let users = []

    // –ï—Å–ª–∏ —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–ª–∏ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π ID
    if (test_mode) {
      const testId = test_telegram_id || sender_telegram_id || '144022504'

      // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω bot_name, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã
      if (bot_name) {
        users = [{ telegram_id: testId, bot_name }]
        logger.info(
          `üë§ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ ID ${testId}, –±–æ—Ç: ${bot_name}`,
          {
            description: `Test mode: sending only to ID ${testId}, bot: ${bot_name}`,
          }
        )
      } else {
        // –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã
        const { data, error } = await supabase
          .from('users')
          .select('telegram_id, bot_name')
          .eq('telegram_id', testId)
          .single()

        if (error || !data) {
          logger.error(`‚ùå –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${testId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ`, {
            description: `Test user ${testId} not found in database`,
            error,
          })
          return {
            successCount: 0,
            errorCount: 0,
            reason: 'test_user_not_found',
          }
        }

        users = [data]
        logger.info(
          `üë§ –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º: –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ ID ${testId}, –±–æ—Ç: ${data.bot_name}`,
          {
            description: `Test mode: sending only to ID ${testId}, bot: ${data.bot_name}`,
          }
        )
      }
    } else {
      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ - –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const query = supabase
        .from('users')
        .select('telegram_id, bot_name, language_code')
        .eq('bot_name', bot_name) // –í—Å–µ–≥–¥–∞ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ bot_name

      const { data, error } = await query

      if (error) {
        logger.error(
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã: ${error.message}`,
          {
            description: `Error fetching users: ${error.message}`,
            error,
            bot_name,
          }
        )
        return {
          successCount: 0,
          errorCount: 0,
          reason: 'database_error',
        }
      }

      users = data || []
    }

    logger.info(
      `üë• –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±–æ—Ç–∞ ${bot_name}: ${users?.length || 0}`,
      {
        description: `Fetched users count for bot ${bot_name}: ${
          users?.length || 0
        }`,
        bot_name,
        test_mode: test_mode || false,
      }
    )

    if (!users || users.length === 0) {
      logger.warn('‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏', {
        description: 'No users found for broadcast',
        bot_name,
        test_mode: test_mode || false,
      })
      return { successCount: 0, errorCount: 0, reason: 'no_users' }
    }

    let successCount = 0
    let errorCount = 0

    if (users) {
      for (const user of users) {
        if (user.telegram_id && user.bot_name) {
          logger.info(
            `üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.telegram_id}, –±–æ—Ç: ${user.bot_name}`,
            {
              description: `Processing user: ${user.telegram_id}, bot: ${user.bot_name}`,
            }
          )

          try {
            const botResult = getBotByName(user.bot_name)

            // –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ—Ç–∞
            logger.info('üîç –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ—Ç–∞:', {
              description: 'Bot retrieval result',
              hasBot: !!botResult?.bot,
              hasError: !!botResult?.error,
              error: botResult?.error || null,
              botType: botResult?.bot ? typeof botResult.bot : 'undefined',
              botKeys: botResult?.bot ? Object.keys(botResult.bot) : [],
            })

            if (!botResult || !botResult.bot) {
              logger.error(`‚ùå –ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${user.bot_name}`, {
                description: `Bot not found: ${user.bot_name}`,
              })
              errorCount++
              continue
            }

            const { bot } = botResult

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã —Ç–µ–ª–µ–≥—Ä–∞–º–∞
            if (
              !bot.telegram ||
              (contentType === 'post_link' &&
                typeof bot.telegram.sendMessage !== 'function') ||
              (contentType === 'video' &&
                typeof bot.telegram.sendVideo !== 'function') ||
              (!contentType && typeof bot.telegram.sendPhoto !== 'function')
            ) {
              logger.error(
                `‚ùå –£ –±–æ—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–µ—Ç–æ–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏`,
                {
                  description: `Bot has no required methods`,
                  contentType: contentType || 'photo',
                  botTelegramMethods: bot.telegram
                    ? Object.keys(bot.telegram)
                    : 'no_telegram',
                }
              )
              errorCount++
              continue
            }

            logger.info(`ü§ñ –ü–æ–ª—É—á–µ–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞: ${user.bot_name}`, {
              description: `Got bot instance: ${user.bot_name}`,
              telegramMethods: Object.keys(bot.telegram),
            })

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            if (contentType === 'post_link' && postLink) {
              logger.info(`üîó –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç: ${postLink}`, {
                description: `Sending post link: ${postLink}`,
                language: user.language_code || 'ru',
              })

              const buttonText =
                user.language_code === 'en'
                  ? 'üîó Go to post'
                  : 'üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ—Å—Ç—É'
              const messageText =
                user.language_code === 'en' ? textEn || textRu : textRu

              await bot.telegram.sendMessage(
                user.telegram_id.toString(),
                messageText,
                {
                  parse_mode: 'HTML',
                  link_preview_options: { is_disabled: false },
                  reply_markup: {
                    inline_keyboard: [
                      [
                        {
                          text: buttonText,
                          url: postLink,
                        },
                      ],
                    ],
                  },
                }
              )
            } else if (contentType === 'video' && videoFileId) {
              logger.info(`üé• –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ: ${videoFileId}`, {
                description: `Sending video: ${videoFileId}`,
                language: user.language_code || 'ru',
              })

              const messageText =
                user.language_code === 'en' ? textEn || textRu : textRu

              await bot.telegram.sendVideo(
                user.telegram_id.toString(),
                videoFileId,
                {
                  caption: messageText,
                  parse_mode: 'Markdown',
                }
              )
            } else if (imageUrl) {
              logger.info(
                `üñºÔ∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ${imageUrl?.substring(0, 50)}...`,
                {
                  description: `Sending image: ${imageUrl?.substring(
                    0,
                    50
                  )}...`,
                  language: user.language_code || 'ru',
                }
              )

              const messageText =
                user.language_code === 'en' ? textEn || textRu : textRu

              await bot.telegram.sendPhoto(
                user.telegram_id.toString(),
                imageUrl,
                {
                  caption: messageText,
                  parse_mode: 'Markdown',
                }
              )
            } else {
              logger.error(
                `‚ùå –ù–µ —É–∫–∞–∑–∞–Ω –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏ contentType=${contentType}`,
                {
                  description: `No content specified for contentType=${contentType}`,
                  hasImageUrl: !!imageUrl,
                  hasVideoFileId: !!videoFileId,
                  hasPostLink: !!postLink,
                }
              )
              errorCount++
              continue
            }

            successCount++
            logger.info(
              `üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${user.telegram_id}`,
              {
                description: `Message sent to user: ${user.telegram_id}`,
                contentType: contentType || 'photo',
              }
            )
          } catch (err) {
            errorCount++
            logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:`, {
              description: `Error sending message`,
              error: err?.message || 'Unknown error',
              stack: err?.stack,
              response: err?.response,
              telegram_id: user.telegram_id,
              bot_name: user.bot_name,
            })

            if (err.response) {
              const errorCode = err.response.error_code
              if (errorCode === 403 || errorCode === 400) {
                logger.error(
                  `‚ùå –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.telegram_id} –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: ${err.response.description}`,
                  {
                    description: `Removing user ${user.telegram_id} due to error: ${err.response.description}`,
                    error: err,
                  }
                )
                await supabase
                  .from('users')
                  .delete()
                  .eq('telegram_id', user.telegram_id)
              } else {
                logger.error(
                  `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: ${user.telegram_id}`,
                  {
                    description: `Failed to send message to user: ${user.telegram_id}`,
                    error: err,
                  }
                )
              }
            } else {
              logger.error(
                `‚ùì –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.telegram_id}`,
                {
                  description: `Unexpected error for user: ${user.telegram_id}`,
                  error: err,
                }
              )
            }
          }
        }
      }
    }

    logger.info(
      `üìä –ò—Ç–æ–≥–∏ —Ä–∞—Å—Å—ã–ª–∫–∏: —É—Å–ø–µ—à–Ω–æ - ${successCount}, –æ—à–∏–±–æ–∫ - ${errorCount}`,
      {
        description: `Broadcast summary: success - ${successCount}, errors - ${errorCount}`,
        bot_name,
        test_mode: test_mode || false,
      }
    )

    return { successCount, errorCount }
  },
}
// curl -X POST http://localhost:4000/broadcast \
//   -H "Content-Type: application/json" \
//   -d '{
//     "imageUrl": "https://yuukfqcsdhkyxegfwlcb.supabase.co/storage/v1/object/public/landingpage/avatars/neuro_blogger_bot/flux_pro.jpeg",
//     "text": "–î–æ–±—Ä—ã–π –¥–µ–Ω—å!\n\n–ú—ã —Ä–∞–¥—ã —Å–æ–æ–±—â–∏—Ç—å, —á—Ç–æ –Ω–∞—à –±–æ—Ç —Å—Ç–∞–ª –µ—â–µ –ª—É—á—à–µ! üéâ\n\n‚ú® –ó–∞–ø—É—â–µ–Ω–∞ –Ω–µ–π—Ä–æ-–º–æ–¥–µ–ª—å —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏!\n–¢–µ–ø–µ—Ä—å –±–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –µ—â–µ –±–æ–ª–µ–µ –≤–ø–µ—á–∞—Ç–ª—è—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≤—ã–¥–∞–µ—Ç –º–µ–Ω—å—à–µ –±—Ä–∞–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –∏ –≤—ã —Ç–æ—á–Ω–æ –∑–∞–º–µ—Ç–∏—Ç–µ —Ä–∞–∑–Ω–∏—Ü—É!\n\nüåü –ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å–µ–π—á–∞—Å?\n* –ù–∞—á–Ω–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –∏ –æ—Ü–µ–Ω–∏—Ç–µ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å.\n* –û–±—É—á–∏—Ç–µ –¶–∏—Ñ—Ä–æ–≤–æ–µ —Ç–µ–ª–æ –Ω–∞ —Å–≤–æ–∏—Ö —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è—Ö.\n* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –∏ —Å–æ–∑–¥–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞—Å —É–¥–∏–≤—è—Ç!\n\n–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–≤—ã–º–∏ –æ—Ü–µ–Ω–∏—Ç—å –≤—Å–µ –Ω–æ–≤–æ–≤–≤–µ–¥–µ–Ω–∏—è. –ú—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è!\n\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏. –ñ–¥–µ–º –≤–∞—à–µ–≥–æ feedback!"
//   }'
