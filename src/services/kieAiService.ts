import axios from 'axios';
import { errorMessage, errorMessageAdmin } from '@/helpers';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Kie.ai API
 * –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://docs.kie.ai
 * –≠–∫–æ–Ω–æ–º–∏—è –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å Vertex AI: –¥–æ 87%
 */

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π Kie.ai (–ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ model IDs)
export const KIE_AI_MODELS = {
  'veo3_fast': {
    name: 'Veo 3 Fast',
    description: '–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è',
    pricePerSecond: 0.05, // $0.05/—Å–µ–∫ (87% —ç–∫–æ–Ω–æ–º–∏—è –ø—Ä–æ—Ç–∏–≤ $0.40 Vertex AI)
    maxDuration: 10,
    supportedFormats: ['16:9', '9:16', '1:1']
  },
  'veo3': {
    name: 'Veo 3 Quality', 
    description: '–ü—Ä–µ–º–∏—É–º –∫–∞—á–µ—Å—Ç–≤–æ',
    pricePerSecond: 0.25, // $0.25/—Å–µ–∫ (37% —ç–∫–æ–Ω–æ–º–∏—è –ø—Ä–æ—Ç–∏–≤ $0.40 Vertex AI)
    maxDuration: 10,
    supportedFormats: ['16:9', '9:16', '1:1']
  },
  'runway-aleph': {
    name: 'Runway Aleph',
    description: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
    pricePerSecond: 0.30, // $0.30/—Å–µ–∫
    maxDuration: 10,
    supportedFormats: ['16:9', '9:16', '1:1']
  }
};

interface KieAiGenerationOptions {
  model: 'veo3_fast' | 'veo3' | 'runway-aleph';
  prompt: string;
  duration: number; // 2-10 —Å–µ–∫—É–Ω–¥
  aspectRatio?: '16:9' | '9:16' | '1:1';
  imageUrl?: string; // –¥–ª—è image-to-video
  userId?: string;
  projectId?: number;
}

interface KieAiResponse {
  success: boolean;
  data?: {
    videoUrl: string;
    duration: number;
    taskId?: string;
  };
  cost: {
    usd: number;
    stars: number;
  };
  provider: string;
  model: string;
  processingTime?: number;
  error?: string;
}

export class KieAiService {
  private apiKey: string;
  private baseUrl: string = 'https://api.kie.ai/api/v1';
  
  constructor() {
    this.apiKey = process.env.KIE_AI_API_KEY || '';
    if (!this.apiKey) {
      console.warn('‚ö†Ô∏è KIE_AI_API_KEY not found. Kie.ai will not be available.');
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –∏ –±–∞–ª–∞–Ω—Å
   */
  async checkHealth(): Promise<boolean> {
    if (!this.apiKey) {
      return false;
    }
    
    try {
      const response = await axios.get(`${this.baseUrl}/chat/credit`, {
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json'
        },
        timeout: 10000
      });
      
      console.log('‚úÖ Kie.ai API –¥–æ—Å—Ç—É–ø–µ–Ω. –ö—Ä–µ–¥–∏—Ç—ã:', response.data.credits);
      return true;
    } catch (error) {
      console.error('‚ùå Kie.ai API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞
   */
  async getAccountBalance(): Promise<{ credits: number }> {
    if (!this.apiKey) {
      throw new Error('KIE_AI_API_KEY is required');
    }

    try {
      const response = await axios.get(`${this.baseUrl}/chat/credit`, {
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json'
        }
      });
      
      return { credits: response.data.credits || 0 };
    } catch (error) {
      console.error('Error getting Kie.ai balance:', error);
      throw new Error(`Failed to get balance: ${error.message}`);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Kie.ai
   */
  async generateVideo(options: KieAiGenerationOptions): Promise<{
    videoUrl: string;
    cost: number;
    duration: number;
    processingTime: number;
  }> {
    if (!this.apiKey) {
      throw new Error('KIE_AI_API_KEY is required for video generation');
    }

    const {
      model,
      prompt,
      duration,
      aspectRatio = '16:9',
      imageUrl,
      userId,
      projectId
    } = options;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
    const modelConfig = KIE_AI_MODELS[model];
    if (!modelConfig) {
      throw new Error(`Unsupported model: ${model}`);
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    const clampedDuration = Math.max(2, Math.min(modelConfig.maxDuration, duration));
    if (clampedDuration !== duration) {
      console.log(`‚ö†Ô∏è Duration adjusted from ${duration}s to ${clampedDuration}s for ${model}`);
    }

    // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    const costUSD = clampedDuration * modelConfig.pricePerSecond;

    const startTime = Date.now();

    try {
      console.log(`üé¨ Starting ${model} generation via Kie.ai...`);
      console.log(`   ‚Ä¢ Prompt: ${prompt}`);
      console.log(`   ‚Ä¢ Duration: ${clampedDuration}s`);  
      console.log(`   ‚Ä¢ Aspect Ratio: ${aspectRatio}`);
      console.log(`   ‚Ä¢ Estimated cost: $${costUSD.toFixed(3)}`);

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ Kie.ai API
      const requestBody = {
        model: model,
        prompt: prompt,
        duration: clampedDuration,
        aspectRatio: aspectRatio,
        ...(imageUrl && { imageUrl }),
        ...(userId && { userId }),
        ...(projectId && { projectId })
      };

      const response = await axios.post(`${this.baseUrl}/veo/generate`, requestBody, {
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json'
        },
        timeout: 300000 // 5 –º–∏–Ω—É—Ç –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
      });

      // Kie.ai –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {code: 200, msg: "success", data: {...}}
      if (response.data.code !== 200) {
        throw new Error(response.data.msg || 'Video generation failed');
      }

      if (!response.data.data || !response.data.data.taskId) {
        throw new Error('Invalid response from Kie.ai: missing taskId');
      }

      const taskId = response.data.data.taskId;
      console.log(`üìã Task created with ID: ${taskId}`);
      
      // Kie.ai —Ä–∞–±–æ—Ç–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –Ω—É–∂–Ω–æ –¥–æ–∂–¥–∞—Ç—å—Å—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
      console.log('‚è≥ Waiting for video generation to complete...');
      
      // Polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–º–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç)
      const maxAttempts = 60; // 60 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ 5 —Å–µ–∫—É–Ω–¥ = 5 –º–∏–Ω—É—Ç
      let videoUrl = null;
      
      for (let i = 0; i < maxAttempts; i++) {
        await new Promise(resolve => setTimeout(resolve, 5000)); // –ñ–¥–µ–º 5 —Å–µ–∫—É–Ω–¥
        
        try {
          // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã URL –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
          const statusResponse = await axios.get(`${this.baseUrl}/task/status/${taskId}`, {
            headers: {
              'Authorization': `Bearer ${this.apiKey}`,
              'Content-Type': 'application/json'
            }
          }).catch(() => {
            // –ï—Å–ª–∏ –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π
            return axios.get(`${this.baseUrl}/veo/status/${taskId}`, {
              headers: {
                'Authorization': `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json'
              }
            });
          });
          
          if (statusResponse.data.code === 200 && statusResponse.data.data) {
            if (statusResponse.data.data.status === 'completed' && statusResponse.data.data.videoUrl) {
              videoUrl = statusResponse.data.data.videoUrl;
              break;
            } else if (statusResponse.data.data.status === 'failed') {
              throw new Error(`Video generation failed: ${statusResponse.data.data.error || 'Unknown error'}`);
            }
          }
        } catch (statusError) {
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º polling –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å
          console.log(`‚è≥ Generation in progress... (attempt ${i + 1}/${maxAttempts})`);
        }
      }
      
      if (!videoUrl) {
        // –ï—Å–ª–∏ –∑–∞ 5 –º–∏–Ω—É—Ç –≤–∏–¥–µ–æ –Ω–µ –≥–æ—Ç–æ–≤–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º taskId –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        console.warn(`‚ö†Ô∏è Video generation is taking longer than expected. Task ID: ${taskId}`);
        // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º taskId –∫–∞–∫ URL
        videoUrl = `kie-task://${taskId}`;
      }

      const processingTime = Date.now() - startTime;

      console.log(`‚úÖ ${model} generation completed in ${processingTime}ms`);
      console.log(`   ‚Ä¢ Video URL: ${videoUrl}`);
      console.log(`   ‚Ä¢ Actual cost: $${costUSD.toFixed(3)}`);

      return {
        videoUrl: videoUrl,
        cost: costUSD,
        duration: clampedDuration,
        processingTime
      };

    } catch (error: any) {
      console.error(`‚ùå Kie.ai ${model} generation failed:`, error.response?.data || error.message);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ Kie.ai
      if (error.response?.status === 401) {
        throw new Error('Invalid Kie.ai API key. Please check KIE_AI_API_KEY environment variable.');
      } else if (error.response?.status === 402) {
        throw new Error('Insufficient credits in Kie.ai account. Please top up your balance.');
      } else if (error.response?.status === 429) {
        throw new Error('Rate limit exceeded. Please wait before making another request.');
      }
      
      throw new Error(`Kie.ai video generation failed: ${error.message}`);
    }
  }

  /**
   * –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  calculateCost(model: string, durationSeconds: number): number {
    const modelConfig = KIE_AI_MODELS[model as keyof typeof KIE_AI_MODELS];
    if (!modelConfig) {
      throw new Error(`Unknown model: ${model}`);
    }
    
    return durationSeconds * modelConfig.pricePerSecond;
  }

  /**
   * –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ –∑–≤–µ–∑–¥–∞—Ö —Å –Ω–∞—Ü–µ–Ω–∫–æ–π
   */
  calculateCostInStars(model: string, durationSeconds: number): number {
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    const STAR_COST_USD = 0.016; // $0.016 –∑–∞ –∑–≤–µ–∑–¥—É
    const MARKUP_RATE = 1.5; // –Ω–∞—Ü–µ–Ω–∫–∞ 50%
    
    const baseCostUSD = this.calculateCost(model, durationSeconds);
    const baseCostStars = baseCostUSD / STAR_COST_USD;
    const finalCostStars = baseCostStars * MARKUP_RATE;
    
    return Math.floor(finalCostStars);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –º–æ–¥–µ–ª–∏
   */
  isModelSupported(model: string): boolean {
    return model in KIE_AI_MODELS;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
   */
  getModelInfo(model: string) {
    return KIE_AI_MODELS[model as keyof typeof KIE_AI_MODELS] || null;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
   */
  getAllModels() {
    return KIE_AI_MODELS;
  }
}