import axios from 'axios';
import { errorMessage, errorMessageAdmin } from '@/helpers';
import { supabase } from '@/core/supabase';
import { logger } from '@/utils/logger';

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Kie.ai API
 * –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: https://docs.kie.ai
 * –≠–∫–æ–Ω–æ–º–∏—è –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å Vertex AI: –¥–æ 87%
 */

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π Kie.ai (–ò–°–ü–†–ê–í–õ–ï–ù–û: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ model IDs)
export const KIE_AI_MODELS = {
  'veo3_fast': {
    name: 'Veo 3 Fast',
    description: '–ë—ã—Å—Ç—Ä–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è',
    pricePerSecond: 0.05, // $0.05/—Å–µ–∫ (87% —ç–∫–æ–Ω–æ–º–∏—è –ø—Ä–æ—Ç–∏–≤ $0.40 Vertex AI)
    maxDuration: 10,
    supportedFormats: ['16:9', '9:16', '1:1']
  },
  'veo3': {
    name: 'Veo 3 Quality', 
    description: '–ü—Ä–µ–º–∏—É–º –∫–∞—á–µ—Å—Ç–≤–æ',
    pricePerSecond: 0.25, // $0.25/—Å–µ–∫ (37% —ç–∫–æ–Ω–æ–º–∏—è –ø—Ä–æ—Ç–∏–≤ $0.40 Vertex AI)
    maxDuration: 10,
    supportedFormats: ['16:9', '9:16', '1:1']
  },
  'runway-aleph': {
    name: 'Runway Aleph',
    description: '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
    pricePerSecond: 0.30, // $0.30/—Å–µ–∫
    maxDuration: 10,
    supportedFormats: ['16:9', '9:16', '1:1']
  }
};

interface KieAiGenerationOptions {
  model: 'veo3_fast' | 'veo3' | 'runway-aleph';
  prompt: string;
  duration: number; // 2-10 —Å–µ–∫—É–Ω–¥
  aspectRatio?: '16:9' | '9:16' | '1:1';
  imageUrl?: string; // –¥–ª—è image-to-video (deprecated, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ imageUrls)
  imageUrls?: string[]; // –º–∞—Å—Å–∏–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è image-to-video
  watermark?: string; // –≤–æ–¥—è–Ω–æ–π –∑–Ω–∞–∫ –¥–ª—è –≤–∏–¥–µ–æ
  callBackUrl?: string; // URL –¥–ª—è webhook callback
  seeds?: number; // seed –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º–æ—Å—Ç–∏)
  enableFallback?: boolean; // –≤–∫–ª—é—á–∏—Ç—å fallback –Ω–∞ –¥—Ä—É–≥–∏–µ –º–æ–¥–µ–ª–∏
  userId?: string;
  projectId?: number;
  botName?: string; // –∏–º—è –±–æ—Ç–∞ –¥–ª—è telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  isRu?: boolean; // —Ñ–ª–∞–≥ –¥–ª—è —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
}

interface KieAiResponse {
  success: boolean;
  data?: {
    videoUrl: string;
    duration: number;
    taskId?: string;
    status?: string;
  };
  cost: {
    usd: number;
    stars: number;
  };
  provider: string;
  model: string;
  processingTime?: number;
  error?: string;
  metadata?: {
    watermark?: string;
    seeds?: number;
    enableFallback?: boolean;
    imageCount?: number;
  };
}

export class KieAiService {
  private apiKey: string;
  private baseUrl: string = 'https://api.kie.ai/api/v1';
  
  constructor() {
    this.apiKey = process.env.KIE_AI_API_KEY || '';
    if (!this.apiKey) {
      console.warn('‚ö†Ô∏è KIE_AI_API_KEY not found. Kie.ai will not be available.');
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –∏ –±–∞–ª–∞–Ω—Å
   */
  async checkHealth(): Promise<boolean> {
    if (!this.apiKey) {
      return false;
    }
    
    try {
      const response = await axios.get(`${this.baseUrl}/chat/credit`, {
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json'
        },
        timeout: 10000
      });
      
      console.log('‚úÖ Kie.ai API –¥–æ—Å—Ç—É–ø–µ–Ω. –ö—Ä–µ–¥–∏—Ç—ã:', response.data.credits);
      return true;
    } catch (error) {
      console.error('‚ùå Kie.ai API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –∞–∫–∫–∞—É–Ω—Ç–∞
   */
  async getAccountBalance(): Promise<{ credits: number }> {
    if (!this.apiKey) {
      throw new Error('KIE_AI_API_KEY is required');
    }

    try {
      const response = await axios.get(`${this.baseUrl}/chat/credit`, {
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json'
        }
      });
      
      return { credits: response.data.credits || 0 };
    } catch (error) {
      console.error('Error getting Kie.ai balance:', error);
      throw new Error(`Failed to get balance: ${error.message}`);
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Kie.ai
   */
  async generateVideo(options: KieAiGenerationOptions): Promise<{
    videoUrl: string;
    cost: number;
    duration: number;
    processingTime: number;
    taskId?: string;
    status?: string;
    metadata?: any;
  }> {
    if (!this.apiKey) {
      throw new Error('KIE_AI_API_KEY is required for video generation');
    }

    const {
      model,
      prompt,
      duration,
      aspectRatio = '16:9',
      imageUrl,
      imageUrls,
      watermark,
      callBackUrl,
      seeds,
      enableFallback,
      userId,
      projectId,
      botName,
      isRu
    } = options;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
    const modelConfig = KIE_AI_MODELS[model];
    if (!modelConfig) {
      throw new Error(`Unsupported model: ${model}`);
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    let clampedDuration: number;
    
    // –í–ê–ñ–ù–û: Veo 3 Fast –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¢–û–õ–¨–ö–û 8 —Å–µ–∫—É–Ω–¥!
    if (model === 'veo3_fast') {
      clampedDuration = 8;
      if (duration !== 8) {
        console.log(`üö® CRITICAL: Veo 3 Fast supports ONLY 8 seconds! Forced duration from ${duration}s to 8s`);
      }
    } else {
      clampedDuration = Math.max(2, Math.min(modelConfig.maxDuration, duration));
      if (clampedDuration !== duration) {
        console.log(`‚ö†Ô∏è Duration adjusted from ${duration}s to ${clampedDuration}s for ${model}`);
      }
    }

    // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    const costUSD = clampedDuration * modelConfig.pricePerSecond;

    const startTime = Date.now();

    try {
      console.log(`üé¨ Starting ${model} generation via Kie.ai...`);
      console.log(`   ‚Ä¢ Prompt: ${prompt}`);
      console.log(`   ‚Ä¢ Duration: ${clampedDuration}s`);  
      console.log(`   ‚Ä¢ Aspect Ratio: ${aspectRatio}`);
      console.log(`   ‚Ä¢ Estimated cost: $${costUSD.toFixed(3)}`);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
      if (imageUrls && imageUrls.length > 0) {
        console.log(`   ‚Ä¢ Images: ${imageUrls.length} image(s) provided`);
      } else if (imageUrl) {
        console.log(`   ‚Ä¢ Image: single image provided (deprecated)`);
      }
      if (watermark) console.log(`   ‚Ä¢ Watermark: ${watermark}`);
      if (callBackUrl) console.log(`   ‚Ä¢ Callback URL: ${callBackUrl}`);
      if (seeds !== undefined) console.log(`   ‚Ä¢ Seed: ${seeds}`);
      if (enableFallback !== undefined) console.log(`   ‚Ä¢ Fallback: ${enableFallback}`);
      

      // –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ Kie.ai API
      const requestBody: any = {
        model: model,
        prompt: prompt,
        aspectRatio: aspectRatio
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç imageUrls –Ω–∞–¥ imageUrl –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      if (imageUrls && imageUrls.length > 0) {
        requestBody.imageUrls = imageUrls;
      } else if (imageUrl) {
        // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ API –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        requestBody.imageUrls = [imageUrl];
      }
      
      if (watermark) requestBody.watermark = watermark;
      if (callBackUrl) requestBody.callBackUrl = callBackUrl;
      if (seeds !== undefined) requestBody.seeds = seeds;
      if (enableFallback !== undefined) requestBody.enableFallback = enableFallback;
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è callback URL –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
      if (callBackUrl) {
        try {
          new URL(callBackUrl);
        } catch (error) {
          throw new Error(`Invalid callback URL: ${callBackUrl}`);
        }
      }

      const response = await axios.post(`${this.baseUrl}/veo/generate`, requestBody, {
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json'
        },
        timeout: 300000 // 5 –º–∏–Ω—É—Ç –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
      });

      // Kie.ai –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç {code: 200, msg: "success", data: {...}}
      if (response.data.code !== 200) {
        throw new Error(response.data.msg || 'Video generation failed');
      }

      if (!response.data.data || !response.data.data.taskId) {
        throw new Error('Invalid response from Kie.ai: missing taskId');
      }

      const taskId = response.data.data.taskId;
      console.log(`üìã Task created with ID: ${taskId}`);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      if (options.userId || options.projectId) {
        try {
          const taskRecord = {
            task_id: taskId,
            provider: 'kie-ai',
            telegram_id: options.userId,
            bot_name: botName,
            is_ru: isRu,
            model: model,
            prompt: prompt,
            status: 'processing',
            metadata: {
              duration: clampedDuration,
              aspectRatio: aspectRatio,
              cost: costUSD,
              projectId: options.projectId,
              watermark: watermark,
              seeds: seeds,
              enableFallback: enableFallback,
              imageCount: imageUrls?.length || (imageUrl ? 1 : 0),
              callBackUrl: callBackUrl
            }
          };
          
          const { error: insertError } = await supabase
            .from('video_tasks')
            .insert(taskRecord);
          
          if (insertError) {
            // –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–¥–∏–º –µ—ë
            if (insertError.code === '42P01') {
              await this.createVideoTasksTable();
              // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤—Å—Ç–∞–≤–∫–∏
              await supabase.from('video_tasks').insert(taskRecord);
            } else {
              logger.warn('Failed to save task to database:', insertError);
            }
          }
          
          logger.info(`‚úÖ Task ${taskId} saved to database`);
        } catch (dbError) {
          logger.error('Error saving task to database:', dbError);
          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –∑–∞–¥–∞—á–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞
        }
      }
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
      console.log('‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ...');
      console.log(`üìã Task ID: ${taskId}`);
      
      // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (–º–∞–∫—Å–∏–º—É–º 5 –º–∏–Ω—É—Ç)
      const maxWaitTime = 300000; // 5 –º–∏–Ω—É—Ç
      const pollInterval = 15000; // –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 15 —Å–µ–∫—É–Ω–¥
      const maxAttempts = Math.floor(maxWaitTime / pollInterval);
      
      let videoUrl: string | null = null;
      let attempts = 0;
      
      while (attempts < maxAttempts && !videoUrl) {
        attempts++;
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${attempts}/${maxAttempts})...`);
        
        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ Kie.ai
          const statusResponse = await axios.get(`${this.baseUrl}/veo/task/${taskId}`, {
            headers: {
              'Authorization': `Bearer ${this.apiKey}`,
              'Content-Type': 'application/json'
            },
            timeout: 10000
          });
          
          if (statusResponse.data.code === 200 && statusResponse.data.data) {
            const taskData = statusResponse.data.data;
            console.log(`üìä –°—Ç–∞—Ç—É—Å: ${taskData.status}`);
            
            if (taskData.status === 'completed' && taskData.videoUrl) {
              videoUrl = taskData.videoUrl;
              console.log(`‚úÖ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ! URL: ${videoUrl}`);
              break;
            } else if (taskData.status === 'failed') {
              throw new Error(`Video generation failed: ${taskData.error || 'Unknown error'}`);
            }
            // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å processing, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
          }
        } catch (statusError: any) {
          console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${statusError.message}`);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å, –≤–æ–∑–º–æ–∂–Ω–æ API –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        }
        
        if (!videoUrl && attempts < maxAttempts) {
          console.log(`‚è≥ –ñ–¥–µ–º ${pollInterval/1000} —Å–µ–∫—É–Ω–¥...`);
          await new Promise(resolve => setTimeout(resolve, pollInterval));
        }
      }
      
      if (!videoUrl) {
        console.log('‚ö†Ô∏è Timeout: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–Ω—è–ª–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏');
        throw new Error(`Video generation timeout after ${maxWaitTime/1000} seconds. Task ID: ${taskId}`);
      }

      const processingTime = Date.now() - startTime;

      console.log(`‚è±Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${processingTime}ms`);
      console.log(`   ‚Ä¢ Task ID: ${taskId}`);
      console.log(`   ‚Ä¢ Video URL: ${videoUrl}`);
      console.log(`   ‚Ä¢ Cost: $${costUSD.toFixed(3)}`);
      console.log(`   ‚Ä¢ Attempts: ${attempts}/${maxAttempts}`);

      return {
        videoUrl: videoUrl,
        cost: costUSD,
        duration: clampedDuration,
        processingTime,
        taskId: taskId,
        status: 'completed'
      };

    } catch (error: any) {
      console.error(`‚ùå Kie.ai ${model} generation failed:`, error.response?.data || error.message);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ Kie.ai
      if (error.response?.status === 401) {
        throw new Error('Invalid Kie.ai API key. Please check KIE_AI_API_KEY environment variable.');
      } else if (error.response?.status === 402) {
        throw new Error('Insufficient credits in Kie.ai account. Please top up your balance.');
      } else if (error.response?.status === 429) {
        throw new Error('Rate limit exceeded. Please wait before making another request.');
      }
      
      throw new Error(`Kie.ai video generation failed: ${error.message}`);
    }
  }

  /**
   * –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  calculateCost(model: string, durationSeconds: number): number {
    const modelConfig = KIE_AI_MODELS[model as keyof typeof KIE_AI_MODELS];
    if (!modelConfig) {
      throw new Error(`Unknown model: ${model}`);
    }
    
    return durationSeconds * modelConfig.pricePerSecond;
  }

  /**
   * –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ –∑–≤–µ–∑–¥–∞—Ö —Å –Ω–∞—Ü–µ–Ω–∫–æ–π
   */
  calculateCostInStars(model: string, durationSeconds: number): number {
    // –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã
    const STAR_COST_USD = 0.016; // $0.016 –∑–∞ –∑–≤–µ–∑–¥—É
    const MARKUP_RATE = 1.5; // –Ω–∞—Ü–µ–Ω–∫–∞ 50%
    
    const baseCostUSD = this.calculateCost(model, durationSeconds);
    const baseCostStars = baseCostUSD / STAR_COST_USD;
    const finalCostStars = baseCostStars * MARKUP_RATE;
    
    return Math.floor(finalCostStars);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –º–æ–¥–µ–ª–∏
   */
  isModelSupported(model: string): boolean {
    return model in KIE_AI_MODELS;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª–∏
   */
  getModelInfo(model: string) {
    return KIE_AI_MODELS[model as keyof typeof KIE_AI_MODELS] || null;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
   */
  getAllModels() {
    return KIE_AI_MODELS;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
   * –í–ê–ñ–ù–û: –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ Kie.ai API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
   * –≠—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
   */
  async checkVideoStatus(taskId: string): Promise<{
    status: 'processing' | 'completed' | 'failed';
    videoUrl?: string;
    error?: string;
  }> {
    console.log(`üìã Checking status for task: ${taskId}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    try {
      const { data, error } = await supabase
        .from('video_tasks')
        .select('status, video_url, error_message')
        .eq('task_id', taskId)
        .single();
      
      if (error || !data) {
        return {
          status: 'processing',
          error: 'Task not found in database'
        };
      }
      
      return {
        status: data.status as 'processing' | 'completed' | 'failed',
        videoUrl: data.video_url,
        error: data.error_message
      };
    } catch (err) {
      logger.error('Error checking video status:', err);
      return {
        status: 'processing',
        error: 'Failed to check status'
      };
    }
  }
  
  /**
   * –°–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –≤–∏–¥–µ–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  private async createVideoTasksTable(): Promise<void> {
    const createTableQuery = `
      CREATE TABLE IF NOT EXISTS video_tasks (
        id SERIAL PRIMARY KEY,
        task_id VARCHAR(255) UNIQUE NOT NULL,
        provider VARCHAR(50) NOT NULL,
        telegram_id VARCHAR(255),
        bot_name VARCHAR(100),
        model VARCHAR(100),
        prompt TEXT,
        status VARCHAR(50) DEFAULT 'processing',
        video_url TEXT,
        error_message TEXT,
        is_ru BOOLEAN DEFAULT false,
        metadata JSONB,
        created_at TIMESTAMP DEFAULT NOW(),
        completed_at TIMESTAMP
      );
      
      CREATE INDEX IF NOT EXISTS idx_video_tasks_telegram_id ON video_tasks(telegram_id);
      CREATE INDEX IF NOT EXISTS idx_video_tasks_status ON video_tasks(status);
    `;
    
    try {
      await supabase.rpc('exec_sql', { sql: createTableQuery });
      logger.info('‚úÖ video_tasks table created successfully');
    } catch (error) {
      logger.error('Failed to create video_tasks table:', error);
    }
  }
}
