import { Request, Response } from 'express'
import { logger } from '@/utils/logger'
import {
  updateUserSubscription,
  updateUserBalanceRobokassa,
} from '@/core/supabase' // –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—É—Ç–∏ –∏–º–ø–æ—Ä—Ç–∞ –≤–µ—Ä–Ω—ã
import { sendPaymentNotification } from '@/price/helpers' // –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—É—Ç—å –∏–º–ø–æ—Ä—Ç–∞ –≤–µ—Ä–µ–Ω
import { createBotByName } from '@/config' // –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—É—Ç—å –∏–º–ø–æ—Ä—Ç–∞ –≤–µ—Ä–µ–Ω
import { errorMessageAdmin } from '@/helpers/errorMessageAdmin' // –£–±–µ–¥–∏—Å—å, —á—Ç–æ –ø—É—Ç—å –∏–º–ø–æ—Ä—Ç–∞ –≤–µ—Ä–µ–Ω
import { supabase } from '@/core/supabase'
import { notifyBotOwners } from '@/core/supabase'
// --- –ö–û–ù–°–¢–ê–ù–¢–´ (–∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–¥–∞) ---
const PAYMENT_OPTIONS = [
  { amount: 500, stars: 217 },
  { amount: 1000, stars: 434 },
  { amount: 2000, stars: 869 },
  { amount: 5000, stars: 2173 },
  { amount: 10000, stars: 4347 },
  { amount: 10, stars: 6 },
]

const SUBSCRIPTION_PLANS = [
  {
    row: 0,
    text: 'üé® NeuroPhoto',
    en_price: 10,
    ru_price: 1110,
    description: 'Creating photos using neural networks.',
    stars_price: 476,
    callback_data: 'neurophoto',
  },
  {
    row: 1,
    text: 'üìö NeuroBase',
    en_price: 33,
    ru_price: 2999,
    description: 'Self-study using neural networks with an AI avatar.',
    stars_price: 1303,
    callback_data: 'neurobase',
  },
  {
    row: 2,
    text: 'ü§ñ NeuroBlogger',
    en_price: 833,
    ru_price: 75000,
    description: 'Training on neural networks with a mentor.',
    stars_price: 32608,
    callback_data: 'neuroblogger',
  },
]

const SUBSCRIPTION_AMOUNTS = SUBSCRIPTION_PLANS.reduce((acc, plan) => {
  acc[plan.ru_price] = plan.callback_data
  return acc
}, {})
// --- –ö–û–ù–ï–¶ –ö–û–ù–°–¢–ê–ù–¢ ---

export class PaymentService {
  public async processPayment(
    roundedIncSum: number,
    inv_id: string,
    res: Response
  ): Promise<void> {
    // --- –î–û–ë–ê–í–õ–ï–ù–û: –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ ---
    if (!roundedIncSum || !inv_id) {
      logger.error('[PaymentSuccess] Missing required parameters', {
        roundedIncSum,
        inv_id,
      })
      // –û—Ç–≤–µ—á–∞–µ–º –æ—à–∏–±–∫–æ–π, –∞ –Ω–µ OK
      throw new Error('Missing parameters')
      return
    }

    let invId: number
    let outSum: number
    try {
      invId = parseInt(inv_id, 10)
      outSum = parseFloat(roundedIncSum.toString()) // –ò—Å–ø–æ–ª—å–∑—É–µ–º parseFloat –¥–ª—è —Å—É–º–º—ã
      if (isNaN(invId) || isNaN(outSum)) {
        throw new Error('Invalid InvId or OutSum format')
      }
    } catch (parseError) {
      logger.error('[PaymentSuccess] Error parsing InvId or OutSum', {
        inv_id,
        roundedIncSum,
        error: parseError,
      })
      throw new Error('Invalid parameter format')
    }

    // --- –î–û–ë–ê–í–õ–ï–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ (–í–ê–ñ–ù–û!) ---
    // –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ–¥–ø–∏—Å–∏, –∫–∞–∫ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º robokassa.handler.ts
    // const robokassaPassword2 = process.env.PASSWORD2; // –ü–æ–ª—É—á–∏—Ç—å –∏–∑ env
    // if (!validateRobokassaSignature(body, robokassaPassword2)) {
    //    logger.warn('[PaymentSuccess] Invalid signature received');
    //    res.status(400).send('Bad Request: Invalid signature');
    //    return;
    // }
    // logger.info(`[PaymentSuccess] Signature validated successfully for InvId: ${invId}`);
    // –ü–æ–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, —Ç.–∫. –≤ –ª–æ–≥–∞—Ö –ø–æ–¥–ø–∏—Å—å –±—ã–ª–∞ –≤–∞–ª–∏–¥–Ω–∞, –Ω–æ —ç—Ç–æ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å!

    // --- –ù–ê–ß–ê–õ–û –°–¢–ê–†–û–ô –õ–û–ì–ò–ö–ò processPayment (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ) ---
    try {
      let stars = 0
      let subscription = ''

      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—É–º–º–∞ –æ–¥–Ω–æ–º—É –∏–∑ —Ç–∞—Ä–∏—Ñ–æ–≤
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º outSum (—Å—É–º–º–∞, –ø–æ–ª—É—á–µ–Ω–Ω–∞—è –æ—Ç Robokassa)
      if (SUBSCRIPTION_AMOUNTS[outSum]) {
        const plan = SUBSCRIPTION_PLANS.find(p => p.ru_price === outSum)
        if (plan) {
          stars = plan.stars_price
          subscription = plan.callback_data // 'neurobase', 'neurophoto' etc.
        }
      }
      // 2. –ï—Å–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–∞—Ä–∏—Ñ—É, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã
      else {
        const option = PAYMENT_OPTIONS.find(opt => opt.amount === outSum)
        if (option) {
          stars = option.stars
        }
      }

      logger.info(
        `[PaymentSuccess] Determined stars: ${stars}, subscription: ${
          subscription || 'none'
        }`
      )

      if (stars > 0) {
        // --- –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î ---
        // –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏ –ø–æ–ª—É—á–∏—Ç—å telegram_id –∏ —Ç.–¥.
        // –í–º–µ—Å—Ç–æ getTelegramIdFromInvId, –ª—É—á—à–µ –ø–æ–ª—É—á–∏—Ç—å –≤—Å—é –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞
        const { data: paymentData, error: paymentError } = await supabase
          .from('payments_v2')
          .select('*') // –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ–ª—è, –≤–∫–ª—é—á–∞—è telegram_id, bot_name, status
          .eq('inv_id', invId)
          .maybeSingle()

        logger.info(
          `[PaymentSuccess] Payment data: ${JSON.stringify(paymentData)}`
        )

        if (paymentError || !paymentData) {
          logger.error(
            `[PaymentSuccess] Error fetching payment or payment not found for InvId: ${invId}`,
            paymentError
          )
          // –û—Ç–≤–µ—á–∞–µ–º OK, —á—Ç–æ–±—ã Robokassa –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª–∞, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º
          throw new Error('Payment not found')
          return
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –ª–∏ —É–∂–µ
        if (paymentData.status === 'COMPLETED') {
          logger.warn(
            `[PaymentSuccess] Payment InvId: ${invId} already processed.`
          )
          throw new Error('Payment already processed')
          return
        }

        // --- –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ ---
        const { error: updateError } = await supabase
          .from('payments_v2')
          .update({ status: 'COMPLETED', stars: stars }) // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –∫–æ–ª-–≤–æ –∑–≤–µ–∑–¥
          .eq('inv_id', invId)

        if (updateError) {
          logger.error(
            `[PaymentSuccess] Error updating payment status for InvId: ${invId}`,
            updateError
          )
          // –ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª, –Ω–æ —Å—Ç–∞—Ç—É—Å –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è. –ö—Ä–∏—Ç–∏—á–Ω–æ.
          throw new Error('Payment status not updated')
          return
        }
        logger.info(
          `[PaymentSuccess] Payment status updated to COMPLETED for InvId: ${invId}`
        )

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        const telegram_id = paymentData.telegram_id
        const bot_name = paymentData.bot_name
        // –ù—É–∂–Ω—ã –µ—â–µ username –∏ language –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –ø–æ–ª—É—á–∏–º –∏—Ö –æ—Ç–¥–µ–ª—å–Ω–æ
        // TODO: –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ username/language –∏–∑ users –ø–æ telegram_id, –µ—Å–ª–∏ –æ–Ω–∏ –Ω—É–∂–Ω—ã –¥–ª—è sendPaymentNotification

        const { data: userData } = await supabase
          .from('users')
          .select('username, language_code')
          .eq('telegram_id', telegram_id)
          .maybeSingle()

        const username = userData?.username || 'User' // Placeholder
        const language_code = userData?.language_code || 'ru' // Placeholder

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –ø–æ —Å—É–º–º–µ
        if (subscription) {
          await updateUserSubscription(telegram_id, subscription)
          logger.info(
            `[PaymentSuccess] Subscription updated to ${subscription} for ${telegram_id}`
          )
        } else {
          // –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ - –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
          await updateUserBalanceRobokassa(
            // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            telegram_id,
            stars,
            'money_income',
            `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ Robokassa (InvId: ${invId})`,
            { payment_id: paymentData.id } // –ü–µ—Ä–µ–¥–∞–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ –ë–î
          )
          logger.info(
            `[PaymentSuccess] Balance updated via updateUserBalance for ${telegram_id} by ${stars}`
          )
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        try {
          const botData = createBotByName(bot_name)
          if (botData) {
            const { bot, groupId } = botData
            logger.info(
              `[PaymentSuccess] Sending notification to user ${bot_name}, telegram_id: ${telegram_id}, amount: ${outSum}, stars: ${stars}, language_code: ${language_code}, username: ${username}, groupId: ${groupId}`
            )
            await sendPaymentNotification({
              amount: outSum.toString(),
              stars,
              telegramId: telegram_id.toString(),
              language_code,
              username,
              groupId,
              bot,
              subscription,
            })
            logger.info(
              `[PaymentSuccess] Notification sent to user ${telegram_id}`
            )
            notifyBotOwners(bot_name, {
              username,
              telegram_id: telegram_id.toString(),
              amount: outSum,
              stars,
              subscription: subscription,
            })
          } else {
            logger.error(
              `[PaymentSuccess] Could not create bot instance for bot ${bot_name}`
            )
          }
        } catch (notifyError) {
          logger.error(
            `[PaymentSuccess] Failed to send notification for InvId ${invId}`,
            notifyError
          )
        }
      } else {
        logger.warn(
          `[PaymentSuccess] No stars determined for InvId: ${invId}, amount: ${outSum}. No action taken.`
        )
      }

      // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç Robokassa
      res.status(200).send(`OK${invId}`)
    } catch (error) {
      logger.error('[PaymentSuccess] Error processing payment:', {
        inv_id: invId, // –ò—Å–ø–æ–ª—å–∑—É–µ–º invId, –∫–æ—Ç–æ—Ä—ã–π —Ç–æ—á–Ω–æ —á–∏—Å–ª–æ
        error: error.message,
        stack: error.stack,
      })
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º invId –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –¥–∞–∂–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã Robokassa –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª–∞
      res.status(200).send(`OK${invId}`)
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
      // const { telegram_id, language } = await getTelegramIdFromInvId(invId.toString()); // –ù—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ invId –Ω–µ –Ω–∞–π–¥–µ–Ω
      // errorMessage(error as Error, telegram_id, language === 'ru');
      errorMessageAdmin(error as Error)
    }
  }
}

// –û—Å—Ç–∞–≤–ª—è–µ–º —ç–∫—Å–ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–æ—É—Ç–∞
export default new PaymentService()
