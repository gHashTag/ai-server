/**
 * üöÄ Background Morphing Processor
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–æ—Ä—Ñ–∏–Ω–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Inngest
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */

import { logger } from '@/utils/logger'
import { createKlingMorphingVideo } from '@/core/kling'
import { MorphingType } from '@/interfaces/morphing.interface'
import { getBotByName } from '@/core/bot'
import fs from 'fs'
import path from 'path'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
export interface BackgroundMorphingJob {
  id: string
  telegram_id: string
  bot_name: string
  morphing_type: 'seamless' | 'loop'
  image_files: Array<{
    filename: string
    path: string
    order: number
  }>
  extraction_path: string
  is_ru: boolean
  status: 'pending' | 'processing' | 'completed' | 'failed'
  created_at: Date
  started_at?: Date
  completed_at?: Date
  error_message?: string
  progress: {
    total_pairs: number
    completed_pairs: number
    current_pair?: string
    estimated_remaining_minutes?: number
  }
  result?: {
    final_video_path: string
    processing_time_ms: number
    pairs_processed: number
  }
}

// In-memory —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞–Ω–∏–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ Redis/PostgreSQL)
const activeJobs = new Map<string, BackgroundMorphingJob>()
const jobQueue: string[] = [] // –û—á–µ—Ä–µ–¥—å –∑–∞–¥–∞–Ω–∏–π
let isProcessing = false

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –º–æ—Ä—Ñ–∏–Ω–≥–∞ –≤ –æ—á–µ—Ä–µ–¥—å
 */
export async function addMorphingJob(
  jobData: Omit<
    BackgroundMorphingJob,
    'id' | 'status' | 'created_at' | 'progress'
  >
): Promise<string> {
  const jobId = `morphing_${jobData.telegram_id}_${Date.now()}`

  const job: BackgroundMorphingJob = {
    ...jobData,
    id: jobId,
    status: 'pending',
    created_at: new Date(),
    progress: {
      total_pairs:
        jobData.image_files.length -
        1 +
        (jobData.morphing_type === 'loop' ? 1 : 0),
      completed_pairs: 0,
    },
  }

  activeJobs.set(jobId, job)
  jobQueue.push(jobId)

  logger.info('üöÄ –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –º–æ—Ä—Ñ–∏–Ω–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å:', {
    job_id: jobId,
    telegram_id: jobData.telegram_id,
    image_count: jobData.image_files.length,
    total_pairs: job.progress.total_pairs,
    queue_position: jobQueue.length,
  })

  // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –µ—Å–ª–∏ –æ–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
  if (!isProcessing) {
    processJobQueue()
  }

  return jobId
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞–Ω–∏—è –ø–æ ID
 */
export function getJobStatus(jobId: string): BackgroundMorphingJob | null {
  return activeJobs.get(jobId) || null
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function getUserJobs(telegramId: string): BackgroundMorphingJob[] {
  return Array.from(activeJobs.values()).filter(
    job => job.telegram_id === telegramId
  )
}

/**
 * –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞–Ω–∏–π
 */
async function processJobQueue(): Promise<void> {
  if (isProcessing) {
    logger.warn('‚ö†Ô∏è –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω')
    return
  }

  isProcessing = true
  logger.info('üîÑ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—á–µ—Ä–µ–¥–∏ –º–æ—Ä—Ñ–∏–Ω–≥–∞')

  while (jobQueue.length > 0) {
    const jobId = jobQueue.shift()!
    const job = activeJobs.get(jobId)

    if (!job) {
      logger.warn('‚ö†Ô∏è –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö:', { job_id: jobId })
      continue
    }

    try {
      await processSingleJob(job)
    } catch (error) {
      logger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞–Ω–∏—è:', {
        job_id: jobId,
        error: error instanceof Error ? error.message : String(error),
      })

      // –ü–æ–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –Ω–µ—É–¥–∞—á–Ω–æ–µ
      job.status = 'failed'
      job.error_message = error instanceof Error ? error.message : String(error)
      job.completed_at = new Date()
    }
  }

  isProcessing = false
  logger.info('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≤–µ—Ä—à–µ–Ω')
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ –º–æ—Ä—Ñ–∏–Ω–≥–∞
 */
async function processSingleJob(job: BackgroundMorphingJob): Promise<void> {
  logger.info('üé¨ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞–Ω–∏—è:', {
    job_id: job.id,
    telegram_id: job.telegram_id,
    image_count: job.image_files.length,
    total_pairs: job.progress.total_pairs,
  })

  try {
    // 1. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    job.status = 'processing'
    job.started_at = new Date()

    // 2. –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ
    await notifyUserStart(job)

    // 3. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –ø–∞—Ä—ã
    const pairVideoUrls = await processAllPairs(job)

    // 4. –°–∫–ª–µ–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
    const finalVideoPath = await concatenateAllVideos(job, pairVideoUrls)

    // 5. –î–æ—Å—Ç–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await deliverResult(job, finalVideoPath)

    // 6. –ó–∞–≤–µ—Ä—à–∞–µ–º —É—Å–ø–µ—à–Ω–æ
    job.status = 'completed'
    job.completed_at = new Date()
    job.result = {
      final_video_path: finalVideoPath,
      processing_time_ms:
        job.completed_at.getTime() - job.started_at!.getTime(),
      pairs_processed: job.progress.completed_pairs,
    }

    logger.info('üéâ –ó–∞–¥–∞–Ω–∏–µ –º–æ—Ä—Ñ–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ:', {
      job_id: job.id,
      telegram_id: job.telegram_id,
      processing_time_minutes: Math.round(
        job.result.processing_time_ms / 60000
      ),
      pairs_processed: job.result.pairs_processed,
    })

    // 7. –û—á–∏—Å—Ç–∫–∞ —á–µ—Ä–µ–∑ —á–∞—Å
    setTimeout(() => {
      cleanupJob(job.id)
    }, 60 * 60 * 1000) // 1 —á–∞—Å
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞–Ω–∏—è:', {
      job_id: job.id,
      telegram_id: job.telegram_id,
      error: error instanceof Error ? error.message : String(error),
    })

    job.status = 'failed'
    job.error_message = error instanceof Error ? error.message : String(error)
    job.completed_at = new Date()

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
    await notifyUserError(
      job,
      error instanceof Error ? error.message : String(error)
    )
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –ø–∞—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
async function processAllPairs(job: BackgroundMorphingJob): Promise<string[]> {
  const pairVideoUrls: string[] = []
  const morphingType =
    job.morphing_type === 'seamless' ? MorphingType.SEAMLESS : MorphingType.LOOP

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä—ã (i -> i+1)
  for (let i = 0; i < job.image_files.length - 1; i++) {
    const pairIndex = i + 1
    const image1 = job.image_files[i]
    const image2 = job.image_files[i + 1]

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    job.progress.current_pair = `${image1.filename} ‚Üí ${image2.filename}`
    const remainingPairs =
      job.progress.total_pairs - job.progress.completed_pairs
    job.progress.estimated_remaining_minutes = remainingPairs * 5 // ~5 –º–∏–Ω—É—Ç –Ω–∞ –ø–∞—Ä—É

    logger.info(
      `üé¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä—É ${pairIndex}/${job.image_files.length - 1}:`,
      {
        job_id: job.id,
        telegram_id: job.telegram_id,
        pair_index: pairIndex,
        from: image1.filename,
        to: image2.filename,
        remaining_pairs: remainingPairs,
        estimated_remaining_minutes: job.progress.estimated_remaining_minutes,
      }
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    if (!fs.existsSync(image1.path) || !fs.existsSync(image2.path)) {
      throw new Error(`Image files not found: ${image1.path} or ${image2.path}`)
    }

    // –°–æ–∑–¥–∞–µ–º –º–æ—Ä—Ñ–∏–Ω–≥ –≤–∏–¥–µ–æ
    const result = await createKlingMorphingVideo(
      [
        { ...image1, originalName: image1.filename },
        { ...image2, originalName: image2.filename },
      ],
      morphingType,
      job.telegram_id
    )

    if (!result.success || !result.video_url) {
      throw new Error(`Pair ${pairIndex} morphing failed: ${result.error}`)
    }

    pairVideoUrls.push(result.video_url)
    job.progress.completed_pairs++

    logger.info(`‚úÖ –ü–∞—Ä–∞ ${pairIndex} –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`, {
      job_id: job.id,
      telegram_id: job.telegram_id,
      completed_pairs: job.progress.completed_pairs,
      total_pairs: job.progress.total_pairs,
      progress_percent: Math.round(
        (job.progress.completed_pairs / job.progress.total_pairs) * 100
      ),
    })
  }

  // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º LOOP –ø–∞—Ä—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
  if (morphingType === MorphingType.LOOP && job.image_files.length > 2) {
    const lastImage = job.image_files[job.image_files.length - 1]
    const firstImage = job.image_files[0]

    job.progress.current_pair = `${lastImage.filename} ‚Üí ${firstImage.filename} (LOOP)`

    logger.info(`üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º LOOP –ø–∞—Ä—É:`, {
      job_id: job.id,
      telegram_id: job.telegram_id,
      from: lastImage.filename,
      to: firstImage.filename,
    })

    const result = await createKlingMorphingVideo(
      [
        { ...lastImage, originalName: lastImage.filename },
        { ...firstImage, originalName: firstImage.filename },
      ],
      morphingType,
      job.telegram_id
    )

    if (!result.success || !result.video_url) {
      throw new Error(`Loop pair morphing failed: ${result.error}`)
    }

    pairVideoUrls.push(result.video_url)
    job.progress.completed_pairs++

    logger.info(`‚úÖ LOOP –ø–∞—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`, {
      job_id: job.id,
      telegram_id: job.telegram_id,
    })
  }

  return pairVideoUrls
}

/**
 * –°–∫–ª–µ–∏–≤–∞–µ—Ç –≤—Å–µ –≤–∏–¥–µ–æ –≤ –æ–¥–Ω–æ
 */
async function concatenateAllVideos(
  job: BackgroundMorphingJob,
  videoUrls: string[]
): Promise<string> {
  logger.info('üé¨ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–ª–µ–π–∫—É –≤—Å–µ—Ö –≤–∏–¥–µ–æ:', {
    job_id: job.id,
    telegram_id: job.telegram_id,
    video_count: videoUrls.length,
  })

  // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –≤–∏–¥–µ–æ
  const tempDir = path.join(
    process.cwd(),
    'tmp',
    'concatenation',
    job.telegram_id,
    Date.now().toString()
  )
  await fs.promises.mkdir(tempDir, { recursive: true })

  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –≤–∏–¥–µ–æ –ª–æ–∫–∞–ª—å–Ω–æ
    const localVideoPaths: string[] = []

    for (let i = 0; i < videoUrls.length; i++) {
      const videoUrl = videoUrls[i]
      const localPath = path.join(tempDir, `video_${i + 1}.mp4`)

      logger.info(`‚¨áÔ∏è –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ ${i + 1}/${videoUrls.length}:`, {
        job_id: job.id,
        video_url: videoUrl,
        local_path: localPath,
      })

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
      const axios = require('axios')
      const response = await axios.get(videoUrl, {
        responseType: 'stream',
        timeout: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
      })

      const writer = fs.createWriteStream(localPath)
      response.data.pipe(writer)

      await new Promise<void>((resolve, reject) => {
        writer.on('finish', () => resolve())
        writer.on('error', reject)
      })

      localVideoPaths.push(localPath)
    }

    // –°–∫–ª–µ–∏–≤–∞–µ–º –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é FFmpeg
    const outputPath = path.join(tempDir, `final_morphing_${Date.now()}.mp4`)
    const listFilePath = outputPath.replace('.mp4', '_list.txt')
    const listContent = localVideoPaths
      .map(videoPath => `file '${videoPath}'`)
      .join('\n')

    await fs.promises.writeFile(listFilePath, listContent)

    const { exec } = require('child_process')
    const { promisify } = require('util')
    const execAsync = promisify(exec)

    const ffmpegCommand = `ffmpeg -f concat -safe 0 -i "${listFilePath}" -c copy "${outputPath}"`

    logger.info('üîß –í—ã–ø–æ–ª–Ω—è–µ–º FFmpeg –∫–æ–º–∞–Ω–¥—É:', {
      job_id: job.id,
      command: ffmpegCommand,
      input_videos: localVideoPaths.length,
    })

    await execAsync(ffmpegCommand)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (!fs.existsSync(outputPath)) {
      throw new Error('Final video was not created by FFmpeg')
    }

    logger.info('‚úÖ –°–∫–ª–µ–π–∫–∞ –≤–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', {
      job_id: job.id,
      telegram_id: job.telegram_id,
      final_video_path: outputPath,
      input_videos: videoUrls.length,
    })

    // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (–∫—Ä–æ–º–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ)
    await fs.promises.unlink(listFilePath)
    for (const videoPath of localVideoPaths) {
      if (fs.existsSync(videoPath)) {
        await fs.promises.unlink(videoPath)
      }
    }

    return outputPath
  } catch (error) {
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    if (fs.existsSync(tempDir)) {
      await fs.promises.rm(tempDir, { recursive: true, force: true })
    }

    logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–∫–ª–µ–π–∫–∏ –≤–∏–¥–µ–æ:', {
      job_id: job.id,
      telegram_id: job.telegram_id,
      error: error instanceof Error ? error.message : String(error),
    })

    throw error
  }
}

/**
 * –î–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
async function deliverResult(
  job: BackgroundMorphingJob,
  videoPath: string
): Promise<void> {
  const botResult = getBotByName(job.bot_name)
  if (!botResult.bot) {
    throw new Error(`Bot ${job.bot_name} not found: ${botResult.error}`)
  }
  const bot = botResult.bot

  if (!fs.existsSync(videoPath)) {
    throw new Error(`Final video not found: ${videoPath}`)
  }

  const advertisementText = job.is_ru
    ? `‚ú® –°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é @${job.bot_name} ‚ú®`
    : `‚ú® Created with @${job.bot_name} ‚ú®`

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –≤–∏–¥–µ–æ —Å –ø—Ä–µ–≤—å—é
    await bot.telegram.sendVideo(
      job.telegram_id,
      { source: videoPath },
      {
        caption: job.is_ru
          ? `üéâ –í–∞—à–µ –º–æ—Ä—Ñ–∏–Ω–≥ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${job.progress.completed_pairs} –ø–∞—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π. ${advertisementText}`
          : `üéâ Your morphing video is ready! Processed ${job.progress.completed_pairs} image pairs. ${advertisementText}`,
        width: 1920,
        height: 1080,
        duration: 5,
        supports_streaming: true,
      }
    )

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    await bot.telegram.sendDocument(
      job.telegram_id,
      { source: videoPath },
      {
        caption: job.is_ru
          ? `‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ—Ñ–∞–π–ª: ${advertisementText}`
          : `‚¨áÔ∏è Download video file: ${advertisementText}`,
      }
    )

    logger.info('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', {
      job_id: job.id,
      telegram_id: job.telegram_id,
      video_path: videoPath,
    })
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:', {
      job_id: job.id,
      telegram_id: job.telegram_id,
      error: error instanceof Error ? error.message : String(error),
    })
    throw error
  }
}

/**
 * –£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
 */
async function notifyUserStart(job: BackgroundMorphingJob): Promise<void> {
  const botResult = getBotByName(job.bot_name)
  if (!botResult.bot) return
  const bot = botResult.bot

  const estimatedMinutes = job.progress.total_pairs * 5

  await bot.telegram.sendMessage(
    job.telegram_id,
    job.is_ru
      ? `üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ—Ä—Ñ–∏–Ω–≥ –≤–∏–¥–µ–æ!\n\nüìä –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: ${job.image_files.length}\nüé¨ –ü–∞—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${job.progress.total_pairs}\n‚è±Ô∏è –û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –≤—Ä–µ–º—è: ~${estimatedMinutes} –º–∏–Ω—É—Ç\n\nüí° –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å –∫–æ–≥–¥–∞ –≤–∏–¥–µ–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ. –í—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —á–∞—Ç –∏ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Å–≤–æ–∏–º–∏ –¥–µ–ª–∞–º–∏.`
      : `üöÄ Starting morphing video processing!\n\nüìä Images: ${job.image_files.length}\nüé¨ Pairs to process: ${job.progress.total_pairs}\n‚è±Ô∏è Estimated time: ~${estimatedMinutes} minutes\n\nüí° We'll notify you when the video is ready. You can close the chat and go about your business.`
  )
}

/**
 * –£–≤–µ–¥–æ–º–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –æ—à–∏–±–∫–µ
 */
async function notifyUserError(
  job: BackgroundMorphingJob,
  errorMessage: string
): Promise<void> {
  const botResult = getBotByName(job.bot_name)
  if (!botResult.bot) return
  const bot = botResult.bot

  await bot.telegram.sendMessage(
    job.telegram_id,
    job.is_ru
      ? `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ—Ä—Ñ–∏–Ω–≥ –≤–∏–¥–µ–æ:\n\n${errorMessage}\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.`
      : `‚ùå An error occurred while creating the morphing video:\n\n${errorMessage}\n\nPlease try again or contact support.`
  )
}

/**
 * –û—á–∏—â–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
 */
function cleanupJob(jobId: string): void {
  const job = activeJobs.get(jobId)
  if (!job) return

  // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
  if (job.extraction_path && fs.existsSync(job.extraction_path)) {
    fs.rmSync(job.extraction_path, { recursive: true, force: true })
  }

  // –£–¥–∞–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
  if (
    job.result?.final_video_path &&
    fs.existsSync(job.result.final_video_path)
  ) {
    fs.unlinkSync(job.result.final_video_path)
  }

  // –£–¥–∞–ª—è–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
  activeJobs.delete(jobId)

  logger.info('üßπ –ó–∞–¥–∞–Ω–∏–µ –æ—á–∏—â–µ–Ω–æ:', {
    job_id: jobId,
    telegram_id: job.telegram_id,
  })
}

/**
 * API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—á–µ—Ä–µ–¥–∏
 */
export function getQueueStats() {
  return {
    active_jobs: activeJobs.size,
    pending_jobs: jobQueue.length,
    is_processing: isProcessing,
    jobs_by_status: {
      pending: Array.from(activeJobs.values()).filter(
        j => j.status === 'pending'
      ).length,
      processing: Array.from(activeJobs.values()).filter(
        j => j.status === 'processing'
      ).length,
      completed: Array.from(activeJobs.values()).filter(
        j => j.status === 'completed'
      ).length,
      failed: Array.from(activeJobs.values()).filter(j => j.status === 'failed')
        .length,
    },
  }
}
