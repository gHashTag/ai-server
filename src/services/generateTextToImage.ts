import { ApiImageResponse, GenerationResult } from '@/interfaces'
import { replicate } from '@/core/replicate'
import { getAspectRatio, savePrompt } from '@/core/supabase'
import { downloadFile } from '@/helpers/downloadFile'
import { processApiResponse } from '@/helpers/processApiResponse'
import { pulse } from '@/helpers/pulse'
import bot from '@/core/bot'
import { IMAGES_MODELS } from '@/helpers/IMAGES_MODELS'

import { processBalanceOperation } from '@/price/helpers'
import { errorMessageAdmin } from '@/helpers/errorMessageAdmin'
import { errorMessage } from '@/helpers'

const supportedSizes = [
  '1024x1024',
  '1365x1024',
  '1024x1365',
  '1536x1024',
  '1024x1536',
  '1820x1024',
  '1024x1820',
  '1024x2048',
  '2048x1024',
  '1434x1024',
  '1024x1434',
  '1024x1280',
  '1280x1024',
  '1024x1707',
  '1707x1024',
]

export const generateTextToImage = async (
  prompt: string,
  model_type: string,
  num_images: number,
  telegram_id: number,
  username: string,
  is_ru: boolean
): Promise<GenerationResult[]> => {
  try {
    const modelKey = model_type.toLowerCase()
    const modelConfig = IMAGES_MODELS[modelKey]
    console.log(modelConfig)

    if (!modelConfig) {
      throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–æ–¥–µ–ª–∏: ${model_type}`)
    }

    const balanceCheck = await processBalanceOperation({
      telegram_id,
      paymentAmount: modelConfig.costPerImage * num_images,
      is_ru,
    })
    console.log(balanceCheck, 'balanceCheck')

    if (!balanceCheck.success) {
      throw new Error('Not enough stars')
    }

    const aspect_ratio = await getAspectRatio(telegram_id)

    let size: string
    if (model_type.toLowerCase() === 'recraft v3') {
      const [widthRatio, heightRatio] = aspect_ratio.split(':').map(Number)
      const baseWidth = 1024
      const calculatedHeight = Math.round(
        (baseWidth / widthRatio) * heightRatio
      )

      const calculatedSize = `${baseWidth}x${calculatedHeight}`

      size = supportedSizes.includes(calculatedSize)
        ? calculatedSize
        : '1024x1024'
    } else {
      size = undefined
    }

    const input = {
      prompt,
      ...(size ? { size } : { aspect_ratio }),
    }
    console.log(input, 'input')

    const results: GenerationResult[] = []

    for (let i = 0; i < num_images; i++) {
      try {
        const modelKey = Object.keys(IMAGES_MODELS).find(
          key => key === model_type.toLowerCase()
        ) as `${string}/${string}` | `${string}/${string}:${string}`
        console.log(modelKey, 'modelKey')
        if (num_images > 1) {
          bot.telegram.sendMessage(
            telegram_id,
            is_ru
              ? `‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${i + 1} –∏–∑ ${num_images}`
              : `‚è≥ Generating image ${i + 1} of ${num_images}`
          )
        } else {
          bot.telegram.sendMessage(
            telegram_id,
            is_ru ? '‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è...' : '‚è≥ Generating...',
            {
              reply_markup: { remove_keyboard: true },
            }
          )
        }

        const output: ApiImageResponse = (await replicate.run(modelKey, {
          input,
        })) as ApiImageResponse
        const imageUrl = await processApiResponse(output)
        const prompt_id = await savePrompt(
          prompt,
          modelKey,
          imageUrl,
          telegram_id
        )
        const image = await downloadFile(imageUrl)

        const imageBuffer = Buffer.isBuffer(image) ? image : Buffer.from(image)
        await bot.telegram.sendPhoto(telegram_id, { source: imageBuffer })
        await bot.telegram.sendMessage(
          telegram_id,
          is_ru
            ? `–í–∞—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â–µ, —Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –º–µ–Ω—é 1Ô∏è‚É£, 2Ô∏è‚É£, 3Ô∏è‚É£, 4Ô∏è‚É£.\n\n–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${balanceCheck.newBalance.toFixed(
                2
              )} ‚≠êÔ∏è`
            : `Your images have been generated!\n\nGenerate more?\n\nYour new balance: ${balanceCheck.newBalance.toFixed(
                2
              )} ‚≠êÔ∏è`,
          {
            reply_markup: {
              keyboard: [
                [
                  { text: '1Ô∏è‚É£' },
                  { text: '2Ô∏è‚É£' },
                  { text: '3Ô∏è‚É£' },
                  { text: '4Ô∏è‚É£' },
                ],
                [
                  { text: is_ru ? '‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç' : '‚¨ÜÔ∏è Improve prompt' },
                  { text: is_ru ? 'üìê –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä' : 'üìê Change size' },
                ],
                [{ text: is_ru ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu' }],
              ],
              resize_keyboard: true,
              one_time_keyboard: false,
            },
          }
        )
        const pulseImage = Buffer.isBuffer(image)
          ? `data:image/jpeg;base64,${image.toString('base64')}`
          : image
        await pulse(
          pulseImage,
          prompt,
          `/${model_type}`,
          telegram_id,
          username,
          is_ru
        )

        results.push({ image, prompt_id })
      } catch (error) {
        console.error(`–ü–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${i + 1}:`, error)

        let errorMessageToUser = '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.'

        if (error.message && error.message.includes('NSFW content detected')) {
          errorMessageToUser = is_ru
            ? '‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω NSFW –∫–æ–Ω—Ç–µ–Ω—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.'
            : '‚ùå NSFW content detected. Please try another prompt.'
        } else if (error.message) {
          const match = error.message.match(/{"detail":"(.*?)"/)
          if (match && match[1]) {
            errorMessageToUser = is_ru
              ? `‚ùå –û—à–∏–±–∫–∞: ${match[1]}`
              : `‚ùå Error: ${match[1]}`
          }
        } else {
          errorMessageToUser = is_ru
            ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
            : '‚ùå An error occurred. Please try again.'
        }
        await bot.telegram.sendMessage(telegram_id, errorMessageToUser)
        throw error
      }
    }

    return results
  } catch (error) {
    console.error('Error generating images:', error)
    errorMessage(error as Error, telegram_id.toString(), is_ru)
    errorMessageAdmin(error as Error)
    throw error
  }
}
