import axios, { AxiosInstance, AxiosRequestConfig } from 'axios'
import { logger } from '@utils/logger'

interface DartAITask {
  id: string
  htmlUrl?: string
  title: string
  description?: string
  parentId?: string
  dartboard?: string
  type?: string
  status?: 'To-do' | 'Doing' | 'Done' | null
  assignee?: string
  assignees?: string[]
  tags?: string[]
  priority?: string
  startAt?: string
  dueAt?: string
  size?: string
  timeTracking?: string
  customProperties?: Record<string, any>
  taskRelationships?: Record<string, any>
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
  github_issue_number?: number
  github_repository?: string
  createdAt?: string
  updatedAt?: string
  metadata?: Record<string, any>
}

interface DartAISpace {
  duid: string
  title: string
  description?: string
  kind: 'Workspace' | 'Personal'
  iconKind?: string
  iconNameOrEmoji?: string
  colorHex?: string
}

interface GitHubIssue {
  number: number
  title: string
  body?: string
  state: 'open' | 'closed'
  repository: string
  assignees: string[]
  labels: string[]
  created_at: string
  updated_at: string
}

interface SyncResult {
  success: boolean
  tasks_created?: number
  tasks_updated?: number
  issues_created?: number
  issues_updated?: number
  errors?: string[]
}

/**
 * Dart AI Task Manager Integration Service
 * –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –ø–æ–ª–Ω—É—é –¥–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–Ω—é—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é: Dart AI ‚Üî GitHub Issues
 * - GitHub ‚Üí Dart AI: —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á —á–µ—Ä–µ–∑ POST /api/v0/public/tasks
 * - Dart AI ‚Üí GitHub: —Å–æ–∑–¥–∞–Ω–∏–µ GitHub Issues –∏–∑ –∑–∞–¥–∞—á
 * - Webhook –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 */
export class DartAIService {
  private readonly apiClient: AxiosInstance
  private readonly apiUrl: string
  private readonly apiKey: string
  private readonly githubToken: string
  private readonly syncStats = {
    total_syncs: 0,
    successful_syncs: 0,
    failed_syncs: 0,
    last_sync: null as string | null,
  }

  constructor() {
    this.apiUrl = process.env.DART_AI_API_URL || 'https://app.dartai.com/api/v0'
    this.apiKey = process.env.DART_AI_API_KEY || ''
    this.githubToken = process.env.GITHUB_TOKEN || ''

    if (!this.apiKey) {
      logger.warn(
        '‚ö†Ô∏è DART_AI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞'
      )
    }

    if (!this.githubToken) {
      logger.warn(
        '‚ö†Ô∏è GITHUB_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å GitHub –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∞'
      )
    }

    logger.info('üîó Dart AI Service initialized (FULL API)', {
      api_url: this.apiUrl,
      has_api_key: !!this.apiKey,
      has_github_token: !!this.githubToken,
    })

    this.apiClient = axios.create({
      baseURL: this.apiUrl,
      timeout: 30000,
      headers: {
        Authorization: `Bearer ${this.apiKey}`,
        'Content-Type': 'application/json',
        'User-Agent': 'AI-Server-DartAI-Integration/1.0.0',
      },
    })

    this.setupInterceptors()
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ interceptors –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
   */
  private setupInterceptors(): void {
    this.apiClient.interceptors.request.use(
      config => {
        logger.debug('üì° Dart AI API Request', {
          method: config.method?.toUpperCase(),
          url: config.url,
          params: config.params,
        })
        return config
      },
      error => {
        logger.error('üí• Dart AI API Request Error', { error: error.message })
        return Promise.reject(error)
      }
    )

    this.apiClient.interceptors.response.use(
      response => {
        logger.debug('‚úÖ Dart AI API Response', {
          status: response.status,
          url: response.config.url,
        })
        return response
      },
      error => {
        logger.error('üí• Dart AI API Response Error', {
          status: error.response?.status,
          url: error.config?.url,
          error: error.response?.data || error.message,
        })
        return Promise.reject(error)
      }
    )
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ Dart AI
   */
  public async getTasks(): Promise<{
    tasks: DartAITask[]
    count: number
    success: boolean
  }> {
    try {
      logger.debug('üìú –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏–∑ Dart AI')

      const response = await this.apiClient.get('/tasks')
      const tasks = response.data.results || []
      const count = response.data.count || tasks.length

      logger.info('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–¥–∞—á –∏–∑ Dart AI', {
        count,
        first_task: tasks[0]?.title,
      })

      return { tasks, count, success: true }
    } catch (error) {
      logger.error('üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á –∏–∑ Dart AI', {
        error: error.message,
      })
      return { tasks: [], count: 0, success: false }
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –∏–∑ Dart AI
   */
  public async getSpaces(): Promise<{
    spaces: DartAISpace[]
    count: number
    success: boolean
  }> {
    try {
      logger.debug('üè¢ –ü–æ–ª—É—á–∞—é —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –∏–∑ Dart AI')

      const response = await this.apiClient.get('/spaces')
      const spaces = response.data.results || []
      const count = response.data.count || spaces.length

      logger.info('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –∏–∑ Dart AI', {
        count,
        spaces: spaces.map(s => `"${s.title}" (${s.kind})`),
      })

      return { spaces, count, success: true }
    } catch (error) {
      logger.error('üí• –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –∏–∑ Dart AI', {
        error: error.message,
      })
      return { spaces: [], count: 0, success: false }
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å GitHub Issue –∏–∑ –∑–∞–¥–∞—á–∏ Dart AI
   */
  public async createGitHubIssueFromTask(
    task: DartAITask,
    repository: string
  ): Promise<GitHubIssue | null> {
    if (!this.githubToken) {
      logger.warn('GitHub —Ç–æ–∫–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ Issue')
      return null
    }

    try {
      logger.info('üìù –°–æ–∑–¥–∞—é GitHub Issue –∏–∑ –∑–∞–¥–∞—á–∏ Dart AI', {
        task_id: task.id,
        repository,
        title: task.title,
      })

      const issueData = {
        title: task.title,
        body: this.formatTaskDescription(task),
        labels: ['dart-ai-sync'],
      }

      const response = await axios.post(
        `https://api.github.com/repos/${repository}/issues`,
        issueData,
        {
          headers: {
            Authorization: `Bearer ${this.githubToken}`,
            'Content-Type': 'application/json',
          },
        }
      )

      const issue: GitHubIssue = {
        number: response.data.number,
        title: response.data.title,
        body: response.data.body,
        state: response.data.state,
        repository,
        assignees: response.data.assignees?.map((a: any) => a.login) || [],
        labels: response.data.labels?.map((l: any) => l.name) || [],
        created_at: response.data.created_at,
        updated_at: response.data.updated_at,
      }

      logger.info('‚úÖ GitHub Issue —Å–æ–∑–¥–∞–Ω', {
        issue_number: issue.number,
        task_id: task.id,
      })

      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ Dart AI —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ GitHub Issue
      await this.updateTaskWithGitHubInfo(task.id, issue)

      return issue
    } catch (error) {
      logger.error('üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è GitHub Issue', {
        task_id: task.id,
        repository,
        error: error.message,
      })
      return null
    }
  }

  /**
   * –ù–∞–π—Ç–∏ –∑–∞–¥–∞—á–∏ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ GitHub
   * (–∏—â–µ–º —Å—Ä–µ–¥–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ –±—ã—Ç—å —Å–≤—è–∑–∞–Ω—ã —Å GitHub)
   */
  public async findTasksWithGitHubMetadata(): Promise<DartAITask[]> {
    try {
      const { tasks, success } = await this.getTasks()

      if (!success) return []

      // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
      const githubRelatedTasks = tasks.filter(task => {
        const title = task.title.toLowerCase()
        const description = JSON.stringify(task.description || '').toLowerCase()

        return (
          title.includes('github') ||
          title.includes('issue') ||
          description.includes('github') ||
          task.metadata?.github_issue_number ||
          task.metadata?.github_repository
        )
      })

      logger.info('üîç –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞—á —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å GitHub', {
        total_tasks: tasks.length,
        github_related: githubRelatedTasks.length,
      })

      return githubRelatedTasks
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ GitHub –∑–∞–¥–∞—á', { error: error.message })
      return []
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É Dart AI –≤ GitHub Issue
   */
  public async syncTaskToGitHubIssue(
    task: DartAITask,
    repository: string
  ): Promise<SyncResult> {
    const startTime = Date.now()
    this.syncStats.total_syncs++

    try {
      // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Å–≤—è–∑–∞–Ω–Ω—ã–π GitHub Issue
      const existingIssueNumber = task.github_issue_number

      if (existingIssueNumber) {
        // –û–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Issue
        const updated = await this.updateGitHubIssueFromTask(
          existingIssueNumber,
          repository,
          task
        )

        if (updated) {
          this.syncStats.successful_syncs++
          const processingTime = Date.now() - startTime

          logger.info(
            'üîÑ –ó–∞–¥–∞—á–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º GitHub Issue',
            {
              task_id: task.id,
              issue_number: existingIssueNumber,
              processing_time_ms: processingTime,
            }
          )

          return {
            success: true,
            issues_updated: 1,
            tasks_created: 0,
          }
        }
      } else {
        // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π GitHub Issue
        const newIssue = await this.createGitHubIssueFromTask(task, repository)

        if (newIssue) {
          this.syncStats.successful_syncs++
          const processingTime = Date.now() - startTime

          logger.info('üìù –ù–æ–≤—ã–π GitHub Issue —Å–æ–∑–¥–∞–Ω –∏–∑ –∑–∞–¥–∞—á–∏', {
            task_id: task.id,
            issue_number: newIssue.number,
            processing_time_ms: processingTime,
          })

          return {
            success: true,
            issues_created: 1,
            tasks_updated: 1, // –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ Issue
          }
        }
      }

      this.syncStats.failed_syncs++
      return {
        success: false,
        errors: ['Failed to sync Dart AI task to GitHub Issue'],
      }
    } catch (error) {
      this.syncStats.failed_syncs++
      logger.error('üí• –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏ –≤ GitHub', {
        task_id: task.id,
        error: error.message,
      })

      return {
        success: false,
        errors: [error.message],
      }
    } finally {
      this.syncStats.last_sync = new Date().toISOString()
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –ø–æ ID
   */
  public async getTaskById(id: string): Promise<DartAITask | null> {
    try {
      logger.debug('üìã –ü–æ–ª—É—á–∞—é –∑–∞–¥–∞—á—É –ø–æ ID', { id })

      const response = await this.apiClient.get(`/public/tasks/${id}`)
      const task = response.data.item

      logger.info('‚úÖ –ó–∞–¥–∞—á–∞ –ø–æ–ª—É—á–µ–Ω–∞', {
        id: task.id,
        title: task.title,
        status: task.status,
      })

      return {
        id: task.id,
        htmlUrl: task.htmlUrl,
        title: task.title,
        description: task.description,
        parentId: task.parentId,
        dartboard: task.dartboard,
        type: task.type,
        status: task.status,
        assignee: task.assignee,
        tags: task.tags,
        priority: task.priority,
        startAt: task.startAt,
        dueAt: task.dueAt,
        size: task.size,
        timeTracking: task.timeTracking,
        customProperties: task.customProperties,
        taskRelationships: task.taskRelationships,
      }
    } catch (error) {
      logger.error('üí• –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É', {
        id,
        error: error.message,
        status: error.response?.status,
      })
      return null
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É
   */
  public async updateTask(
    id: string,
    updates: Partial<DartAITask>
  ): Promise<DartAITask | null> {
    try {
      logger.info('üìù –û–±–Ω–æ–≤–ª—è—é –∑–∞–¥–∞—á—É', { id, updates: Object.keys(updates) })

      const updateData = {
        item: {
          id,
          ...updates,
        },
      }

      const response = await this.apiClient.put(
        `/public/tasks/${id}`,
        updateData
      )
      const updatedTask = response.data.item

      logger.info('‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞', {
        id: updatedTask.id,
        title: updatedTask.title,
        status: updatedTask.status,
      })

      return {
        id: updatedTask.id,
        htmlUrl: updatedTask.htmlUrl,
        title: updatedTask.title,
        description: updatedTask.description,
        parentId: updatedTask.parentId,
        dartboard: updatedTask.dartboard,
        type: updatedTask.type,
        status: updatedTask.status,
        assignee: updatedTask.assignee,
        tags: updatedTask.tags,
        priority: updatedTask.priority,
        startAt: updatedTask.startAt,
        dueAt: updatedTask.dueAt,
        size: updatedTask.size,
        timeTracking: updatedTask.timeTracking,
        customProperties: updatedTask.customProperties,
        taskRelationships: updatedTask.taskRelationships,
      }
    } catch (error) {
      logger.error('üí• –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏', {
        id,
        error: error.message,
        response_data: error.response?.data,
      })
      return null
    }
  }

  /**
   * –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
   */
  public async deleteTask(id: string): Promise<boolean> {
    try {
      logger.info('üóëÔ∏è –£–¥–∞–ª—è—é –∑–∞–¥–∞—á—É', { id })

      await this.apiClient.delete(`/public/tasks/${id}`)

      logger.info('‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞', { id })
      return true
    } catch (error) {
      logger.error('üí• –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏', {
        id,
        error: error.message,
        status: error.response?.status,
      })
      return false
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É —Å –ø–æ–ª–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
   */
  public async createTask(
    taskData: Partial<DartAITask>
  ): Promise<DartAITask | null> {
    try {
      logger.info('üìù –°–æ–∑–¥–∞—é –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É', {
        title: taskData.title,
        status: taskData.status,
        tags: taskData.tags,
      })

      const createData = {
        item: {
          title: taskData.title,
          description: taskData.description,
          parentId: taskData.parentId,
          dartboard: taskData.dartboard,
          type: taskData.type,
          status: taskData.status,
          assignee: taskData.assignee,
          assignees: taskData.assignees,
          tags: taskData.tags,
          priority: taskData.priority,
          startAt: taskData.startAt,
          dueAt: taskData.dueAt,
          size: taskData.size,
          customProperties: taskData.customProperties,
        },
      }

      const response = await this.apiClient.post('/public/tasks', createData)
      const createdTask = response.data.item

      logger.info('‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞', {
        id: createdTask.id,
        title: createdTask.title,
        url: createdTask.htmlUrl,
      })

      return {
        id: createdTask.id,
        htmlUrl: createdTask.htmlUrl,
        title: createdTask.title,
        description: createdTask.description,
        parentId: createdTask.parentId,
        dartboard: createdTask.dartboard,
        type: createdTask.type,
        status: createdTask.status,
        assignee: createdTask.assignee,
        tags: createdTask.tags,
        priority: createdTask.priority,
        startAt: createdTask.startAt,
        dueAt: createdTask.dueAt,
        size: createdTask.size,
        timeTracking: createdTask.timeTracking,
        customProperties: createdTask.customProperties,
        taskRelationships: createdTask.taskRelationships,
      }
    } catch (error) {
      logger.error('üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏', {
        error: error.message,
        response_data: error.response?.data,
      })
      return null
    }
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ Dart AI –≤ —Ç–µ–∫—Å—Ç
   */
  private extractDescriptionText(description: any): string {
    if (typeof description === 'string') return description
    if (!description || !description.root) return ''

    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ rich text —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Dart AI
      const extractText = (node: any): string => {
        if (node.text) return node.text
        if (node.children) {
          return node.children.map(extractText).join('')
        }
        return ''
      }

      return extractText(description.root)
    } catch (error) {
      return JSON.stringify(description)
    }
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å GitHub Issue –∏–∑ –∑–∞–¥–∞—á–∏ Dart AI
   */
  private async updateGitHubIssueFromTask(
    issueNumber: number,
    repository: string,
    task: DartAITask
  ): Promise<boolean> {
    if (!this.githubToken) {
      return false
    }

    try {
      const updateData = {
        title: task.title,
        body: this.formatTaskDescription(task),
        state: task.status === 'completed' ? 'closed' : 'open',
      }

      await axios.patch(
        `https://api.github.com/repos/${repository}/issues/${issueNumber}`,
        updateData,
        {
          headers: {
            Authorization: `Bearer ${this.githubToken}`,
            'Content-Type': 'application/json',
          },
        }
      )

      return true
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è GitHub Issue', {
        issue_number: issueNumber,
        repository,
        error: error.message,
      })
      return false
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏ Dart AI ‚Üí GitHub Issues
   * (–æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è)
   */
  public async syncAllTasksToGitHub(repository: string): Promise<SyncResult> {
    const startTime = Date.now()
    this.syncStats.total_syncs++

    try {
      const { tasks, success } = await this.getTasks()

      if (!success) {
        this.syncStats.failed_syncs++
        return {
          success: false,
          errors: ['–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ Dart AI'],
        }
      }

      let issuesCreated = 0
      const errors: string[] = []

      for (const task of tasks.slice(0, 5)) {
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–º–∏ 5 –¥–ª—è —Ç–µ—Å—Ç–∞
        const issue = await this.createGitHubIssueFromTask(task, repository)

        if (issue) {
          issuesCreated++
        } else {
          errors.push(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Issue –¥–ª—è –∑–∞–¥–∞—á–∏ ${task.title}`)
        }
      }

      const processingTime = Date.now() - startTime

      if (issuesCreated > 0) {
        this.syncStats.successful_syncs++
        logger.info('‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Dart AI ‚Üí GitHub –∑–∞–≤–µ—Ä—à–µ–Ω–∞', {
          tasks_processed: tasks.length,
          issues_created: issuesCreated,
          processing_time_ms: processingTime,
        })
      } else {
        this.syncStats.failed_syncs++
      }

      return {
        success: issuesCreated > 0,
        issues_created: issuesCreated,
        errors: errors.length > 0 ? errors : undefined,
      }
    } catch (error) {
      this.syncStats.failed_syncs++
      logger.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', {
        error: error.message,
      })

      return {
        success: false,
        errors: [error.message],
      }
    } finally {
      this.syncStats.last_sync = new Date().toISOString()
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ Issue –¥–ª—è –∑–∞–¥–∞—á–∏
   */
  private formatIssueDescription(issue: GitHubIssue): string {
    let description = issue.body || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'

    description += `\n\n---\n**GitHub Issue:** [#${issue.number}](https://github.com/${issue.repository}/issues/${issue.number})`
    description += `\n**–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:** ${issue.repository}`

    if (issue.labels.length > 0) {
      description += `\n**–ú–µ—Ç–∫–∏:** ${issue.labels.join(', ')}`
    }

    if (issue.assignees.length > 0) {
      description += `\n**–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:** ${issue.assignees.join(', ')}`
    }

    description += `\n\n*–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ GitHub: ${new Date().toLocaleString(
      'ru-RU'
    )}*`

    return description
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è GitHub Issue
   */
  private formatTaskDescription(task: DartAITask): string {
    const description = task.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'

    let formattedDescription = description

    formattedDescription += `\n\n---
## üéØ Dart AI Task Info
`
    formattedDescription += `**Task ID:** \`${task.id}\`\n`
    formattedDescription += `**URL:** [${task.htmlUrl}](${task.htmlUrl})\n`

    if (task.dartboard) {
      formattedDescription += `**Dartboard:** ${task.dartboard}\n`
    }

    if (task.type) {
      formattedDescription += `**Type:** ${task.type}\n`
    }

    if (task.status) {
      formattedDescription += `**Status:** ${task.status}\n`
    }

    if (task.assignee) {
      formattedDescription += `**Assignee:** ${task.assignee}\n`
    }

    if (task.tags && task.tags.length > 0) {
      formattedDescription += `**Tags:** ${task.tags.join(', ')}\n`
    }

    if (task.priority) {
      formattedDescription += `**Priority:** ${task.priority}\n`
    }

    if (task.startAt) {
      formattedDescription += `**Start Date:** ${task.startAt}\n`
    }

    if (task.dueAt) {
      formattedDescription += `**Due Date:** ${task.dueAt}\n`
    }

    formattedDescription += `\n> üîó *–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ Dart AI: ${new Date().toLocaleString(
      'ru-RU'
    )}*`

    return formattedDescription
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  public getSyncStats(): any {
    return {
      ...this.syncStats,
      api_configured: !!this.apiKey,
      github_configured: !!this.githubToken,
      api_url: this.apiUrl,
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Dart AI API
   */
  public async healthCheck(): Promise<{
    success: boolean
    message: string
    details?: any
  }> {
    try {
      const startTime = Date.now()

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ /tasks endpoint
      const tasksResponse = await this.apiClient.get('/tasks')
      const spacesResponse = await this.apiClient.get('/spaces')

      const responseTime = Date.now() - startTime

      return {
        success: true,
        message:
          'Dart AI API –¥–æ—Å—Ç—É–ø–µ–Ω (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–Ω—é—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é)',
        details: {
          status: tasksResponse.status,
          api_url: this.apiUrl,
          response_time_ms: responseTime,
          tasks_count: tasksResponse.data.count || 0,
          spaces_count: spacesResponse.data.count || 0,
          api_version: 'v0',
          readonly: false,
          bidirectional_sync: 'enabled',
          create_tasks_endpoint: '/api/v0/public/tasks',
        },
      }
    } catch (error) {
      return {
        success: false,
        message: 'Dart AI API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
        details: {
          error: error.message,
          status: error.response?.status,
          api_url: this.apiUrl,
          api_configured: !!this.apiKey,
        },
      }
    }
  }

  /**
   * –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É –≤ Dart AI –∏–∑ GitHub Issue
   * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π API POST /api/v0/public/tasks
   */
  public async createTaskFromGitHubIssue(
    issue: GitHubIssue
  ): Promise<DartAITask | null> {
    try {
      logger.info('üìù –°–æ–∑–¥–∞—é –∑–∞–¥–∞—á—É –≤ Dart AI –∏–∑ GitHub Issue', {
        issue_number: issue.number,
        title: issue.title,
        repository: issue.repository,
      })

      const taskData = {
        item: {
          title: `GitHub Issue #${issue.number}: ${issue.title}`,
          description: this.formatGitHubIssueDescription(issue),
          tags: [...(issue.labels || []), 'github-sync'],
          // assignee: issue.assignees?.[0], // TODO: Map GitHub users to Dart AI users
        },
      }

      const response = await this.apiClient.post('/public/tasks', taskData)
      const createdTask = response.data.item

      logger.info('‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ Dart AI', {
        dart_task_id: createdTask.id,
        dart_task_url: createdTask.htmlUrl,
        github_issue: issue.number,
        title: createdTask.title,
      })

      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω–∞—à –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å DartAITask
      const dartTask: DartAITask = {
        id: createdTask.id,
        htmlUrl: createdTask.htmlUrl,
        title: createdTask.title,
        description: createdTask.description,
        dartboard: createdTask.dartboard,
        type: createdTask.type,
        status: createdTask.status,
        assignee: createdTask.assignee,
        tags: createdTask.tags,
        startAt: createdTask.startAt,
        dueAt: createdTask.dueAt,
        customProperties: createdTask.customProperties,
        taskRelationships: createdTask.taskRelationships,
        github_issue_number: issue.number,
        github_repository: issue.repository,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        metadata: {
          source: 'github_webhook',
          github_url: `https://github.com/${issue.repository}/issues/${issue.number}`,
          dart_url: createdTask.htmlUrl,
        },
      }

      return dartTask
    } catch (error) {
      logger.error('üí• –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ Dart AI', {
        issue_number: issue.number,
        error: error.message,
        response_data: error.response?.data,
      })
      return null
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ GitHub Issue –¥–ª—è Dart AI –∑–∞–¥–∞—á–∏
   */
  private formatGitHubIssueDescription(issue: GitHubIssue): string {
    let description = issue.body || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'

    // –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    description += `\n\n---
## üîó GitHub Issue Info

**Repository:** [${issue.repository}](https://github.com/${issue.repository})  
**Issue:** [#${issue.number}](https://github.com/${issue.repository}/issues/${issue.number})  
**State:** ${issue.state}  
`

    if (issue.assignees && issue.assignees.length > 0) {
      description += `**Assignees:** ${issue.assignees.join(', ')}  \n`
    }

    if (issue.labels && issue.labels.length > 0) {
      description += `**Labels:** ${issue.labels.join(', ')}  \n`
    }

    description += `**Created:** ${issue.created_at}  
**Updated:** ${issue.updated_at}  

> ü§ñ *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ GitHub: ${new Date().toLocaleString(
      'ru-RU'
    )}*`

    return description
  }

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ GitHub Issue
   * TODO: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å PATCH /api/v0/public/tasks/{id} –∫–æ–≥–¥–∞ –Ω–∞–π–¥–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
   */
  private async updateTaskWithGitHubInfo(
    taskId: string,
    issue: GitHubIssue
  ): Promise<boolean> {
    // –ü–æ–∫–∞ –ª–æ–≥–∏—Ä—É–µ–º, –≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π PATCH –∑–∞–ø—Ä–æ—Å
    logger.info('üíæ –û–±–Ω–æ–≤–ª—è—é –∑–∞–¥–∞—á—É –≤ Dart AI (–±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)', {
      task_id: taskId,
      github_issue_number: issue.number,
      github_repository: issue.repository,
    })

    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å PATCH –∑–∞–ø—Ä–æ—Å –∫–æ–≥–¥–∞ –æ–ø—Ä–µ–¥–µ–ª–∏–º —Ñ–æ—Ä–º–∞—Ç
    return true
  }
}
