import { describe, it, expect, beforeEach, afterEach } from 'vitest'
import { closeConnection } from '@/db/drizzle-supabase'
import { drizzleORM } from '@/db/operations'

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
import { getUserByTelegramId as oldGetUserByTelegramId } from '@/core/supabase/getUserByTelegramId'

describe('üî¥ TDD: –ú–∏–≥—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞ Drizzle', () => {
  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  const testUser = {
    telegram_id: '888888888',
    username: 'migration_test_user',
    first_name: 'Migration',
    last_name: 'Test',
    gender: 'female' as const,
    bot_name: 'migration_bot',
  }

  beforeEach(async () => {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
    await drizzleORM.users.insert(testUser)
  })

  afterEach(async () => {
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
    try {
      await drizzleORM.users.delete(testUser.telegram_id)
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å)
    }
    await closeConnection()
  })

  describe('üë§ getUserByTelegramId Migration', () => {
    it('üî¥ should return same result as old function for existing user', async () => {
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—Ç–∞—Ä–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
      const oldResult = await oldGetUserByTelegramId(testUser.telegram_id)

      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
      const newResult = await drizzleORM.users.findByTelegramId(
        testUser.telegram_id
      )

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã
      expect(newResult).toBeDefined()
      expect(oldResult).toBeDefined()

      if (oldResult && newResult) {
        expect(String(newResult.telegram_id)).toBe(oldResult.telegram_id)
        expect(newResult.username).toBe(oldResult.username)
        expect(newResult.first_name).toBe(oldResult.first_name)
        expect(newResult.last_name).toBe(oldResult.last_name)
        expect(newResult.gender).toBe(oldResult.gender)
        expect(newResult.bot_name).toBe(oldResult.bot_name)
        expect(newResult.level).toBe(oldResult.level)
      }
    })

    it('üî¥ should return null for non-existing user (both functions)', async () => {
      const nonExistentId = '999999999'

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é
      const oldResult = await oldGetUserByTelegramId(nonExistentId)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
      const newResult = await drizzleORM.users.findByTelegramId(nonExistentId)

      // –û–±–µ –¥–æ–ª–∂–Ω—ã –≤–µ—Ä–Ω—É—Ç—å null
      expect(oldResult).toBeNull()
      expect(newResult).toBeNull()
    })

    it('üî¥ should handle edge cases consistently', async () => {
      const edgeCases = ['', '0', '-1', 'invalid']

      for (const edgeCase of edgeCases) {
        try {
          const oldResult = await oldGetUserByTelegramId(edgeCase)
          const newResult = await drizzleORM.users.findByTelegramId(edgeCase)

          // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º–∏
          expect(newResult).toBe(oldResult)
        } catch (oldError) {
          // –ï—Å–ª–∏ —Å—Ç–∞—Ä–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É, –Ω–æ–≤–∞—è —Ç–æ–∂–µ –¥–æ–ª–∂–Ω–∞
          await expect(
            drizzleORM.users.findByTelegramId(edgeCase)
          ).rejects.toThrow()
        }
      }
    })
  })

  describe('üë§ createUser Migration', () => {
    const newTestUser = {
      telegram_id: '777777777',
      username: 'create_test_user',
      first_name: 'Create',
      last_name: 'Test',
      gender: 'male' as const,
      bot_name: 'create_bot',
    }

    afterEach(async () => {
      // –û—á–∏—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      try {
        await drizzleORM.users.delete(newTestUser.telegram_id)
      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
      }
    })

    it('üî¥ should create user with Zod validation', async () => {
      // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
      const createdUser = await drizzleORM.users.insert(newTestUser)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
      expect(createdUser).toBeDefined()
      expect(String(createdUser.telegram_id)).toBe(newTestUser.telegram_id)
      expect(createdUser.username).toBe(newTestUser.username)
      expect(createdUser.gender).toBe(newTestUser.gender)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î
      const foundUser = await drizzleORM.users.findByTelegramId(
        newTestUser.telegram_id
      )
      expect(foundUser).toBeDefined()
      expect(String(foundUser!.telegram_id)).toBe(newTestUser.telegram_id)
    })

    it('üî¥ should validate required fields with Zod', async () => {
      // –¢–µ—Å—Ç —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º telegram_id
      await expect(
        drizzleORM.users.insert({
          username: 'invalid_user',
          first_name: 'Invalid',
        } as any)
      ).rejects.toThrow()

      // –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º gender
      await expect(
        drizzleORM.users.insert({
          telegram_id: '666666666',
          gender: 'invalid_gender',
        } as any)
      ).rejects.toThrow()
    })
  })
})
