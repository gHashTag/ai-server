import { describe, it, expect, beforeEach, afterEach } from 'vitest'
import { closeConnection } from '@/db/drizzle-supabase'
import { drizzleORM } from '@/db/operations'

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
import { createModelTraining as oldCreateModelTraining } from '@/core/supabase/createModelTraining'
import { getTrainingWithUser as oldGetTrainingWithUser } from '@/core/supabase/getTrainingWithUser'

describe('üî¥ TDD: –ú–∏–≥—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –º–æ–¥–µ–ª–µ–π –Ω–∞ Drizzle', () => {
  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  const testUser = {
    telegram_id: '333333333',
    username: 'training_test_user',
    first_name: 'Training',
    last_name: 'Test',
    gender: 'male' as const,
    bot_name: 'training_bot',
  }

  const testTraining = {
    telegram_id: testUser.telegram_id,
    model_name: 'test_model_drizzle',
    trigger_word: 'test_trigger',
    zip_url: 'https://example.com/test.zip',
    steps: 500,
    status: 'starting' as const,
    gender: 'female' as const,
    bot_name: 'training_bot',
  }

  beforeEach(async () => {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
    await drizzleORM.users.insert(testUser)
  })

  afterEach(async () => {
    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
    try {
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const trainings = await drizzleORM.modelTrainings.findByTelegramId(
        testUser.telegram_id
      )
      for (const training of trainings) {
        await drizzleORM.modelTrainings.delete(training.id)
      }

      // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await drizzleORM.users.delete(testUser.telegram_id)
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    }
    await closeConnection()
  })

  describe('ü§ñ createModelTraining Migration', () => {
    it('üî¥ should create training with same result as old function', async () => {
      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
      const newResult = await drizzleORM.modelTrainings.insert(testTraining)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
      expect(newResult).toBeDefined()
      expect(String(newResult.telegram_id)).toBe(testTraining.telegram_id)
      expect(newResult.model_name).toBe(testTraining.model_name)
      expect(newResult.trigger_word).toBe(testTraining.trigger_word)
      expect(newResult.zip_url).toBe(testTraining.zip_url)
      expect(newResult.steps).toBe(testTraining.steps)
      expect(newResult.status).toBe(testTraining.status)
      expect(newResult.gender).toBe(testTraining.gender)
      expect(newResult.bot_name).toBe(testTraining.bot_name)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î
      const foundTraining = await drizzleORM.modelTrainings.findById(
        newResult.id
      )
      expect(foundTraining).toBeDefined()
      expect(foundTraining!.id).toBe(newResult.id)
    })

    it('üî¥ should validate required fields with Zod', async () => {
      // –¢–µ—Å—Ç —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º telegram_id
      await expect(
        drizzleORM.modelTrainings.insert({
          model_name: 'invalid_model',
          trigger_word: 'invalid',
          zip_url: 'https://example.com/invalid.zip',
          steps: 500,
          status: 'starting',
        } as any)
      ).rejects.toThrow()

      // –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º URL
      await expect(
        drizzleORM.modelTrainings.insert({
          telegram_id: testUser.telegram_id,
          model_name: 'invalid_model',
          trigger_word: 'invalid',
          zip_url: 'invalid-url',
          steps: 500,
          status: 'starting',
        } as any)
      ).rejects.toThrow()

      // –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —à–∞–≥–æ–≤
      await expect(
        drizzleORM.modelTrainings.insert({
          telegram_id: testUser.telegram_id,
          model_name: 'invalid_model',
          trigger_word: 'invalid',
          zip_url: 'https://example.com/invalid.zip',
          steps: 50, // –ú–µ–Ω—å—à–µ –º–∏–Ω–∏–º—É–º–∞ (100)
          status: 'starting',
        } as any)
      ).rejects.toThrow()
    })

    it('üî¥ should handle gender validation correctly', async () => {
      // –í–∞–ª–∏–¥–Ω—ã–π gender
      const validTraining = {
        ...testTraining,
        gender: 'male' as const,
      }
      const result = await drizzleORM.modelTrainings.insert(validTraining)
      expect(result.gender).toBe('male')

      // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π gender
      await expect(
        drizzleORM.modelTrainings.insert({
          ...testTraining,
          gender: 'invalid_gender',
        } as any)
      ).rejects.toThrow()
    })
  })

  describe('üîç getTrainingWithUser Migration', () => {
    let createdTraining: any

    beforeEach(async () => {
      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–ª—è —Ç–µ—Å—Ç–æ–≤
      createdTraining = await drizzleORM.modelTrainings.insert(testTraining)
    })

    it('üî¥ should return training with user data', async () => {
      // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
      const result = await drizzleORM.modelTrainings.getTrainingWithUser(
        testUser.telegram_id,
        testTraining.model_name
      )

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
      expect(result).toBeDefined()
      expect(String(result.telegram_id)).toBe(testTraining.telegram_id)
      expect(result.model_name).toBe(testTraining.model_name)
      expect(result.trigger_word).toBe(testTraining.trigger_word)
      expect(result.status).toBe(testTraining.status)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      expect(result.user_id).toBeDefined()
      expect(result.user_username).toBe(testUser.username)
      expect(result.user_first_name).toBe(testUser.first_name)
      expect(result.user_last_name).toBe(testUser.last_name)
      expect(result.user_gender).toBe(testUser.gender)
      expect(result.user_bot_name).toBe(testUser.bot_name)
    })

    it('üî¥ should handle non-existing training gracefully', async () => {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
      await expect(
        drizzleORM.modelTrainings.getTrainingWithUser(
          testUser.telegram_id,
          'non_existing_model'
        )
      ).rejects.toThrow()
    })

    it('üî¥ should handle non-existing user gracefully', async () => {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await expect(
        drizzleORM.modelTrainings.getTrainingWithUser(
          '999999999',
          testTraining.model_name
        )
      ).rejects.toThrow()
    })
  })

  describe('üîç Model Training Queries', () => {
    it('üî¥ should find trainings by telegram_id', async () => {
      // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
      const trainings = [
        {
          ...testTraining,
          model_name: 'model_1',
          trigger_word: 'trigger_1',
        },
        {
          ...testTraining,
          model_name: 'model_2',
          trigger_word: 'trigger_2',
        },
      ]

      for (const training of trainings) {
        await drizzleORM.modelTrainings.insert(training)
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userTrainings = await drizzleORM.modelTrainings.findByTelegramId(
        testUser.telegram_id
      )

      expect(userTrainings).toHaveLength(2)
      expect(userTrainings[0].model_name).toContain('model_')
      expect(userTrainings[1].model_name).toContain('model_')
    })

    it('üî¥ should find training by replicate_id', async () => {
      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å replicate_id
      const trainingWithReplicate = {
        ...testTraining,
        replicate_training_id: 'test_replicate_id_123',
      }

      const created = await drizzleORM.modelTrainings.insert(
        trainingWithReplicate
      )

      // –ò—â–µ–º –ø–æ replicate_id
      const found = await drizzleORM.modelTrainings.findByReplicateId(
        'test_replicate_id_123'
      )

      expect(found).toBeDefined()
      expect(found!.id).toBe(created.id)
      expect(found!.replicate_training_id).toBe('test_replicate_id_123')
    })

    it('üî¥ should update training status', async () => {
      // –°–æ–∑–¥–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É
      const created = await drizzleORM.modelTrainings.insert(testTraining)

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      const updated = await drizzleORM.modelTrainings.update(created.id, {
        status: 'SUCCESS',
        telegram_id: created.telegram_id, // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
      })

      expect(updated.status).toBe('SUCCESS')
    })
  })
})
