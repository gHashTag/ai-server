import {
  getUserByTelegramIdV2,
  invalidateUserCache,
} from '@/core/supabase/getUserByTelegramIdV2'
import { supabase } from '@/core/supabase'
import { logger } from '@/utils/logger'

// –ú–æ–∫–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
jest.mock('@/core/supabase', () => ({
  supabase: {
    from: jest.fn(),
  },
}))

jest.mock('@/utils/logger', () => ({
  logger: {
    info: jest.fn(),
    warn: jest.fn(),
    error: jest.fn(),
  },
}))

// –¢–∏–ø–∏–∑–∞—Ü–∏—è –º–æ–∫–æ–≤
const mockSupabase = supabase as jest.Mocked<typeof supabase>
const mockLogger = logger as jest.Mocked<typeof logger>

describe('getUserByTelegramIdV2', () => {
  // –ú–æ–∫ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const mockUserData = {
    id: 1,
    telegram_id: '144022504',
    username: 'testuser',
    first_name: 'Test',
    last_name: 'User',
    language_code: 'ru',
    level: 5,
    gender: 'male',
    bot_name: 'ai_koshey_bot',
    created_at: '2024-01-01T00:00:00Z',
    updated_at: '2024-01-01T00:00:00Z',
  }

  beforeEach(() => {
    jest.clearAllMocks()
    // –û—á–∏—â–∞–µ–º –∫—ç—à –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
    invalidateUserCache('144022504')
  })

  describe('Zod Schema Validation', () => {
    it('should validate correct telegram_id', async () => {
      const mockSelect = jest.fn().mockReturnValue({
        eq: jest.fn().mockReturnValue({
          single: jest.fn().mockResolvedValue({
            data: mockUserData,
            error: null,
          }),
        }),
      })

      mockSupabase.from.mockReturnValue({
        select: mockSelect,
      } as any)

      const result = await getUserByTelegramIdV2('144022504')

      expect(result).toEqual(mockUserData)
      expect(mockLogger.info).toHaveBeenCalledWith(
        expect.stringContaining('üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID V2'),
        expect.objectContaining({
          telegram_id: '144022504',
        })
      )
    })

    it('should reject empty telegram_id', async () => {
      await expect(getUserByTelegramIdV2('')).rejects.toThrow(
        'Telegram ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã'
      )
    })

    it('should reject null telegram_id', async () => {
      await expect(getUserByTelegramIdV2(null as any)).rejects.toThrow()
    })

    it('should reject undefined telegram_id', async () => {
      await expect(getUserByTelegramIdV2(undefined as any)).rejects.toThrow()
    })
  })

  describe('getUserByTelegramIdV2 Function', () => {
    it('should return user data when user exists', async () => {
      const mockSelect = jest.fn().mockReturnValue({
        eq: jest.fn().mockReturnValue({
          single: jest.fn().mockResolvedValue({
            data: mockUserData,
            error: null,
          }),
        }),
      })

      mockSupabase.from.mockReturnValue({
        select: mockSelect,
      } as any)

      const result = await getUserByTelegramIdV2('144022504')

      expect(result).toEqual(mockUserData)
      expect(mockSupabase.from).toHaveBeenCalledWith('users')
      expect(mockSelect).toHaveBeenCalledWith('*')
    })

    it('should return null when user does not exist (PGRST116)', async () => {
      const mockSelect = jest.fn().mockReturnValue({
        eq: jest.fn().mockReturnValue({
          single: jest.fn().mockResolvedValue({
            data: null,
            error: { code: 'PGRST116', message: 'No rows returned' },
          }),
        }),
      })

      mockSupabase.from.mockReturnValue({
        select: mockSelect,
      } as any)

      const result = await getUserByTelegramIdV2('999999999')

      expect(result).toBeNull()
      expect(mockLogger.info).toHaveBeenCalledWith(
        expect.stringContaining('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'),
        expect.objectContaining({
          telegram_id: '999999999',
        })
      )
    })

    it('should throw error for database errors', async () => {
      const mockSelect = jest.fn().mockReturnValue({
        eq: jest.fn().mockReturnValue({
          single: jest.fn().mockResolvedValue({
            data: null,
            error: { code: 'PGRST500', message: 'Database error' },
          }),
        }),
      })

      mockSupabase.from.mockReturnValue({
        select: mockSelect,
      } as any)

      await expect(getUserByTelegramIdV2('144022504')).rejects.toThrow(
        '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: Database error'
      )

      expect(mockLogger.error).toHaveBeenCalledWith(
        expect.stringContaining('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'),
        expect.objectContaining({
          error: 'Database error',
          telegram_id: '144022504',
        })
      )
    })

    it('should handle unexpected errors gracefully', async () => {
      mockSupabase.from.mockImplementation(() => {
        throw new Error('Unexpected error')
      })

      await expect(getUserByTelegramIdV2('144022504')).rejects.toThrow(
        'Unexpected error'
      )

      expect(mockLogger.error).toHaveBeenCalledWith(
        expect.stringContaining(
          '‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ getUserByTelegramIdV2'
        ),
        expect.objectContaining({
          error: 'Unexpected error',
          telegram_id: '144022504',
        })
      )
    })

    it('should use cache on second call', async () => {
      const mockSelect = jest.fn().mockReturnValue({
        eq: jest.fn().mockReturnValue({
          single: jest.fn().mockResolvedValue({
            data: mockUserData,
            error: null,
          }),
        }),
      })

      mockSupabase.from.mockReturnValue({
        select: mockSelect,
      } as any)

      // –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ - –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ë–î
      const result1 = await getUserByTelegramIdV2('144022504')
      expect(result1).toEqual(mockUserData)
      expect(mockSupabase.from).toHaveBeenCalledTimes(1)

      // –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ - –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à
      const result2 = await getUserByTelegramIdV2('144022504')
      expect(result2).toEqual(mockUserData)
      expect(mockSupabase.from).toHaveBeenCalledTimes(1) // –ù–µ –¥–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ
      expect(mockLogger.info).toHaveBeenCalledWith(
        expect.stringContaining('üíæ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞'),
        expect.objectContaining({
          telegram_id: '144022504',
        })
      )
    })

    it('should normalize telegram_id to string', async () => {
      const mockSelect = jest.fn().mockReturnValue({
        eq: jest.fn().mockReturnValue({
          single: jest.fn().mockResolvedValue({
            data: mockUserData,
            error: null,
          }),
        }),
      })

      mockSupabase.from.mockReturnValue({
        select: mockSelect,
      } as any)

      // –ü–µ—Ä–µ–¥–∞–µ–º —á–∏—Å–ª–æ, –¥–æ–ª–∂–Ω–æ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å—Å—è –≤ —Å—Ç—Ä–æ–∫—É
      const result = await getUserByTelegramIdV2('144022504')

      expect(result).toEqual(mockUserData)
      expect(mockLogger.info).toHaveBeenCalledWith(
        expect.stringContaining('üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID V2'),
        expect.objectContaining({
          telegram_id: '144022504',
        })
      )
    })
  })

  describe('Cache Management', () => {
    it('should invalidate cache correctly', async () => {
      const mockSelect = jest.fn().mockReturnValue({
        eq: jest.fn().mockReturnValue({
          single: jest.fn().mockResolvedValue({
            data: mockUserData,
            error: null,
          }),
        }),
      })

      mockSupabase.from.mockReturnValue({
        select: mockSelect,
      } as any)

      // –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤
      await getUserByTelegramIdV2('144022504')
      expect(mockSupabase.from).toHaveBeenCalledTimes(1)

      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à
      invalidateUserCache('144022504')

      // –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ –ø–æ—Å–ª–µ –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–∏ - –¥–æ–ª–∂–µ–Ω —Å–Ω–æ–≤–∞ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –ë–î
      await getUserByTelegramIdV2('144022504')
      expect(mockSupabase.from).toHaveBeenCalledTimes(2)

      expect(mockLogger.info).toHaveBeenCalledWith(
        expect.stringContaining('üîÑ –ö—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω'),
        expect.objectContaining({
          telegram_id: '144022504',
        })
      )
    })
  })
})
