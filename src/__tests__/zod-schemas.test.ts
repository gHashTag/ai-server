import { describe, it, expect } from 'vitest'
import { ZodError } from 'zod'

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ö–µ–º—ã
import {
  // –ë–∞–∑–æ–≤—ã–µ —Å—Ö–µ–º—ã
  telegramIdSchema,
  languageSchema,
  isRuSchema,
  urlSchema,
  emailSchema,
  successResponseSchema,
  errorResponseSchema,
} from '../schemas/common/base.schemas'

import {
  // Telegram —Å—Ö–µ–º—ã
  usernameSchema,
  botNameSchema,
  genderSchema,
  userParamsSchema,
  telegramUserSchema,
} from '../schemas/common/telegram.schemas'

import {
  // Generation API —Å—Ö–µ–º—ã
  textToImageRequestSchema,
  neuroPhotoRequestSchema,
  neuroPhotoV2RequestSchema,
  textToSpeechRequestSchema,
  textToVideoRequestSchema,
  imageToVideoRequestSchema,
  createModelTrainingRequestSchema,
  promptSchema,
  modelUrlSchema,
  numImagesSchema,
  stepsSchema,
} from '../schemas/api/generation.schemas'

import {
  // Webhook —Å—Ö–µ–º—ã
  replicateWebhookSchema,
  replicateStatusSchema,
  syncLabsWebhookSchema,
  syncLabsStatusSchema,
  robokassaCallbackSchema,
  robokassaResultSchema,
} from '../schemas'

describe('üî¥ TDD: Zod Schemas Validation', () => {
  describe('üìã –ë–∞–∑–æ–≤—ã–µ —Å—Ö–µ–º—ã (base.schemas)', () => {
    it('üî¥ telegramIdSchema –¥–æ–ª–∂–Ω–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å Telegram ID', () => {
      // –í–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      expect(telegramIdSchema.parse('123456789')).toBe('123456789')
      expect(telegramIdSchema.parse(123456789)).toBe('123456789')
      expect(telegramIdSchema.parse('144022504')).toBe('144022504')

      // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      expect(() => telegramIdSchema.parse('')).toThrow()
      expect(() => telegramIdSchema.parse('abc')).toThrow()
      expect(() => telegramIdSchema.parse(-123)).toThrow()
      expect(() => telegramIdSchema.parse(0)).toThrow()
    })

    it('üî¥ languageSchema –¥–æ–ª–∂–Ω–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —è–∑—ã–∫–∏', () => {
      // –í–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      expect(languageSchema.parse('ru')).toBe('ru')
      expect(languageSchema.parse('en')).toBe('en')

      // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      expect(() => languageSchema.parse('fr')).toThrow()
      expect(() => languageSchema.parse('de')).toThrow()
      expect(() => languageSchema.parse('')).toThrow()
    })

    it('üî¥ isRuSchema –¥–æ–ª–∂–Ω–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å boolean', () => {
      // –í–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      expect(isRuSchema.parse(true)).toBe(true)
      expect(isRuSchema.parse(false)).toBe(false)

      // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      expect(() => isRuSchema.parse('true')).toThrow()
      expect(() => isRuSchema.parse(1)).toThrow()
      expect(() => isRuSchema.parse(0)).toThrow()
    })

    it('üî¥ urlSchema –¥–æ–ª–∂–Ω–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å URL', () => {
      // –í–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      expect(urlSchema.parse('https://example.com')).toBe('https://example.com')
      expect(urlSchema.parse('http://localhost:3000')).toBe(
        'http://localhost:3000'
      )

      // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      expect(() => urlSchema.parse('not-a-url')).toThrow()
      expect(() => urlSchema.parse('')).toThrow()
      expect(() => urlSchema.parse('just-text')).toThrow()
    })

    it('üî¥ successResponseSchema –¥–æ–ª–∂–Ω–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —É—Å–ø–µ—à–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã', () => {
      const validResponse = {
        success: true,
        message: '–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
        data: { id: 1 },
      }

      const result = successResponseSchema.parse(validResponse)
      expect(result.success).toBe(true)
      expect(result.message).toBe('–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ')
      expect(result.data).toEqual({ id: 1 })
    })
  })

  describe('üì± Telegram —Å—Ö–µ–º—ã (telegram.schemas)', () => {
    it('üî¥ usernameSchema –¥–æ–ª–∂–Ω–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å username', () => {
      // –í–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      expect(usernameSchema.parse('test_user')).toBe('test_user')
      expect(usernameSchema.parse('user123')).toBe('user123')
      expect(usernameSchema.parse(undefined)).toBe(undefined)

      // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      expect(() => usernameSchema.parse('')).toThrow()
      expect(() => usernameSchema.parse('user-name')).toThrow() // –¥–µ—Ñ–∏—Å –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω
      expect(() => usernameSchema.parse('a'.repeat(33))).toThrow() // —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    })

    it('üî¥ botNameSchema –¥–æ–ª–∂–Ω–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∏–º–µ–Ω–∞ –±–æ—Ç–æ–≤', () => {
      // –í–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      expect(botNameSchema.parse('neuro_blogger_bot')).toBe('neuro_blogger_bot')
      expect(botNameSchema.parse('test_bot')).toBe('test_bot')

      // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      expect(() => botNameSchema.parse('')).toThrow()
      expect(() => botNameSchema.parse('bot-name')).toThrow() // –¥–µ—Ñ–∏—Å –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω
    })

    it('üî¥ genderSchema –¥–æ–ª–∂–Ω–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª', () => {
      // –í–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      expect(genderSchema.parse('male')).toBe('male')
      expect(genderSchema.parse('female')).toBe('female')

      // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      expect(() => genderSchema.parse('other')).toThrow()
      expect(() => genderSchema.parse('')).toThrow()
    })

    it('üî¥ userParamsSchema –¥–æ–ª–∂–Ω–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã', () => {
      const validParams = {
        telegram_id: '123456789',
        username: 'test_user',
        is_ru: true,
        bot_name: 'test_bot',
      }

      const result = userParamsSchema.parse(validParams)
      expect(result.telegram_id).toBe('123456789')
      expect(result.username).toBe('test_user')
      expect(result.is_ru).toBe(true)
      expect(result.bot_name).toBe('test_bot')
    })
  })

  describe('üé® Generation API —Å—Ö–µ–º—ã (generation.schemas)', () => {
    it('üî¥ promptSchema –¥–æ–ª–∂–Ω–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–ø—Ç—ã', () => {
      // –í–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      expect(promptSchema.parse('beautiful woman')).toBe('beautiful woman')
      expect(promptSchema.parse('a'.repeat(2000))).toBe('a'.repeat(2000))

      // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      expect(() => promptSchema.parse('')).toThrow()
      expect(() => promptSchema.parse('a'.repeat(2001))).toThrow() // —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    })

    it('üî¥ modelUrlSchema –¥–æ–ª–∂–Ω–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å URL –º–æ–¥–µ–ª–µ–π', () => {
      // –í–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      expect(modelUrlSchema.parse('username/model:version')).toBe(
        'username/model:version'
      )
      expect(modelUrlSchema.parse('test_user/my_model:v1')).toBe(
        'test_user/my_model:v1'
      )

      // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      expect(() => modelUrlSchema.parse('invalid-format')).toThrow()
      expect(() => modelUrlSchema.parse('username/model')).toThrow() // –Ω–µ—Ç –≤–µ—Ä—Å–∏–∏
      expect(() => modelUrlSchema.parse('')).toThrow()
    })

    it('üî¥ numImagesSchema –¥–æ–ª–∂–Ω–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π', () => {
      // –í–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      expect(numImagesSchema.parse(1)).toBe(1)
      expect(numImagesSchema.parse(5)).toBe(5)
      expect(numImagesSchema.parse(10)).toBe(10)

      // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      expect(() => numImagesSchema.parse(0)).toThrow()
      expect(() => numImagesSchema.parse(11)).toThrow()
      expect(() => numImagesSchema.parse(1.5)).toThrow() // –Ω–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
    })

    it('üî¥ stepsSchema –¥–æ–ª–∂–Ω–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤', () => {
      // –í–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      expect(stepsSchema.parse(1)).toBe(1)
      expect(stepsSchema.parse(500)).toBe(500)
      expect(stepsSchema.parse(1000)).toBe(1000)

      // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      expect(() => stepsSchema.parse(0)).toThrow()
      expect(() => stepsSchema.parse(1001)).toThrow()
      expect(() => stepsSchema.parse(50.5)).toThrow() // –Ω–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
    })

    it('üî¥ textToImageRequestSchema –¥–æ–ª–∂–Ω–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã text-to-image', () => {
      const validRequest = {
        prompt: 'beautiful landscape',
        model: 'stable-diffusion',
        num_images: 2,
        telegram_id: '123456789',
        username: 'test_user',
        is_ru: true,
        bot_name: 'test_bot',
      }

      const result = textToImageRequestSchema.parse(validRequest)
      expect(result.prompt).toBe('beautiful landscape')
      expect(result.num_images).toBe(2)
      expect(result.telegram_id).toBe('123456789')
    })

    it('üî¥ neuroPhotoRequestSchema –¥–æ–ª–∂–Ω–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã neuro-photo', () => {
      const validRequest = {
        prompt: 'beautiful woman',
        model_url: 'username/model:version',
        num_images: 1,
        telegram_id: '123456789',
        username: 'test_user',
        is_ru: true,
        bot_name: 'test_bot',
        gender: 'female',
      }

      const result = neuroPhotoRequestSchema.parse(validRequest)
      expect(result.gender).toBe('female')
      expect(result.model_url).toBe('username/model:version')
    })

    it('üî¥ imageToVideoRequestSchema –¥–æ–ª–∂–Ω–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã image-to-video', () => {
      // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
      const standardRequest = {
        imageUrl: 'https://example.com/image.jpg',
        prompt: 'make it move',
        videoModel: 'runway-gen3',
        telegram_id: '123456789',
        username: 'test_user',
        is_ru: true,
        bot_name: 'test_bot',
      }

      const standardResult = imageToVideoRequestSchema.parse(standardRequest)
      expect(standardResult.imageUrl).toBe('https://example.com/image.jpg')
      expect(standardResult.prompt).toBe('make it move')

      // –ú–æ—Ä—Ñ–∏–Ω–≥
      const morphingRequest = {
        imageAUrl: 'https://example.com/imageA.jpg',
        imageBUrl: 'https://example.com/imageB.jpg',
        is_morphing: true,
        videoModel: 'runway-gen3',
        telegram_id: '123456789',
        username: 'test_user',
        is_ru: true,
        bot_name: 'test_bot',
      }

      const morphingResult = imageToVideoRequestSchema.parse(morphingRequest)
      expect(morphingResult.is_morphing).toBe(true)
      expect(morphingResult.imageAUrl).toBe('https://example.com/imageA.jpg')
    })

    it('üî¥ createModelTrainingRequestSchema –¥–æ–ª–∂–Ω–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', () => {
      const validRequest = {
        type: 'model-training',
        triggerWord: 'myface',
        modelName: 'my_model',
        steps: 500,
        telegram_id: '123456789',
        is_ru: true,
        bot_name: 'test_bot',
        gender: 'male',
      }

      const result = createModelTrainingRequestSchema.parse(validRequest)
      expect(result.triggerWord).toBe('myface')
      expect(result.steps).toBe(500)
      expect(result.gender).toBe('male')
    })
  })

  describe('üîó Webhook —Å—Ö–µ–º—ã', () => {
    it('üî¥ replicateStatusSchema –¥–æ–ª–∂–Ω–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å—ã Replicate', () => {
      // –í–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      expect(replicateStatusSchema.parse('starting')).toBe('starting')
      expect(replicateStatusSchema.parse('processing')).toBe('processing')
      expect(replicateStatusSchema.parse('succeeded')).toBe('succeeded')
      expect(replicateStatusSchema.parse('failed')).toBe('failed')
      expect(replicateStatusSchema.parse('canceled')).toBe('canceled')

      // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      expect(() => replicateStatusSchema.parse('unknown')).toThrow()
      expect(() => replicateStatusSchema.parse('')).toThrow()
    })

    it('üî¥ syncLabsStatusSchema –¥–æ–ª–∂–Ω–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å—ã SyncLabs', () => {
      // –í–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      expect(syncLabsStatusSchema.parse('PENDING')).toBe('PENDING')
      expect(syncLabsStatusSchema.parse('PROCESSING')).toBe('PROCESSING')
      expect(syncLabsStatusSchema.parse('COMPLETED')).toBe('COMPLETED')
      expect(syncLabsStatusSchema.parse('FAILED')).toBe('FAILED')

      // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
      expect(() => syncLabsStatusSchema.parse('UNKNOWN')).toThrow()
      expect(() => syncLabsStatusSchema.parse('pending')).toThrow() // lowercase
    })

    it('üî¥ robokassaCallbackSchema –¥–æ–ª–∂–Ω–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å Robokassa callback', () => {
      const validCallback = {
        inv_id: '12345',
        IncSum: 100.5,
        shp_telegram_id: '123456789',
        shp_bot_name: 'test_bot',
      }

      const result = robokassaCallbackSchema.parse(validCallback)
      expect(result.inv_id).toBe('12345')
      expect(result.IncSum).toBe(100.5)
      expect(result.shp_telegram_id).toBe('123456789')
    })

    it('üî¥ replicateWebhookSchema –¥–æ–ª–∂–Ω–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å Replicate webhook', () => {
      const validWebhook = {
        id: 'pred_123',
        version: 'v1.0.0',
        status: 'succeeded',
        input: { prompt: 'test' },
        output: 'https://example.com/result.jpg',
        urls: {
          get: 'https://api.replicate.com/v1/predictions/pred_123',
        },
        created_at: '2025-01-27T10:00:00Z',
      }

      const result = replicateWebhookSchema.parse(validWebhook)
      expect(result.id).toBe('pred_123')
      expect(result.status).toBe('succeeded')
      expect(result.output).toBe('https://example.com/result.jpg')
    })
  })

  describe('‚ùå –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', () => {
    it('üî¥ –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö', () => {
      try {
        telegramIdSchema.parse('invalid')
      } catch (error) {
        expect(error).toBeInstanceOf(ZodError)
        const zodError = error as ZodError
        expect(zodError.errors[0].message).toContain(
          'Telegram ID –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã'
        )
      }
    })

    it('üî¥ –¥–æ–ª–∂–Ω–∞ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã', () => {
      const invalidRequest = {
        prompt: '', // –ø—É—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç
        model_url: 'invalid-format', // –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        num_images: 0, // –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        telegram_id: 'abc', // –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ID
        is_ru: 'true', // —Å—Ç—Ä–æ–∫–∞ –≤–º–µ—Å—Ç–æ boolean
      }

      expect(() => neuroPhotoRequestSchema.parse(invalidRequest)).toThrow()
    })

    it('üî¥ –¥–æ–ª–∂–Ω–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö', () => {
      // –ß–∏—Å–ª–æ–≤–æ–π telegram_id –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å—Å—è –≤ —Å—Ç—Ä–æ–∫—É
      const result = telegramIdSchema.parse(123456789)
      expect(typeof result).toBe('string')
      expect(result).toBe('123456789')
    })
  })
})
