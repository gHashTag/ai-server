import { describe, it, expect, beforeEach, afterEach } from 'vitest'
import { closeConnection } from '@/db/drizzle-supabase'
import { drizzleORM } from '@/db/operations'

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
import {
  getUserBalance as oldGetUserBalance,
  invalidateBalanceCache,
} from '@/core/supabase/getUserBalance'
import { updateUserBalance as oldUpdateUserBalance } from '@/core/supabase/updateUserBalance'
import { PaymentType } from '@/interfaces/payments.interface'

describe('üî¥ TDD: –ú–∏–≥—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π –ø–ª–∞—Ç–µ–∂–µ–π –Ω–∞ Drizzle', () => {
  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  const testUser = {
    telegram_id: '555555555',
    username: 'payment_test_user',
    first_name: 'Payment',
    last_name: 'Test',
    bot_name: 'payment_bot',
  }

  beforeEach(async () => {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º
    await drizzleORM.users.insert(testUser)
  })

  afterEach(async () => {
    // –û—á–∏—â–∞–µ–º –∫—ç—à –±–∞–ª–∞–Ω—Å–∞
    invalidateBalanceCache(testUser.telegram_id)

    // –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
    try {
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const payments = await drizzleORM.payments.findByTelegramId(
        testUser.telegram_id
      )
      for (const payment of payments) {
        await drizzleORM.payments.delete(payment.id)
      }

      // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await drizzleORM.users.delete(testUser.telegram_id)
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
    }
    await closeConnection()
  })

  describe('üí∞ getUserBalance Migration', () => {
    it('üî¥ should return same balance as old function', async () => {
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂
      const testPayment = {
        telegram_id: testUser.telegram_id,
        bot_name: 'test_bot',
        amount: 100,
        stars: 50,
        currency: 'STARS',
        status: 'COMPLETED' as const,
        type: 'MONEY_INCOME' as const,
        payment_method: 'Test',
        description: 'Test payment for balance',
      }

      await drizzleORM.payments.insert(testPayment)

      // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å —Å—Ç–∞—Ä–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
      const oldBalance = await oldGetUserBalance(testUser.telegram_id)

      // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
      const newBalance = await drizzleORM.payments.getUserBalance(
        testUser.telegram_id
      )

      // –ë–∞–ª–∞–Ω—Å—ã –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å
      expect(newBalance).toBe(oldBalance)
      expect(newBalance).toBeGreaterThan(0)
    })

    it('üî¥ should return 0 for user with no payments', async () => {
      // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø–ª–∞—Ç–µ–∂–µ–π
      const oldBalance = await oldGetUserBalance(testUser.telegram_id)
      const newBalance = await drizzleORM.payments.getUserBalance(
        testUser.telegram_id
      )

      // –û–±–∞ –¥–æ–ª–∂–Ω—ã –≤–µ—Ä–Ω—É—Ç—å 0
      expect(oldBalance).toBe(0)
      expect(newBalance).toBe(0)
    })

    it('üî¥ should handle fractional stars correctly', async () => {
      // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —Å –¥—Ä–æ–±–Ω—ã–º–∏ –∑–≤–µ–∑–¥–∞–º–∏
      const fractionalPayment = {
        telegram_id: testUser.telegram_id,
        bot_name: 'test_bot',
        amount: 15.75,
        stars: 7.5, // –î—Ä–æ–±–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!
        currency: 'STARS',
        status: 'COMPLETED' as const,
        type: 'MONEY_INCOME' as const,
        payment_method: 'Test',
        description: 'Fractional stars test',
      }

      await drizzleORM.payments.insert(fractionalPayment)

      const oldBalance = await oldGetUserBalance(testUser.telegram_id)
      const newBalance = await drizzleORM.payments.getUserBalance(
        testUser.telegram_id
      )

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥—Ä–æ–±–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
      expect(newBalance).toBe(oldBalance)
      expect(newBalance).toBe(7.5)
    })
  })

  describe('üí≥ updateUserBalance Migration', () => {
    it('üî¥ should create payment record with Zod validation', async () => {
      const paymentAmount = 25.5
      const description = 'Test payment via Drizzle'

      // –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é (–∏–º–∏—Ç–∏—Ä—É–µ–º updateUserBalance)
      const paymentData = {
        telegram_id: testUser.telegram_id,
        bot_name: 'test_bot',
        amount: paymentAmount,
        stars: paymentAmount,
        currency: 'STARS',
        status: 'COMPLETED' as const,
        type: 'MONEY_INCOME' as const,
        payment_method: 'Internal',
        description,
      }

      const createdPayment = await drizzleORM.payments.insert(paymentData)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
      expect(createdPayment).toBeDefined()
      expect(String(createdPayment.telegram_id)).toBe(testUser.telegram_id)
      expect(Number(createdPayment.stars)).toBe(paymentAmount)
      expect(createdPayment.type).toBe('MONEY_INCOME')
      expect(createdPayment.description).toBe(description)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–∏–ª—Å—è
      const balance = await drizzleORM.payments.getUserBalance(
        testUser.telegram_id
      )
      expect(balance).toBe(paymentAmount)
    })

    it('üî¥ should handle MONEY_OUTCOME operations correctly', async () => {
      // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
      const incomePayment = {
        telegram_id: testUser.telegram_id,
        bot_name: 'test_bot',
        amount: 100,
        stars: 100,
        currency: 'STARS',
        status: 'COMPLETED' as const,
        type: 'MONEY_INCOME' as const,
        payment_method: 'Internal',
        description: 'Initial balance',
      }

      await drizzleORM.payments.insert(incomePayment)

      // –ó–∞—Ç–µ–º —Å–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
      const outcomePayment = {
        telegram_id: testUser.telegram_id,
        bot_name: 'test_bot',
        amount: 30,
        stars: 30,
        currency: 'STARS',
        status: 'COMPLETED' as const,
        type: 'MONEY_OUTCOME' as const,
        payment_method: 'Internal',
        description: 'Service usage',
        service_type: 'IMAGE_GENERATION',
      }

      await drizzleORM.payments.insert(outcomePayment)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
      const balance = await drizzleORM.payments.getUserBalance(
        testUser.telegram_id
      )
      expect(balance).toBe(70) // 100 - 30 = 70
    })

    it('üî¥ should validate payment data with Zod', async () => {
      // –¢–µ—Å—Ç —Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–º bot_name
      await expect(
        drizzleORM.payments.insert({
          telegram_id: testUser.telegram_id,
          amount: 10,
          stars: 10,
          status: 'COMPLETED',
          type: 'MONEY_INCOME',
        } as any)
      ).rejects.toThrow()

      // –¢–µ—Å—Ç —Å –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–º —Ç–∏–ø–æ–º –æ–ø–µ—Ä–∞—Ü–∏–∏
      await expect(
        drizzleORM.payments.insert({
          telegram_id: testUser.telegram_id,
          bot_name: 'test_bot',
          amount: 10,
          stars: 10,
          status: 'COMPLETED',
          type: 'INVALID_TYPE',
        } as any)
      ).rejects.toThrow()
    })
  })

  describe('üîç Payment Queries', () => {
    it('üî¥ should find payments by telegram_id', async () => {
      // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–ª–∞—Ç–µ–∂–µ–π
      const payments = [
        {
          telegram_id: testUser.telegram_id,
          bot_name: 'test_bot',
          amount: 10,
          stars: 10,
          currency: 'STARS',
          status: 'COMPLETED' as const,
          type: 'MONEY_INCOME' as const,
          payment_method: 'Test1',
          description: 'Payment 1',
        },
        {
          telegram_id: testUser.telegram_id,
          bot_name: 'test_bot',
          amount: 20,
          stars: 20,
          currency: 'STARS',
          status: 'COMPLETED' as const,
          type: 'MONEY_INCOME' as const,
          payment_method: 'Test2',
          description: 'Payment 2',
        },
      ]

      for (const payment of payments) {
        await drizzleORM.payments.insert(payment)
      }

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userPayments = await drizzleORM.payments.findByTelegramId(
        testUser.telegram_id
      )

      expect(userPayments).toHaveLength(2)
      expect(userPayments[0].description).toContain('Payment')
      expect(userPayments[1].description).toContain('Payment')
    })
  })
})
