import { getUSDtoRUBRate } from '@/services/exchangeRate.service'
import { logger } from '@/utils/logger'

/**
 * üîñ –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
 * –ï–¥–∏–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Ü–µ–Ω–æ–≤—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç
 * @updated 2025-08-19
 */

/**
 * –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª—é—Ç–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
 */
export const CURRENCY_CONFIG = {
  // –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –∑–≤–µ–∑–¥—ã –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
  STAR_COST_USD: 0.016,
  
  // –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞—Ü–µ–Ω–∫–∏ (50% = 1.5x)
  MARKUP_RATE: 1.5,
  
  // –û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞ —Å–∏—Å—Ç–µ–º—ã
  DEFAULT_CURRENCY: 'RUB' as const,
  
  // –ö—É—Ä—Å —Ä—É–±–ª—è –∫ –¥–æ–ª–ª–∞—Ä—É (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
  RUB_TO_USD_RATE: 85, // –ë–∞–∑–æ–≤—ã–π –∫—É—Ä—Å
} as const

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∫—É—Ä—Å —Ä—É–±–ª—è –∫ –¥–æ–ª–ª–∞—Ä—É (1 USD = X RUB)
// –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è —á–µ—Ä–µ–∑ Bybit API –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
let currentRate = 85 // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞
export async function getCurrentRate(): Promise<number> {
  try {
    currentRate = await getUSDtoRUBRate()
    return currentRate
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–∞ USDT/RUB',
      error: error instanceof Error ? error.message : 'Unknown error',
      using_rate: currentRate
    })
    return currentRate
  }
}

/**
 * –í—ã—á–∏—Å–ª—è–µ–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑–æ–≤—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç –∏ —Ç–µ–∫—É—â–µ–≥–æ –∫—É—Ä—Å–∞
 */
export function getDerivedValues() {
  return {
    // –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –∑–≤–µ–∑–¥—ã –≤ —Ä—É–±–ª—è—Ö
    STAR_COST_RUB: CURRENCY_CONFIG.STAR_COST_USD * currentRate,
    
    // –°—Ç–æ–∏–º–æ—Å—Ç—å –æ–¥–Ω–æ–π –∑–≤–µ–∑–¥—ã –≤ —Ä—É–±–ª—è—Ö —Å –Ω–∞—Ü–µ–Ω–∫–æ–π
    STAR_COST_RUB_WITH_MARKUP: CURRENCY_CONFIG.STAR_COST_USD * currentRate * CURRENCY_CONFIG.MARKUP_RATE,
  }
}

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–µ–π V1
 */
export const TRAINING_RATES_V1 = {
  costPerStepInStars: 0.22,
  costPerStarInDollars: CURRENCY_CONFIG.STAR_COST_USD,
  rublesToDollarsRate: currentRate,
} as const

/**
 * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–µ–π V2
 */
export const TRAINING_RATES_V2 = {
  costPerStepInStars: 2.1,
  costPerStarInDollars: CURRENCY_CONFIG.STAR_COST_USD,
  rublesToDollarsRate: currentRate,
} as const

/**
 * –°–∏—Å—Ç–µ–º–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
 */
export const SYSTEM_CONFIG = {
  starCost: CURRENCY_CONFIG.STAR_COST_USD,
  interestRate: CURRENCY_CONFIG.MARKUP_RATE,
  currency: CURRENCY_CONFIG.DEFAULT_CURRENCY,
  rublesToDollarsRate: currentRate,
}

/**
 * –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–æ–≤
 */
export const PricingCalculator = {
  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–æ–ª–ª–∞—Ä–æ–≤ –≤ –∑–≤–µ–∑–¥—ã —Å —É—á–µ—Ç–æ–º –Ω–∞—Ü–µ–Ω–∫–∏
   */
  usdToStars(usd: number): number {
    return Math.floor((usd / CURRENCY_CONFIG.STAR_COST_USD) * CURRENCY_CONFIG.MARKUP_RATE)
  },
  
  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–≤–µ–∑–¥ –≤ —Ä—É–±–ª–∏
   */
  starsToRub(stars: number): number {
    return parseFloat((stars * CURRENCY_CONFIG.STAR_COST_USD * currentRate).toFixed(2))
  },
  
  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –¥–æ–ª–ª–∞—Ä–æ–≤ –≤ —Ä—É–±–ª–∏
   */
  usdToRub(usd: number): number {
    return parseFloat((usd * currentRate).toFixed(2))
  },
  
  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ä—É–±–ª–µ–π –≤ –∑–≤–µ–∑–¥—ã (–¥–ª—è –ø–æ–∫—É–ø–∫–∏)
   */
  rubToStars(rub: number): number {
    return Math.floor(rub / getDerivedValues().STAR_COST_RUB)
  },
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export const starCost = CURRENCY_CONFIG.STAR_COST_USD
export const interestRate = CURRENCY_CONFIG.MARKUP_RATE
export const rublesToDollarsRate = currentRate

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—É—Ä—Å–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
getCurrentRate().catch(error => {
  logger.error({
    message: '‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫—É—Ä—Å–∞ USDT/RUB',
    error: error instanceof Error ? error.message : 'Unknown error'
  })
})

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(() => {
  getCurrentRate().catch(error => {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞ USDT/RUB',
      error: error instanceof Error ? error.message : 'Unknown error'
    })
  })
}, 300000) // 5 –º–∏–Ω—É—Ç