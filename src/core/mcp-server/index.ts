import { Server } from '@modelcontextprotocol/sdk/server/index.js'
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js'
import {
  CallToolRequestSchema,
  ErrorCode,
  ListToolsRequestSchema,
  McpError,
} from '@modelcontextprotocol/sdk/types.js'
import { logger } from '@/utils/logger'
import { MCP_TOOLS, MCPToolHandler, McpToolResponse } from './tools'
import { analyzeWithAI } from './ai-providers'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
interface McpToolRequest {
  name: string
  arguments?: Record<string, any>
}

interface PlanABConfig {
  useInngest: boolean
  fallbackMode: boolean
  abTestPercentage: number
}

/**
 * MCP-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –±–∞–∑–µ AI-SDK –ø–æ–≤–µ—Ä—Ö ingest-—Ñ—É–Ω–∫—Ü–∏–π
 * –†–µ–∞–ª–∏–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω Plan A/Plan B –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
 */
class MCPServer {
  private server: Server
  private planConfig: PlanABConfig
  private toolHandler: MCPToolHandler

  constructor() {
    this.server = new Server(
      {
        name: 'ai-server-mcp',
        version: '1.0.0',
        description: 'MCP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è AI –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º Plan A/Plan B'
      },
      {
        capabilities: {
          tools: {},
        },
      }
    )

    this.planConfig = {
      useInngest: process.env.USE_INNGEST === 'true',
      fallbackMode: process.env.FALLBACK_MODE === 'true',
      abTestPercentage: parseInt(process.env.AB_TEST_PERCENTAGE || '50', 10),
    }

    this.toolHandler = new MCPToolHandler({
      useInngest: this.planConfig.useInngest,
      fallbackMode: this.planConfig.fallbackMode,
      abTestPercentage: this.planConfig.abTestPercentage,
    })

    this.setupToolHandlers()
    logger.info('üöÄ MCP Server –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å AI-SDK –∏ Plan A/B –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º')
  }


  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ MCP
   */
  private setupToolHandlers(): void {
    // –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    this.server.setRequestHandler(ListToolsRequestSchema, async () => {
      const tools = [
        ...MCP_TOOLS,
        {
          name: 'analyze_with_ai',
          description: '–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é AI-SDK',
          inputSchema: {
            type: 'object',
            properties: {
              query: {
                type: 'string',
                description: '–ó–∞–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞'
              },
              context: {
                type: 'string',
                description: '–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞',
                default: ''
              }
            },
            required: ['query']
          }
        }
      ]

      logger.info(`MCP Server: –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ ${tools.length} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤`)
      
      return { tools }
    })

    // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
    this.server.setRequestHandler(CallToolRequestSchema, async (request) => {
      const { name, arguments: args } = request.params as McpToolRequest

      logger.info({
        message: 'MCP: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞',
        toolName: name,
        args: { ...args, telegram_id: args?.telegram_id }, // –°–∫—Ä—ã–≤–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –ª–æ–≥–∞—Ö
      })

      try {
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞ (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç bot_name)
        if (name === 'analyze_with_ai') {
          return await this.handleAIAnalysis(args)
        }

        // –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ toolHandler
        const toolNames = MCP_TOOLS.map(tool => tool.name)
        if (toolNames.includes(name)) {
          return await this.toolHandler.handleTool(name, args || {})
        }

        throw new McpError(
          ErrorCode.MethodNotFound,
          `–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: ${name}`
        )
      } catch (error) {
        logger.error({
          message: 'MCP: –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞',
          toolName: name,
          error: error instanceof Error ? error.message : 'Unknown error',
        })

        throw new McpError(
          ErrorCode.InternalError,
          `–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è ${name}: ${error instanceof Error ? error.message : 'Unknown error'}`
        )
      }
    })
  }


  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI-SDK –∏ Plan A/B –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
   */
  private async handleAIAnalysis(args: Record<string, any>): Promise<McpToolResponse> {
    const { query, context = '' } = args

    try {
      const result = await analyzeWithAI(query, context, {
        maxTokens: 1000,
        temperature: 0.7,
      })

      logger.info({
        message: 'MCP: AI –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω',
        query: query.substring(0, 100),
        provider: result.provider,
        success: result.success,
        responseLength: result.text.length,
        tokensUsed: result.tokensUsed,
      })

      const statusEmoji = result.success ? '‚úÖ' : '‚ùå'
      const providerInfo = result.provider !== 'none' ? `\nüì° –ü—Ä–æ–≤–∞–π–¥–µ—Ä: ${result.provider}` : ''
      const tokensInfo = result.tokensUsed ? `\nüî¢ –¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${result.tokensUsed}` : ''

      return {
        content: [
          {
            type: 'text',
            text: `ü§ñ AI –ê–Ω–∞–ª–∏–∑ ${statusEmoji}${providerInfo}${tokensInfo}\n\n${result.text}`,
          },
        ],
      }
    } catch (error) {
      logger.error({
        message: 'MCP: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞',
        query,
        error: error instanceof Error ? error.message : 'Unknown error',
      })

      return {
        content: [
          {
            type: 'text',
            text: `‚ùå –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞: ${error instanceof Error ? error.message : 'Unknown error'}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`,
          },
        ],
      }
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ MCP-—Å–µ—Ä–≤–µ—Ä–∞
   */
  public async start(): Promise<void> {
    const transport = new StdioServerTransport()
    await this.server.connect(transport)

    logger.info('üöÄ MCP Server –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ')
    logger.info({
      message: 'MCP Server –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è',
      planConfig: this.planConfig,
    })
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
export const mcpServer = new MCPServer()

// –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫, –µ—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  mcpServer.start().catch((error) => {
    logger.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ MCP Server:', error)
    process.exit(1)
  })
}