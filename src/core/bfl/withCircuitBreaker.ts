import { circuitBreakers } from '@/utils/circuitBreaker'
import { retryExternalAPI } from '@/utils/retryMechanism'
import { logger } from '@/utils/logger'

/**
 * –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è BFL API —Å Circuit Breaker –∏ Retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
 */
export class BFLWithReliability {
  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ fine-tune –º–æ–¥–µ–ª–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–±–æ–µ–≤
   */
  async createFinetune(
    options: {
      file_data: string
      finetune_comment: string
      trigger_word: string
      mode?: string
      iterations?: number
      learning_rate?: number
      captioning?: boolean
      priority?: string
      finetune_type?: string
      lora_rank?: number
      webhook_url?: string
      webhook_secret?: string
    },
    operationName = 'bfl-create-finetune'
  ) {
    return circuitBreakers.bfl.execute(async () => {
      return retryExternalAPI(async () => {
        logger.info('üéØ BFL create finetune', {
          trigger_word: options.trigger_word,
          mode: options.mode || 'character',
          iterations: options.iterations || 1000,
          operation: operationName,
        })

        const body = {
          file_data: options.file_data,
          finetune_comment: options.finetune_comment,
          trigger_word: options.trigger_word,
          mode: options.mode || 'character',
          iterations: options.iterations || 1000,
          learning_rate: options.learning_rate || 0.00001,
          captioning: options.captioning !== false,
          priority: options.priority || 'high_res_only',
          finetune_type: options.finetune_type || 'full',
          lora_rank: options.lora_rank || 32,
          webhook_url: options.webhook_url,
          webhook_secret: options.webhook_secret,
        }

        const response = await fetch('https://api.us1.bfl.ai/v1/finetune', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Key': process.env.BFL_API_KEY as string,
          },
          body: JSON.stringify(body),
        })

        if (!response.ok) {
          logger.error('‚ùå BFL create finetune failed', {
            operation: operationName,
            status: response.status,
            statusText: response.statusText,
          })
          throw new Error(
            `BFL create finetune failed: ${response.status} ${response.statusText}`
          )
        }

        const result = await response.json()

        logger.info('‚úÖ BFL create finetune success', {
          operation: operationName,
          finetune_id: result.finetune_id,
          trigger_word: options.trigger_word,
        })

        return result
      }, operationName)
    })
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π fine-tune —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–±–æ–µ–≤
   */
  async getFinetuneDetails(
    finetuneId: string,
    operationName = 'bfl-get-finetune-details'
  ) {
    return circuitBreakers.bfl.execute(async () => {
      return retryExternalAPI(async () => {
        logger.info('üîç BFL get finetune details', {
          finetune_id: finetuneId,
          operation: operationName,
        })

        const response = await fetch(
          `https://api.us1.bfl.ai/v1/finetune_details?finetune_id=${finetuneId}`,
          {
            method: 'GET',
            headers: {
              'X-Key': process.env.BFL_API_KEY as string,
              'Content-Type': 'application/json',
            },
          }
        )

        if (!response.ok) {
          logger.error('‚ùå BFL get finetune details failed', {
            operation: operationName,
            finetune_id: finetuneId,
            status: response.status,
            statusText: response.statusText,
          })
          throw new Error(
            `BFL get finetune details failed: ${response.status} ${response.statusText}`
          )
        }

        const result = await response.json()

        logger.info('‚úÖ BFL get finetune details success', {
          operation: operationName,
          finetune_id: finetuneId,
          status: result.finetune_details?.status,
        })

        return result
      }, operationName)
    })
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ Telegram ID –∏–∑ finetune –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
   */
  async getTelegramIdFromFinetune(
    finetuneId: string,
    operationName = 'bfl-get-telegram-id'
  ): Promise<string | null> {
    try {
      const data = await this.getFinetuneDetails(finetuneId, operationName)
      const telegramId = data.finetune_details?.finetune_comment

      logger.info('‚úÖ BFL get telegram ID success', {
        operation: operationName,
        finetune_id: finetuneId,
        telegram_id: telegramId,
      })

      return telegramId || null
    } catch (error) {
      logger.error('‚ùå BFL get telegram ID failed', {
        operation: operationName,
        finetune_id: finetuneId,
        error: error instanceof Error ? error.message : String(error),
      })
      return null
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è BFL API
   */
  async healthCheck(operationName = 'bfl-health-check'): Promise<boolean> {
    try {
      return await circuitBreakers.bfl.execute(async () => {
        return retryExternalAPI(async () => {
          logger.debug('üè• BFL health check', {
            operation: operationName,
          })

          // BFL –Ω–µ –∏–º–µ–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ health endpoint,
          // –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ API
          const response = await fetch(
            'https://api.us1.bfl.ai/v1/finetune_details?finetune_id=test',
            {
              method: 'GET',
              headers: {
                'X-Key': process.env.BFL_API_KEY as string,
                'Content-Type': 'application/json',
              },
            }
          )

          // –û–∂–∏–¥–∞–µ–º 400 –∏–ª–∏ 404 –¥–ª—è –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ID, —á—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç —á—Ç–æ API —Ä–∞–±–æ—Ç–∞–µ—Ç
          if (
            response.status === 400 ||
            response.status === 404 ||
            response.status === 200
          ) {
            logger.debug('‚úÖ BFL health check success', {
              operation: operationName,
              status: response.status,
            })
            return true
          } else if (response.status >= 500) {
            logger.error('‚ùå BFL health check failed', {
              operation: operationName,
              status: response.status,
            })
            throw new Error(`BFL health check failed: ${response.status}`)
          } else {
            // –î—Ä—É–≥–∏–µ —Å—Ç–∞—Ç—É—Å—ã —Ç–æ–∂–µ —Å—á–∏—Ç–∞–µ–º —É—Å–ø–µ—à–Ω—ã–º–∏ (API –æ—Ç–≤–µ—á–∞–µ—Ç)
            logger.debug('‚úÖ BFL health check success (non-standard status)', {
              operation: operationName,
              status: response.status,
            })
            return true
          }
        }, operationName)
      })
    } catch (error) {
      logger.error('‚ùå BFL health check circuit breaker failed', {
        operation: operationName,
        error: error instanceof Error ? error.message : String(error),
      })
      return false
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
export const bflReliable = new BFLWithReliability()
