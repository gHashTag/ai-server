import { replicate } from './index'
import { circuitBreakers } from '@/utils/circuitBreaker'
import { retryExternalAPI } from '@/utils/retryMechanism'
import { logger } from '@/utils/logger'

/**
 * –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è Replicate API —Å Circuit Breaker –∏ Retry –º–µ—Ö–∞–Ω–∏–∑–º–æ–º
 */
export class ReplicateWithReliability {
  /**
   * –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–±–æ–µ–≤
   */
  async run<T>(
    model: `${string}/${string}` | `${string}/${string}:${string}`,
    options: any,
    operationName = 'replicate-run'
  ): Promise<T> {
    return circuitBreakers.replicate.execute(async () => {
      return retryExternalAPI(async () => {
        logger.info('ü§ñ Replicate API call', {
          model,
          operation: operationName,
          hasInput: !!options?.input,
        })

        const result = await replicate.run(model, options)

        logger.info('‚úÖ Replicate API success', {
          model,
          operation: operationName,
          hasResult: !!result,
        })

        return result as T
      }, operationName)
    })
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–±–æ–µ–≤
   */
  async getModel(
    username: string,
    modelName: string,
    operationName = 'replicate-get-model'
  ) {
    return circuitBreakers.replicate.execute(async () => {
      return retryExternalAPI(async () => {
        logger.info('üîç Replicate get model', {
          username,
          modelName,
          operation: operationName,
        })

        const model = await replicate.models.get(username, modelName)

        logger.info('‚úÖ Replicate get model success', {
          username,
          modelName,
          operation: operationName,
          url: model.url,
        })

        return model
      }, operationName)
    })
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–±–æ–µ–≤
   */
  async createModel(
    username: string,
    modelName: string,
    options: any,
    operationName = 'replicate-create-model'
  ) {
    return circuitBreakers.replicate.execute(async () => {
      return retryExternalAPI(async () => {
        logger.info('üèóÔ∏è Replicate create model', {
          username,
          modelName,
          operation: operationName,
          options,
        })

        const model = await replicate.models.create(
          username,
          modelName,
          options
        )

        logger.info('‚úÖ Replicate create model success', {
          username,
          modelName,
          operation: operationName,
          url: model.url,
        })

        return model
      }, operationName)
    })
  }

  /**
   * –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–±–æ–µ–≤
   */
  async listModels(operationName = 'replicate-list-models') {
    return circuitBreakers.replicate.execute(async () => {
      return retryExternalAPI(async () => {
        logger.info('üìã Replicate list models', {
          operation: operationName,
        })

        const models = await replicate.models.list()

        logger.info('‚úÖ Replicate list models success', {
          operation: operationName,
          count: models.results?.length || 0,
        })

        return models
      }, operationName)
    })
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–±–æ–µ–≤
   */
  async createTraining(
    owner: string,
    model: string,
    version: string,
    options: any,
    operationName = 'replicate-create-training'
  ) {
    return circuitBreakers.replicate.execute(async () => {
      return retryExternalAPI(async () => {
        logger.info('üéØ Replicate create training', {
          owner,
          model,
          version,
          operation: operationName,
          destination: options.destination,
        })

        const training = await replicate.trainings.create(
          owner,
          model,
          version,
          options
        )

        logger.info('‚úÖ Replicate create training success', {
          owner,
          model,
          operation: operationName,
          trainingId: training.id,
          status: training.status,
        })

        return training
      }, operationName)
    })
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–±–æ–µ–≤
   */
  async getTraining(
    trainingId: string,
    operationName = 'replicate-get-training'
  ) {
    return circuitBreakers.replicate.execute(async () => {
      return retryExternalAPI(async () => {
        logger.debug('üîç Replicate get training', {
          trainingId,
          operation: operationName,
        })

        const training = await replicate.trainings.get(trainingId)

        logger.debug('‚úÖ Replicate get training success', {
          trainingId,
          operation: operationName,
          status: training.status,
        })

        return training
      }, operationName)
    })
  }

  /**
   * –û—Ç–º–µ–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–±–æ–µ–≤
   */
  async cancelTraining(
    trainingId: string,
    operationName = 'replicate-cancel-training'
  ) {
    return circuitBreakers.replicate.execute(async () => {
      return retryExternalAPI(async () => {
        logger.info('üõë Replicate cancel training', {
          trainingId,
          operation: operationName,
        })

        const result = await replicate.trainings.cancel(trainingId)

        logger.info('‚úÖ Replicate cancel training success', {
          trainingId,
          operation: operationName,
        })

        return result
      }, operationName)
    })
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ fetch —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç —Å–±–æ–µ–≤
   */
  async getLatestModelUrl(
    modelName: string,
    username?: string,
    operationName = 'replicate-get-latest-model-url'
  ): Promise<string> {
    return circuitBreakers.replicate.execute(async () => {
      return retryExternalAPI(async () => {
        const actualUsername = username || process.env.REPLICATE_USERNAME
        if (!actualUsername) {
          throw new Error(
            'REPLICATE_USERNAME is not set in environment variables'
          )
        }

        logger.info('üîç Replicate get latest model URL', {
          username: actualUsername,
          modelName,
          operation: operationName,
        })

        const response = await fetch(
          `https://api.replicate.com/v1/models/${actualUsername}/${modelName}`,
          {
            method: 'GET',
            headers: {
              Authorization: `Bearer ${process.env.REPLICATE_API_TOKEN}`,
              'Content-Type': 'application/json',
            },
          }
        )

        if (!response.ok) {
          if (response.status === 404) {
            const error = new Error(
              `Model ${actualUsername}/${modelName} not found or has no version yet.`
            )
            logger.warn('‚ö†Ô∏è Replicate model not found', {
              username: actualUsername,
              modelName,
              operation: operationName,
              status: response.status,
            })
            throw error
          }
          throw new Error(
            `Failed to fetch latest version id, status: ${response.status}`
          )
        }

        const data = await response.json()
        if (!data.latest_version?.id) {
          throw new Error(
            `Latest version ID not found for model ${actualUsername}/${modelName}`
          )
        }

        const model_url = `${actualUsername}/${modelName}:${data.latest_version.id}`

        logger.info('‚úÖ Replicate get latest model URL success', {
          username: actualUsername,
          modelName,
          operation: operationName,
          model_url,
        })

        return model_url
      }, operationName)
    })
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Replicate API
   */
  async healthCheck(
    operationName = 'replicate-health-check'
  ): Promise<boolean> {
    try {
      return await circuitBreakers.replicate.execute(async () => {
        return retryExternalAPI(async () => {
          logger.debug('üè• Replicate health check', {
            operation: operationName,
          })

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –∫ API
          const models = await replicate.models.list()

          if (models && models.results) {
            logger.debug('‚úÖ Replicate health check success', {
              operation: operationName,
              modelsCount: models.results.length,
            })
            return true
          } else {
            logger.error('‚ùå Replicate health check failed', {
              operation: operationName,
              reason: 'No models returned',
            })
            throw new Error('Replicate health check failed: No models returned')
          }
        }, operationName)
      })
    } catch (error) {
      logger.error('‚ùå Replicate health check circuit breaker failed', {
        operation: operationName,
        error: error instanceof Error ? error.message : String(error),
      })
      return false
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton instance
export const replicateReliable = new ReplicateWithReliability()
