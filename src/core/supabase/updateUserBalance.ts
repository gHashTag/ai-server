import { supabase } from './index'
import { logger } from '@/utils/logger'
import { PaymentService } from '@/interfaces/payments.interface'

type BalanceUpdateMetadata = {
  stars?: number
  payment_method?: PaymentService
  bot_name?: string
  language?: string
  service_type?: PaymentService
  inv_id?: string
  modePrice?: number
  currentBalance?: number
  paymentAmount?: number
  [key: string]: any
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ payments
 * @returns Promise<boolean> - —É—Å–ø–µ—à–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
 */
export const updateUserBalance = async (
  telegram_id: string,
  amount: number,
  type: 'income' | 'outcome',
  description?: string,
  metadata?: BalanceUpdateMetadata
): Promise<boolean> => {
  try {
    // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    logger.info('üîç –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ updateUserBalance:', {
      log_description: 'Input parameters for updateUserBalance',
      telegram_id,
      amount,
      amount_type: typeof amount,
      type,
      operation_description: description,
      metadata: metadata ? JSON.stringify(metadata) : '–Ω–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö',
    })

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!telegram_id) {
      logger.error('‚ùå –ü—É—Å—Ç–æ–π telegram_id –≤ updateUserBalance:', {
        description: 'Empty telegram_id in updateUserBalance',
        telegram_id,
      })
      return false
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å—É–º–º—ã –æ–ø–µ—Ä–∞—Ü–∏–∏
    if (amount === undefined || amount === null || isNaN(Number(amount))) {
      logger.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏:', {
        description: 'Invalid operation amount',
        amount,
        telegram_id,
      })
      return false
    }

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º amount –≤ —á–∏—Å–ª–æ
    let safeAmount = Number(amount)
    const originalAmount = safeAmount // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ª–æ–≥–æ–≤

    // –≠–ö–°–¢–†–ï–ù–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ –æ–ø–ª–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    if (
      description &&
      description.includes('Payment for generating') &&
      type === 'outcome'
    ) {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ modePrice –∏–∑ metadata
      if (metadata?.modePrice && typeof metadata.modePrice === 'number') {
        logger.info('üéØ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É—é modePrice –∏–∑ metadata:', {
          description: 'FORCED use of modePrice from metadata',
          telegram_id,
          original_amount: safeAmount,
          modePrice: metadata.modePrice,
        })
        safeAmount = metadata.modePrice
      }
      // –ò–ª–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º paymentAmount
      else if (
        metadata?.paymentAmount &&
        typeof metadata.paymentAmount === 'number'
      ) {
        logger.info('üéØ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É—é paymentAmount –∏–∑ metadata:', {
          description: 'FORCED use of paymentAmount from metadata',
          telegram_id,
          original_amount: safeAmount,
          paymentAmount: metadata.paymentAmount,
        })
        safeAmount = metadata.paymentAmount
      } else {
        // –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å - –ø–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–∏
        logger.warn(
          '‚ö†Ô∏è –ù–µ –º–æ–≥—É –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5:',
          {
            description:
              'Cannot determine operation amount, setting default value of 5',
            telegram_id,
            original_amount: safeAmount,
          }
        )
        safeAmount = 5 // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –Ω–µ–π—Ä–æ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      }
    }
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—É–º–º—ã
    else {
      // --- –õ–û–ì–ò–ö–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –§–ê–ö–¢–ò–ß–ï–°–ö–û–ô –°–£–ú–ú–´ –¢–†–ê–ù–ó–ê–ö–¶–ò–ò ---

      // –ï—Å–ª–∏ –µ—Å—Ç—å modePrice –≤ metadata - —ç—Ç–æ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏
      if (metadata?.modePrice && typeof metadata.modePrice === 'number') {
        logger.info('üéØ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ metadata.modePrice:', {
          description: 'Found operation price in metadata.modePrice',
          telegram_id,
          original_amount: safeAmount,
          modePrice: metadata.modePrice,
        })
        safeAmount = metadata.modePrice
      }
      // –ï—Å–ª–∏ –µ—Å—Ç—å paymentAmount –≤ metadata - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      else if (
        metadata?.paymentAmount &&
        typeof metadata.paymentAmount === 'number'
      ) {
        logger.info('üéØ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ metadata.paymentAmount:', {
          description: 'Found operation price in metadata.paymentAmount',
          telegram_id,
          original_amount: safeAmount,
          paymentAmount: metadata.paymentAmount,
        })
        safeAmount = metadata.paymentAmount
      }
      // –ï—Å–ª–∏ –µ—Å—Ç—å stars –≤ metadata - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
      else if (metadata?.stars && typeof metadata.stars === 'number') {
        logger.info('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º stars –∏–∑ metadata –≤–º–µ—Å—Ç–æ amount:', {
          description: 'Using stars from metadata instead of amount',
          telegram_id,
          original_amount: safeAmount,
          stars_amount: metadata.stars,
        })
        safeAmount = metadata.stars
      }
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏—é –∫–æ–≥–¥–∞ –ø–µ—Ä–µ–¥–∞–Ω –±–∞–ª–∞–Ω—Å –≤–º–µ—Å—Ç–æ —Å—É–º–º—ã –æ–ø–µ—Ä–∞—Ü–∏–∏
      else if (
        metadata?.currentBalance &&
        Math.abs(metadata.currentBalance - safeAmount) < 100 &&
        type === 'outcome'
      ) {
        // –í–µ—Ä–æ—è—Ç–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –≤–º–µ—Å—Ç–æ —Å—É–º–º—ã –æ–ø–µ—Ä–∞—Ü–∏–∏
        // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º –∏ –Ω–æ–≤—ã–º –±–∞–ª–∞–Ω—Å–æ–º
        const operationAmount = Math.abs(metadata.currentBalance - safeAmount)
        logger.info('üîé –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ —Å—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–Ω–∏—Ü–µ –±–∞–ª–∞–Ω—Å–æ–≤:', {
          description: 'Detected operation amount as balance difference',
          telegram_id,
          currentBalance: metadata.currentBalance,
          newBalance: safeAmount,
          calculatedAmount: operationAmount,
        })
        safeAmount = operationAmount
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–∏–µ —Å—É–º–º—ã –¥–ª—è outcome –æ–ø–µ—Ä–∞—Ü–∏–π
    if (type === 'outcome' && safeAmount > 100) {
      logger.warn('‚ö†Ô∏è –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ –±–æ–ª—å—à–∞—è —Å—É–º–º–∞ —Å–ø–∏—Å–∞–Ω–∏—è, –≤–æ–∑–º–æ–∂–Ω–æ –æ—à–∏–±–∫–∞:', {
        description: 'Suspiciously large amount for outcome operation',
        telegram_id,
        original_amount: originalAmount,
        processed_amount: safeAmount,
      })

      // –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      if (description && description.toLowerCase().includes('generating')) {
        logger.info('üõ†Ô∏è –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ —Å—É–º–º—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', {
          description: 'Correcting amount for image generation',
          telegram_id,
          original_amount: safeAmount,
          new_amount: 5,
        })
        safeAmount = 5 // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      }
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞: –µ—Å–ª–∏ –ø–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª—É—á–∏–ª–∏ NaN, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0
    if (isNaN(safeAmount)) {
      logger.warn(
        '‚ö†Ô∏è –ü–æ—Å–ª–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø–æ–ª—É—á–∏–ª–∏ NaN, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É–º–º—É –≤ 0',
        {
          description: 'Got NaN after conversion, setting amount to 0',
          telegram_id,
          original_value: amount,
        }
      )
      safeAmount = 0
    }

    // –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—É–º–º—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    logger.info('‚úÖ –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', {
      description: 'Final transaction amount',
      telegram_id,
      original_amount: originalAmount,
      final_amount: safeAmount,
      type,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –±–∞–ª–∞–Ω—Å –¥–ª—è outcome –æ–ø–µ—Ä–∞—Ü–∏–π
    if (type === 'outcome') {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: userData, error: userError } = await supabase
        .from('users')
        .select('id')
        .eq('telegram_id', telegram_id)
        .single()

      if (userError) {
        logger.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', {
          description: 'User not found during transaction creation',
          telegram_id,
          error: userError.message,
        })
        return false
      }

      if (!userData) {
        logger.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö):', {
          description: 'User not found (no data)',
          telegram_id,
        })
        return false
      }

      // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã payments
      const { data: balanceData, error: balanceError } = await supabase.rpc(
        'get_user_balance',
        { user_telegram_id: Number(telegram_id) }
      )
      console.log('balanceData üìä', balanceData)

      // –ï—Å–ª–∏ RPC —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π SQL –∑–∞–ø—Ä–æ—Å
      let currentBalance = 0
      if (balanceError) {
        logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ RPC get_user_balance:', {
          description: 'Error calling RPC get_user_balance',
          telegram_id,
          error: balanceError.message,
        })

        // –í—ã—á–∏—Å–ª—è–µ–º –±–∞–ª–∞–Ω—Å —Å—É–º–º–∏—Ä—É—è –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const { data: paymentsData, error: paymentsError } = await supabase
          .from('payments')
          .select('stars, type')
          .eq('telegram_id', Number(telegram_id))
          .eq('status', 'COMPLETED')

        if (paymentsError) {
          logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π:', {
            description: 'Error getting payments history',
            telegram_id,
            error: paymentsError.message,
          })
          return false
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –±–∞–ª–∞–Ω—Å: —Å—É–º–º–∞ –≤—Å–µ—Ö –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π –º–∏–Ω—É—Å —Å—É–º–º–∞ –≤—Å–µ—Ö —Å–ø–∏—Å–∞–Ω–∏–π
        currentBalance = (paymentsData || []).reduce((sum, payment) => {
          if (payment.type === 'income') {
            return sum + (payment.stars || 0)
          } else {
            return sum - (payment.stars || 0)
          }
        }, 0)
      } else {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç RPC —Ñ—É–Ω–∫—Ü–∏–∏
        currentBalance = Number(balanceData) || 0
      }

      logger.info('üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∏–∑ payments):', {
        description: 'User balance from payments table',
        telegram_id,
        balance: currentBalance,
        required_amount: safeAmount,
      })

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
      if (currentBalance < safeAmount) {
        logger.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ:', {
          description: 'Insufficient funds',
          telegram_id,
          balance: currentBalance,
          required_amount: safeAmount,
        })
        return false
      }
    } else {
      // –î–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: userData, error: userError } = await supabase
        .from('users')
        .select('id')
        .eq('telegram_id', telegram_id)
        .single()

      if (userError) {
        logger.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', {
          description: 'User not found during transaction creation',
          telegram_id,
          error: userError.message,
        })
        return false
      }

      if (!userData) {
        logger.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö):', {
          description: 'User not found (no data)',
          telegram_id,
        })
        return false
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ inv_id –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏)
    if (metadata?.inv_id) {
      logger.info('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', {
        description: 'Updating existing transaction record',
        telegram_id,
        inv_id: metadata.inv_id,
        amount: Math.abs(safeAmount),
        type,
      })

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
      const { error: updateError } = await supabase
        .from('payments')
        .update({
          status: 'COMPLETED',
        })
        .eq('inv_id', metadata.inv_id)

      if (updateError) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', {
          description: 'Error updating transaction record',
          telegram_id,
          inv_id: metadata.inv_id,
          error: updateError.message,
        })
        return false
      }

      logger.info('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', {
        description: 'Transaction successfully updated',
        telegram_id,
        inv_id: metadata.inv_id,
        amount: safeAmount,
        type,
      })
    } else {
      // –ï—Å–ª–∏ inv_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
      // –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–± –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ID
      const invId = `${Date.now()}-${Math.floor(
        Math.random() * 1000000
      )}-${telegram_id.substring(0, 5)}`

      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—É—é —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –∑–≤–µ–∑–¥
      const transactionAmount = Math.abs(safeAmount)

      logger.info('üíº –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', {
        description: 'Creating new transaction record',
        telegram_id,
        inv_id: invId,
        transaction_amount: transactionAmount,
        type,
      })

      // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã, —á—Ç–æ–±—ã —É–±–µ–¥–∏—Ç—å—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Ç–∏–ø–æ–≤
      try {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —Ç–∏–ø–æ–º –¥–∞–Ω–Ω—ã—Ö
        // –í—Å–µ —á–∏—Å–ª–æ–≤—ã–µ –ø–æ–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        // –ë–ï–ó–û–ü–ê–°–ù–û–ï –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –∑–∞—â–∏—Ç–∞ –æ—Ç null/undefined
        const safeRoundedAmount =
          transactionAmount != null ? Math.round(transactionAmount) : 0

        const { error: paymentError } = await supabase.from('payments').insert({
          telegram_id,
          inv_id: invId,
          currency: metadata?.currency || 'STARS',
          amount: safeRoundedAmount, // –ó–∞—â–∏—Ç–∞ –æ—Ç null/undefined
          status: 'COMPLETED',
          stars: safeRoundedAmount, // –ó–∞—â–∏—Ç–∞ –æ—Ç null/undefined
          type,
          description: description || `Balance ${type}`,
          payment_method:
            metadata?.payment_method ||
            (metadata?.service_type as PaymentService),
          bot_name: metadata?.bot_name || 'neuro_blogger_bot',
          language: metadata?.language || 'ru',
        })

        if (paymentError) {
          logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', {
            description: 'Error creating transaction record',
            telegram_id,
            error: paymentError.message,
            amount: transactionAmount,
          })
          return false
        }

        logger.info('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:', {
          description: 'Transaction successfully created',
          telegram_id,
          amount: transactionAmount,
          type,
        })
      } catch (insertError) {
        logger.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', {
          description: 'Exception during transaction record creation',
          telegram_id,
          error:
            insertError instanceof Error
              ? insertError.message
              : 'Unknown error',
          amount: transactionAmount,
        })
        return false
      }
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ Users –±–æ–ª—å—à–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è

    return true
  } catch (error) {
    logger.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', {
      description: 'Unexpected error creating transaction',
      telegram_id,
      error: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined,
    })

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º false –≤–º–µ—Å—Ç–æ –≤—ã–±—Ä–æ—Å–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    return false
  }
}
