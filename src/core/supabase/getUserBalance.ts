import { supabase } from './index'
import { logger } from '@/utils/logger'

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—É—Ç–µ–º —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ —Ç–∞–±–ª–∏—Ü–µ payments
 * @param telegram_id ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
 * @returns Promise<number> –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const getUserBalance = async (telegram_id: string): Promise<number> => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('id')
      .eq('telegram_id', telegram_id)
      .single()

    if (userError) {
      if (userError.code === 'PGRST116') {
        logger.error(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID ${telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.`, {
          description: 'User not found',
          telegram_id,
        })
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
      }
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
        description: 'Error checking user',
        telegram_id,
        error: userError.message,
      })
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –¥–æ—Ö–æ–¥–æ–≤ (income)
    const { data: incomeData, error: incomeError } = await supabase
      .from('payments')
      .select('stars')
      .eq('telegram_id', telegram_id)
      .eq('type', 'income')
      .eq('status', 'COMPLETED')

    if (incomeError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –æ –¥–æ—Ö–æ–¥–∞—Ö:', {
        description: 'Error fetching income records',
        telegram_id,
        error: incomeError.message,
      })
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –æ –¥–æ—Ö–æ–¥–∞—Ö')
    }

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ (outcome)
    const { data: outcomeData, error: outcomeError } = await supabase
      .from('payments')
      .select('stars')
      .eq('telegram_id', telegram_id)
      .eq('type', 'outcome')
      .eq('status', 'COMPLETED')

    if (outcomeError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö:', {
        description: 'Error fetching outcome records',
        telegram_id,
        error: outcomeError.message,
      })
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö')
    }

    // –°—É–º–º–∏—Ä—É–µ–º –≤—Å–µ –¥–æ—Ö–æ–¥—ã (income)
    const totalIncome = incomeData.reduce(
      (sum, record) => sum + (record.stars || 0),
      0
    )

    // –°—É–º–º–∏—Ä—É–µ–º –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã (outcome)
    const totalOutcome = outcomeData.reduce(
      (sum, record) => sum + (record.stars || 0),
      0
    )

    // –í—ã—á–∏—Å–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
    const balance = totalIncome - totalOutcome

    logger.info('üí∞ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞—Å—Å—á–∏—Ç–∞–Ω:', {
      description: 'User balance calculated',
      telegram_id,
      totalIncome,
      totalOutcome,
      balance,
    })

    return balance
  } catch (error) {
    // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ª–æ–≥–∏—Ä—É–µ–º –µ—ë –∏ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–∞–ª—å—à–µ
    if (error instanceof Error) {
      if (error.message === '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω') {
        throw error
      }
      logger.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –±–∞–ª–∞–Ω—Å–∞:', {
        description: 'Unexpected error calculating balance',
        telegram_id,
        error: error.message,
        stack: error.stack,
      })
    }
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
  }
}
