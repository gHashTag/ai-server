import { z } from 'zod'
import { supabase } from '.'
import { logger } from '@/utils/logger'
import { telegramIdSchema } from '@/schemas/common/base.schemas'

// Zod —Å—Ö–µ–º–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞
export const paymentInfoSchema = z.object({
  id: z.string().uuid(),
  inv_id: z.string().nullable(),
  telegram_id: z.string(),
  amount: z.number(),
  stars: z.number(),
  currency: z.string(),
  status: z.enum(['PENDING', 'COMPLETED', 'FAILED', 'CANCELLED']),
  type: z.enum(['MONEY_INCOME', 'MONEY_OUTCOME', 'REFUND']),
  payment_method: z.string(),
  description: z.string().nullable(),
  bot_name: z.string(),
  created_at: z.string(),
  payment_date: z.string().nullable(),
  subscription_type: z.string().nullable(),
  service_type: z.string().nullable(),
  metadata: z.record(z.any()).nullable(),
})

export type PaymentInfo = z.infer<typeof paymentInfoSchema>

// –°—Ö–µ–º–∞ –¥–ª—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
export const getPaymentsParamsSchema = z.object({
  telegram_id: telegramIdSchema,
  limit: z.number().min(1).max(100).default(50),
  offset: z.number().min(0).default(0),
  status: z.enum(['PENDING', 'COMPLETED', 'FAILED', 'CANCELLED']).optional(),
  type: z.enum(['MONEY_INCOME', 'MONEY_OUTCOME', 'REFUND']).optional(),
})

export type GetPaymentsParams = z.infer<typeof getPaymentsParamsSchema>

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã payments_v2
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Drizzle ORM –∏ Zod –≤–∞–ª–∏–¥–∞—Ü–∏—é
 */
export const getPaymentsInfoByTelegramIdV2 = async (
  params: GetPaymentsParams
): Promise<PaymentInfo[]> => {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const validatedParams = getPaymentsParamsSchema.parse(params)

    logger.info('üí≥ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ payments_v2:', {
      telegram_id: validatedParams.telegram_id,
      limit: validatedParams.limit,
      offset: validatedParams.offset,
      filters: {
        status: validatedParams.status,
        type: validatedParams.type,
      },
    })

    // –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å –∫ payments_v2
    let query = supabase
      .from('payments_v2')
      .select('*')
      .eq('telegram_id', validatedParams.telegram_id)
      .order('created_at', { ascending: false })
      .range(
        validatedParams.offset,
        validatedParams.offset + validatedParams.limit - 1
      )

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
    if (validatedParams.status) {
      query = query.eq('status', validatedParams.status)
    }

    if (validatedParams.type) {
      query = query.eq('type', validatedParams.type)
    }

    const { data, error } = await query

    if (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –∏–∑ payments_v2:', {
        error: error.message,
        error_details: error,
        telegram_id: validatedParams.telegram_id,
      })
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π: ${error.message}`)
    }

    if (!data || data.length === 0) {
      logger.info('‚ÑπÔ∏è –ü–ª–∞—Ç–µ–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:', {
        telegram_id: validatedParams.telegram_id,
      })
      return []
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Zod
    const validatedPayments = data
      .map((payment, index) => {
        try {
          return paymentInfoSchema.parse(payment)
        } catch (validationError) {
          logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', {
            payment_index: index,
            payment_id: payment.id,
            validation_error:
              validationError instanceof z.ZodError
                ? validationError.errors
                : validationError,
          })
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
          return null
        }
      })
      .filter((payment): payment is PaymentInfo => payment !== null)

    logger.info('‚úÖ –ü–ª–∞—Ç–µ–∂–∏ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ payments_v2:', {
      telegram_id: validatedParams.telegram_id,
      total_found: data.length,
      valid_payments: validatedPayments.length,
    })

    return validatedPayments
  } catch (error) {
    if (error instanceof z.ZodError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π:', {
        validation_errors: error.errors,
        params,
      })
      throw new Error(
        `–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error.errors.map(e => e.message).join(', ')}`
      )
    }

    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ getPaymentsInfoByTelegramIdV2:', {
      error: error instanceof Error ? error.message : String(error),
      error_details: error,
      params,
    })
    throw error
  }
}

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
 */
export const getPaymentsInfoByTelegramIdSimple = async (
  telegram_id: string
): Promise<{ id: string; amount: number; date: string }[]> => {
  const payments = await getPaymentsInfoByTelegramIdV2({ telegram_id })

  return payments.map(payment => ({
    id: payment.id,
    amount: payment.amount,
    date: payment.created_at,
  }))
}
