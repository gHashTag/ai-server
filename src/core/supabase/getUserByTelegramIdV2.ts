import { z } from 'zod'
import { supabase } from '.'
import { logger } from '@/utils/logger'
import { telegramIdSchema } from '@/schemas/common/base.schemas'

// –°—Ö–µ–º–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª—è Supabase)
export const userResponseSchema = z.object({
  id: z.number().int(),
  telegram_id: z.string(),
  username: z.string().nullable(),
  first_name: z.string().nullable(),
  last_name: z.string().nullable(),
  language_code: z.string().nullable(),
  level: z.number().int().nullable(),
  gender: z.string().nullable(),
  bot_name: z.string().nullable(),
  created_at: z.string(), // Supabase –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—ã –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
  updated_at: z.string(), // Supabase –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—ã –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
})

// –¢–∏–ø –¥–ª—è –æ—Ç–≤–µ—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–∏
export type UserResponse = z.infer<typeof userResponseSchema> | null

// –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
type UserCache = {
  [key: string]: {
    user: UserResponse
    timestamp: number
  }
}

// –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (5 –º–∏–Ω—É—Ç)
const USER_CACHE_TTL = 5 * 60 * 1000

// –ö—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const userCache: UserCache = {}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
 * –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º, Zod –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –ª—É—á—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
 */
export const getUserByTelegramIdV2 = async (
  telegram_id: string
): Promise<UserResponse> => {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    const validatedTelegramId = telegramIdSchema.parse(telegram_id)

    const cacheKey = validatedTelegramId
    const now = Date.now()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    if (
      userCache[cacheKey] &&
      now - userCache[cacheKey].timestamp < USER_CACHE_TTL
    ) {
      logger.info('üíæ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫—ç—à–∞:', {
        description: 'Getting user from cache',
        telegram_id: validatedTelegramId,
      })
      return userCache[cacheKey].user
    }

    logger.info('üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID V2:', {
      description: 'Getting user by Telegram ID from database',
      telegram_id: validatedTelegramId,
    })

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Supabase
    const { data, error } = await supabase
      .from('users')
      .select('*')
      .eq('telegram_id', validatedTelegramId.toString())
      .single()

    if (error) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
      if (error.code === 'PGRST116') {
        logger.info('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', {
          description: 'User not found',
          telegram_id: validatedTelegramId,
        })

        // –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (null)
        userCache[cacheKey] = {
          user: null,
          timestamp: now,
        }

        return null
      }

      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
        description: 'Error getting user by Telegram ID',
        error: error.message,
        telegram_id: validatedTelegramId,
      })
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`)
    }

    if (!data) {
      userCache[cacheKey] = {
        user: null,
        timestamp: now,
      }
      return null
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Zod
    const validatedUser = userResponseSchema.parse(data)

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à
    userCache[cacheKey] = {
      user: validatedUser,
      timestamp: now,
    }

    logger.info('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω:', {
      description: 'User retrieved and cached',
      telegram_id: validatedTelegramId,
      user_id: validatedUser.id,
    })

    return validatedUser
  } catch (error) {
    logger.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ getUserByTelegramIdV2:', {
      description: 'Unexpected error in getUserByTelegramIdV2',
      error: error instanceof Error ? error.message : String(error),
      telegram_id,
    })
    throw error
  }
}

/**
 * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ Telegram ID
 */
export const invalidateUserCache = (telegram_id: string): void => {
  const cacheKey = telegram_id

  if (userCache[cacheKey]) {
    delete userCache[cacheKey]
    logger.info('üîÑ –ö—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω:', {
      description: 'User cache invalidated',
      telegram_id,
    })
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏
 */
export const clearUserCache = (): void => {
  Object.keys(userCache).forEach(key => delete userCache[key])
  logger.info('üßπ –í–µ—Å—å –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—á–∏—â–µ–Ω:', {
    description: 'All user cache cleared',
  })
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ—Ç–ª–∞–¥–∫–∏
 */
export const getUserCacheStats = () => {
  const now = Date.now()
  const totalEntries = Object.keys(userCache).length
  const validEntries = Object.values(userCache).filter(
    entry => now - entry.timestamp < USER_CACHE_TTL
  ).length
  const expiredEntries = totalEntries - validEntries

  return {
    total: totalEntries,
    valid: validEntries,
    expired: expiredEntries,
    ttl_ms: USER_CACHE_TTL,
  }
}
