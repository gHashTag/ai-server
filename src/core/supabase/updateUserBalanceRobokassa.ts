// src/core/supabase/updateUserBalance.ts
import { supabase } from '@/core/supabase'
import { logger } from '@/utils/logger'
import { invalidateBalanceCache } from './getUserBalance'

type BalanceUpdateMetadata = {
  // ... —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
  [key: string]: any
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ payments
 * @returns Promise<boolean> - —É—Å–ø–µ—à–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
 */
export const updateUserBalanceRobokassa = async (
  telegram_id: string,
  amount: number, // –°—É–º–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è –¥–ª—è income, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–∞—è –¥–ª—è outcome)
  type: 'money_income' | 'money_outcome', // –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏
  description?: string,
  metadata?: BalanceUpdateMetadata
): Promise<boolean> => {
  try {
    logger.info('üîç –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ updateUserBalance:', {
      /*...*/
    })

    // ... –ü—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (telegram_id, amount) ...

    const safeAmount = Number(amount) // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ

    // ... –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ amount (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –±–∞–ª–∞–Ω—Å –≤–º–µ—Å—Ç–æ —Å—É–º–º—ã, –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–æ–ª—å—à–∏–µ —Å—É–º–º—ã) ...

    // ... –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è outcome –æ–ø–µ—Ä–∞—Ü–∏–π ...
    // –í–∞–∂–Ω–æ: –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å, –≤—ã–∑—ã–≤–∞–µ—Ç supabase.rpc('get_user_balance', ...) –∏–ª–∏ —Å—á–∏—Ç–∞–µ—Ç –ø–æ payments_v2
    // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —Å—Ä–µ–¥—Å—Ç–≤ (currentBalance < safeAmount)

    // ... –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è inv_id –≤ metadata –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏ ...
    if (metadata?.inv_id) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ payments_v2 –Ω–∞ COMPLETED
      // ...
    } else {
      // –ï—Å–ª–∏ inv_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –≤ payments_v2
      const invId = `${Date.now()}-...` // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID
      const transactionAmount = Math.abs(safeAmount)
      logger.info('üíº –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', {
        /*...*/
      })

      const { error: paymentError } = await supabase
        .from('payments_v2') // –†–∞–±–æ—Ç–∞–µ—Ç —Å –ù–û–í–û–ô —Ç–∞–±–ª–∏—Ü–µ–π
        .insert({
          telegram_id,
          inv_id: invId,
          currency: metadata?.currency || 'STARS',
          amount: Math.round(transactionAmount), // –°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
          status: 'COMPLETED', // –°—Ä–∞–∑—É —Å—Ç–∞–≤–∏—Ç COMPLETED
          stars: Math.round(transactionAmount), // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ amount == stars –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
          type, // 'money_income' –∏–ª–∏ 'money_outcome'
          description: description || `Balance ${type}`,
          payment_method: metadata?.service_type, // –ò—Å–ø–æ–ª—å–∑—É–µ—Ç service_type –∫–∞–∫ payment_method? ü§î
          bot_name: metadata?.bot_name || 'neuro_blogger_bot',
          language: metadata?.language || 'ru',
          // –í–ê–ñ–ù–û: –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç subscription_type!
        })

      if (paymentError) {
        // ... –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ ...
        return false
      }
      logger.info('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:', {
        /*...*/
      })
    }

    // --- –î–û–ë–ê–í–õ–ï–ù–û: –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ ---
    // –ù—É–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å invalidateBalanceCache –∏–∑ ./getUserBalance
    invalidateBalanceCache(telegram_id)

    return true // –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –≤ —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ updateUserBalance:', {
      /*...*/
    })
    return false
  }
}
