// src/core/supabase/updateUserBalanceRobokassa.ts
import { supabase } from '@/core/supabase'
import { logger } from '@/utils/logger'
import { invalidateBalanceCache } from './getUserBalance'
import { ModeEnum } from '@/interfaces/modes'

type BalanceUpdateMetadata = {
  payment_method?: string
  bot_name?: string
  language?: string
  service_type?: ModeEnum | string
  currency?: string
  payment_id?: string
  [key: string]: any
}

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –≤ —Ç–∞–±–ª–∏—Ü–µ payments_v2
 * –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —á–µ—Ä–µ–∑ Robokassa —Å –ø–æ–∏—Å–∫–æ–º –ø–æ inv_id
 * @param inv_id - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
 * @returns Promise<boolean> - —É—Å–ø–µ—à–Ω–æ –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ/—Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
 */
export const updateUserBalanceRobokassa = async (
  inv_id: string, // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º!
  telegram_id: string,
  amount: number,
  type: 'MONEY_INCOME' | 'MONEY_OUTCOME',
  description?: string,
  metadata?: BalanceUpdateMetadata
): Promise<boolean> => {
  try {
    logger.info('üîç –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ updateUserBalanceRobokassa:', {
      description: 'Input parameters for updateUserBalanceRobokassa',
      inv_id,
      telegram_id,
      amount,
      type,
      operation_description: description,
      metadata: metadata ? JSON.stringify(metadata) : '–Ω–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö',
    })

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (!inv_id) {
      logger.error('‚ùå –ü—É—Å—Ç–æ–π inv_id –≤ updateUserBalanceRobokassa:', {
        description: 'Empty inv_id in updateUserBalanceRobokassa',
        inv_id,
      })
      return false
    }

    if (!telegram_id) {
      logger.error('‚ùå –ü—É—Å—Ç–æ–π telegram_id –≤ updateUserBalanceRobokassa:', {
        description: 'Empty telegram_id in updateUserBalanceRobokassa',
        telegram_id,
      })
      return false
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Å—É–º–º—ã –æ–ø–µ—Ä–∞—Ü–∏–∏
    if (amount === undefined || amount === null || isNaN(Number(amount))) {
      logger.error('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏:', {
        description: 'Invalid operation amount',
        amount,
        telegram_id,
      })
      return false
    }

    const safeAmount = Number(amount)
    const transactionAmount = Math.abs(safeAmount)

    // –ì–õ–ê–í–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –ø–æ inv_id
    logger.info('üîç –ü–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏ –ø–æ inv_id:', {
      description: 'Searching for existing record by inv_id',
      inv_id,
    })

    const { data: existingPayment, error: searchError } = await supabase
      .from('payments_v2')
      .select('*')
      .eq('inv_id', inv_id)
      .maybeSingle()

    if (searchError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏:', {
        description: 'Error searching for existing record',
        inv_id,
        error: searchError.message,
      })
      return false
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('id')
      .eq('telegram_id', telegram_id)
      .single()

    if (userError || !userData) {
      logger.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', {
        description: 'User not found',
        telegram_id,
        error: userError?.message,
      })
      return false
    }

    // –î–ª—è MONEY_OUTCOME –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
    if (type === 'MONEY_OUTCOME') {
      const { data: balanceData, error: balanceError } = await supabase.rpc(
        'get_user_balance',
        { user_telegram_id: telegram_id }
      )

      if (balanceError) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', {
          description: 'Error getting user balance',
          telegram_id,
          error: balanceError.message,
        })
        return false
      }

      const currentBalance = Number(balanceData) || 0
      if (currentBalance < transactionAmount) {
        logger.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ:', {
          description: 'Insufficient funds',
          telegram_id,
          balance: currentBalance,
          required_amount: transactionAmount,
        })
        return false
      }
    }

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º service_type –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    let serviceType: string | null = null
    if (type === 'MONEY_OUTCOME') {
      // –î–ª—è —Ä–∞—Å—Ö–æ–¥–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¢–†–ï–ë–£–ï–ú —è–≤–Ω—É—é –ø–µ—Ä–µ–¥–∞—á—É service_type
      serviceType = (metadata?.service_type as string) || null

      // –ö–†–ò–¢–ò–ß–ù–û: service_type –î–û–õ–ñ–ï–ù –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è —è–≤–Ω–æ!
      if (!serviceType) {
        logger.error(
          '‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: service_type –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω –¥–ª—è MONEY_OUTCOME –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ Robokassa!',
          {
            description:
              'CRITICAL ERROR: service_type not provided for MONEY_OUTCOME operation in Robokassa',
            telegram_id,
            operation_description: description,
            caller_metadata: metadata,
          }
        )

        throw new Error(
          'service_type –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π —Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤ (MONEY_OUTCOME) –≤ Robokassa'
        )
      }
    }
    // –î–ª—è MONEY_INCOME service_type –≤—Å–µ–≥–¥–∞ null

    if (existingPayment) {
      // –°–õ–£–ß–ê–ô 1: –ó–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞ - –û–ë–ù–û–í–õ–Ø–ï–ú —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
      logger.info('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏:', {
        description: 'Updating existing payment record',
        inv_id,
        existing_status: existingPayment.status,
        telegram_id,
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å
      if (existingPayment.status === 'COMPLETED') {
        logger.warn('‚ö†Ô∏è –ó–∞–ø–∏—Å—å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞:', {
          description: 'Payment already processed',
          inv_id,
          telegram_id,
        })
        return true // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö, —Ç.–∫. –∑–∞–ø–∏—Å—å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è
      const { error: updateError } = await supabase
        .from('payments_v2')
        .update({
          status: 'COMPLETED',
          payment_date: new Date(),
          stars: transactionAmount,
          amount: transactionAmount,
          // –û–±–Ω–æ–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
          ...(description && { description }),
          ...(metadata?.bot_name && { bot_name: metadata.bot_name }),
          ...(metadata?.language && { language: metadata.language }),
        })
        .eq('inv_id', inv_id)

      if (updateError) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', {
          description: 'Error updating existing payment record',
          inv_id,
          error: updateError.message,
        })
        return false
      }

      logger.info('‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', {
        description: 'Existing payment record successfully updated',
        inv_id,
        telegram_id,
        amount: transactionAmount,
        type,
      })
    } else {
      // –°–õ–£–ß–ê–ô 2: –ó–∞–ø–∏—Å—å –ù–ï –Ω–∞–π–¥–µ–Ω–∞ - –°–û–ó–î–ê–ï–ú –Ω–æ–≤—É—é
      logger.info('üíº –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ Robokassa:', {
        description: 'Creating new Robokassa transaction record',
        inv_id,
        telegram_id,
        transaction_amount: transactionAmount,
        type,
        service_type: serviceType,
      })

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º inv_id
      const { error: paymentError } = await supabase
        .from('payments_v2')
        .insert({
          telegram_id,
          inv_id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π inv_id
          currency: metadata?.currency || 'STARS',
          amount: transactionAmount,
          status: 'COMPLETED',
          stars: transactionAmount,
          type, // 'MONEY_INCOME' –∏–ª–∏ 'MONEY_OUTCOME'
          description: description || `Balance ${type}`,
          payment_method: metadata?.payment_method || 'Robokassa',
          bot_name: metadata?.bot_name || 'neuro_blogger_bot',
          language: metadata?.language || 'ru',
          metadata: metadata || {},
          service_type: serviceType,
          subscription_type: null, // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —ç—Ç–æ null
          payment_date: new Date(), // –î–∞—Ç–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
          category: 'REAL', // –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
          cost: null, // –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (–¥–ª—è Robokassa –Ω–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
          operation_id: metadata?.payment_id || null, // ID –æ–ø–µ—Ä–∞—Ü–∏–∏
          is_system_payment: 'false', // –§–ª–∞–≥ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        })

      if (paymentError) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ Robokassa:', {
          description: 'Error creating Robokassa transaction record',
          inv_id,
          telegram_id,
          error: paymentError.message,
          amount: transactionAmount,
        })
        return false
      }

      logger.info('‚úÖ –ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è Robokassa —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:', {
        description: 'New Robokassa transaction successfully created',
        inv_id,
        telegram_id,
        amount: transactionAmount,
        type,
        service_type: serviceType,
      })
    }

    // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–∞ –±–∞–ª–∞–Ω—Å–∞
    invalidateBalanceCache(telegram_id)

    return true
  } catch (error) {
    logger.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ updateUserBalanceRobokassa:', {
      description: 'Unexpected error in updateUserBalanceRobokassa',
      telegram_id,
      error: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined,
    })
    return false
  }
}
