import { z } from 'zod'
import { supabase } from '@/core/supabase'
import { logger } from '@/utils/logger'
import { telegramIdSchema } from '@/schemas/common/base.schemas'
import { voiceIdSchema } from '@/schemas/api/generation.schemas'
import { invalidateUserCache } from './getUserByTelegramIdV2'

// === ZOD SCHEMAS ===

/**
 * –°—Ö–µ–º–∞ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const updateUserVoiceParamsSchema = z.object({
  telegram_id: telegramIdSchema,
  voice_id_elevenlabs: voiceIdSchema,
})

/**
 * –°—Ö–µ–º–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –¥–∞—Ç—ã)
 */
export const userVoiceResponseSchema = z.object({
  id: z.number(),
  telegram_id: z.string(),
  voice_id_elevenlabs: z.string().nullable(),
  username: z.string().nullable().optional(),
  first_name: z.string().nullable().optional(),
  last_name: z.string().nullable().optional(),
  created_at: z.string().optional(), // Supabase –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –¥–∞—Ç
  updated_at: z.string().optional(),
})

/**
 * –°—Ö–µ–º–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */
export const updateUserVoiceResultSchema = z.object({
  success: z.boolean(),
  user: userVoiceResponseSchema.nullable(),
  error_message: z.string().optional(),
})

// === TYPES ===

export type UpdateUserVoiceParams = z.infer<typeof updateUserVoiceParamsSchema>
export type UserVoiceResponse = z.infer<typeof userVoiceResponseSchema>
export type UpdateUserVoiceResult = z.infer<typeof updateUserVoiceResultSchema>

// === MAIN FUNCTION ===

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –≥–æ–ª–æ—Å–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (voice_id_elevenlabs)
 * –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å Zod –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –∫—ç—à-–∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
 *
 * @param params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
 */
export const updateUserVoiceV2 = async (
  params: UpdateUserVoiceParams
): Promise<UpdateUserVoiceResult> => {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const validatedParams = updateUserVoiceParamsSchema.parse(params)

    logger.info('üé§ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è V2:', {
      telegram_id: validatedParams.telegram_id,
      voice_id_elevenlabs: validatedParams.voice_id_elevenlabs,
    })

    // –û–±–Ω–æ–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data, error } = await supabase
      .from('users')
      .update({ voice_id_elevenlabs: validatedParams.voice_id_elevenlabs })
      .eq('telegram_id', validatedParams.telegram_id)
      .select(
        'id, telegram_id, voice_id_elevenlabs, username, first_name, last_name, created_at, updated_at'
      )

    if (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫:', {
        error: error.message,
        error_code: error.code,
        telegram_id: validatedParams.telegram_id,
        voice_id_elevenlabs: validatedParams.voice_id_elevenlabs,
      })
      throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${error.message}`)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if (!data || data.length === 0) {
      logger.warn(
        '‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫:',
        {
          telegram_id: validatedParams.telegram_id,
        }
      )
      return {
        success: false,
        user: null,
        error_message: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegram_id ${validatedParams.telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω`,
      }
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Supabase
    const validatedUser = userVoiceResponseSchema.parse(data[0])

    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    invalidateUserCache(validatedParams.telegram_id)

    logger.info('‚úÖ –ì–æ–ª–æ—Å–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã:', {
      telegram_id: validatedParams.telegram_id,
      voice_id_elevenlabs: validatedParams.voice_id_elevenlabs,
      username: validatedUser.username,
    })

    return {
      success: true,
      user: validatedUser,
    }
  } catch (error) {
    if (error instanceof z.ZodError) {
      // –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Zod –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
      throw error
    }

    logger.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ updateUserVoiceV2:', {
      error: error instanceof Error ? error.message : String(error),
      error_details: error,
      telegram_id: params.telegram_id,
    })

    throw error
  }
}

// === WRAPPER FUNCTION FOR BACKWARD COMPATIBILITY ===

/**
 * Wrapper —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—É—é V2 —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º
 */
export const updateUserVoiceSimple = async (
  telegram_id: string,
  voice_id_elevenlabs: string
): Promise<void> => {
  const result = await updateUserVoiceV2({
    telegram_id,
    voice_id_elevenlabs,
  })

  if (!result.success) {
    throw new Error(
      result.error_message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫'
    )
  }
}

// === EXPORTS ===

export { invalidateUserCache } from './getUserByTelegramIdV2'
