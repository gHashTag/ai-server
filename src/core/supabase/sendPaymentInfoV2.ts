import { z } from 'zod'
import { supabase } from '.'
import { logger } from '@/utils/logger'
import { telegramIdSchema } from '@/schemas/common/base.schemas'
import { PaymentType } from '@/interfaces/payments.interface'

// –°—Ö–µ–º–∞ –¥–ª—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
export const sendPaymentInfoParamsSchema = z.object({
  telegram_id: telegramIdSchema,
  amount: z.number().positive('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π'),
  stars: z.number().positive('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º'),
  currency: z.string().default('RUB'),
  type: z.nativeEnum(PaymentType).default(PaymentType.MONEY_INCOME),
  payment_method: z.string().default('System'),
  description: z.string().optional(),
  bot_name: z.string(),
  subscription_type: z.string().optional(),
  service_type: z.string().optional(),
  metadata: z.record(z.any()).optional(),
})

export type SendPaymentInfoParams = z.infer<typeof sendPaymentInfoParamsSchema>

// –°—Ö–µ–º–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
export const paymentCreatedSchema = z.object({
  id: z.string().uuid(),
  telegram_id: z.string(),
  amount: z.number(),
  stars: z.number(),
  currency: z.string(),
  status: z.enum(['PENDING', 'COMPLETED', 'FAILED', 'CANCELLED']),
  type: z.nativeEnum(PaymentType),
  payment_method: z.string(),
  description: z.string().nullable(),
  bot_name: z.string(),
  created_at: z.string(),
  subscription_type: z.string().nullable(),
  service_type: z.string().nullable(),
  metadata: z.record(z.any()).nullable(),
})

export type PaymentCreated = z.infer<typeof paymentCreatedSchema>

/**
 * –°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ payments_v2
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Zod –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Supabase –∫–ª–∏–µ–Ω—Ç
 */
export const sendPaymentInfoV2 = async (
  params: SendPaymentInfoParams
): Promise<PaymentCreated> => {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const validatedParams = sendPaymentInfoParamsSchema.parse(params)

    logger.info('üí≥ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –ø–ª–∞—Ç–µ–∂–∞ –≤ payments_v2:', {
      telegram_id: validatedParams.telegram_id,
      amount: validatedParams.amount,
      stars: validatedParams.stars,
      type: validatedParams.type,
      payment_method: validatedParams.payment_method,
      bot_name: validatedParams.bot_name,
    })

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
    const paymentData = {
      telegram_id: validatedParams.telegram_id.toString(),
      amount: validatedParams.amount,
      stars: validatedParams.stars,
      currency: validatedParams.currency,
      status: 'PENDING' as const,
      type: validatedParams.type,
      payment_method: validatedParams.payment_method,
      description: validatedParams.description || null,
      bot_name: validatedParams.bot_name,
      subscription_type: validatedParams.subscription_type || null,
      service_type: validatedParams.service_type || null,
      metadata: validatedParams.metadata || null,
      created_at: new Date().toISOString(),
      payment_date: null, // –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
    }

    // –í—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ payments_v2
    const { data, error } = await supabase
      .from('payments_v2')
      .insert(paymentData)
      .select()
      .single()

    if (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø–ª–∞—Ç–µ–∂–∞ –≤ payments_v2:', {
        error: error.message,
        error_details: error,
        payment_data: paymentData,
      })
      throw new Error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: ${error.message}`)
    }

    if (!data) {
      logger.error('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', {
        payment_data: paymentData,
      })
      throw new Error('–ù–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞')
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Zod
    const validatedPayment = paymentCreatedSchema.parse(data)

    logger.info('‚úÖ –ó–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –≤ payments_v2:', {
      payment_id: validatedPayment.id,
      telegram_id: validatedPayment.telegram_id,
      amount: validatedPayment.amount,
      stars: validatedPayment.stars,
      type: validatedPayment.type,
    })

    return validatedPayment
  } catch (error) {
    if (error instanceof z.ZodError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞:', {
        validation_errors: error.errors,
        params,
      })
      throw new Error(
        `–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error.errors.map(e => e.message).join(', ')}`
      )
    }

    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ sendPaymentInfoV2:', {
      error: error instanceof Error ? error.message : String(error),
      error_details: error,
      params,
    })
    throw error
  }
}

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 * –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
 */
export const sendPaymentInfoSimple = async (
  telegram_id: string,
  amount: number,
  bot_name: string,
  description?: string
): Promise<PaymentCreated> => {
  return sendPaymentInfoV2({
    telegram_id,
    amount,
    stars: Math.floor(amount * 0.434), // –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å RUB ‚Üí Stars
    bot_name,
    description,
  })
}
