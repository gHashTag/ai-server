import { supabase } from './index'
import { logger } from '@/utils/logger'
import { PaymentType } from '@/interfaces/payments.interface'

/**
 * –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ —Ñ–µ—Ä–º—ã –±–æ—Ç–æ–≤
 */
export enum ExpenseCategory {
  PERSONAL = 'PERSONAL', // –õ–∏—á–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥—ã
  SHARED = 'SHARED', // –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –ø—Ä–æ–µ–∫—Ç–∞
  INFRASTRUCTURE = 'INFRASTRUCTURE', // –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
  AI_SERVICES = 'AI_SERVICES', // AI —Å–µ—Ä–≤–∏—Å—ã
  DEVELOPMENT = 'DEVELOPMENT', // –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞
  HOSTING = 'HOSTING', // –•–æ—Å—Ç–∏–Ω–≥
  OTHER = 'OTHER', // –ü—Ä–æ—á–∏–µ
}

/**
 * –¢–∏–ø —Ä–∞—Å—Ö–æ–¥–∞ –¥–ª—è —Ñ–µ—Ä–º—ã –±–æ—Ç–æ–≤
 */
export enum ExpenseType {
  CLOUDCONVERT = 'CLOUDCONVERT',
  HOSTING = 'HOSTING',
  AI_API = 'AI_API',
  DEVELOPMENT_TOOLS = 'DEVELOPMENT_TOOLS',
  VOICE_GENERATION = 'VOICE_GENERATION',
  IMAGE_GENERATION = 'IMAGE_GENERATION',
  VIDEO_GENERATION = 'VIDEO_GENERATION',
  MUSIC_GENERATION = 'MUSIC_GENERATION',
  DATABASE = 'DATABASE',
  STORAGE = 'STORAGE',
  TUNNELING = 'TUNNELING',
  RESEARCH = 'RESEARCH',
  OTHER = 'OTHER',
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞ —Ñ–µ—Ä–º—ã –±–æ—Ç–æ–≤
 */
export interface BotFarmExpense {
  date: string // –î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD' –∏–ª–∏ 'DD/MM/YYYY'
  name: string // –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
  amount: number // –°—É–º–º–∞ –≤ –∏—Å—Ö–æ–¥–Ω–æ–π –≤–∞–ª—é—Ç–µ
  currency: string // –í–∞–ª—é—Ç–∞ (THB, USD, RUB –∏ —Ç.–¥.)
  description: string // –û–ø–∏—Å–∞–Ω–∏–µ
  purpose: string // –î–ª—è —á–µ–≥–æ –Ω—É–∂–Ω–æ
  url?: string // –°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω/—Å–µ—Ä–≤–∏—Å
  category: ExpenseCategory // –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å—Ö–æ–¥–∞
  expenseType: ExpenseType // –¢–∏–ø —Ä–∞—Å—Ö–æ–¥–∞
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ DD/MM –≤ YYYY-MM-DD
 */
function convertDateFormat(
  dateStr: string,
  year: number = new Date().getFullYear()
): string {
  // –ï—Å–ª–∏ –¥–∞—Ç–∞ —É–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
  if (dateStr.includes('-') && dateStr.length === 10) {
    return dateStr
  }

  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑ DD/MM –≤ YYYY-MM-DD
  const [day, month] = dateStr.split('/')
  return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞
 */
function determineCategory(expenseType: ExpenseType): ExpenseCategory {
  switch (expenseType) {
    case ExpenseType.AI_API:
    case ExpenseType.VOICE_GENERATION:
    case ExpenseType.IMAGE_GENERATION:
    case ExpenseType.VIDEO_GENERATION:
    case ExpenseType.MUSIC_GENERATION:
      return ExpenseCategory.AI_SERVICES

    case ExpenseType.HOSTING:
    case ExpenseType.DATABASE:
    case ExpenseType.STORAGE:
    case ExpenseType.TUNNELING:
      return ExpenseCategory.INFRASTRUCTURE

    case ExpenseType.DEVELOPMENT_TOOLS:
      return ExpenseCategory.DEVELOPMENT

    case ExpenseType.RESEARCH:
      return ExpenseCategory.SHARED

    default:
      return ExpenseCategory.OTHER
  }
}

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ä–∞—Å—Ö–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
 */
function determineExpenseType(name: string): ExpenseType {
  const nameUpper = name.toUpperCase()

  if (nameUpper.includes('OPENAI') || nameUpper.includes('CHATGPT')) {
    return ExpenseType.AI_API
  }
  if (nameUpper.includes('ELEVENLABS')) {
    return ExpenseType.VOICE_GENERATION
  }
  if (
    nameUpper.includes('REPLICATE') ||
    nameUpper.includes('RUNWAY') ||
    nameUpper.includes('HEYGEN') ||
    nameUpper.includes('HEDRA')
  ) {
    return ExpenseType.VIDEO_GENERATION
  }
  if (nameUpper.includes('SUNO') || nameUpper.includes('JAMMABLE')) {
    return ExpenseType.MUSIC_GENERATION
  }
  if (nameUpper.includes('CLOUDCONVERT')) {
    return ExpenseType.CLOUDCONVERT
  }
  if (nameUpper.includes('ELEST') || nameUpper.includes('HOSTING')) {
    return ExpenseType.HOSTING
  }
  if (
    nameUpper.includes('CURSOR') ||
    nameUpper.includes('WARP') ||
    nameUpper.includes('AUGMENT')
  ) {
    return ExpenseType.DEVELOPMENT_TOOLS
  }
  if (nameUpper.includes('PINECONE')) {
    return ExpenseType.DATABASE
  }
  if (nameUpper.includes('NGROK')) {
    return ExpenseType.TUNNELING
  }
  if (nameUpper.includes('HIGGSFIELD')) {
    return ExpenseType.RESEARCH
  }
  if (nameUpper.includes('OBSIDIAN') || nameUpper.includes('STORAGE')) {
    return ExpenseType.STORAGE
  }

  return ExpenseType.OTHER
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Ö–æ–¥ —Ñ–µ—Ä–º—ã –±–æ—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—Ü—É payments_v2
 *
 * @param expense - –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Ö–æ–¥–∞
 * @returns Promise<boolean> - —É—Å–ø–µ—à–Ω–æ –ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω —Ä–∞—Å—Ö–æ–¥
 */
export const addBotFarmExpense = async (
  expense: Omit<BotFarmExpense, 'category' | 'expenseType'>
): Promise<boolean> => {
  try {
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞
    const expenseType = determineExpenseType(expense.name)
    const category = determineCategory(expenseType)

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const paymentDate = convertDateFormat(expense.date, 2024) // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 2024 –≥–æ–¥ –¥–ª—è –º–∞–π—Å–∫–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π inv_id –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ä–∞—Å—Ö–æ–¥–∞
    const invId = `farm_expense_${Date.now()}_${Math.random()
      .toString(36)
      .substr(2, 9)}`

    console.log('üí∞ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ —Ñ–µ—Ä–º—ã –±–æ—Ç–æ–≤:', {
      name: expense.name,
      amount: expense.amount,
      currency: expense.currency,
      category,
      expenseType,
      paymentDate,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase
    if (!supabase) {
      console.error('‚ùå Supabase client –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
      return false
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ payments_v2
    const { data, error } = await supabase
      .from('payments_v2')
      .insert({
        inv_id: invId,
        telegram_id: 'SYSTEM_BOT_FARM', // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π ID –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤ —Ñ–µ—Ä–º—ã –±–æ—Ç–æ–≤
        bot_name: 'bot_farm_manager',
        amount: expense.amount,
        stars: 0, // –î–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–≤–µ–∑–¥—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è
        currency: expense.currency,
        status: 'COMPLETED',
        type: 'MONEY_OUTCOME', // –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã - —ç—Ç–æ MONEY_OUTCOME
        payment_method: 'System',
        description: `${expense.name}: ${expense.description}`,
        metadata: {
          expense_category: category,
          expense_type: expenseType,
          purpose: expense.purpose,
          original_name: expense.name,
          url: expense.url || null,
          is_bot_farm_expense: true,
          processed_at: new Date().toISOString(),
        },
        subscription_type: null, // –ù–µ —Å–≤—è–∑–∞–Ω–æ —Å –ø–æ–¥–ø–∏—Å–∫–æ–π
        service_type: null, // –ù–µ —Å–≤—è–∑–∞–Ω–æ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
        payment_date: new Date(paymentDate),
        created_at: new Date(),
        updated_at: new Date(),
      })
      .select() // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞ —Ñ–µ—Ä–º—ã –±–æ—Ç–æ–≤:', {
        name: expense.name,
        error: error.message,
        error_details: error,
        error_code: error.code,
        error_hint: error.hint,
      })
      return false
    }

    console.log('‚úÖ –†–∞—Å—Ö–æ–¥ —Ñ–µ—Ä–º—ã –±–æ—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω:', {
      name: expense.name,
      amount: expense.amount,
      currency: expense.currency,
      category,
      expenseType,
      inv_id: invId,
      record_id: data?.[0]?.id,
    })

    return true
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ addBotFarmExpense:', {
      error: error instanceof Error ? error.message : String(error),
      expense_name: expense.name,
      stack: error instanceof Error ? error.stack : undefined,
    })
    return false
  }
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –º–∞—Å—Å–∏–≤ —Ä–∞—Å—Ö–æ–¥–æ–≤ —Ñ–µ—Ä–º—ã –±–æ—Ç–æ–≤
 *
 * @param expenses - –ú–∞—Å—Å–∏–≤ —Ä–∞—Å—Ö–æ–¥–æ–≤
 * @returns Promise<{ success: number, failed: number, errors: string[] }>
 */
export const addMultipleBotFarmExpenses = async (
  expenses: Array<Omit<BotFarmExpense, 'category' | 'expenseType'>>
): Promise<{ success: number; failed: number; errors: string[] }> => {
  let successCount = 0
  let failedCount = 0
  const errors: string[] = []

  console.log('üìä –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –º–∞—Å—Å–∏–≤–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ —Ñ–µ—Ä–º—ã –±–æ—Ç–æ–≤:', {
    total_count: expenses.length,
  })

  for (let i = 0; i < expenses.length; i++) {
    const expense = expenses[i]
    console.log(`\n‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞ ${i + 1}/${expenses.length}: ${expense.name}`)

    const result = await addBotFarmExpense(expense)

    if (result) {
      successCount++
      console.log(
        `‚úÖ ${i + 1}/${expenses.length}: ${expense.name} - —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω`
      )
    } else {
      failedCount++
      const errorMsg = `–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥: ${expense.name}`
      errors.push(errorMsg)
      console.log(`‚ùå ${i + 1}/${expenses.length}: ${expense.name} - –æ—à–∏–±–∫–∞`)
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å –ë–î
    await new Promise(resolve => setTimeout(resolve, 200))
  }

  console.log('\nüìà –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ —Ñ–µ—Ä–º—ã –±–æ—Ç–æ–≤:', {
    total: expenses.length,
    success: successCount,
    failed: failedCount,
  })

  return { success: successCount, failed: failedCount, errors }
}
