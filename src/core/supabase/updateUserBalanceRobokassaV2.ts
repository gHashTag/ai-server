import { z } from 'zod'
import { supabase } from '.'
import { logger } from '@/utils/logger'
import { telegramIdSchema } from '@/schemas/common/base.schemas'
import { PaymentType } from '@/interfaces/payments.interface'
import { invalidateBalanceCache, getUserBalance } from './getUserBalance'

// –°—Ö–µ–º–∞ –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
export const balanceUpdateMetadataSchema = z
  .object({
    inv_id: z.string().optional(),
    currency: z.string().default('STARS'),
    bot_name: z.string().default('neuro_blogger_bot'),
    language: z.enum(['ru', 'en']).default('ru'),
    service_type: z.string().optional(),
    subscription_type: z.string().optional(),
    payment_method: z.string().default('Robokassa'),
    operation_id: z.string().optional(),
    category: z.enum(['REAL', 'TEST']).default('REAL'),
    cost: z.number().optional(),
  })
  .strict()

export type BalanceUpdateMetadata = z.infer<typeof balanceUpdateMetadataSchema>

// –°—Ö–µ–º–∞ –¥–ª—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
export const updateUserBalanceRobokassaParamsSchema = z.object({
  telegram_id: telegramIdSchema,
  amount: z.number().positive('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π'),
  type: z.enum(['money_income', 'money_outcome']),
  description: z.string().optional(),
  metadata: balanceUpdateMetadataSchema.optional(),
})

export type UpdateUserBalanceRobokassaParams = z.infer<
  typeof updateUserBalanceRobokassaParamsSchema
>

// –°—Ö–µ–º–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
export const balanceUpdateResultSchema = z.object({
  success: z.boolean(),
  transaction_id: z.string().optional(),
  new_balance: z.number().optional(),
  error_message: z.string().optional(),
})

export type BalanceUpdateResult = z.infer<typeof balanceUpdateResultSchema>

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Robokassa –∏–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Zod –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π Supabase –∫–ª–∏–µ–Ω—Ç
 */
export const updateUserBalanceRobokassaV2 = async (
  params: UpdateUserBalanceRobokassaParams
): Promise<BalanceUpdateResult> => {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const validatedParams = updateUserBalanceRobokassaParamsSchema.parse(params)
    const metadata = validatedParams.metadata || {}

    logger.info('üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ Robokassa V2:', {
      telegram_id: validatedParams.telegram_id,
      amount: validatedParams.amount,
      type: validatedParams.type,
      description: validatedParams.description,
      metadata,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è
    if (validatedParams.type === 'money_outcome') {
      const currentBalance = await getUserBalance(
        validatedParams.telegram_id,
        metadata.bot_name
      )

      if (currentBalance < validatedParams.amount) {
        const errorMessage =
          metadata.language === 'en'
            ? `Insufficient funds. Current: ${currentBalance}‚≠ê, Required: ${validatedParams.amount}‚≠ê`
            : `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${currentBalance}‚≠ê, –¢—Ä–µ–±—É–µ—Ç—Å—è: ${validatedParams.amount}‚≠ê`

        logger.warn('‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏:', {
          telegram_id: validatedParams.telegram_id,
          current_balance: currentBalance,
          required_amount: validatedParams.amount,
        })

        return {
          success: false,
          error_message: errorMessage,
        }
      }
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å inv_id, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
    if (metadata.inv_id) {
      logger.info('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏ –ø–ª–∞—Ç–µ–∂–∞:', {
        inv_id: metadata.inv_id,
        telegram_id: validatedParams.telegram_id,
      })

      const { data: updatedPayment, error: updateError } = await supabase
        .from('payments_v2')
        .update({
          status: 'COMPLETED',
          payment_date: new Date().toISOString(),
          description:
            validatedParams.description || 'Robokassa payment completed',
        })
        .eq('inv_id', metadata.inv_id)
        .eq('telegram_id', validatedParams.telegram_id.toString())
        .select()
        .single()

      if (updateError) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:', {
          error: updateError.message,
          inv_id: metadata.inv_id,
          telegram_id: validatedParams.telegram_id,
        })

        return {
          success: false,
          error_message: `–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: ${updateError.message}`,
        }
      }

      // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –±–∞–ª–∞–Ω—Å–∞
      invalidateBalanceCache(validatedParams.telegram_id)

      const newBalance = await getUserBalance(
        validatedParams.telegram_id,
        metadata.bot_name
      )

      logger.info('‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω:', {
        payment_id: updatedPayment?.id,
        telegram_id: validatedParams.telegram_id,
        new_balance: newBalance,
      })

      return {
        success: true,
        transaction_id: updatedPayment?.id,
        new_balance: newBalance,
      }
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞
    const invId = `${Date.now()}-${validatedParams.telegram_id}-${Math.random()
      .toString(36)
      .substr(2, 9)}`

    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–∏–ø –≤ PaymentType enum
    const paymentType =
      validatedParams.type === 'money_income'
        ? PaymentType.MONEY_INCOME
        : PaymentType.MONEY_OUTCOME

    const paymentData = {
      telegram_id: validatedParams.telegram_id.toString(),
      inv_id: invId,
      amount: validatedParams.amount,
      stars: validatedParams.amount, // –î–ª—è Robokassa amount == stars
      currency: metadata.currency,
      status: 'COMPLETED' as const,
      type: paymentType,
      payment_method: metadata.payment_method,
      description:
        validatedParams.description || `Robokassa ${validatedParams.type}`,
      bot_name: metadata.bot_name,
      subscription_type: metadata.subscription_type || null,
      service_type: metadata.service_type || null,
      metadata: {
        language: metadata.language,
        operation_id: metadata.operation_id,
        category: metadata.category,
        cost: metadata.cost,
      },
      created_at: new Date().toISOString(),
      payment_date: new Date().toISOString(),
    }

    logger.info('üíº –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', {
      inv_id: invId,
      telegram_id: validatedParams.telegram_id,
      amount: validatedParams.amount,
      type: paymentType,
    })

    const { data: newPayment, error: insertError } = await supabase
      .from('payments_v2')
      .insert(paymentData)
      .select()
      .single()

    if (insertError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –ø–ª–∞—Ç–µ–∂–∞:', {
        error: insertError.message,
        error_details: insertError,
        payment_data: paymentData,
      })

      return {
        success: false,
        error_message: `–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: ${insertError.message}`,
      }
    }

    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –±–∞–ª–∞–Ω—Å–∞
    invalidateBalanceCache(validatedParams.telegram_id)

    const newBalance = await getUserBalance(
      validatedParams.telegram_id,
      metadata.bot_name
    )

    logger.info('‚úÖ –ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:', {
      payment_id: newPayment.id,
      telegram_id: validatedParams.telegram_id,
      amount: validatedParams.amount,
      type: paymentType,
      new_balance: newBalance,
    })

    return {
      success: true,
      transaction_id: newPayment.id,
      new_balance: newBalance,
    }
  } catch (error) {
    if (error instanceof z.ZodError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', {
        validation_errors: error.errors,
        params,
      })
      return {
        success: false,
        error_message: `–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error.errors
          .map(e => e.message)
          .join(', ')}`,
      }
    }

    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ updateUserBalanceRobokassaV2:', {
      error: error instanceof Error ? error.message : String(error),
      error_details: error,
      params,
    })

    return {
      success: false,
      error_message:
        error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
    }
  }
}

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç boolean –∫–∞–∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
export const updateUserBalanceRobokassaSimple = async (
  telegram_id: string,
  amount: number,
  type: 'money_income' | 'money_outcome',
  description?: string,
  metadata?: Partial<BalanceUpdateMetadata>
): Promise<boolean> => {
  const result = await updateUserBalanceRobokassaV2({
    telegram_id,
    amount,
    type,
    description,
    metadata,
  })

  return result.success
}
