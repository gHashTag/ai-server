import { z } from 'zod'
import { supabase } from '.'
import { logger } from '@/utils/logger'
import { telegramIdSchema } from '@/schemas/common/base.schemas'

// –°—Ö–µ–º–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const userFieldsSchema = z.enum([
  'id',
  'telegram_id',
  'username',
  'first_name',
  'last_name',
  'language_code',
  'level',
  'gender',
  'bot_name',
  'created_at',
  'updated_at',
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  'company',
  'position',
  'designation',
])

export type UserField = z.infer<typeof userFieldsSchema>

// –°—Ö–µ–º–∞ –¥–ª—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
export const getUserDataParamsSchema = z.object({
  telegram_id: telegramIdSchema,
  fields: z
    .array(userFieldsSchema)
    .optional()
    .default([
      'username',
      'first_name',
      'last_name',
      'company',
      'position',
      'designation',
    ]),
})

export type GetUserDataParams = z.infer<typeof getUserDataParamsSchema>

// –°—Ö–µ–º–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export const userDataResponseSchema = z.object({
  id: z.number().optional(),
  telegram_id: z.string(),
  username: z.string().nullable().optional(),
  first_name: z.string().nullable().optional(),
  last_name: z.string().nullable().optional(),
  language_code: z.string().nullable().optional(),
  level: z.number().nullable().optional(),
  gender: z.enum(['male', 'female']).nullable().optional(),
  bot_name: z.string().nullable().optional(),
  created_at: z.string().nullable().optional(),
  updated_at: z.string().nullable().optional(),
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ë–î)
  company: z.string().nullable().optional(),
  position: z.string().nullable().optional(),
  designation: z.string().nullable().optional(),
})

export type UserDataResponse = z.infer<typeof userDataResponseSchema>

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
 * –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å Zod –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π –∏ –≥–∏–±–∫–∏–º –≤—ã–±–æ—Ä–æ–º –ø–æ–ª–µ–π
 */
export const getUserDataV2 = async (
  params: GetUserDataParams
): Promise<UserDataResponse | null> => {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const validatedParams = getUserDataParamsSchema.parse(params)

    logger.info('üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è V2:', {
      telegram_id: validatedParams.telegram_id,
      fields: validatedParams.fields,
    })

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–ª–µ–π –¥–ª—è select
    const selectFields = validatedParams.fields?.join(', ') || '*'

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Supabase
    const { data, error } = await supabase
      .from('users')
      .select(selectFields)
      .eq('telegram_id', validatedParams.telegram_id.toString())
      .single()

    if (error) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null
      if (error.code === 'PGRST116') {
        logger.info('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', {
          telegram_id: validatedParams.telegram_id,
        })
        return null
      }

      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
        error: error.message,
        error_details: error,
        telegram_id: validatedParams.telegram_id,
      })
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${error.message}`)
    }

    if (!data) {
      logger.warn('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
        telegram_id: validatedParams.telegram_id,
      })
      return null
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Zod
    const validatedUser = userDataResponseSchema.parse(data)

    logger.info('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã:', {
      telegram_id: validatedUser.telegram_id,
      username: validatedUser.username,
      fields_count: validatedParams.fields?.length || 'all',
    })

    return validatedUser
  } catch (error) {
    if (error instanceof z.ZodError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', {
        validation_errors: error.errors,
        params,
      })
      throw new Error(
        `–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error.errors.map(e => e.message).join(', ')}`
      )
    }

    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ getUserDataV2:', {
      error: error instanceof Error ? error.message : String(error),
      error_details: error,
      params,
    })
    throw error
  }
}

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
 */
export const getUserDataSimple = async (
  telegram_id: string,
  fields?: UserField[]
): Promise<UserDataResponse | null> => {
  return getUserDataV2({
    telegram_id,
    fields,
  })
}
