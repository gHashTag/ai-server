import { z } from 'zod'
import { supabase } from '.'
import { logger } from '@/utils/logger'
import { PaymentType, PaymentMethod } from '@/interfaces/payments.interface'
import { invalidateBalanceCache } from './getUserBalance'

// Zod —Å—Ö–µ–º–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
export const setPaymentV2Schema = z.object({
  inv_id: z.string().min(1, 'inv_id –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'),
  telegram_id: z.string().min(1, 'telegram_id –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'),
  amount: z.number().positive('amount –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º'),
  currency: z.enum(['RUB', 'USD', 'EUR', 'STARS'], {
    errorMap: () => ({ message: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –≤–∞–ª—é—Ç–∞' }),
  }),
  stars: z.number().positive('stars –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º'),
  payment_method: z.enum(['Robokassa', 'Telegram', 'Manual', 'System'], {
    errorMap: () => ({ message: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã' }),
  }),
  bot_name: z.string().min(1, 'bot_name –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'),
  email: z.string().email().optional(),
  subscription_type: z
    .enum(['NEUROPHOTO', 'NEUROBASE', 'NEUROTESTER'])
    .optional(),
})

export type SetPaymentV2Input = z.infer<typeof setPaymentV2Schema>

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ payments_v2
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Drizzle ORM –∏ Zod –≤–∞–ª–∏–¥–∞—Ü–∏—é
 */
export const setPaymentsV2 = async (
  input: SetPaymentV2Input
): Promise<void> => {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const validatedData = setPaymentV2Schema.parse(input)

    logger.info('üí≥ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ payments_v2:', {
      inv_id: validatedData.inv_id,
      telegram_id: validatedData.telegram_id,
      amount: validatedData.amount,
      stars: validatedData.stars,
      payment_method: validatedData.payment_method,
      bot_name: validatedData.bot_name,
    })

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –ø–æ inv_id –≤ payments_v2
    const { data, error } = await supabase
      .from('payments_v2')
      .update({
        telegram_id: validatedData.telegram_id,
        amount: validatedData.amount,
        currency: validatedData.currency,
        status: 'COMPLETED',
        payment_method: validatedData.payment_method,
        description: `–ü–æ–∫—É–ø–∫–∞: ${validatedData.stars} ‚≠ê`,
        stars: validatedData.stars,
        bot_name: validatedData.bot_name,
        type: PaymentType.MONEY_INCOME, // –≠—Ç–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        payment_date: new Date().toISOString(),
        subscription_type: validatedData.subscription_type || null,
        service_type: null, // –î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π service_type = null
        metadata: {
          email: validatedData.email,
          updated_by: 'setPaymentsV2',
          original_currency: validatedData.currency,
        },
      })
      .eq('inv_id', validatedData.inv_id)
      .select()

    if (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –≤ payments_v2:', {
        error: error.message,
        error_details: error,
        inv_id: validatedData.inv_id,
      })
      throw new Error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: ${error.message}`)
    }

    if (!data || data.length === 0) {
      logger.warn('‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', {
        inv_id: validatedData.inv_id,
      })
      throw new Error(`–ü–ª–∞—Ç–µ–∂ —Å inv_id ${validatedData.inv_id} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
    }

    // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    invalidateBalanceCache(validatedData.telegram_id)

    logger.info('‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ payments_v2:', {
      inv_id: validatedData.inv_id,
      telegram_id: validatedData.telegram_id,
      new_status: 'COMPLETED',
      stars: validatedData.stars,
    })
  } catch (error) {
    if (error instanceof z.ZodError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞:', {
        validation_errors: error.errors,
        input,
      })
      throw new Error(
        `–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error.errors.map(e => e.message).join(', ')}`
      )
    }

    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ setPaymentsV2:', {
      error: error instanceof Error ? error.message : String(error),
      error_details: error,
      input,
    })
    throw error
  }
}

/**
 * –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å - wrapper –¥–ª—è —Å—Ç–∞—Ä–æ–≥–æ API
 * @deprecated –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ setPaymentsV2 –Ω–∞–ø—Ä—è–º—É—é
 */
// export const setPayments = setPaymentsV2 // ‚Üê –£–ë–†–ê–ù–û: –∏–∑–±–µ–≥–∞–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–æ–≤
