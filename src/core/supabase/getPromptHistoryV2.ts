import { z } from 'zod'
import { supabase } from '@/core/supabase'
import { logger } from '@/utils/logger'
import { telegramIdSchema } from '@/schemas/common/base.schemas'
import { ModeEnum } from '@/interfaces/modes'

// === ZOD SCHEMAS ===

/**
 * –°—Ö–µ–º–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤
 */
export const getPromptHistoryParamsSchema = z.object({
  telegram_id: telegramIdSchema,
  limit: z.number().int().min(1).max(100).optional(),
  mode: z.nativeEnum(ModeEnum).optional(),
  status: z.string().optional(),
})

/**
 * –°—Ö–µ–º–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤
 * –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Supabase (—Å—Ç—Ä–æ–∫–æ–≤—ã–µ –¥–∞—Ç—ã)
 */
export const promptHistoryItemSchema = z.object({
  prompt_id: z.number(),
  prompt: z.string(),
  model_type: z.string(),
  mode: z.string(),
  media_url: z.string().nullable(),
  telegram_id: z.string(),
  status: z.string().nullable(),
  task_id: z.string().nullable(),
  created_at: z.string(), // Supabase –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—ã –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏
  updated_at: z.string().nullable(),
})

/**
 * –°—Ö–µ–º–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤
 */
export const getPromptHistoryResultSchema = z.object({
  success: z.boolean(),
  prompts: z.array(promptHistoryItemSchema).optional(),
  error: z.string().optional(),
})

// === TYPES ===

export type GetPromptHistoryParams = z.infer<
  typeof getPromptHistoryParamsSchema
>
export type PromptHistoryItem = z.infer<typeof promptHistoryItemSchema>
export type GetPromptHistoryResult = z.infer<
  typeof getPromptHistoryResultSchema
>

// === CACHE MANAGEMENT ===

type PromptHistoryCache = {
  [key: string]: {
    prompts: PromptHistoryItem[]
    timestamp: number
  }
}

// –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (2 –º–∏–Ω—É—Ç—ã)
const PROMPT_HISTORY_CACHE_TTL = 2 * 60 * 1000

// –ö—ç—à –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤
const promptHistoryCache: PromptHistoryCache = {}

// === MAIN FUNCTION ===

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ–º–ø—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å Zod –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
 *
 * @param params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –º–∞—Å—Å–∏–≤–æ–º –ø—Ä–æ–º–ø—Ç–æ–≤
 */
export const getPromptHistoryV2 = async (
  params: GetPromptHistoryParams
): Promise<GetPromptHistoryResult> => {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const validatedParams = getPromptHistoryParamsSchema.parse(params)
    const limit = validatedParams.limit || 10

    logger.info('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ V2:', {
      telegram_id: validatedParams.telegram_id,
      limit,
      mode: validatedParams.mode,
      status: validatedParams.status,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cacheKey = `${validatedParams.telegram_id}_${limit}_${
      validatedParams.mode || 'all'
    }_${validatedParams.status || 'all'}`
    const now = Date.now()

    if (
      promptHistoryCache[cacheKey] &&
      now - promptHistoryCache[cacheKey].timestamp < PROMPT_HISTORY_CACHE_TTL
    ) {
      logger.info('üíæ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–∑ –∫—ç—à–∞:', {
        telegram_id: validatedParams.telegram_id,
        cache_key: cacheKey,
        cached_count: promptHistoryCache[cacheKey].prompts.length,
      })
      return {
        success: true,
        prompts: promptHistoryCache[cacheKey].prompts,
      }
    }

    // –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    let query = supabase
      .from('prompts_history')
      .select(
        'prompt_id, prompt, model_type, mode, media_url, telegram_id, status, task_id, created_at, updated_at'
      )
      .eq('telegram_id', validatedParams.telegram_id)

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
    if (validatedParams.mode) {
      query = query.eq('mode', validatedParams.mode)
    }

    if (validatedParams.status) {
      query = query.eq('status', validatedParams.status)
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    const { data, error } = await query
      .order('created_at', { ascending: false })
      .limit(limit)

    if (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤:', {
        error: error.message,
        error_code: error.code,
        telegram_id: validatedParams.telegram_id,
        limit,
      })
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤: ${error.message}`)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
    if (!data || data.length === 0) {
      logger.info('‚ÑπÔ∏è –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –ø—É—Å—Ç–∞:', {
        telegram_id: validatedParams.telegram_id,
        limit,
        mode: validatedParams.mode,
        status: validatedParams.status,
      })
      return {
        success: true,
        prompts: [],
      }
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–º–ø—Ç
    const validatedPrompts = data.map(prompt =>
      promptHistoryItemSchema.parse(prompt)
    )

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    promptHistoryCache[cacheKey] = {
      prompts: validatedPrompts,
      timestamp: now,
    }

    logger.info('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–∞ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∞:', {
      telegram_id: validatedParams.telegram_id,
      prompts_count: validatedPrompts.length,
      limit,
      mode: validatedParams.mode,
      status: validatedParams.status,
    })

    return {
      success: true,
      prompts: validatedPrompts,
    }
  } catch (error) {
    logger.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ getPromptHistoryV2:', {
      error: error instanceof Error ? error.message : String(error),
      telegram_id: params.telegram_id,
      limit: params.limit,
    })
    throw error
  }
}

// === CACHE MANAGEMENT FUNCTIONS ===

/**
 * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫—ç—à –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export const invalidatePromptHistoryCache = (telegram_id: string): void => {
  const keysToDelete = Object.keys(promptHistoryCache).filter(key =>
    key.startsWith(`${telegram_id}_`)
  )

  keysToDelete.forEach(key => {
    delete promptHistoryCache[key]
  })

  if (keysToDelete.length > 0) {
    logger.info('üîÑ –ö—ç—à –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω:', {
      telegram_id,
      invalidated_keys: keysToDelete.length,
    })
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤
 */
export const clearPromptHistoryCache = (): void => {
  const keysCount = Object.keys(promptHistoryCache).length
  Object.keys(promptHistoryCache).forEach(key => {
    delete promptHistoryCache[key]
  })

  logger.info('üßπ –ö—ç—à –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω:', {
    cleared_keys: keysCount,
  })
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ–º–ø—Ç–æ–≤
 */
export const getPromptHistoryCacheStats = () => {
  const now = Date.now()
  const totalEntries = Object.keys(promptHistoryCache).length
  const validEntries = Object.values(promptHistoryCache).filter(
    entry => now - entry.timestamp < PROMPT_HISTORY_CACHE_TTL
  ).length
  const expiredEntries = totalEntries - validEntries

  return {
    total: totalEntries,
    valid: validEntries,
    expired: expiredEntries,
    ttl_ms: PROMPT_HISTORY_CACHE_TTL,
  }
}

// === WRAPPER FUNCTION FOR BACKWARD COMPATIBILITY ===

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –º–∞—Å—Å–∏–≤ –ø—Ä–æ–º–ø—Ç–æ–≤ –∏–ª–∏ null –ø—Ä–∏ –æ—à–∏–±–∫–µ
 */
export const getPromptHistorySimple = async (
  telegram_id: string,
  limit = 10,
  mode?: ModeEnum,
  status?: string
): Promise<PromptHistoryItem[] | null> => {
  try {
    const result = await getPromptHistoryV2({
      telegram_id,
      limit,
      mode,
      status,
    })

    return result.success ? result.prompts || [] : null
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ getPromptHistorySimple:', {
      error: error instanceof Error ? error.message : String(error),
      telegram_id,
      limit,
    })
    return null
  }
}
