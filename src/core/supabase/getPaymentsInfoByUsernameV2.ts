import { z } from 'zod'
import { supabase } from '.'
import { logger } from '@/utils/logger'
import { usernameSchema } from '@/schemas/common/telegram.schemas'
import {
  paymentInfoSchema,
  type PaymentInfo,
} from './getPaymentsInfoByTelegramIdV2'

// –°—Ö–µ–º–∞ –¥–ª—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
export const getPaymentsByUsernameParamsSchema = z.object({
  username: usernameSchema.refine(val => val !== undefined, {
    message: 'Username –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π',
  }),
  limit: z.number().min(1).max(100).default(50),
  offset: z.number().min(0).default(0),
  status: z.enum(['PENDING', 'COMPLETED', 'FAILED', 'CANCELLED']).optional(),
  type: z.enum(['MONEY_INCOME', 'MONEY_OUTCOME', 'REFUND']).optional(),
  bot_name: z.string().optional(), // –§–∏–ª—å—Ç—Ä –ø–æ –±–æ—Ç—É
})

export type GetPaymentsByUsernameParams = z.infer<
  typeof getPaymentsByUsernameParamsSchema
>

// –°—Ö–µ–º–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
export const userPaymentsInfoSchema = z.object({
  user_info: z.object({
    telegram_id: z.string(),
    username: z.string(),
    user_id: z.string().optional(),
  }),
  payments: z.array(paymentInfoSchema),
  total_count: z.number(),
  has_more: z.boolean(),
  limit: z.number(),
  offset: z.number(),
})

export type UserPaymentsInfo = z.infer<typeof userPaymentsInfoSchema>

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –∏–∑ —Ç–∞–±–ª–∏—Ü—ã payments_v2
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Drizzle ORM –∏ Zod –≤–∞–ª–∏–¥–∞—Ü–∏—é
 */
export const getPaymentsInfoByUsernameV2 = async (
  params: GetPaymentsByUsernameParams
): Promise<UserPaymentsInfo> => {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const validatedParams = getPaymentsByUsernameParamsSchema.parse(params)

    logger.info(
      'üë§ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –∏–∑ payments_v2:',
      {
        username: validatedParams.username,
        limit: validatedParams.limit,
        offset: validatedParams.offset,
        filters: {
          status: validatedParams.status,
          type: validatedParams.type,
          bot_name: validatedParams.bot_name,
        },
      }
    )

    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º telegram_id –ø–æ username
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('telegram_id, username, user_id')
      .eq('username', validatedParams.username)
      .single()

    if (userError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username:', {
        error: userError.message,
        error_details: userError,
        username: validatedParams.username,
      })
      throw new Error(
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å username ${validatedParams.username} –Ω–µ –Ω–∞–π–¥–µ–Ω`
      )
    }

    if (!userData?.telegram_id) {
      logger.warn('‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –Ω–æ telegram_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç:', {
        username: validatedParams.username,
        user_data: userData,
      })
      throw new Error(
        `–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${validatedParams.username} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç telegram_id`
      )
    }

    // –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å –∫ payments_v2 –ø–æ telegram_id
    let query = supabase
      .from('payments_v2')
      .select('*')
      .eq('telegram_id', userData.telegram_id)
      .order('created_at', { ascending: false })

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
    if (validatedParams.status) {
      query = query.eq('status', validatedParams.status)
    }

    if (validatedParams.type) {
      query = query.eq('type', validatedParams.type)
    }

    if (validatedParams.bot_name) {
      query = query.eq('bot_name', validatedParams.bot_name)
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    let countQuery = supabase
      .from('payments_v2')
      .select('*', { count: 'exact', head: true })
      .eq('telegram_id', userData.telegram_id)

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ –∂–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞
    if (validatedParams.status) {
      countQuery = countQuery.eq('status', validatedParams.status)
    }

    if (validatedParams.type) {
      countQuery = countQuery.eq('type', validatedParams.type)
    }

    if (validatedParams.bot_name) {
      countQuery = countQuery.eq('bot_name', validatedParams.bot_name)
    }

    const { count: totalCount, error: countError } = await countQuery

    if (countError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –ø–ª–∞—Ç–µ–∂–µ–π:', {
        error: countError.message,
        telegram_id: userData.telegram_id,
      })
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    const { data: paymentsData, error: paymentsError } = await query.range(
      validatedParams.offset,
      validatedParams.offset + validatedParams.limit - 1
    )

    if (paymentsError) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –∏–∑ payments_v2:', {
        error: paymentsError.message,
        error_details: paymentsError,
        telegram_id: userData.telegram_id,
        username: validatedParams.username,
      })
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π: ${paymentsError.message}`)
    }

    if (!paymentsData || paymentsData.length === 0) {
      logger.info('‚ÑπÔ∏è –ü–ª–∞—Ç–µ–∂–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
        username: validatedParams.username,
        telegram_id: userData.telegram_id,
      })

      return {
        user_info: {
          telegram_id: userData.telegram_id,
          username: userData.username,
          user_id: userData.user_id,
        },
        payments: [],
        total_count: 0,
        has_more: false,
        limit: validatedParams.limit,
        offset: validatedParams.offset,
      }
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Zod
    const validatedPayments = paymentsData
      .map((payment, index) => {
        try {
          return paymentInfoSchema.parse(payment)
        } catch (validationError) {
          logger.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞:', {
            payment_index: index,
            payment_id: payment.id,
            username: validatedParams.username,
            validation_error:
              validationError instanceof z.ZodError
                ? validationError.errors
                : validationError,
          })
          // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
          return null
        }
      })
      .filter((payment): payment is PaymentInfo => payment !== null)

    const result: UserPaymentsInfo = {
      user_info: {
        telegram_id: userData.telegram_id,
        username: userData.username,
        user_id: userData.user_id,
      },
      payments: validatedPayments,
      total_count: totalCount || 0,
      has_more:
        validatedParams.offset + validatedParams.limit < (totalCount || 0),
      limit: validatedParams.limit,
      offset: validatedParams.offset,
    }

    logger.info('‚úÖ –ü–ª–∞—Ç–µ–∂–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –ø–æ username:', {
      username: validatedParams.username,
      telegram_id: userData.telegram_id,
      total_found: paymentsData.length,
      valid_payments: validatedPayments.length,
      total_count: totalCount,
      has_more: result.has_more,
    })

    return result
  } catch (error) {
    if (error instanceof z.ZodError) {
      logger.error(
        '‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ username:',
        {
          validation_errors: error.errors,
          params,
        }
      )
      throw new Error(
        `–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${error.errors.map(e => e.message).join(', ')}`
      )
    }

    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ getPaymentsInfoByUsernameV2:', {
      error: error instanceof Error ? error.message : String(error),
      error_details: error,
      params,
    })
    throw error
  }
}

/**
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –º–∞—Å—Å–∏–≤ –ø–ª–∞—Ç–µ–∂–µ–π –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
 */
export const getPaymentsInfoByUsernameSimple = async (
  username: string
): Promise<PaymentInfo[]> => {
  const result = await getPaymentsInfoByUsernameV2({ username })
  return result.payments
}
