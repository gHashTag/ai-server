import { supabase } from '.'
import { logger } from '@/utils/logger'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
export interface BotProfitabilityReport {
  id: string
  bot_name: string
  amount: number
  stars: number
  currency: 'RUB' | 'STARS'
  payment_date: string
  month: number
  month_name: string
  type: string
  status: string
  subscription_type?: string
  payment_method: string
  description?: string
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –±–æ—Ç—É
export interface BotProfitabilityStats {
  bot_name: string
  total_rub_income: number
  total_stars_income: number
  rub_transactions: number
  stars_transactions: number
  months: {
    [key: string]: {
      month_name: string
      rub_income: number
      stars_income: number
      rub_transactions: number
      stars_transactions: number
    }
  }
}

// –ù–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
const monthNames: { [key: number]: string } = {
  5: '–ú–∞–π',
  6: '–ò—é–Ω—å',
  7: '–ò—é–ª—å',
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã payments_v2
 *
 * @param dateFrom - –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ (YYYY-MM-DD)
 * @param dateTo - –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞ (YYYY-MM-DD)
 * @param botName - –§–∏–ª—å—Ç—Ä –ø–æ –∏–º–µ–Ω–∏ –±–æ—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
 * @returns Promise<BotProfitabilityReport[]>
 */
export const getBotProfitability = async (
  dateFrom?: string,
  dateTo?: string,
  botName?: string
): Promise<BotProfitabilityReport[]> => {
  try {
    logger.info('üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–æ–≤:', {
      description: 'Getting bot profitability data',
      dateFrom,
      dateTo,
      botName,
    })

    let query = supabase
      .from('payments_v2')
      .select('*')
      .eq('status', 'COMPLETED')
      .eq('type', 'MONEY_INCOME')
      .not('bot_name', 'is', null)
      .order('payment_date', { ascending: false })

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ –¥–∞—Ç–µ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã
    if (dateFrom) {
      query = query.gte('payment_date', dateFrom)
    }
    if (dateTo) {
      query = query.lte('payment_date', dateTo)
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ –∏–º–µ–Ω–∏ –±–æ—Ç–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if (botName) {
      query = query.eq('bot_name', botName)
    }

    const { data, error } = await query

    if (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–æ–≤:', {
        description: 'Error getting bot profitability data',
        error: error.message,
      })
      return []
    }

    if (!data || data.length === 0) {
      logger.info('üìù –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:', {
        description: 'No bot profitability data found',
        dateFrom,
        dateTo,
        botName,
      })
      return []
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
    const profitabilityReports: BotProfitabilityReport[] = data.map(payment => {
      const paymentDate = new Date(payment.payment_date)
      const month = paymentDate.getMonth() + 1

      return {
        id: payment.id,
        bot_name: payment.bot_name,
        amount: payment.amount || 0,
        stars: payment.stars || 0,
        currency: payment.currency,
        payment_date: payment.payment_date,
        month,
        month_name: monthNames[month] || `–ú–µ—Å—è—Ü ${month}`,
        type: payment.type,
        status: payment.status,
        subscription_type: payment.subscription_type,
        payment_method: payment.payment_method,
        description: payment.description,
      }
    })

    logger.info('‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–æ–≤:', {
      description: 'Bot profitability data retrieved successfully',
      count: profitabilityReports.length,
      dateFrom,
      dateTo,
      botName,
    })

    return profitabilityReports
  } catch (error) {
    logger.error(
      '‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–æ–≤:',
      {
        description: 'Critical error getting bot profitability data',
        error: error instanceof Error ? error.message : String(error),
      }
    )
    return []
  }
}

/**
 * –ì—Ä—É–ø–ø–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–æ–≤ –∏ —Å–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
 *
 * @param profitabilityData - –ú–∞—Å—Å–∏–≤ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏
 * @returns BotProfitabilityStats[]
 */
export const generateBotProfitabilityStats = (
  profitabilityData: BotProfitabilityReport[]
): BotProfitabilityStats[] => {
  const statsMap = new Map<string, BotProfitabilityStats>()

  profitabilityData.forEach(payment => {
    if (!statsMap.has(payment.bot_name)) {
      statsMap.set(payment.bot_name, {
        bot_name: payment.bot_name,
        total_rub_income: 0,
        total_stars_income: 0,
        rub_transactions: 0,
        stars_transactions: 0,
        months: {},
      })
    }

    const stats = statsMap.get(payment.bot_name)!
    const monthKey = `${payment.month.toString().padStart(2, '0')}`

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ—Å—è—Ü–∞ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if (!stats.months[monthKey]) {
      stats.months[monthKey] = {
        month_name: payment.month_name,
        rub_income: 0,
        stars_income: 0,
        rub_transactions: 0,
        stars_transactions: 0,
      }
    }

    const monthStats = stats.months[monthKey]

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–ª—é—Ç—ã
    if (payment.currency === 'RUB' && payment.amount > 0) {
      stats.total_rub_income += payment.amount
      stats.rub_transactions += 1
      monthStats.rub_income += payment.amount
      monthStats.rub_transactions += 1
    } else if (payment.currency === 'STARS' && payment.stars > 0) {
      stats.total_stars_income += payment.stars
      stats.stars_transactions += 1
      monthStats.stars_income += payment.stars
      monthStats.stars_transactions += 1
    }
  })

  return Array.from(statsMap.values()).sort((a, b) =>
    a.bot_name.localeCompare(b.bot_name)
  )
}

/**
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –æ—Ç—á–µ—Ç –æ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–æ–≤ –≤ –∫–æ–Ω—Å–æ–ª–∏
 *
 * @param stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–æ–≤
 */
export const displayBotProfitabilityReport = (
  stats: BotProfitabilityStats[]
): void => {
  console.log('\nüìà –ê–ù–ê–õ–ò–ó –ü–†–ò–ë–´–õ–¨–ù–û–°–¢–ò –ë–û–¢–û–í')
  console.log('=' * 80)

  if (stats.length === 0) {
    console.log('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
    return
  }

  let totalRubIncome = 0
  let totalStarsIncome = 0

  stats.forEach(botStats => {
    console.log(`\nü§ñ –ë–û–¢: ${botStats.bot_name}`)
    console.log('-'.repeat(50))

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Å—è—Ü—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
    const sortedMonths = Object.entries(botStats.months).sort(([a], [b]) =>
      a.localeCompare(b)
    )

    sortedMonths.forEach(([monthKey, monthData]) => {
      console.log(`  üìÖ ${monthData.month_name} (${monthKey}):`)

      if (monthData.rub_income > 0) {
        console.log(
          `    üí∞ –†—É–±–ª–∏: ${monthData.rub_income.toFixed(2)} RUB (${
            monthData.rub_transactions
          } —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)`
        )
      }

      if (monthData.stars_income > 0) {
        console.log(
          `    ‚≠ê –ó–≤–µ–∑–¥—ã: ${monthData.stars_income} STARS (${monthData.stars_transactions} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)`
        )
      }

      if (monthData.rub_income === 0 && monthData.stars_income === 0) {
        console.log(`    üö´ –ù–µ—Ç –¥–æ—Ö–æ–¥–æ–≤`)
      }
    })

    console.log(
      `  üìä –ò–¢–û–ì–û –ø–æ –±–æ—Ç—É: ${botStats.total_rub_income.toFixed(2)} RUB | ${
        botStats.total_stars_income
      } STARS`
    )

    totalRubIncome += botStats.total_rub_income
    totalStarsIncome += botStats.total_stars_income
  })

  console.log('\n' + '=' * 80)
  console.log('üìä –û–ë–©–ò–ô –ò–¢–û–ì:')
  console.log(`üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥ –≤ —Ä—É–±–ª—è—Ö: ${totalRubIncome.toFixed(2)} RUB`)
  console.log(`‚≠ê –û–±—â–∏–π –¥–æ—Ö–æ–¥ –≤ –∑–≤–µ–∑–¥–∞—Ö: ${totalStarsIncome} STARS`)
  console.log(`ü§ñ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤: ${stats.length}`)
  console.log('=' * 80)
}
