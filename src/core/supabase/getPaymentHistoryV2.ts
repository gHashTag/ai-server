import { z } from 'zod'
import { supabase } from '@/core/supabase'
import { logger } from '@/utils/logger'
import { telegramIdSchema } from '@/schemas/common/base.schemas'
import { PaymentType } from '@/interfaces/payments.interface'

// === ZOD SCHEMAS ===

/**
 * –°—Ö–µ–º–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–∏–ø–æ–≤ –ø–ª–∞—Ç–µ–∂–µ–π
 */
export const paymentTypeSchema = z.nativeEnum(PaymentType, {
  errorMap: () => ({ message: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø –ø–ª–∞—Ç–µ–∂–∞' }),
})

/**
 * –°—Ö–µ–º–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ª–∏–º–∏—Ç–∞ –∑–∞–ø–∏—Å–µ–π
 */
export const limitSchema = z
  .number()
  .int()
  .min(1, '–õ–∏–º–∏—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 0')
  .max(100, '–õ–∏–º–∏—Ç –Ω–µ –º–æ–∂–µ—Ç –ø—Ä–µ–≤—ã—à–∞—Ç—å 100')
  .default(10)

/**
 * –°—Ö–µ–º–∞ –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
 */
export const getPaymentHistoryParamsSchema = z.object({
  telegram_id: telegramIdSchema,
  limit: limitSchema.optional(),
  payment_type: paymentTypeSchema.optional(),
  bot_name: z.string().optional(),
})

/**
 * –°—Ö–µ–º–∞ –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞ –∏–∑ Supabase (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –ø–æ–¥ —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –¥–∞—Ç—ã)
 */
export const paymentHistoryItemSchema = z.object({
  id: z.string().uuid(),
  telegram_id: z.string(),
  type: z.string(), // PaymentType as string
  stars: z.number().nullable(),
  amount: z.number().nullable().optional(),
  currency: z.string().nullable().optional(),
  description: z.string().nullable(),
  payment_method: z.string().nullable(),
  bot_name: z.string().nullable().optional(),
  status: z.string(),
  created_at: z.string(), // Supabase –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –¥–∞—Ç
  updated_at: z.string().optional(),
  metadata: z.record(z.any()).nullable().optional(),
})

/**
 * –°—Ö–µ–º–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
 */
export const getPaymentHistoryResultSchema = z.object({
  success: z.boolean(),
  payments: z.array(paymentHistoryItemSchema).nullable(),
  total_count: z.number().optional(),
  error_message: z.string().optional(),
})

// === TYPES ===

export type GetPaymentHistoryParams = z.infer<
  typeof getPaymentHistoryParamsSchema
>
export type PaymentHistoryItem = z.infer<typeof paymentHistoryItemSchema>
export type GetPaymentHistoryResult = z.infer<
  typeof getPaymentHistoryResultSchema
>

// === CACHE ===

type PaymentHistoryCache = {
  [key: string]: {
    payments: PaymentHistoryItem[]
    timestamp: number
  }
}

// –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (2 –º–∏–Ω—É—Ç—ã)
const PAYMENT_HISTORY_CACHE_TTL = 2 * 60 * 1000

// –ö—ç—à –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
const paymentHistoryCache: PaymentHistoryCache = {}

// === MAIN FUNCTION ===

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å Zod –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π, –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
 *
 * @param params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
 * @returns –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –º–∞—Å—Å–∏–≤–æ–º –ø–ª–∞—Ç–µ–∂–µ–π
 */
export const getPaymentHistoryV2 = async (
  params: GetPaymentHistoryParams
): Promise<GetPaymentHistoryResult> => {
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const validatedParams = getPaymentHistoryParamsSchema.parse(params)
    const limit = validatedParams.limit || 10

    logger.info('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π V2:', {
      telegram_id: validatedParams.telegram_id,
      limit,
      payment_type: validatedParams.payment_type,
      bot_name: validatedParams.bot_name,
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
    const cacheKey = `${validatedParams.telegram_id}_${limit}_${
      validatedParams.payment_type || 'all'
    }_${validatedParams.bot_name || 'all'}`
    const now = Date.now()

    if (
      paymentHistoryCache[cacheKey] &&
      now - paymentHistoryCache[cacheKey].timestamp < PAYMENT_HISTORY_CACHE_TTL
    ) {
      logger.info('üíæ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∏–∑ –∫—ç—à–∞:', {
        telegram_id: validatedParams.telegram_id,
        cache_key: cacheKey,
        cached_count: paymentHistoryCache[cacheKey].payments.length,
      })
      return {
        success: true,
        payments: paymentHistoryCache[cacheKey].payments,
      }
    }

    // –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    let query = supabase
      .from('payments_v2')
      .select(
        'id, telegram_id, type, stars, amount, currency, description, payment_method, bot_name, status, created_at, updated_at, metadata'
      )
      .eq('telegram_id', validatedParams.telegram_id)
      .eq('status', 'COMPLETED')

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –µ—Å–ª–∏ –æ–Ω–∏ —É–∫–∞–∑–∞–Ω—ã
    if (validatedParams.payment_type) {
      query = query.eq('type', validatedParams.payment_type)
    }

    if (validatedParams.bot_name) {
      query = query.eq('bot_name', validatedParams.bot_name)
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    const { data, error } = await query
      .order('created_at', { ascending: false })
      .limit(limit)

    if (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π:', {
        error: error.message,
        error_code: error.code,
        telegram_id: validatedParams.telegram_id,
        limit,
      })
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π: ${error.message}`)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ
    if (!data || data.length === 0) {
      logger.info('‚ÑπÔ∏è –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø—É—Å—Ç–∞:', {
        telegram_id: validatedParams.telegram_id,
        limit,
        payment_type: validatedParams.payment_type,
        bot_name: validatedParams.bot_name,
      })
      return {
        success: true,
        payments: [],
      }
    }

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø–ª–∞—Ç–µ–∂
    const validatedPayments = data.map(payment =>
      paymentHistoryItemSchema.parse(payment)
    )

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    paymentHistoryCache[cacheKey] = {
      payments: validatedPayments,
      timestamp: now,
    }

    logger.info('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞:', {
      telegram_id: validatedParams.telegram_id,
      payments_count: validatedPayments.length,
      limit,
      payment_type: validatedParams.payment_type,
      bot_name: validatedParams.bot_name,
    })

    return {
      success: true,
      payments: validatedPayments,
      total_count: validatedPayments.length,
    }
  } catch (error) {
    if (error instanceof z.ZodError) {
      // –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ Zod –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
      throw error
    }

    logger.error('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ getPaymentHistoryV2:', {
      error: error instanceof Error ? error.message : String(error),
      error_details: error,
      telegram_id: params.telegram_id,
    })

    throw error
  }
}

// === CACHE MANAGEMENT ===

/**
 * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫—ç—à –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –î–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π, –∏–∑–º–µ–Ω—è—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–∏
 */
export const invalidatePaymentHistoryCache = (telegram_id: string): void => {
  // –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∫—ç—à–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Object.keys(paymentHistoryCache).forEach(key => {
    if (key.startsWith(`${telegram_id}_`)) {
      delete paymentHistoryCache[key]
    }
  })

  logger.info('üîÑ –ö—ç—à –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω:', {
    telegram_id,
  })
}

/**
 * –û—á–∏—â–∞–µ—Ç –≤–µ—Å—å –∫—ç—à –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
 */
export const clearPaymentHistoryCache = (): void => {
  Object.keys(paymentHistoryCache).forEach(key => {
    delete paymentHistoryCache[key]
  })

  logger.info('üßπ –ö—ç—à –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω')
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
 */
export const getPaymentHistoryCacheStats = () => {
  const now = Date.now()
  const totalEntries = Object.keys(paymentHistoryCache).length
  const validEntries = Object.values(paymentHistoryCache).filter(
    entry => now - entry.timestamp < PAYMENT_HISTORY_CACHE_TTL
  ).length
  const expiredEntries = totalEntries - validEntries

  return {
    total: totalEntries,
    valid: validEntries,
    expired: expiredEntries,
    ttl_ms: PAYMENT_HISTORY_CACHE_TTL,
  }
}

// === WRAPPER FUNCTION FOR BACKWARD COMPATIBILITY ===

/**
 * –ü—Ä–æ—Å—Ç–∞—è wrapper —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –º–∞—Å—Å–∏–≤ –ø–ª–∞—Ç–µ–∂–µ–π –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
 */
export const getPaymentHistorySimple = async (
  telegram_id: string,
  limit = 10
): Promise<PaymentHistoryItem[]> => {
  const result = await getPaymentHistoryV2({
    telegram_id,
    limit,
  })

  if (!result.success || !result.payments) {
    return []
  }

  return result.payments
}
