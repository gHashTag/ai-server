/**
 * Wrapper —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
 * –º–µ–∂–¥—É –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∏ –∏—Ö V2 –≤–µ—Ä—Å–∏—è–º–∏
 *
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç wrapper'—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∑–≤–æ–ª—è—é—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∫–æ–¥—É
 * –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ V2 —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è API
 */

import { logger } from '@/utils/logger'
import { getUserDataV2, type UserField } from './getUserDataV2'
import { updateUserVoiceV2 } from './updateUserVoiceV2'
import { updateUserSubscriptionV2 } from './updateUserSubscriptionV2'
import { SubscriptionType } from '@/interfaces/subscription.interface'

// === WRAPPER FOR getUserData ===

/**
 * Wrapper –¥–ª—è getUserData - –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç getUserDataV2 –ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º
 */
export const getUserDataWrapper = async (telegram_id: string) => {
  try {
    logger.info('üîÑ Wrapper: getUserData ‚Üí getUserDataV2', {
      telegram_id,
      wrapper_type: 'getUserData',
    })

    const result = await getUserDataV2({
      telegram_id,
      fields: [
        'username',
        'first_name',
        'last_name',
        'company',
        'position',
        'designation',
      ] as UserField[],
    })

    if (!result) {
      throw new Error(
        `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω`
      )
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ç–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ, —á—Ç–æ –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
    return {
      username: result.username,
      first_name: result.first_name,
      last_name: result.last_name,
      company: result.company,
      position: result.position,
      designation: result.designation,
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ getUserDataWrapper:', {
      error: error instanceof Error ? error.message : String(error),
      telegram_id,
    })
    throw error
  }
}

// === WRAPPER FOR updateUserVoice ===

/**
 * Wrapper –¥–ª—è updateUserVoice - –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç updateUserVoiceV2 –ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º
 */
export const updateUserVoiceWrapper = async (
  telegram_id: string,
  voice_id_elevenlabs: string
): Promise<void> => {
  try {
    logger.info('üîÑ Wrapper: updateUserVoice ‚Üí updateUserVoiceV2', {
      telegram_id,
      voice_id_elevenlabs,
      wrapper_type: 'updateUserVoice',
    })

    const result = await updateUserVoiceV2({
      telegram_id,
      voice_id_elevenlabs,
    })

    if (!result.success) {
      throw new Error(
        result.error_message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫'
      )
    }

    logger.info('‚úÖ Wrapper: updateUserVoice —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω', {
      telegram_id,
      voice_id_elevenlabs,
    })
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ updateUserVoiceWrapper:', {
      error: error instanceof Error ? error.message : String(error),
      telegram_id,
      voice_id_elevenlabs,
    })
    throw error
  }
}

// === WRAPPER FOR updateUserSubscription ===

/**
 * Wrapper –¥–ª—è updateUserSubscription - –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç updateUserSubscriptionV2 –ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º
 */
export const updateUserSubscriptionWrapper = async (
  telegram_id: string,
  subscription: string
): Promise<void> => {
  try {
    logger.info(
      'üîÑ Wrapper: updateUserSubscription ‚Üí updateUserSubscriptionV2',
      {
        telegram_id,
        subscription,
        wrapper_type: 'updateUserSubscription',
      }
    )

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —á—Ç–æ subscription —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º SubscriptionType
    if (
      !Object.values(SubscriptionType).includes(
        subscription as SubscriptionType
      )
    ) {
      throw new Error(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: ${subscription}`)
    }

    const result = await updateUserSubscriptionV2({
      telegram_id,
      subscription_type: subscription as SubscriptionType,
    })

    if (!result.success) {
      throw new Error(result.error_message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏')
    }

    logger.info('‚úÖ Wrapper: updateUserSubscription —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω', {
      telegram_id,
      subscription,
    })
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ updateUserSubscriptionWrapper:', {
      error: error instanceof Error ? error.message : String(error),
      telegram_id,
      subscription,
    })
    throw error
  }
}

// === UTILITY FUNCTIONS ===

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è wrapper'–æ–≤
 */
export const getWrapperStats = () => {
  return {
    available_wrappers: [
      'getUserDataWrapper',
      'updateUserVoiceWrapper',
      'updateUserSubscriptionWrapper',
    ],
    description: 'Wrapper —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ V1 ‚Üí V2',
    migration_status: '–ì–æ—Ç–æ–≤—ã –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é',
  }
}
