/**
 * üï∏Ô∏è –¢–∫–∞—á –ò—Å—Ç–æ—Ä–∏–π - –ú–∞—Å—Ç–µ—Ä –ü–µ—Ä–µ–ø–ª–µ—Ç–µ–Ω–∏—è –°—É–¥–µ–±
 *
 * –°–∏—Å—Ç–µ–º–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö, –º–Ω–æ–≥–æ—Å–ª–æ–π–Ω—ã—Ö –∏—Å—Ç–æ—Ä–∏–π –≥–¥–µ —Å—É–¥—å–±—ã –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
 * –ø–µ—Ä–µ–ø–ª–µ—Ç–∞—é—Ç—Å—è –∫–∞–∫ –Ω–∏—Ç–∏ –≤ —Å–≤—è—â–µ–Ω–Ω–æ–º –≥–æ–±–µ–ª–µ–Ω–µ –ø–æ–≤–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è.
 */

import {
  CharacterProfile,
  SubplotThread,
  GeneratedScene,
  Theme,
  WriterStyle,
  StoryStructureType,
} from '@/interfaces/story-architecture.interface'

// ================================
// –¢–ò–ü–´ –°–Æ–ñ–ï–¢–ù–´–• –°–í–Ø–ó–ï–ô
// ================================

export enum PlotConnectionType {
  CAUSAL = 'CAUSAL', // –î–µ–π—Å—Ç–≤–∏–µ A –≤—ã–∑—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ B
  PARALLEL = 'PARALLEL', // –î–≤–µ –ª–∏–Ω–∏–∏ —Ä–∞–∑–≤–∏–≤–∞—é—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
  CONTRASTING = 'CONTRASTING', // –î–≤–µ –ª–∏–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–∏—Ä—É—é—Ç –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º
  CONVERGING = 'CONVERGING', // –õ–∏–Ω–∏–∏ —Å—Ö–æ–¥—è—Ç—Å—è –∫ –æ–±—â–µ–π —Ç–æ—á–∫–µ
  MIRRORING = 'MIRRORING', // –õ–∏–Ω–∏–∏ –æ—Ç—Ä–∞–∂–∞—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞
  NESTED = 'NESTED', // –û–¥–Ω–∞ –ª–∏–Ω–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ –¥—Ä—É–≥–æ–π
  CYCLICAL = 'CYCLICAL', // –õ–∏–Ω–∏–∏ –æ–±—Ä–∞–∑—É—é—Ç —Ü–∏–∫–ª–∏—á–µ—Å–∫—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
}

export enum IntersectionType {
  CONFLICT = 'CONFLICT', // –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ —Å—Ç–∞–ª–∫–∏–≤–∞—é—Ç—Å—è –≤ –ø—Ä–æ—Ç–∏–≤–æ—Å—Ç–æ—è–Ω–∏–∏
  ALLIANCE = 'ALLIANCE', // –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è
  REVELATION = 'REVELATION', // –†–∞—Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
  TRANSFORMATION = 'TRANSFORMATION', // –ü–µ—Ä—Å–æ–Ω–∞–∂ –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ –º–µ–Ω—è–µ—Ç—Å—è
  SACRIFICE = 'SACRIFICE', // –û–¥–∏–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂ –∂–µ—Ä—Ç–≤—É–µ—Ç —Ä–∞–¥–∏ –¥—Ä—É–≥–æ–≥–æ
  BETRAYAL = 'BETRAYAL', // –ü—Ä–µ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ –º–µ–Ω—è–µ—Ç –¥–∏–Ω–∞–º–∏–∫—É
  RECOGNITION = 'RECOGNITION', // –ú–æ–º–µ–Ω—Ç —É–∑–Ω–∞–≤–∞–Ω–∏—è/–ø—Ä–æ–∑—Ä–µ–Ω–∏—è
}

// ================================
// –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–•
// ================================

export interface PlotThread {
  id: string
  name: string
  protagonist: string // ID –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  central_question: string
  stakes: string
  obstacles: string[]
  resolution_type: 'TRIUMPHANT' | 'TRAGIC' | 'BITTERSWEET' | 'OPEN'
  theme_embodied: string
  scenes: string[] // IDs —Å—Ü–µ–Ω
  intersections: PlotIntersection[]
}

export interface PlotIntersection {
  scene_id: string
  intersecting_threads: string[] // IDs –¥—Ä—É–≥–∏—Ö –Ω–∏—Ç–µ–π
  intersection_type: IntersectionType
  impact_description: string
  consequences: string[]
  emotional_weight: number // 1-10
}

export interface WeavingPattern {
  name: string
  description: string
  thread_count: number
  complexity_level: 'SIMPLE' | 'MODERATE' | 'COMPLEX'
  best_for_genres: string[]
  intersection_frequency: number // –ö–∞–∫ —á–∞—Å—Ç–æ –ª–∏–Ω–∏–∏ –ø–µ—Ä–µ—Å–µ–∫–∞—é—Ç—Å—è
  convergence_points: number // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ —Å—Ö–æ–∂–¥–µ–Ω–∏—è
}

// ================================
// –ú–ê–°–¢–ï–† –¢–ö–ê–ß
// ================================

export class StoryWeaver {
  /**
   * üï∏Ô∏è –°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–µ–ø–ª–µ—Ç–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –∏—Ö –∏—Å—Ç–æ—Ä–∏–π
   */
  static weaveStories(params: {
    characters: CharacterProfile[]
    main_theme: Theme
    writer_style: WriterStyle
    structure_type: StoryStructureType
    complexity: 'SIMPLE' | 'MODERATE' | 'COMPLEX'
    scene_count: number
  }): WovenStory {
    // 1. –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å—é–∂–µ—Ç–Ω—ã–µ –Ω–∏—Ç–∏
    const threads = this.createPlotThreads(params.characters, params.main_theme)

    // 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –ø–µ—Ä–µ–ø–ª–µ—Ç–µ–Ω–∏—è
    const pattern = this.selectWeavingPattern(params)

    // 3. –°–æ–∑–¥–∞–µ–º —Ç–æ—á–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
    const intersections = this.createIntersections(threads, pattern, params)

    // 4. –°—Ç—Ä–æ–∏–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ü–µ–Ω
    const scenes = this.constructSceneSequence(threads, intersections, params)

    // 5. –î–æ–±–∞–≤–ª—è–µ–º –≥–ª—É–±–∏–Ω—É —á–µ—Ä–µ–∑ —Å–∏–º–≤–æ–ª–∏–∑–º
    const symbols = this.addSymbolicConnections(threads, params.main_theme)

    return {
      threads,
      pattern,
      intersections,
      scenes,
      symbols,
      analysis: this.analyzeWeaving(threads, intersections),
    }
  }

  /**
   * üßµ –°–æ–∑–¥–∞–µ—Ç —Å—é–∂–µ—Ç–Ω—ã–µ –Ω–∏—Ç–∏ –∏–∑ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
   */
  private static createPlotThreads(
    characters: CharacterProfile[],
    mainTheme: Theme
  ): PlotThread[] {
    return characters.map((character, index) => {
      const thread: PlotThread = {
        id: `thread_${character.id}`,
        name: `${character.name}'s Journey`,
        protagonist: character.id,
        central_question: this.generateCentralQuestion(character),
        stakes: this.generateStakes(character),
        obstacles: this.generateObstacles(character),
        resolution_type: this.determineResolutionType(character.arc_type),
        theme_embodied: character.theme_embodiment,
        scenes: [],
        intersections: [],
      }

      return thread
    })
  }

  /**
   * üîç –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   */
  private static generateCentralQuestion(character: CharacterProfile): string {
    const questionTemplates = {
      PROTAGONIST: [
        `Will ${character.name} overcome their ${character.psychology.core_fear}?`,
        `Can ${character.name} learn ${character.psychology.truth_needed}?`,
        `Will ${character.name} achieve ${character.psychology.core_need}?`,
      ],
      ANTAGONIST: [
        `Can ${character.name} be stopped before they destroy everything?`,
        `Will ${character.name} realize the error of their ways?`,
        `What price will ${character.name} pay for their ambition?`,
      ],
      MENTOR: [
        `Can ${character.name} successfully guide the hero?`,
        `Will ${character.name}'s wisdom be enough?`,
        `What sacrifice will ${character.name} make for the greater good?`,
      ],
      ALLY: [
        `Will ${character.name} find their own strength?`,
        `Can ${character.name} prove their worth?`,
        `Will ${character.name} remain loyal when tested?`,
      ],
    }

    const templates =
      questionTemplates[character.role] || questionTemplates.ALLY
    return templates[Math.floor(Math.random() * templates.length)]
  }

  /**
   * ‚ö° –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞–≤–∫–∏ –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   */
  private static generateStakes(character: CharacterProfile): string {
    return `If ${character.name} fails, they will lose ${character.psychology.core_need} forever`
  }

  /**
   * üöß –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è
   */
  private static generateObstacles(character: CharacterProfile): string[] {
    return [
      `Internal: Struggling with ${character.psychology.lie_believed}`,
      `External: Opposition from other characters`,
      `Philosophical: Conflict between ${character.psychology.internal_conflict}`,
    ]
  }

  /**
   * üé≠ –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥—É–≥–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   */
  private static determineResolutionType(
    arcType: any
  ): 'TRIUMPHANT' | 'TRAGIC' | 'BITTERSWEET' | 'OPEN' {
    if (arcType.positive && arcType.growth) return 'TRIUMPHANT'
    if (arcType.fall) return 'TRAGIC'
    if (arcType.change && !arcType.positive) return 'BITTERSWEET'
    return 'OPEN'
  }

  /**
   * üé® –í—ã–±–∏—Ä–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω –ø–µ—Ä–µ–ø–ª–µ—Ç–µ–Ω–∏—è
   */
  private static selectWeavingPattern(params: any): WeavingPattern {
    const patterns: Record<string, WeavingPattern> = {
      SIMPLE_PARALLEL: {
        name: '–ü—Ä–æ—Å—Ç—ã–µ –ü–∞—Ä–∞–ª–ª–µ–ª–∏',
        description:
          '–î–≤–µ-—Ç—Ä–∏ –ª–∏–Ω–∏–∏ —Ä–∞–∑–≤–∏–≤–∞—é—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ, –ø–µ—Ä–µ—Å–µ–∫–∞—è—Å—å –≤ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–º–µ–Ω—Ç–∞—Ö',
        thread_count: 3,
        complexity_level: 'SIMPLE',
        best_for_genres: ['ROMANCE', 'CONTEMPORARY', 'MYSTERY'],
        intersection_frequency: 0.3,
        convergence_points: 2,
      },

      CONVERGING_STREAMS: {
        name: '–°—Ö–æ–¥—è—â–∏–µ—Å—è –ü–æ—Ç–æ–∫–∏',
        description:
          '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ª–∏–Ω–∏–∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —Å—Ö–æ–¥—è—Ç—Å—è –∫ –æ–±—â–µ–º—É –∫—É–ª—å–º–∏–Ω–∞—Ü–∏–æ–Ω–Ω–æ–º—É –º–æ–º–µ–Ω—Ç—É',
        thread_count: 5,
        complexity_level: 'MODERATE',
        best_for_genres: ['THRILLER', 'FANTASY', 'SCIENCE_FICTION'],
        intersection_frequency: 0.5,
        convergence_points: 3,
      },

      NESTED_MIRRORS: {
        name: '–ó–µ—Ä–∫–∞–ª—å–Ω—ã–µ –í–ª–æ–∂–µ–Ω–∏—è',
        description:
          '–ò—Å—Ç–æ—Ä–∏–∏ –æ—Ç—Ä–∞–∂–∞—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω—è—Ö, —Å–æ–∑–¥–∞–≤–∞—è —Ñ—Ä–∞–∫—Ç–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É',
        thread_count: 6,
        complexity_level: 'COMPLEX',
        best_for_genres: [
          'LITERARY_FICTION',
          'MAGICAL_REALISM',
          'BIBLICAL_PARABLE',
        ],
        intersection_frequency: 0.7,
        convergence_points: 4,
      },

      CYCLICAL_TAPESTRY: {
        name: '–¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π –ì–æ–±–µ–ª–µ–Ω',
        description:
          '–ò—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–ø–ª–µ—Ç–∞—é—Ç—Å—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏, –∫–∞–∂–¥–∞—è –ª–∏–Ω–∏—è –≤–ª–∏—è–µ—Ç –Ω–∞ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ',
        thread_count: 8,
        complexity_level: 'COMPLEX',
        best_for_genres: ['EPIC_FANTASY', 'HISTORICAL', 'DYSTOPIAN'],
        intersection_frequency: 0.8,
        convergence_points: 5,
      },
    }

    // –í—ã–±–∏—Ä–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    const patternKey = this.selectPatternKey(params)
    return patterns[patternKey] || patterns.SIMPLE_PARALLEL
  }

  /**
   * üîë –í—ã–±–∏—Ä–∞–µ—Ç –∫–ª—é—á –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
   */
  private static selectPatternKey(params: any): string {
    const characterCount = params.characters.length

    if (params.complexity === 'SIMPLE' || characterCount <= 3) {
      return 'SIMPLE_PARALLEL'
    } else if (params.complexity === 'MODERATE' || characterCount <= 5) {
      return 'CONVERGING_STREAMS'
    } else if (
      params.writer_style === 'BIBLICAL' ||
      params.writer_style === 'HARUKI_MURAKAMI'
    ) {
      return 'NESTED_MIRRORS'
    } else {
      return 'CYCLICAL_TAPESTRY'
    }
  }

  /**
   * ‚ö° –°–æ–∑–¥–∞–µ—Ç —Ç–æ—á–∫–∏ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –º–µ–∂–¥—É –Ω–∏—Ç—è–º–∏
   */
  private static createIntersections(
    threads: PlotThread[],
    pattern: WeavingPattern,
    params: any
  ): PlotIntersection[] {
    const intersections: PlotIntersection[] = []
    const totalScenes = params.scene_count
    const intersectionScenes = Math.floor(
      totalScenes * pattern.intersection_frequency
    )

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ü–µ–Ω—ã –¥–ª—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–π
    const intersectionPositions = this.distributeIntersections(
      intersectionScenes,
      totalScenes,
      pattern.convergence_points
    )

    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
    intersectionPositions.forEach((position, index) => {
      const intersection = this.createIntersectionAtPosition(
        position,
        threads,
        index,
        params
      )
      intersections.push(intersection)
    })

    return intersections
  }

  /**
   * üìç –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ø–æ —Å—Ü–µ–Ω–∞–º
   */
  private static distributeIntersections(
    intersectionCount: number,
    totalScenes: number,
    convergencePoints: number
  ): number[] {
    const positions: number[] = []

    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ —Å—Ö–æ–∂–¥–µ–Ω–∏—è (–Ω–∞—á–∞–ª–æ, —Å–µ—Ä–µ–¥–∏–Ω–∞, –∫–æ–Ω–µ—Ü)
    const mandatoryPositions = [
      Math.floor(totalScenes * 0.25), // –ü–µ—Ä–≤–∞—è —á–µ—Ç–≤–µ—Ä—Ç—å
      Math.floor(totalScenes * 0.5), // –°–µ—Ä–µ–¥–∏–Ω–∞
      Math.floor(totalScenes * 0.75), // –¢—Ä–µ—Ç—å—è —á–µ—Ç–≤–µ—Ä—Ç—å
      totalScenes - 1, // –ö—É–ª—å–º–∏–Ω–∞—Ü–∏—è
    ]

    positions.push(...mandatoryPositions.slice(0, convergencePoints))

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
    const remainingIntersections = intersectionCount - convergencePoints
    for (let i = 0; i < remainingIntersections; i++) {
      const position = Math.floor(Math.random() * totalScenes)
      if (!positions.includes(position)) {
        positions.push(position)
      }
    }

    return positions.sort((a, b) => a - b)
  }

  /**
   * üé≠ –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –≤ –∑–∞–¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
   */
  private static createIntersectionAtPosition(
    position: number,
    threads: PlotThread[],
    index: number,
    params: any
  ): PlotIntersection {
    // –í—ã–±–∏—Ä–∞–µ–º 2-3 –Ω–∏—Ç–∏ –¥–ª—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
    const intersectingThreads = this.selectIntersectingThreads(
      threads,
      position
    )

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
    const intersectionType = this.determineIntersectionType(
      intersectingThreads,
      position,
      params
    )

    return {
      scene_id: `scene_${position}`,
      intersecting_threads: intersectingThreads.map(t => t.id),
      intersection_type: intersectionType,
      impact_description: this.generateImpactDescription(
        intersectingThreads,
        intersectionType
      ),
      consequences: this.generateConsequences(
        intersectingThreads,
        intersectionType
      ),
      emotional_weight: this.calculateEmotionalWeight(
        position,
        params.scene_count,
        intersectionType
      ),
    }
  }

  /**
   * üéØ –í—ã–±–∏—Ä–∞–µ—Ç –Ω–∏—Ç–∏ –¥–ª—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
   */
  private static selectIntersectingThreads(
    threads: PlotThread[],
    position: number
  ): PlotThread[] {
    // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –≤—ã–±–∏—Ä–∞–µ–º 2-3 —Å–ª—É—á–∞–π–Ω—ã–µ –Ω–∏—Ç–∏
    const shuffled = [...threads].sort(() => Math.random() - 0.5)
    return shuffled.slice(0, Math.min(3, threads.length))
  }

  /**
   * üé≠ –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
   */
  private static determineIntersectionType(
    threads: PlotThread[],
    position: number,
    params: any
  ): IntersectionType {
    const sceneRatio = position / params.scene_count

    if (sceneRatio < 0.25) {
      // –ù–∞—á–∞–ª–æ –∏—Å—Ç–æ—Ä–∏–∏ - –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –∏ –∞–ª—å—è–Ω—Å—ã
      return Math.random() > 0.5
        ? IntersectionType.ALLIANCE
        : IntersectionType.CONFLICT
    } else if (sceneRatio < 0.5) {
      // –ü–µ—Ä–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ - —Ä–∞–∑–≤–∏—Ç–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
      return Math.random() > 0.5
        ? IntersectionType.CONFLICT
        : IntersectionType.REVELATION
    } else if (sceneRatio < 0.75) {
      // –¢—Ä–µ—Ç—å—è —á–µ—Ç–≤–µ—Ä—Ç—å - —É—Å–ª–æ–∂–Ω–µ–Ω–∏–µ
      return Math.random() > 0.5
        ? IntersectionType.BETRAYAL
        : IntersectionType.TRANSFORMATION
    } else {
      // –§–∏–Ω–∞–ª - —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      return Math.random() > 0.5
        ? IntersectionType.SACRIFICE
        : IntersectionType.RECOGNITION
    }
  }

  /**
   * üìù –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è
   */
  private static generateImpactDescription(
    threads: PlotThread[],
    type: IntersectionType
  ): string {
    const threadNames = threads.map(t => t.name).join(' and ')

    const descriptions = {
      [IntersectionType.CONFLICT]: `${threadNames} clash, revealing fundamental differences`,
      [IntersectionType.ALLIANCE]: `${threadNames} join forces against common threat`,
      [IntersectionType.REVELATION]: `${threadNames} discover crucial truth that changes everything`,
      [IntersectionType.TRANSFORMATION]: `${threadNames} undergo fundamental change`,
      [IntersectionType.SACRIFICE]: `One character sacrifices for others in ${threadNames}`,
      [IntersectionType.BETRAYAL]: `Trust is shattered between ${threadNames}`,
      [IntersectionType.RECOGNITION]: `${threadNames} achieve understanding and reconciliation`,
    }

    return descriptions[type] || `${threadNames} intersect in meaningful way`
  }

  /**
   * ‚ö° –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
   */
  private static generateConsequences(
    threads: PlotThread[],
    type: IntersectionType
  ): string[] {
    return [
      'Changes relationship dynamics',
      'Raises stakes for all involved',
      'Reveals new information',
      'Forces character growth',
    ]
  }

  /**
   * üí™ –í—ã—á–∏—Å–ª—è–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –≤–µ—Å
   */
  private static calculateEmotionalWeight(
    position: number,
    totalScenes: number,
    type: IntersectionType
  ): number {
    const sceneRatio = position / totalScenes
    let baseWeight = 5

    // –£—Å–∏–ª–∏–≤–∞–µ–º –≤–µ—Å –∫ –∫–æ–Ω—Ü—É –∏—Å—Ç–æ—Ä–∏–∏
    if (sceneRatio > 0.75) baseWeight += 3
    else if (sceneRatio > 0.5) baseWeight += 2
    else if (sceneRatio > 0.25) baseWeight += 1

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
    const typeWeights = {
      [IntersectionType.SACRIFICE]: 3,
      [IntersectionType.BETRAYAL]: 2,
      [IntersectionType.TRANSFORMATION]: 2,
      [IntersectionType.RECOGNITION]: 2,
      [IntersectionType.CONFLICT]: 1,
      [IntersectionType.ALLIANCE]: 1,
      [IntersectionType.REVELATION]: 1,
    }

    return Math.min(10, baseWeight + (typeWeights[type] || 0))
  }

  /**
   * üé¨ –°—Ç—Ä–æ–∏—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ü–µ–Ω
   */
  private static constructSceneSequence(
    threads: PlotThread[],
    intersections: PlotIntersection[],
    params: any
  ): SceneBlueprint[] {
    const scenes: SceneBlueprint[] = []

    for (let i = 0; i < params.scene_count; i++) {
      const intersection = intersections.find(
        int => int.scene_id === `scene_${i}`
      )

      if (intersection) {
        // –°—Ü–µ–Ω–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
        scenes.push(
          this.createIntersectionScene(intersection, threads, i, params)
        )
      } else {
        // –û–±—ã—á–Ω–∞—è —Å—Ü–µ–Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
        scenes.push(this.createCharacterScene(threads, i, params))
      }
    }

    return scenes
  }

  /**
   * üé≠ –°–æ–∑–¥–∞–µ—Ç —Å—Ü–µ–Ω—É –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è
   */
  private static createIntersectionScene(
    intersection: PlotIntersection,
    threads: PlotThread[],
    sceneIndex: number,
    params: any
  ): SceneBlueprint {
    const involvedThreads = threads.filter(t =>
      intersection.intersecting_threads.includes(t.id)
    )

    return {
      id: intersection.scene_id,
      scene_number: sceneIndex + 1,
      type: 'INTERSECTION',
      primary_thread: involvedThreads[0]?.id,
      involved_threads: intersection.intersecting_threads,
      intersection_type: intersection.intersection_type,
      emotional_weight: intersection.emotional_weight,
      purpose: intersection.impact_description,
      consequences: intersection.consequences,
      symbolic_elements: this.generateSymbolicElements(intersection, params),
    }
  }

  /**
   * üë§ –°–æ–∑–¥–∞–µ—Ç —Å—Ü–µ–Ω—É —Ä–∞–∑–≤–∏—Ç–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
   */
  private static createCharacterScene(
    threads: PlotThread[],
    sceneIndex: number,
    params: any
  ): SceneBlueprint {
    // –í—ã–±–∏—Ä–∞–µ–º –≥–ª–∞–≤–Ω—É—é –Ω–∏—Ç—å –¥–ª—è —ç—Ç–æ–π —Å—Ü–µ–Ω—ã
    const primaryThread = threads[sceneIndex % threads.length]

    return {
      id: `scene_${sceneIndex}`,
      scene_number: sceneIndex + 1,
      type: 'CHARACTER_DEVELOPMENT',
      primary_thread: primaryThread.id,
      involved_threads: [primaryThread.id],
      intersection_type: null,
      emotional_weight: Math.floor(Math.random() * 5) + 3,
      purpose: `Develop ${primaryThread.protagonist}'s arc`,
      consequences: ['Character growth', 'Plot advancement'],
      symbolic_elements: [],
    }
  }

  /**
   * üîÆ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
   */
  private static generateSymbolicElements(
    intersection: PlotIntersection,
    params: any
  ): string[] {
    return [
      'Mirror or reflection imagery',
      'Weather reflecting emotional state',
      'Objects that connect characters to past',
      'Animals or nature symbolizing themes',
    ]
  }

  /**
   * üîó –î–æ–±–∞–≤–ª—è–µ—Ç —Å–∏–º–≤–æ–ª–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∏
   */
  private static addSymbolicConnections(
    threads: PlotThread[],
    theme: Theme
  ): SymbolicConnection[] {
    return [
      {
        symbol: 'recurring_object',
        meaning: theme.universal_truth,
        threads_connected: threads.map(t => t.id),
        first_appearance: 'scene_1',
        final_significance: 'Represents character transformation',
      },
    ]
  }

  /**
   * üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–ø–ª–µ—Ç–µ–Ω–∏—è
   */
  private static analyzeWeaving(
    threads: PlotThread[],
    intersections: PlotIntersection[]
  ): WeavingAnalysis {
    return {
      complexity_score: this.calculateComplexityScore(threads, intersections),
      emotional_arc_strength: this.calculateEmotionalArc(intersections),
      character_development_balance: this.analyzeCharacterBalance(threads),
      thematic_coherence: this.analyzeThematicCoherence(threads),
      potential_issues: this.identifyPotentialIssues(threads, intersections),
      suggestions: this.generateImprovementSuggestions(threads, intersections),
    }
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
  private static calculateComplexityScore(
    threads: PlotThread[],
    intersections: PlotIntersection[]
  ): number {
    return Math.min(10, threads.length + intersections.length * 0.5)
  }

  private static calculateEmotionalArc(
    intersections: PlotIntersection[]
  ): number {
    const totalWeight = intersections.reduce(
      (sum, int) => sum + int.emotional_weight,
      0
    )
    return Math.min(10, totalWeight / intersections.length)
  }

  private static analyzeCharacterBalance(threads: PlotThread[]): number {
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –≤—Å–µ –ª–∏ –Ω–∏—Ç–∏ –ø—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω–æ–π –≤–∞–∂–Ω–æ—Å—Ç–∏
    return threads.length > 0 ? 8 : 0
  }

  private static analyzeThematicCoherence(threads: PlotThread[]): number {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω—ã –ª–∏ —Ç–µ–º—ã –Ω–∏—Ç–µ–π
    return 7
  }

  private static identifyPotentialIssues(
    threads: PlotThread[],
    intersections: PlotIntersection[]
  ): string[] {
    const issues: string[] = []

    if (threads.length > 6) {
      issues.push('Too many plot threads may confuse readers')
    }

    if (intersections.length < 2) {
      issues.push('Too few intersections may make stories feel disconnected')
    }

    return issues
  }

  private static generateImprovementSuggestions(
    threads: PlotThread[],
    intersections: PlotIntersection[]
  ): string[] {
    return [
      'Consider adding more emotional stakes to secondary characters',
      'Strengthen thematic connections between plot threads',
      'Ensure each intersection serves multiple purposes',
    ]
  }
}

// ================================
// –ò–ù–¢–ï–†–§–ï–ô–°–´ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
// ================================

export interface WovenStory {
  threads: PlotThread[]
  pattern: WeavingPattern
  intersections: PlotIntersection[]
  scenes: SceneBlueprint[]
  symbols: SymbolicConnection[]
  analysis: WeavingAnalysis
}

export interface SceneBlueprint {
  id: string
  scene_number: number
  type: 'INTERSECTION' | 'CHARACTER_DEVELOPMENT' | 'EXPOSITION' | 'CLIMAX'
  primary_thread: string
  involved_threads: string[]
  intersection_type: IntersectionType | null
  emotional_weight: number
  purpose: string
  consequences: string[]
  symbolic_elements: string[]
}

export interface SymbolicConnection {
  symbol: string
  meaning: string
  threads_connected: string[]
  first_appearance: string
  final_significance: string
}

export interface WeavingAnalysis {
  complexity_score: number
  emotional_arc_strength: number
  character_development_balance: number
  thematic_coherence: number
  potential_issues: string[]
  suggestions: string[]
}
