import { replicate } from '@/core/replicate'
import {
  getUserByTelegramId,
  updateUserBalance,
  updateUserLevelPlusOne,
  getUserBalance,
  createModelTraining,
} from '@/core/supabase'
import { getBotByName } from '@/core/bot'
import { modeCosts, ModeEnum } from '@/price/helpers/modelsCost'
import { inngest } from '@/core/inngest-client/clients'
import { API_URL } from '@/config'
import { BalanceHelper } from '@/helpers/inngest'
import { logger } from '@utils/logger'

import type { Prediction } from 'replicate'

export interface ApiError extends Error {
  response?: {
    status: number
  }
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –¥–ª—è –Ω–∞—à–∏—Ö —Å–æ–±—ã—Ç–∏–π
interface TrainingEventData {
  bot_name: string
  is_ru: string | boolean
  modelName: string
  steps: string | number
  telegram_id: string
  triggerWord: string
  zipUrl: string
}

const activeTrainings = new Map<string, { cancel: () => void }>()

// –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
const TRAINING_MESSAGES = {
  start: {
    ru: 'üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...',
    en: 'üîç Starting model training...',
  },
  success: (modelName: string) => ({
    ru: `üéâ –ú–æ–¥–µ–ª—å ${modelName} –≥–æ—Ç–æ–≤–∞!`,
    en: `üéâ Model ${modelName} ready!`,
  }),
  error: (error: string) => ({
    ru: `‚ùå –û—à–∏–±–∫–∞: ${error}`,
    en: `‚ùå Error: ${error}`,
  }),
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é
export const generateModelTraining = inngest.createFunction(
  {
    id: 'model-training',
    concurrency: 2,
  },
  { event: 'model/training.start' },
  async ({ event, step }) => {
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –ª–æ–≥ –æ –≤—Ö–æ–¥—è—â–µ–º —Å–æ–±—ã—Ç–∏–∏
    logger.info({
      message: '–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏',
      eventId: event.id,
      timestamp: new Date(event.ts).toISOString(),
      idempotencyKey: `train:${event.data.telegram_id}:${event.data.modelName}`,
    })

    // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–ª—è event.data
    const eventData = event.data as TrainingEventData

    // üîÑ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    logger.debug({ message: '–î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è', data: eventData })
    const { bot } = getBotByName(eventData.bot_name)
    logger.info({
      message: '–ü–æ–ª—É—á–µ–Ω –±–æ—Ç',
      botUsername: bot?.botInfo?.username || '–Ω–µ –Ω–∞–π–¥–µ–Ω',
      botName: eventData.bot_name,
    })

    if (!bot) {
      logger.error({ message: '–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', botName: eventData.bot_name })
      throw new Error(`‚ùå –ë–æ—Ç ${eventData.bot_name} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
    }
    const helpers = {
      sendMessage: async (message: string) => {
        await step.run('send-message', async () => {
          try {
            await bot.telegram.sendMessage(eventData.telegram_id, message)
            logger.info({
              message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
              telegram_id: eventData.telegram_id,
            })
            return true
          } catch (error) {
            logger.error({
              message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è',
              error: error.message,
              telegram_id: eventData.telegram_id,
            })
            return false
          }
        })
      },

      updateBalance: async (newBalance: number) => {
        return step.run('update-balance', async () => {
          const current = await getUserBalance(eventData.telegram_id)
          if (current === null) {
            logger.error({
              message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞',
              telegram_id: eventData.telegram_id,
            })
            throw new Error('User not found')
          }
          await updateUserBalance(eventData.telegram_id, newBalance)
          logger.info({
            message: '–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω',
            telegram_id: eventData.telegram_id,
            oldBalance: current,
            newBalance,
          })
          return newBalance
        })
      },
    }

    // üß© –û—Å–Ω–æ–≤–Ω—ã–µ —à–∞–≥–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
    const trainingSteps = {
      validateInput: async () => {
        const { modelName, steps: rawSteps, is_ru } = eventData
        const steps = Number(rawSteps)

        if (isNaN(steps) || steps <= 0) {
          const errorMessage = is_ru
            ? '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤'
            : 'Invalid steps count'
          logger.error({
            message: errorMessage,
            steps: rawSteps,
            telegram_id: eventData.telegram_id,
          })
          throw new Error(errorMessage)
        }

        logger.info({
          message: '–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã',
          modelName,
          steps,
          telegram_id: eventData.telegram_id,
        })

        return { modelName, steps }
      },

      checkUserAndBalance: async () => {
        const { telegram_id } = eventData
        return Promise.all([
          step.run('get-user', async () => {
            const user = await getUserByTelegramId(telegram_id)
            if (!user) {
              logger.error({
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
                telegram_id,
              })
              return Promise.reject('User not found')
            }
            logger.info({
              message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω',
              userId: user.id,
              telegram_id,
            })
            return user
          }),
          step.run('get-balance', () => getUserBalance(telegram_id)),
        ])
      },

      createTrainingRecord: async (trainingId: string) => {
        await step.run('create-training-record', async () => {
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º steps –≤ —á–∏—Å–ª–æ
          const steps = Number(eventData.steps)

          const training = {
            telegram_id: eventData.telegram_id,
            model_name: eventData.modelName,
            trigger_word: eventData.triggerWord,
            zip_url: eventData.zipUrl,
            steps: steps, // –¢–µ–ø–µ—Ä—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —á–∏—Å–ª–æ
            replicate_training_id: trainingId,
          }
          logger.info('üîµ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ', training)
          createModelTraining(training)
          return training
        })
      },

      createReplicateModel: async (modelName: string) => {
        const username = process.env.REPLICATE_USERNAME
        if (!username) throw new Error('REPLICATE_USERNAME not set')

        try {
          const existing = await replicate.models.get(username, modelName)
          logger.info('üîµ –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –º–æ–¥–µ–ª—å:', existing.url)
          return `${username}/${modelName}`
        } catch (error) {
          logger.info('üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏...')
          try {
            const newModel = await replicate.models.create(
              username,
              modelName,
              {
                description: `LoRA: ${eventData.triggerWord}`,
                visibility: 'public',
                hardware: 'gpu-t4',
              }
            )
            logger.info('‚úÖ –ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞:', newModel.latest_version?.id)
            await new Promise(resolve => setTimeout(resolve, 5000))
            return `${username}/${modelName}`
          } catch (createError) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏:', createError)
            throw new Error('Failed to create model')
          }
        }
      },

      registerCancelHandler: (telegram_id: string, trainingId: string) => {
        const cancelProcess = {
          cancel: async () => {
            try {
              await replicate.trainings.cancel(trainingId)
              logger.info(`‚ùå Training ${trainingId} canceled`)
            } catch (error) {
              logger.error('Cancel error:', error)
            }
            activeTrainings.delete(telegram_id)
          },
        }
        activeTrainings.set(telegram_id, cancelProcess)
        logger.info('üõë Cancel handler registered for:', telegram_id)
      },

      startTraining: async (destination: string) => {
        if (!eventData.zipUrl || !eventData.triggerWord) {
          throw new Error(
            '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: zipUrl –∏–ª–∏ triggerWord'
          )
        }
        const training: Prediction = await replicate.trainings.create(
          'ostris',
          'flux-dev-lora-trainer',
          'e440909d3512c31646ee2e0c7d6f6f4923224863a6a10c494606e79fb5844497',
          {
            destination: destination as `${string}/${string}`,
            input: {
              input_images: eventData.zipUrl,
              trigger_word: eventData.triggerWord,
              steps: Number(eventData.steps), // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
              lora_rank: 128,
              optimizer: 'adamw8bit',
              batch_size: 1,
              resolution: '512,768,1024',
              learning_rate: 0.0001,
              wandb_project: 'flux_train_replicate',
            },
            webhook: `${API_URL}/webhooks/replicate`,
            webhook_events_filter: ['completed'],
          }
        )

        logger.info('üöÄ Training ID:', training.id)
        trainingSteps.registerCancelHandler(eventData.telegram_id, training.id)
        return training
      },
    }
    let balanceCheck: { success?: boolean; currentBalance?: number } | null =
      null

    // üöÄ –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
      if (activeTrainings.has(eventData.telegram_id)) {
        logger.warn({
          message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
          telegram_id: eventData.telegram_id,
        })
        logger.info({
          message: '–û—Ç–º–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
          telegram_id: eventData.telegram_id,
        })

        activeTrainings.get(eventData.telegram_id)?.cancel()

        logger.info({
          message: '–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞',
          telegram_id: eventData.telegram_id,
        })
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º is_ru –∫ –±—É–ª–µ–≤–æ–º—É —Ç–∏–ø—É –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
      const isRussian = eventData.is_ru === true || eventData.is_ru === 'true'
      await helpers.sendMessage(
        TRAINING_MESSAGES.start[isRussian ? 'ru' : 'en']
      )

      // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const { modelName, steps } = await trainingSteps.validateInput()

      // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–∞–ª–∞–Ω—Å–∞
      const [user, initialBalance] = await trainingSteps.checkUserAndBalance()
      logger.info({
        message: '–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        userId: user.id,
        initialBalance,
        telegram_id: eventData.telegram_id,
      })

      // 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      if (user.level === 0) {
        await step.run('update-level', () =>
          updateUserLevelPlusOne(eventData.telegram_id, 0)
        )
        logger.info({
          message: '–£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω',
          telegram_id: eventData.telegram_id,
          newLevel: 1,
        })
      }

      // 4. –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
      const paymentAmount = (
        modeCosts[ModeEnum.DigitalAvatarBody] as (steps: number) => number
      )(steps)

      logger.info({
        message: '–†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
        steps,
        paymentAmount,
        telegram_id: eventData.telegram_id,
      })

      // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
      balanceCheck = await step.run('balance-check', async () => {
        const result = await BalanceHelper.checkBalance(
          eventData.telegram_id,
          paymentAmount,
          {
            notifyUser: true,
            botInstance: bot,
            isRu: isRussian,
          }
        )
        logger.info({
          message: '–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞',
          result,
          telegram_id: eventData.telegram_id,
        })

        return {
          success: result.success,
          currentBalance: result.currentBalance,
        }
      })

      if (!balanceCheck?.success) {
        logger.warn({
          message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',
          currentBalance: balanceCheck?.currentBalance,
          requiredAmount: paymentAmount,
          telegram_id: eventData.telegram_id,
        })
        throw new Error('Insufficient balance')
      }

      // 6. –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
      await helpers.updateBalance(balanceCheck.currentBalance - paymentAmount)

      // 7. –°–æ–∑–¥–∞–Ω–∏–µ/–ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏ Replicate
      const destination = await step.run('create-replicate-model', async () => {
        try {
          const username = process.env.REPLICATE_USERNAME
          if (!username) throw new Error('REPLICATE_USERNAME –Ω–µ –∑–∞–¥–∞–Ω')

          logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏', { modelName })
          try {
            const existing = await replicate.models.get(username, modelName)
            logger.info('üîµ –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –º–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞:', existing.url)
            return `${username}/${modelName}`
          } catch (error) {
            logger.info('üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏...')
            const newModel = await replicate.models.create(
              username,
              modelName,
              {
                description: `LoRA: ${eventData.triggerWord}`,
                visibility: 'public',
                hardware: 'gpu-t4',
              }
            )
            logger.info('‚úÖ –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞:', newModel.url)
            return `${username}/${modelName}`
          }
        } catch (error) {
          logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–∏:', error)
          throw error
        }
      })

      logger.info('üéØ –ú–æ–¥–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞:', destination)

      // 8. –ó–∞–ø—É—Å–∫ –æ–±—É—á–µ–Ω–∏—è —Å Replicate –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
      const trainingResult = await step.run(
        'start-replicate-training',
        async () => {
          try {
            const training = await replicate.trainings.create(
              'ostris',
              'flux-dev-lora-trainer',
              'b6af14222e6bd9be257cbc1ea4afda3cd0503e1133083b9d1de0364d8568e6ef',
              {
                destination: destination as `${string}/${string}`,
                input: {
                  input_images: eventData.zipUrl,
                  trigger_word: eventData.triggerWord,
                  steps: Number(eventData.steps), // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
                  lora_rank: 128,
                  optimizer: 'adamw8bit',
                  batch_size: 1,
                  resolution: '512,768,1024',
                  learning_rate: 0.0001,
                  wandb_project: 'flux_train_replicate',
                },
                webhook: `${API_URL}/webhooks/replicate`,
                webhook_events_filter: ['completed'],
              }
            )

            logger.info('üöÄ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞. ID:', training.id)
            logger.info('üì° URL –æ—Ç–º–µ–Ω—ã:', training.urls?.cancel)

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
            if (bot && training.urls?.cancel) {
              // –§–æ—Ä–º–∏—Ä—É–µ–º payload –¥–ª—è callback_data (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –¥–ª–∏–Ω—ã)
              const cancelPayload = `cancel_train:${training.id}`

              await bot.telegram.sendMessage(
                eventData.telegram_id,
                isRussian
                  ? `üîÑ *–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞—á–∞–ª–æ—Å—å*\n\n–ú–æ–¥–µ–ª—å: ${eventData.modelName}\n–¢—Ä–∏–≥–≥–µ—Ä: \`${eventData.triggerWord}\`\n\n–≠—Ç–æ –∑–∞–π–º–µ—Ç 30-40 –º–∏–Ω—É—Ç.\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.`
                  : `üîÑ *Model training started*\n\nModel: ${eventData.modelName}\nTrigger: \`${eventData.triggerWord}\`\n\nIt will take 30-40 minutes.\nYou can cancel the process by the button below.`,
                {
                  parse_mode: 'Markdown',
                  reply_markup: {
                    inline_keyboard: [
                      [
                        {
                          text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É',
                          callback_data: cancelPayload,
                        },
                      ],
                    ],
                  },
                }
              )
            }

            return training
          } catch (error) {
            logger.error('üí• –û—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:', error)
            throw error
          }
        }
      )

      logger.info('üöÄ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', trainingResult.id)

      // 9. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
      await step.run('create-training-record', async () => {
        try {
          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –ø—Ä–æ–µ–∫—Ç–∞
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º steps –≤ —á–∏—Å–ª–æ
          const steps = Number(eventData.steps)

          const trainingRecord = await createModelTraining({
            telegram_id: eventData.telegram_id,
            model_name: eventData.modelName,
            trigger_word: eventData.triggerWord,
            zip_url: eventData.zipUrl,
            steps: steps, // –¢–µ–ø–µ—Ä—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —á–∏—Å–ª–æ
            replicate_training_id: trainingResult.id,
            cancel_url: trainingResult.urls?.cancel,
          })
          logger.info('üìù –ó–∞–ø–∏—Å—å –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ —Å–æ–∑–¥–∞–Ω–∞', trainingRecord)
          return trainingRecord
        } catch (error) {
          logger.error('üìã –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏:', error)
          throw error
        }
      })

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      logger.info({
        message: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞',
        trainingId: trainingResult.id,
        telegram_id: eventData.telegram_id,
      })

      return {
        success: true,
        message: '–û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.',
        trainingId: trainingResult.id,
      }
    } catch (error) {
      logger.error({
        message: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
        error: error.message,
        stack: error.stack,
        telegram_id: eventData.telegram_id,
      })

      // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —á–µ—Ä–µ–∑ optional chaining
      if (balanceCheck?.success) {
        await helpers.updateBalance(balanceCheck.currentBalance)
        logger.info({
          message: '–°—Ä–µ–¥—Å—Ç–≤–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
          amount: balanceCheck.currentBalance,
          telegram_id: eventData.telegram_id,
        })
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º is_ru –∫ –±—É–ª–µ–≤–æ–º—É —Ç–∏–ø—É –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
      const isRussian = eventData.is_ru === true || eventData.is_ru === 'true'

      await helpers.sendMessage(
        TRAINING_MESSAGES.error(error.message)[isRussian ? 'ru' : 'en']
      )

      if (activeTrainings.has(eventData.telegram_id)) {
        activeTrainings.get(eventData.telegram_id)?.cancel()
        logger.info({
          message: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–º–µ–Ω–µ–Ω —Ç–µ–∫—É—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
          telegram_id: eventData.telegram_id,
        })
      }

      throw error
    }
  }
)
