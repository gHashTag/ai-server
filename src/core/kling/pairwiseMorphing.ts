/**
 * üß¨ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ú–æ—Ä—Ñ–∏–Ω–≥ —á–µ—Ä–µ–∑ Replicate
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–ø–∞—Ä–Ω–æ (1‚Üí2, 2‚Üí3, –∏ —Ç.–¥.)
 * –°–∫–ª–µ–π–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –µ–¥–∏–Ω–æ–µ –≤–∏–¥–µ–æ
 */

import { logger } from '@/utils/logger'
import {
  ExtractedImage,
  MorphingType,
  KlingProcessingResult,
} from '@/interfaces/morphing.interface'
import { createKlingMorphingVideo } from './index'
import fs from 'fs'
import path from 'path'
import { exec } from 'child_process'
import { promisify } from 'util'
import axios from 'axios'

const execAsync = promisify(exec)

/**
 * –°–æ–∑–¥–∞–µ—Ç –º–æ—Ä—Ñ–∏–Ω–≥ –≤–∏–¥–µ–æ –¥–ª—è –ø–∞—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Replicate
 */
async function createPairMorphingVideo(
  image1: ExtractedImage,
  image2: ExtractedImage,
  morphingType: MorphingType,
  telegramId: string
): Promise<string> {
  logger.info('üß¨ –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—É –º–æ—Ä—Ñ–∏–Ω–≥ –≤–∏–¥–µ–æ:', {
    telegram_id: telegramId,
    image1: image1.filename,
    image2: image2.filename,
    morphing_type: morphingType,
  })

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è Replicate
  const result = await createKlingMorphingVideo(
    [image1, image2],
    morphingType,
    telegramId
  )

  if (!result.success || !result.video_url) {
    throw new Error(`Pair morphing failed: ${result.error}`)
  }

  logger.info('‚úÖ –ü–∞—Ä–∞ –º–æ—Ä—Ñ–∏–Ω–≥ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–∞:', {
    telegram_id: telegramId,
    video_url: result.video_url,
    job_id: result.job_id,
  })

  return result.video_url
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–∏–¥–µ–æ –ø–æ URL –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ
 */
async function downloadVideoToLocal(
  videoUrl: string,
  localPath: string
): Promise<void> {
  logger.info('üß¨ –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ –ª–æ–∫–∞–ª—å–Ω–æ:', {
    video_url: videoUrl,
    local_path: localPath,
  })

  try {
    const axios = require('axios')
    const response = await axios.get(videoUrl, { responseType: 'stream' })

    const writer = fs.createWriteStream(localPath)
    response.data.pipe(writer)

    return new Promise((resolve, reject) => {
      writer.on('finish', resolve)
      writer.on('error', reject)
    })
  } catch (error) {
    logger.error('üß¨ –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ:', {
      video_url: videoUrl,
      error: error instanceof Error ? error.message : String(error),
    })
    throw error
  }
}

/**
 * –°–∫–ª–µ–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –≤ –æ–¥–Ω–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é FFmpeg
 */
async function concatenateVideos(
  videoPaths: string[],
  outputPath: string
): Promise<void> {
  logger.info('üß¨ –°–∫–ª–µ–π–∫–∞ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é FFmpeg:', {
    input_count: videoPaths.length,
    output_path: outputPath,
  })

  try {
    // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è FFmpeg
    const listFilePath = outputPath.replace('.mp4', '_list.txt')
    const listContent = videoPaths.map(path => `file '${path}'`).join('\n')

    await fs.promises.writeFile(listFilePath, listContent)

    // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫–ª–µ–π–∫—É —Å –ø–æ–º–æ—â—å—é FFmpeg
    const ffmpegCommand = `ffmpeg -f concat -safe 0 -i "${listFilePath}" -c copy "${outputPath}"`

    logger.info('üß¨ –í—ã–ø–æ–ª–Ω—è–µ–º FFmpeg –∫–æ–º–∞–Ω–¥—É:', { command: ffmpegCommand })

    const { stdout, stderr } = await execAsync(ffmpegCommand)

    logger.info('üß¨ FFmpeg —Å–∫–ª–µ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', {
      output_path: outputPath,
      stdout: stdout,
      stderr: stderr,
    })

    // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    await fs.promises.unlink(listFilePath)
  } catch (error) {
    logger.error('üß¨ –û—à–∏–±–∫–∞ —Å–∫–ª–µ–π–∫–∏ –≤–∏–¥–µ–æ —Å FFmpeg:', {
      input_count: videoPaths.length,
      output_path: outputPath,
      error: error instanceof Error ? error.message : String(error),
    })
    throw error
  }
}

/**
 * –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–ø–∞—Ä–Ω—ã–π –º–æ—Ä—Ñ–∏–Ω–≥ —Å —Å–∫–ª–µ–π–∫–æ–π
 */
export async function processSequentialMorphing(
  images: ExtractedImage[],
  morphingType: MorphingType,
  telegramId: string
): Promise<KlingProcessingResult> {
  logger.info('üß¨ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–ø–∞—Ä–Ω—ã–π –º–æ—Ä—Ñ–∏–Ω–≥:', {
    telegram_id: telegramId,
    image_count: images.length,
    morphing_type: morphingType,
    pairs_to_create:
      morphingType === MorphingType.LOOP && images.length > 2
        ? images.length // –î–ª—è LOOP: –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ + –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å –ø–µ—Ä–≤—ã–º
        : images.length - 1, // –î–ª—è SEAMLESS: —Ç–æ–ª—å–∫–æ —Å–æ—Å–µ–¥–Ω–∏–µ –ø–∞—Ä—ã
    is_loop: morphingType === MorphingType.LOOP,
  })

  if (images.length < 2) {
    throw new Error('Need at least 2 images for morphing')
  }

  const startTime = Date.now()
  const tempDir = path.join(
    __dirname,
    '../../../tmp/morphing',
    telegramId,
    `concatenation_${Date.now()}`
  )

  try {
    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –≤–∏–¥–µ–æ
    await fs.promises.mkdir(tempDir, { recursive: true })

    const pairVideoUrls: string[] = []
    const localVideoPaths: string[] = []

    // –®–ê–ì 1: –°–æ–∑–¥–∞–µ–º –º–æ—Ä—Ñ–∏–Ω–≥ –≤–∏–¥–µ–æ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã —Å–æ—Å–µ–¥–Ω–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    for (let i = 0; i < images.length - 1; i++) {
      const image1 = images[i]
      const image2 = images[i + 1]

      logger.info(`üß¨ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä—É ${i + 1}/${images.length - 1}:`, {
        from: image1.filename,
        to: image2.filename,
      })

      // –°–æ–∑–¥–∞–µ–º –º–æ—Ä—Ñ–∏–Ω–≥ –≤–∏–¥–µ–æ –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã
      const pairVideoUrl = await createPairMorphingVideo(
        image1,
        image2,
        morphingType,
        telegramId
      )

      pairVideoUrls.push(pairVideoUrl)

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è —Å–∫–ª–µ–π–∫–∏
      const localVideoPath = path.join(tempDir, `pair_${i + 1}.mp4`)
      await downloadVideoToLocal(pairVideoUrl, localVideoPath)
      localVideoPaths.push(localVideoPath)
    }

    // üîÑ –®–ê–ì 1.5: –ï—Å–ª–∏ LOOP –º–æ—Ä—Ñ–∏–Ω–≥ - –¥–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–µ—Ä–≤—ã–º
    if (morphingType === MorphingType.LOOP && images.length > 2) {
      const lastImage = images[images.length - 1]
      const firstImage = images[0]

      logger.info(`üîÑ LOOP: –°–æ–µ–¥–∏–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–µ—Ä–≤—ã–º:`, {
        from: lastImage.filename,
        to: firstImage.filename,
        loop_pair: `${images.length}/${images.length}`,
      })

      // –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–∞—Ä—É –¥–ª—è –∑–∞–º—ã–∫–∞–Ω–∏—è –ø–µ—Ç–ª–∏
      const loopVideoUrl = await createPairMorphingVideo(
        lastImage,
        firstImage,
        morphingType,
        telegramId
      )

      pairVideoUrls.push(loopVideoUrl)

      // –ó–∞–≥—Ä—É–∂–∞–µ–º loop –≤–∏–¥–µ–æ –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è —Å–∫–ª–µ–π–∫–∏
      const loopVideoPath = path.join(tempDir, `pair_loop.mp4`)
      await downloadVideoToLocal(loopVideoUrl, loopVideoPath)
      localVideoPaths.push(loopVideoPath)

      logger.info('‚úÖ LOOP –ø–∞—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', {
        loop_video_url: loopVideoUrl,
        total_pairs: pairVideoUrls.length,
      })
    }

    // –®–ê–ì 2: –°–∫–ª–µ–∏–≤–∞–µ–º –≤—Å–µ –ø–∞—Ä—ã –≤ –æ–¥–Ω–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
    logger.info('üé¨ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–ª–µ–π–∫—É –≤–∏–¥–µ–æ:', {
      telegram_id: telegramId,
      videos_to_concatenate: localVideoPaths.length,
      morphing_type: morphingType,
      includes_loop: morphingType === MorphingType.LOOP && images.length > 2,
    })

    const finalVideoPath = path.join(
      tempDir,
      `final_morphing_${Date.now()}.mp4`
    )
    await concatenateVideos(localVideoPaths, finalVideoPath)

    // –®–ê–ì 3: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ –æ–±—Ä–∞—Ç–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –æ–±–ª–∞—á–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
    // –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É
    const processingTime = Date.now() - startTime

    logger.info('üß¨ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–ø–∞—Ä–Ω—ã–π –º–æ—Ä—Ñ–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω:', {
      telegram_id: telegramId,
      total_pairs: pairVideoUrls.length, // –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä
      processing_time_ms: processingTime,
      final_video_path: finalVideoPath,
      morphing_type: morphingType,
      was_loop: morphingType === MorphingType.LOOP,
    })

    return {
      success: true,
      job_id: `sequential_morph_${telegramId}_${Date.now()}`,
      video_url: finalVideoPath, // –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –ø–æ–∫–∞
      processing_time: processingTime,
    }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error)

    logger.error('üß¨ –û—à–∏–±–∫–∞ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º –ø–æ–ø–∞—Ä–Ω–æ–º –º–æ—Ä—Ñ–∏–Ω–≥–µ:', {
      telegram_id: telegramId,
      error: errorMessage,
    })

    // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    try {
      if (fs.existsSync(tempDir)) {
        await fs.promises.rm(tempDir, { recursive: true, force: true })
      }
    } catch (cleanupError) {
      logger.error('üß¨ –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:', cleanupError)
    }

    return {
      success: false,
      job_id: '',
      error: errorMessage,
    }
  }
}
