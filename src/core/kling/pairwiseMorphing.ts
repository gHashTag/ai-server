/**
 * üß¨ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ú–æ—Ä—Ñ–∏–Ω–≥ —á–µ—Ä–µ–∑ Replicate
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ–ø–∞—Ä–Ω–æ (1‚Üí2, 2‚Üí3, –∏ —Ç.–¥.)
 * –°–∫–ª–µ–π–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –µ–¥–∏–Ω–æ–µ –≤–∏–¥–µ–æ
 */

import { logger } from '@/utils/logger'
import {
  ExtractedImage,
  MorphingType,
  KlingProcessingResult,
} from '@/interfaces/morphing.interface'
import { createKlingMorphingVideo } from './index'
import fs from 'fs'
import path from 'path'
import { exec } from 'child_process'
import { promisify } from 'util'
import axios from 'axios'

const execAsync = promisify(exec)

/**
 * –°–æ–∑–¥–∞–µ—Ç –º–æ—Ä—Ñ–∏–Ω–≥ –≤–∏–¥–µ–æ –¥–ª—è –ø–∞—Ä—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Replicate
 */
async function createPairMorphingVideo(
  image1: ExtractedImage,
  image2: ExtractedImage,
  morphingType: MorphingType,
  telegramId: string
): Promise<string> {
  const pairStartTime = Date.now()

  logger.info('üß¨ üé¨ –ù–ê–ß–ò–ù–ê–ï–ú —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—ã –º–æ—Ä—Ñ–∏–Ω–≥ –≤–∏–¥–µ–æ:', {
    telegram_id: telegramId,
    image1: image1.filename,
    image2: image2.filename,
    morphing_type: morphingType,
    image1_path: image1.path,
    image2_path: image2.path,
  })

  try {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è Replicate
    const result = await createKlingMorphingVideo(
      [image1, image2],
      morphingType,
      telegramId
    )

    const pairProcessingTime = Date.now() - pairStartTime

    if (!result.success || !result.video_url) {
      logger.error('üß¨ ‚ùå –û–®–ò–ë–ö–ê —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—ã –º–æ—Ä—Ñ–∏–Ω–≥ –≤–∏–¥–µ–æ:', {
        telegram_id: telegramId,
        image1: image1.filename,
        image2: image2.filename,
        error: result.error,
        processing_time_ms: pairProcessingTime,
        processing_time_sec: Math.round(pairProcessingTime / 1000),
      })
      throw new Error(`Pair morphing failed: ${result.error}`)
    }

    logger.info('‚úÖ üé¨ –ü–∞—Ä–∞ –º–æ—Ä—Ñ–∏–Ω–≥ –≤–∏–¥–µ–æ —Å–æ–∑–¥–∞–Ω–∞ –£–°–ü–ï–®–ù–û:', {
      telegram_id: telegramId,
      image1: image1.filename,
      image2: image2.filename,
      video_url: result.video_url,
      job_id: result.job_id,
      processing_time_ms: pairProcessingTime,
      processing_time_sec: Math.round(pairProcessingTime / 1000),
      processing_time_min: Math.round(pairProcessingTime / 60000),
    })

    return result.video_url
  } catch (error) {
    const pairProcessingTime = Date.now() - pairStartTime
    const errorMessage = error instanceof Error ? error.message : String(error)

    logger.error('üí• üé¨ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—ã:', {
      telegram_id: telegramId,
      image1: image1.filename,
      image2: image2.filename,
      error: errorMessage,
      error_details: error,
      processing_time_ms: pairProcessingTime,
      processing_time_sec: Math.round(pairProcessingTime / 1000),
      is_timeout: errorMessage.includes('timed out'),
      is_replicate_error: errorMessage.includes('Replicate API error'),
    })

    throw error // –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
  }
}

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤–∏–¥–µ–æ –ø–æ URL –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ
 */
async function downloadVideoToLocal(
  videoUrl: string,
  localPath: string
): Promise<void> {
  const downloadStartTime = Date.now()

  logger.info('üì• üåê –ù–ê–ß–ò–ù–ê–ï–ú –∑–∞–≥—Ä—É–∑–∫—É –≤–∏–¥–µ–æ –ª–æ–∫–∞–ª—å–Ω–æ:', {
    video_url: videoUrl,
    local_path: localPath,
    url_host: new URL(videoUrl).host,
  })

  try {
    const axios = require('axios')

    logger.info('üì• –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏...', {
      video_url: videoUrl,
      local_path: localPath,
    })

    const response = await axios.get(videoUrl, {
      responseType: 'stream',
      timeout: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç —Ç–∞–π–º–∞—É—Ç
    })

    logger.info('üì• HTTP –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª:', {
      video_url: videoUrl,
      local_path: localPath,
      status: response.status,
      content_length: response.headers['content-length'],
      content_type: response.headers['content-type'],
    })

    const writer = fs.createWriteStream(localPath)
    response.data.pipe(writer)

    return new Promise((resolve, reject) => {
      writer.on('finish', () => {
        const downloadTime = Date.now() - downloadStartTime

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Å–∫–∞—á–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        const fs = require('fs')
        const stats = fs.statSync(localPath)

        logger.info('‚úÖ üì• –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –£–°–ü–ï–®–ù–û:', {
          video_url: videoUrl,
          local_path: localPath,
          download_time_ms: downloadTime,
          download_time_sec: Math.round(downloadTime / 1000),
          file_size_bytes: stats.size,
          file_size_mb: Math.round((stats.size / (1024 * 1024)) * 100) / 100,
        })

        resolve()
      })

      writer.on('error', error => {
        const downloadTime = Date.now() - downloadStartTime

        logger.error('üí• üì• –û–®–ò–ë–ö–ê –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞:', {
          video_url: videoUrl,
          local_path: localPath,
          download_time_ms: downloadTime,
          error: error instanceof Error ? error.message : String(error),
          error_details: error,
        })

        reject(error)
      })
    })
  } catch (error) {
    const downloadTime = Date.now() - downloadStartTime
    const errorMessage = error instanceof Error ? error.message : String(error)

    logger.error('üí• üì• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ:', {
      video_url: videoUrl,
      local_path: localPath,
      error: errorMessage,
      error_details: error,
      download_time_ms: downloadTime,
      download_time_sec: Math.round(downloadTime / 1000),
      is_timeout:
        errorMessage.includes('timeout') || errorMessage.includes('ETIMEDOUT'),
      is_network_error:
        errorMessage.includes('ECONNRESET') ||
        errorMessage.includes('ENOTFOUND'),
      is_http_error: errorMessage.includes('Request failed'),
    })

    throw error
  }
}

/**
 * –°–∫–ª–µ–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ –≤ –æ–¥–Ω–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é FFmpeg
 */
async function concatenateVideos(
  videoPaths: string[],
  outputPath: string
): Promise<void> {
  const concatenationStartTime = Date.now()

  logger.info('üé¨ üîß –ù–ê–ß–ò–ù–ê–ï–ú —Å–∫–ª–µ–π–∫—É –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é FFmpeg:', {
    input_count: videoPaths.length,
    output_path: outputPath,
    input_paths: videoPaths,
  })

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –≤—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    logger.info('üé¨ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω—ã–µ —Ñ–∞–π–ª—ã...', {
      input_count: videoPaths.length,
    })

    for (let i = 0; i < videoPaths.length; i++) {
      const videoPath = videoPaths[i]
      if (!fs.existsSync(videoPath)) {
        throw new Error(`Input video file does not exist: ${videoPath}`)
      }

      const stats = fs.statSync(videoPath)
      logger.info(`‚úÖ –§–∞–π–ª ${i + 1}/${videoPaths.length} –ø—Ä–æ–≤–µ—Ä–µ–Ω:`, {
        path: videoPath,
        size_bytes: stats.size,
        size_mb: Math.round((stats.size / (1024 * 1024)) * 100) / 100,
        exists: true,
      })
    }

    // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è FFmpeg
    const listFilePath = outputPath.replace('.mp4', '_list.txt')
    const listContent = videoPaths.map(path => `file '${path}'`).join('\n')

    logger.info('üé¨ –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è FFmpeg:', {
      list_file_path: listFilePath,
      list_content: listContent,
    })

    await fs.promises.writeFile(listFilePath, listContent)

    // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫–ª–µ–π–∫—É —Å –ø–æ–º–æ—â—å—é FFmpeg
    const ffmpegCommand = `ffmpeg -f concat -safe 0 -i "${listFilePath}" -c copy "${outputPath}"`

    logger.info('üé¨ üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º FFmpeg –∫–æ–º–∞–Ω–¥—É:', {
      command: ffmpegCommand,
      estimated_time: '1-5 –º–∏–Ω—É—Ç',
    })

    const ffmpegStartTime = Date.now()
    const { stdout, stderr } = await execAsync(ffmpegCommand)
    const ffmpegTime = Date.now() - ffmpegStartTime

    logger.info('‚úÖ üé¨ FFmpeg —Å–∫–ª–µ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –£–°–ü–ï–®–ù–û:', {
      output_path: outputPath,
      ffmpeg_time_ms: ffmpegTime,
      ffmpeg_time_sec: Math.round(ffmpegTime / 1000),
      stdout_length: stdout.length,
      stderr_length: stderr.length,
      stdout: stdout.substring(0, 500) + (stdout.length > 500 ? '...' : ''),
      stderr: stderr.substring(0, 500) + (stderr.length > 500 ? '...' : ''),
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Ñ–∞–π–ª
    if (fs.existsSync(outputPath)) {
      const outputStats = fs.statSync(outputPath)
      logger.info('‚úÖ üé¨ –†–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω:', {
        output_path: outputPath,
        output_size_bytes: outputStats.size,
        output_size_mb:
          Math.round((outputStats.size / (1024 * 1024)) * 100) / 100,
      })
    } else {
      throw new Error(`Output file was not created: ${outputPath}`)
    }

    // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    logger.info('üßπ –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤...', {
      list_file_path: listFilePath,
    })

    await fs.promises.unlink(listFilePath)

    const totalConcatenationTime = Date.now() - concatenationStartTime
    logger.info('üéâ üé¨ –°–∫–ª–µ–π–∫–∞ –≤–∏–¥–µ–æ –ü–û–õ–ù–û–°–¢–¨–Æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', {
      input_count: videoPaths.length,
      output_path: outputPath,
      total_concatenation_time_ms: totalConcatenationTime,
      total_concatenation_time_sec: Math.round(totalConcatenationTime / 1000),
    })
  } catch (error) {
    const totalConcatenationTime = Date.now() - concatenationStartTime
    const errorMessage = error instanceof Error ? error.message : String(error)

    logger.error('üí• üé¨ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê —Å–∫–ª–µ–π–∫–∏ –≤–∏–¥–µ–æ —Å FFmpeg:', {
      input_count: videoPaths.length,
      output_path: outputPath,
      input_paths: videoPaths,
      error: errorMessage,
      error_details: error,
      concatenation_time_ms: totalConcatenationTime,
      concatenation_time_sec: Math.round(totalConcatenationTime / 1000),
      is_ffmpeg_error:
        errorMessage.includes('ffmpeg') ||
        errorMessage.includes('Command failed'),
      is_file_error:
        errorMessage.includes('does not exist') ||
        errorMessage.includes('ENOENT'),
      is_permission_error:
        errorMessage.includes('EACCES') || errorMessage.includes('permission'),
    })

    throw error
  }
}

/**
 * –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ–ø–∞—Ä–Ω—ã–π –º–æ—Ä—Ñ–∏–Ω–≥ —Å —Å–∫–ª–µ–π–∫–æ–π
 */
export async function processSequentialMorphing(
  images: ExtractedImage[],
  morphingType: MorphingType,
  telegramId: string
): Promise<KlingProcessingResult> {
  const overallStartTime = Date.now()

  logger.info('üß¨ üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–ø–∞—Ä–Ω—ã–π –º–æ—Ä—Ñ–∏–Ω–≥:', {
    telegram_id: telegramId,
    image_count: images.length,
    morphing_type: morphingType,
    pairs_to_create:
      morphingType === MorphingType.LOOP && images.length > 2
        ? images.length // –î–ª—è LOOP: –∫–∞–∂–¥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ + –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å –ø–µ—Ä–≤—ã–º
        : images.length - 1, // –î–ª—è SEAMLESS: —Ç–æ–ª—å–∫–æ —Å–æ—Å–µ–¥–Ω–∏–µ –ø–∞—Ä—ã
    is_loop: morphingType === MorphingType.LOOP,
    expected_processing_time_estimate: `${(images.length - 1) * 5}-${
      (images.length - 1) * 15
    } –º–∏–Ω—É—Ç`,
  })

  if (images.length < 2) {
    throw new Error('Need at least 2 images for morphing')
  }

  const tempDir = path.join(
    __dirname,
    '../../../tmp/morphing',
    telegramId,
    `concatenation_${Date.now()}`
  )

  try {
    // üìÅ –®–ê–ì 0: –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    const dirStartTime = Date.now()
    logger.info('üìÅ –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é...', {
      telegram_id: telegramId,
      temp_dir: tempDir,
    })

    await fs.promises.mkdir(tempDir, { recursive: true })

    logger.info('‚úÖ –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞:', {
      telegram_id: telegramId,
      temp_dir: tempDir,
      creation_time_ms: Date.now() - dirStartTime,
    })

    const pairVideoUrls: string[] = []
    const localVideoPaths: string[] = []

    // –®–ê–ì 1: –°–æ–∑–¥–∞–µ–º –º–æ—Ä—Ñ–∏–Ω–≥ –≤–∏–¥–µ–æ –¥–ª—è –∫–∞–∂–¥–æ–π –ø–∞—Ä—ã —Å–æ—Å–µ–¥–Ω–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    logger.info('üß¨ –≠–¢–ê–ü 1: –°–æ–∑–¥–∞–Ω–∏–µ –º–æ—Ä—Ñ–∏–Ω–≥ –≤–∏–¥–µ–æ –¥–ª—è –ø–∞—Ä:', {
      telegram_id: telegramId,
      pairs_count: images.length - 1,
      estimated_time: `${(images.length - 1) * 5}-${
        (images.length - 1) * 15
      } –º–∏–Ω—É—Ç`,
    })

    for (let i = 0; i < images.length - 1; i++) {
      const pairStartTime = Date.now()
      const image1 = images[i]
      const image2 = images[i + 1]

      logger.info(`üß¨ ‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä—É ${i + 1}/${images.length - 1}:`, {
        telegram_id: telegramId,
        pair_index: i + 1,
        total_pairs: images.length - 1,
        from: image1.filename,
        to: image2.filename,
        estimated_time: '5-15 –º–∏–Ω—É—Ç',
      })

      // –°–æ–∑–¥–∞–µ–º –º–æ—Ä—Ñ–∏–Ω–≥ –≤–∏–¥–µ–æ –¥–ª—è —ç—Ç–æ–π –ø–∞—Ä—ã
      const pairVideoUrl = await createPairMorphingVideo(
        image1,
        image2,
        morphingType,
        telegramId
      )

      const pairProcessingTime = Date.now() - pairStartTime

      logger.info(`‚úÖ –ü–∞—Ä–∞ ${i + 1}/${images.length - 1} –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`, {
        telegram_id: telegramId,
        pair_index: i + 1,
        processing_time_ms: pairProcessingTime,
        processing_time_sec: Math.round(pairProcessingTime / 1000),
        processing_time_min: Math.round(pairProcessingTime / 60000),
        video_url: pairVideoUrl,
      })

      pairVideoUrls.push(pairVideoUrl)

      // üì• –®–ê–ì 1.1: –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è —Å–∫–ª–µ–π–∫–∏
      const downloadStartTime = Date.now()
      logger.info(`üì• –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ ${i + 1} –ª–æ–∫–∞–ª—å–Ω–æ...`, {
        telegram_id: telegramId,
        pair_index: i + 1,
        video_url: pairVideoUrl,
      })

      const localVideoPath = path.join(tempDir, `pair_${i + 1}.mp4`)
      await downloadVideoToLocal(pairVideoUrl, localVideoPath)
      localVideoPaths.push(localVideoPath)

      const downloadTime = Date.now() - downloadStartTime
      logger.info(`‚úÖ –í–∏–¥–µ–æ ${i + 1} –∑–∞–≥—Ä—É–∂–µ–Ω–æ:`, {
        telegram_id: telegramId,
        pair_index: i + 1,
        local_path: localVideoPath,
        download_time_ms: downloadTime,
        download_time_sec: Math.round(downloadTime / 1000),
      })
    }

    // üîÑ –®–ê–ì 1.5: –ï—Å–ª–∏ LOOP –º–æ—Ä—Ñ–∏–Ω–≥ - –¥–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –ø–µ—Ä–≤—ã–º
    if (morphingType === MorphingType.LOOP && images.length > 2) {
      const loopStartTime = Date.now()
      const lastImage = images[images.length - 1]
      const firstImage = images[0]

      logger.info(`üîÑ LOOP: –°–æ–∑–¥–∞–µ–º –∑–∞–º—ã–∫–∞—é—â—É—é –ø–∞—Ä—É:`, {
        telegram_id: telegramId,
        from: lastImage.filename,
        to: firstImage.filename,
        loop_pair: `${images.length}/${images.length}`,
        estimated_time: '5-15 –º–∏–Ω—É—Ç',
      })

      // –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –ø–∞—Ä—É –¥–ª—è –∑–∞–º—ã–∫–∞–Ω–∏—è –ø–µ—Ç–ª–∏
      const loopVideoUrl = await createPairMorphingVideo(
        lastImage,
        firstImage,
        morphingType,
        telegramId
      )

      pairVideoUrls.push(loopVideoUrl)

      const loopProcessingTime = Date.now() - loopStartTime
      logger.info('‚úÖ LOOP –ø–∞—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞:', {
        telegram_id: telegramId,
        loop_video_url: loopVideoUrl,
        total_pairs: pairVideoUrls.length,
        loop_processing_time_ms: loopProcessingTime,
        loop_processing_time_sec: Math.round(loopProcessingTime / 1000),
      })

      // üì• –ó–∞–≥—Ä—É–∂–∞–µ–º loop –≤–∏–¥–µ–æ –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è —Å–∫–ª–µ–π–∫–∏
      const loopDownloadStartTime = Date.now()
      logger.info('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º LOOP –≤–∏–¥–µ–æ –ª–æ–∫–∞–ª—å–Ω–æ...', {
        telegram_id: telegramId,
        loop_video_url: loopVideoUrl,
      })

      const loopVideoPath = path.join(tempDir, `pair_loop.mp4`)
      await downloadVideoToLocal(loopVideoUrl, loopVideoPath)
      localVideoPaths.push(loopVideoPath)

      const loopDownloadTime = Date.now() - loopDownloadStartTime
      logger.info('‚úÖ LOOP –≤–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', {
        telegram_id: telegramId,
        local_path: loopVideoPath,
        download_time_ms: loopDownloadTime,
        download_time_sec: Math.round(loopDownloadTime / 1000),
      })
    }

    // –®–ê–ì 2: –°–∫–ª–µ–∏–≤–∞–µ–º –≤—Å–µ –ø–∞—Ä—ã –≤ –æ–¥–Ω–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ
    const concatenationStartTime = Date.now()
    logger.info('üé¨ –≠–¢–ê–ü 2: –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–ª–µ–π–∫—É –≤–∏–¥–µ–æ:', {
      telegram_id: telegramId,
      videos_to_concatenate: localVideoPaths.length,
      morphing_type: morphingType,
      includes_loop: morphingType === MorphingType.LOOP && images.length > 2,
      estimated_time: '1-5 –º–∏–Ω—É—Ç',
      local_video_paths: localVideoPaths,
    })

    const finalVideoPath = path.join(
      tempDir,
      `final_morphing_${Date.now()}.mp4`
    )
    await concatenateVideos(localVideoPaths, finalVideoPath)

    const concatenationTime = Date.now() - concatenationStartTime
    logger.info('‚úÖ –°–∫–ª–µ–π–∫–∞ –≤–∏–¥–µ–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', {
      telegram_id: telegramId,
      final_video_path: finalVideoPath,
      concatenation_time_ms: concatenationTime,
      concatenation_time_sec: Math.round(concatenationTime / 1000),
    })

    // –®–ê–ì 3: –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const totalProcessingTime = Date.now() - overallStartTime

    logger.info('üéâ üß¨ –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–ø–∞—Ä–Ω—ã–π –º–æ—Ä—Ñ–∏–Ω–≥ –ó–ê–í–ï–†–®–ï–ù:', {
      telegram_id: telegramId,
      total_pairs: pairVideoUrls.length,
      total_processing_time_ms: totalProcessingTime,
      total_processing_time_sec: Math.round(totalProcessingTime / 1000),
      total_processing_time_min: Math.round(totalProcessingTime / 60000),
      final_video_path: finalVideoPath,
      morphing_type: morphingType,
      was_loop: morphingType === MorphingType.LOOP,
      success: true,
    })

    return {
      success: true,
      job_id: `sequential_morph_${telegramId}_${Date.now()}`,
      video_url: finalVideoPath, // –õ–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å –ø–æ–∫–∞
      processing_time: totalProcessingTime,
    }
  } catch (error) {
    const totalProcessingTime = Date.now() - overallStartTime
    const errorMessage = error instanceof Error ? error.message : String(error)

    logger.error('üí• üß¨ –û–®–ò–ë–ö–ê –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º –ø–æ–ø–∞—Ä–Ω–æ–º –º–æ—Ä—Ñ–∏–Ω–≥–µ:', {
      telegram_id: telegramId,
      error: errorMessage,
      error_details: error,
      total_processing_time_ms: totalProcessingTime,
      total_processing_time_sec: Math.round(totalProcessingTime / 1000),
      total_processing_time_min: Math.round(totalProcessingTime / 60000),
      is_timeout: errorMessage.includes('timed out'),
      is_replicate_error: errorMessage.includes('Replicate API error'),
      is_ffmpeg_error: errorMessage.includes('ffmpeg'),
      is_download_error:
        errorMessage.includes('download') || errorMessage.includes('axios'),
    })

    // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –ø—Ä–∏ –æ—à–∏–±–∫–µ
    try {
      if (fs.existsSync(tempDir)) {
        await fs.promises.rm(tempDir, { recursive: true, force: true })
        logger.info('üßπ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏:', {
          telegram_id: telegramId,
          temp_dir: tempDir,
        })
      }
    } catch (cleanupError) {
      logger.error('üß¨ –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:', {
        telegram_id: telegramId,
        cleanup_error: cleanupError,
      })
    }

    return {
      success: false,
      job_id: '',
      error: errorMessage,
    }
  }
}
