/**
 * üß¨ Replicate Kling API Client –¥–ª—è –ú–æ—Ä—Ñ–∏–Ω–≥ –í–∏–¥–µ–æ
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å kwaivgi/kling-v1.6-pro —á–µ—Ä–µ–∑ Replicate
 */

import { replicate } from '@/core/replicate'
import {
  MorphingType,
  ExtractedImage,
  KlingProcessingResult,
} from '@/interfaces/morphing.interface'
import { logger } from '@/utils/logger'
import fs from 'fs'
import { VIDEO_MODELS_CONFIG } from '@/config/models.config'

// üïê –¢–ê–ô–ú–ê–£–¢ –î–õ–Ø REPLICATE API (15 –º–∏–Ω—É—Ç)
const REPLICATE_TIMEOUT_MS = 15 * 60 * 1000

// üîÑ –ù–ê–°–¢–†–û–ô–ö–ò RETRY
const MAX_RETRIES = 3
const INITIAL_RETRY_DELAY = 5000 // 5 —Å–µ–∫—É–Ω–¥
const RETRY_BACKOFF_MULTIPLIER = 2

/**
 * –°–æ–∑–¥–∞–µ—Ç Promise —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è Replicate API –≤—ã–∑–æ–≤–æ–≤
 */
function withTimeout<T>(
  promise: Promise<T>,
  timeoutMs: number,
  operation: string
): Promise<T> {
  return Promise.race([
    promise,
    new Promise<T>((_, reject) => {
      setTimeout(() => {
        reject(
          new Error(`${operation} timed out after ${timeoutMs / 1000} seconds`)
        )
      }, timeoutMs)
    }),
  ])
}

/**
 * –ñ–¥–µ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
 */
function sleep(ms: number): Promise<void> {
  return new Promise(resolve => setTimeout(resolve, ms))
}

/**
 * Retry —Ñ—É–Ω–∫—Ü–∏—è —Å exponential backoff
 */
async function withRetryAndBackoff<T>(
  operation: () => Promise<T>,
  operationName: string,
  telegramId: string,
  maxRetries = MAX_RETRIES
): Promise<T> {
  let lastError: Error | null = null

  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      logger.info(`üîÑ ${operationName} - –ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries}:`, {
        telegram_id: telegramId,
        attempt,
        max_retries: maxRetries,
        is_retry: attempt > 1,
      })

      const result = await operation()

      if (attempt > 1) {
        logger.info(`‚úÖ ${operationName} —É—Å–ø–µ—à–µ–Ω –ø–æ—Å–ª–µ ${attempt} –ø–æ–ø—ã—Ç–æ–∫:`, {
          telegram_id: telegramId,
          successful_attempt: attempt,
          total_attempts: attempt,
        })
      }

      return result
    } catch (error) {
      lastError = error instanceof Error ? error : new Error(String(error))
      const errorMessage = lastError.message

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –ø–æ–ø—ã—Ç–∫—É
      const isRetryableError =
        errorMessage.includes('timed out') ||
        errorMessage.includes('500') ||
        errorMessage.includes('502') ||
        errorMessage.includes('503') ||
        errorMessage.includes('504') ||
        errorMessage.includes('ECONNRESET') ||
        errorMessage.includes('ETIMEDOUT') ||
        errorMessage.includes('network')

      logger.error(
        `‚ùå ${operationName} - –æ—à–∏–±–∫–∞ –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt}/${maxRetries}:`,
        {
          telegram_id: telegramId,
          attempt,
          max_retries: maxRetries,
          error: errorMessage,
          is_retryable: isRetryableError,
          will_retry: attempt < maxRetries && isRetryableError,
        }
      )

      // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –∏–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ–ø–æ–≤—Ç–æ—Ä—è–µ–º–∞—è - –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º
      if (attempt >= maxRetries || !isRetryableError) {
        logger.error(`üí• ${operationName} –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–∞–ª–µ–Ω:`, {
          telegram_id: telegramId,
          final_attempt: attempt,
          total_attempts: attempt,
          final_error: errorMessage,
          reason:
            attempt >= maxRetries
              ? 'max_retries_reached'
              : 'non_retryable_error',
        })
        throw lastError
      }

      // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
      const delayMs =
        INITIAL_RETRY_DELAY * Math.pow(RETRY_BACKOFF_MULTIPLIER, attempt - 1)

      logger.info(`‚è≥ ${operationName} - –∂–¥–µ–º ${delayMs}ms –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º:`, {
        telegram_id: telegramId,
        current_attempt: attempt,
        next_attempt: attempt + 1,
        delay_ms: delayMs,
        delay_sec: Math.round(delayMs / 1000),
      })

      await sleep(delayMs)
    }
  }

  // –≠—Ç–æ—Ç –∫–æ–¥ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è, –Ω–æ –¥–ª—è TypeScript
  throw (
    lastError ||
    new Error(`${operationName} failed after ${maxRetries} attempts`)
  )
}

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ Base64 –∏–∑ —Ñ–∞–π–ª–∞ –¥–ª—è Replicate
 */
function imageFileToBase64(filePath: string): string {
  try {
    const fs = require('fs')

    logger.info('üñºÔ∏è –ß–∏—Ç–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è Base64:', {
      description: 'Reading image file for base64 conversion',
      filePath,
      fileExists: fs.existsSync(filePath),
    })

    if (!fs.existsSync(filePath)) {
      throw new Error(`File does not exist: ${filePath}`)
    }

    const buffer = fs.readFileSync(filePath)
    const base64Data = buffer.toString('base64')
    const dataUri = `data:image/jpeg;base64,${base64Data}`

    logger.info('‚úÖ Base64 –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', {
      description: 'Base64 conversion completed',
      filePath,
      bufferSize: buffer.length,
      base64Length: base64Data.length,
      dataUriLength: dataUri.length,
      dataUriPrefix: dataUri.substring(0, 50) + '...',
    })

    return dataUri
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Base64:', {
      description: 'Error converting image to base64',
      filePath,
      error: error instanceof Error ? error.message : String(error),
    })
    throw error
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –º–æ—Ä—Ñ–∏–Ω–≥–∞ –≤ Replicate —Å –º–æ–¥–µ–ª—å—é kwaivgi/kling-v1.6-pro
 */
export async function submitKlingMorphingJob(
  images: ExtractedImage[],
  morphingType: MorphingType,
  telegramId: string
): Promise<KlingProcessingResult> {
  // üîí –í–ê–õ–ò–î–ê–¶–ò–Ø: Kling API –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¢–û–õ–¨–ö–û 2 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è!
  if (images.length !== 2) {
    const errorMsg = `Kling API accepts exactly 2 images, got ${images.length}. Use processSequentialMorphing for multiple images.`
    logger.error('üß¨ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è Kling API:', {
      telegram_id: telegramId,
      provided_count: images.length,
      required_count: 2,
      error: errorMsg,
    })
    return {
      success: false,
      job_id: '',
      error: errorMsg,
    }
  }

  const startTime = Date.now()

  try {
    const modelConfig = VIDEO_MODELS_CONFIG['kling-v1.6-pro']

    logger.info('üß¨ –ù–∞—á–∏–Ω–∞–µ–º –º–æ—Ä—Ñ–∏–Ω–≥ job —Å Replicate:', {
      description: 'Starting Replicate morphing job',
      telegram_id: telegramId,
      morphing_type: morphingType,
      model: modelConfig.api.model,
      images_count: images.length,
      image_paths: images.map(img => img.path),
      timeout_seconds: REPLICATE_TIMEOUT_MS / 1000,
    })

    // –ü–æ–ª—É—á–∞–µ–º base64 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    logger.info('üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Base64...', {
      telegram_id: telegramId,
      image1_path: images[0].path,
      image2_path: images[1].path,
    })

    const image1Base64 = imageFileToBase64(images[0].path)
    const image2Base64 = imageFileToBase64(images[1].path)

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º input –¥–ª—è Replicate
    const input = {
      ...modelConfig.api.input,
      prompt: 'Smooth morphing transition between two images', // –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û–ï –ü–û–õ–ï!
      start_image: image1Base64, // –ù–∞—á–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–æ—Ä—Ñ–∏–Ω–≥–∞
      end_image: image2Base64, // –ö–æ–Ω–µ—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –º–æ—Ä—Ñ–∏–Ω–≥–∞
      duration: 5, // 5 —Å–µ–∫—É–Ω–¥
      aspect_ratio: '16:9', // –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
      negative_prompt: 'blur, distort, and low quality', // –ù–µ–≥–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    }

    logger.info('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Replicate —Å —Ç–∞–π–º–∞—É—Ç–æ–º:', {
      description: 'Sending request to Replicate with timeout',
      telegram_id: telegramId,
      model: modelConfig.api.model,
      input_keys: Object.keys(input),
      start_image_length: input.start_image?.length || 0,
      end_image_length: input.end_image?.length || 0,
      prompt: input.prompt,
      timeout_ms: REPLICATE_TIMEOUT_MS,
    })

    // üïê –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ó–ê–ü–†–û–° –° –¢–ê–ô–ú–ê–£–¢–û–ú –ò RETRY
    const result = await withRetryAndBackoff(
      () =>
        withTimeout(
          replicate.run(modelConfig.api.model as any, { input }),
          REPLICATE_TIMEOUT_MS,
          `Replicate API call for morphing job ${telegramId}`
        ),
      `Replicate API call for morphing job`,
      telegramId
    )

    const processingTime = Date.now() - startTime

    logger.info('‚úÖ –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç Replicate:', {
      description: 'Received result from Replicate',
      telegram_id: telegramId,
      processing_time_ms: processingTime,
      processing_time_sec: Math.round(processingTime / 1000),
      result_type: typeof result,
      result_is_array: Array.isArray(result),
      result_length: Array.isArray(result) ? result.length : 1,
    })

    // –†–µ–∑—É–ª—å—Ç–∞—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞—Å—Å–∏–≤–æ–º –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π
    const videoUrl = Array.isArray(result) ? result[0] : result

    logger.info('üé¨ –ú–æ—Ä—Ñ–∏–Ω–≥ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ:', {
      description: 'Morphing video completed',
      telegram_id: telegramId,
      video_url: videoUrl,
      video_url_type: typeof videoUrl,
      total_processing_time_ms: processingTime,
    })

    return {
      success: true,
      job_id: `replicate_${Date.now()}`,
      video_url: videoUrl,
      processing_time: processingTime,
    }
  } catch (error) {
    const processingTime = Date.now() - startTime
    const errorMessage = error instanceof Error ? error.message : String(error)

    // üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –û–®–ò–ë–û–ö
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–æ—Ä—Ñ–∏–Ω–≥ –≤–∏–¥–µ–æ:', {
      description: 'Error creating morphing video',
      telegram_id: telegramId,
      error: errorMessage,
      error_details: error,
      processing_time_ms: processingTime,
      processing_time_sec: Math.round(processingTime / 1000),
      is_timeout: errorMessage.includes('timed out'),
      is_replicate_error:
        errorMessage.includes('Prediction failed') ||
        errorMessage.includes('422'),
      is_network_error:
        errorMessage.includes('ECONNRESET') ||
        errorMessage.includes('ETIMEDOUT'),
    })

    return {
      success: false,
      job_id: '',
      error: `Replicate API error (${Math.round(
        processingTime / 1000
      )}s): ${errorMessage}`,
    }
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º)
 * Replicate –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –ø–æ—ç—Ç–æ–º—É —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞
 */
export async function pollKlingJobStatus(
  jobId: string,
  telegramId: string
): Promise<KlingProcessingResult> {
  logger.warn('üß¨ pollKlingJobStatus –≤—ã–∑–≤–∞–Ω–∞ –¥–ª—è Replicate (–Ω–µ –Ω—É–∂–Ω–∞):', {
    telegram_id: telegramId,
    job_id: jobId,
  })

  return {
    success: false,
    job_id: jobId,
    error: 'Replicate runs synchronously, polling not needed',
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ—Ä—Ñ–∏–Ω–≥ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Replicate
 */
export async function createKlingMorphingVideo(
  images: ExtractedImage[],
  morphingType: MorphingType,
  telegramId: string
): Promise<KlingProcessingResult> {
  logger.info('üß¨ –°–æ–∑–¥–∞–Ω–∏–µ –º–æ—Ä—Ñ–∏–Ω–≥ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Replicate:', {
    telegram_id: telegramId,
    images_count: images.length,
    morphing_type: morphingType,
  })

  if (images.length !== 2) {
    return {
      success: false,
      job_id: '',
      error: `Expected exactly 2 images for Kling morphing, got ${images.length}`,
    }
  }

  return await submitKlingMorphingJob(images, morphingType, telegramId)
}
