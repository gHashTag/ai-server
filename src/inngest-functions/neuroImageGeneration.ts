import { inngest } from '@/core/inngest/clients'
import { replicate } from '@/core/replicate'
import { getAspectRatio } from '@/core/supabase/ai'
import { savePrompt } from '@/core/supabase/savePrompt'
import {
  getUserByTelegramId,
  updateUserLevelPlusOne,
  updateUserBalance,
} from '@/core/supabase'
import { processApiResponse } from '@/helpers/processApiResponse'

import { saveFileLocally } from '@/helpers'
import { pulse } from '@/helpers/pulse'
import { processBalanceOperation } from '@/price/helpers'

import { ModeEnum } from '@/interfaces/modes'
import { calculateModeCost } from '@/price/helpers/modelsCost'
import path from 'path'
import { API_URL } from '@/config'
import fs from 'fs'
import { logger } from '@/utils/logger'
import { getBotByName } from '@/core/bot'
import { PaymentType } from '@/interfaces/payments.interface'
import { slugify } from 'inngest'

export const neuroImageGeneration = inngest.createFunction(
  {
    id: slugify('neuro-image-generation'),
    name: 'Neuro Image Generation',
    retries: 3,
  },
  { event: 'neuro/photo.generate' },
  async ({ event, step }) => {
    try {
      const {
        prompt,
        model_url,
        num_images,
        telegram_id,
        username,
        is_ru,
        bot_name,
        gender, // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: –∏–∑–≤–ª–µ–∫–∞–µ–º gender –∏–∑ event.data
      } = event.data

      logger.info({
        message: 'üé® Starting neuro image generation',
        telegram_id,
        prompt: prompt.substring(0, 50) + '...',
        model_url,
      })

      const botData = (await step.run('get-bot', async () => {
        logger.info({
          message: 'ü§ñ Getting bot instance',
          botName: bot_name,
          step: 'get-bot',
        })

        return getBotByName(bot_name)
      })) as { bot: any }
      console.log('botData', botData)
      const bot = botData.bot

      if (!bot) {
        logger.error({
          message: '‚ùå Bot instance not found',
          bot_name,
          telegram_id,
        })
      } else {
        logger.info({
          message: '‚úÖ Bot instance found',
          bot_name,
          telegram_id,
        })
      }

      const userExists = await step.run('check-user', async () => {
        logger.info({
          message: 'üë§ Validating user existence',
          telegram_id,
        })
        const user = await getUserByTelegramId(telegram_id)
        if (!user) throw new Error(`User ${telegram_id} not found`)
        return user
      })

      // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º gender –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –∏–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
      const userGender = await step.run('get-user-gender', async () => {
        let resolvedGender = gender
        if (!resolvedGender) {
          // –ï—Å–ª–∏ gender –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          resolvedGender = userExists.gender

          // –ï—Å–ª–∏ –∏ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
          if (!resolvedGender) {
            const { supabase } = await import('@/core/supabase')
            const { data: lastTraining } = await supabase
              .from('model_trainings')
              .select('gender')
              .eq('telegram_id', telegram_id)
              .order('created_at', { ascending: false })
              .limit(1)
              .single()

            resolvedGender = lastTraining?.gender
          }
        }

        logger.info({
          message: 'üé≠ Gender –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (Inngest)',
          gender: resolvedGender || '–ù–ï –û–ü–†–ï–î–ï–õ–ï–ù',
          telegram_id,
        })

        return resolvedGender
      })

      // –£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (userExists.level === 1) {
        await step.run('update-level', async () => {
          await updateUserLevelPlusOne(telegram_id, userExists.level)
          logger.info({
            message: '‚¨ÜÔ∏è User level upgraded',
            telegram_id,
            newLevel: userExists.level + 1,
          })
        })
      }

      const totalCost = await step.run('calculate-total-cost', async () => {
        const costResult = calculateModeCost({
          mode: ModeEnum.NeuroPhoto,
          numImages: num_images,
        })

        logger.info({
          message: 'üí∏ Calculated image cost',
          num_images,
          totalCost: costResult.stars,
        })
        return costResult.stars
      })

      const balanceCheck = await step.run('process-payment', async () => {
        const result = await processBalanceOperation({
          telegram_id,
          paymentAmount: totalCost,
          is_ru,
          bot_name,
        })

        if (!result.success) {
          logger.error({
            message: '‚ö†Ô∏è Balance check failed or insufficient funds',
            telegramId: telegram_id,
            requiredAmount: totalCost,
            currentBalance: result.currentBalance,
            error: result.error,
            step: 'process-payment',
          })

          if (result.error) {
            try {
              const { bot } = getBotByName(bot_name)
              if (bot) {
                await bot.telegram.sendMessage(
                  telegram_id.toString(),
                  result.error
                )
              } else {
                logger.error(
                  'Failed to get bot instance for error notification',
                  { bot_name }
                )
              }
            } catch (notifyError) {
              logger.error(
                'Failed to send balance error notification to user',
                { telegramId: telegram_id, error: notifyError }
              )
            }
          }
          throw new Error(result.error || 'Balance check failed')
        }
        logger.info({
          message: '‚úÖ Balance check successful',
          telegramId: telegram_id,
          currentBalance: result.currentBalance,
          requiredAmount: totalCost,
          step: 'process-payment',
        })
        return {
          currentBalance: result.currentBalance,
          paymentAmount: totalCost,
        }
      })

      const initialBalance = balanceCheck.currentBalance

      const aspect_ratio = await step.run('get-aspect-ratio', async () => {
        const ratio = await getAspectRatio(telegram_id)
        logger.info({
          message: 'üìê Using aspect ratio',
          ratio,
        })
        return ratio
      })

      const generatedImages = []

      for (let i = 0; i < num_images; i++) {
        const generationResult = await step.run(
          `generate-image-${i}`,
          async () => {
            const { bot, error } = getBotByName(bot_name)
            if (error || !bot) {
              throw new Error(`Bot instance not found or invalid: ${error}`)
            }
            await bot.telegram.sendMessage(
              telegram_id,
              is_ru
                ? `‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ${i + 1} –∏–∑ ${num_images}`
                : `‚è≥ Generating image ${i + 1} of ${num_images}`
            )

            // ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º gender
            const genderPrompt =
              userGender === 'male'
                ? 'handsome man, masculine features'
                : userGender === 'female'
                ? 'beautiful woman, feminine features'
                : 'person' // fallback –µ—Å–ª–∏ gender –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω

            const input = {
              prompt: `Fashionable ${genderPrompt}: ${prompt}. Cinematic Lighting, realistic, intricate details, extremely detailed, incredible details, full colored, complex details, insanely detailed and intricate, hypermaximalist, extremely detailed with rich colors. Masterpiece, best quality, aerial view, HDR, UHD, unreal engine, Representative, fair skin, beautiful face, Rich in details, high quality, gorgeous, glamorous, 8K, super detail, gorgeous light and shadow, detailed decoration, detailed lines.`,
              negative_prompt: 'nsfw, erotic, violence, bad anatomy...',
              num_inference_steps: 40,
              guidance_scale: 3,
              lora_scale: 1,
              megapixels: '1',
              output_quality: 80,
              prompt_strength: 0.8,
              extra_lora_scale: 1,
              go_fast: false,
              ...(aspect_ratio === '1:1'
                ? { width: 1024, height: 1024 }
                : aspect_ratio === '16:9'
                ? { width: 1368, height: 768 }
                : aspect_ratio === '9:16'
                ? { width: 768, height: 1368 }
                : { width: 1024, height: 1024 }),
              sampler: 'flowmatch',
              num_outputs: 1,
              aspect_ratio,
            }

            const output = await replicate.run(model_url, { input })
            const imageUrl = await processApiResponse(output)

            if (!imageUrl) throw new Error('Image generation failed')

            const localPath = await saveFileLocally(
              telegram_id,
              imageUrl,
              'neuro-photo',
              '.jpeg'
            )

            const prompt_id = await savePrompt(
              prompt,
              model_url,
              ModeEnum.NeuroPhoto,
              imageUrl,
              telegram_id,
              'SUCCESS'
            )

            if (!prompt_id) {
              logger.error('Failed to save prompt')
              throw new Error('Prompt save failed')
            }

            await pulse(
              localPath,
              prompt,
              `/${model_url}`,
              telegram_id,
              username,
              is_ru,
              bot_name
            )

            return {
              url: `${API_URL}/uploads/${telegram_id}/neuro-photo/${path.basename(
                localPath
              )}`,
              path: localPath,
              prompt_id,
            }
          }
        )

        await step.run(`notify-image-${i}`, async () => {
          const { bot, error } = getBotByName(bot_name)
          if (error || !bot) {
            throw new Error(`Bot instance not found or invalid: ${error}`)
          }
          await bot.telegram.sendPhoto(telegram_id, {
            source: fs.createReadStream(generationResult.path),
          })
        })

        generatedImages.push(generationResult.url)
      }

      const finalBalance = await step.run('deduct-balance-final', async () => {
        logger.info({
          message: 'üí∏ Deducting balance after successful image generation',
          telegramId: telegram_id,
          paymentAmount: totalCost,
          currentBalance: initialBalance,
          step: 'deduct-balance-final',
        })

        const newBalance = initialBalance - totalCost

        await updateUserBalance(
          telegram_id,
          totalCost, // ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–∏, –∞ –Ω–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
          PaymentType.MONEY_OUTCOME,
          `NeuroPhoto generation (${num_images} images)`,
          {
            stars: totalCost,
            payment_method: 'Internal',
            bot_name: bot_name,
            language: is_ru ? 'ru' : 'en',
            service_type: ModeEnum.NeuroPhoto, // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞
            category: 'REAL',
            cost: totalCost / 1.5, // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ü–µ–Ω–∞ √∑ –Ω–∞—Ü–µ–Ω–∫–∞ 50%)
          }
        )

        logger.info({
          message: '‚úÖ Balance updated successfully',
          telegramId: telegram_id,
          newBalance: newBalance,
          step: 'deduct-balance-final',
        })
        return newBalance
      })

      await step.run('final-notification', async () => {
        const { bot, error } = getBotByName(bot_name)
        if (error || !bot) {
          throw new Error(`Bot instance not found or invalid: ${error}`)
        }
        await bot.telegram.sendMessage(
          telegram_id,
          is_ru
            ? `–í–∞—à–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã! –°—Ç–æ–∏–º–æ—Å—Ç—å: ${totalCost.toFixed(
                2
              )} ‚≠êÔ∏è\n–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${finalBalance.toFixed(2)} ‚≠êÔ∏è`
            : `Your images generated! Cost: ${totalCost.toFixed(
                2
              )} ‚≠êÔ∏è\nNew balance: ${finalBalance.toFixed(2)} ‚≠êÔ∏è`,
          {
            reply_markup: {
              keyboard: [
                [
                  { text: '1Ô∏è‚É£' },
                  { text: '2Ô∏è‚É£' },
                  { text: '3Ô∏è‚É£' },
                  { text: '4Ô∏è‚É£' },
                ],
                [
                  { text: is_ru ? 'üÜï –ù–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç' : 'üÜï New prompt' },
                  { text: is_ru ? '‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø—Ä–æ–º–ø—Ç' : '‚¨ÜÔ∏è Improve prompt' },
                ],
                [
                  { text: is_ru ? 'üìê –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä' : 'üìê Change size' },
                  {
                    text: is_ru
                      ? '‚¨ÜÔ∏è –£–≤–µ–ª–∏—á–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ'
                      : '‚¨ÜÔ∏è Upscale Quality',
                  },
                ],
                [{ text: is_ru ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main menu' }],
              ],
              resize_keyboard: true,
              one_time_keyboard: false,
            },
          }
        )
      })

      logger.info({
        message: '‚úÖ Successfully completed neuro generation',
        telegram_id,
        numImages: generatedImages.length,
      })

      return { success: true, images: generatedImages }
    } catch (error) {
      logger.error({
        message: 'üö® Neuro image generation failed',
        error: error.message,
        stack: error.stack,
        telegram_id: event.data.telegram_id,
      })

      await inngest.send({
        name: 'neuro/photo.failed',
        data: {
          ...event.data,
          error: error.message,
        },
      })

      throw error
    }
  }
)
