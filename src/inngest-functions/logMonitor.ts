import { inngest } from '@/core/inngest/clients'
import { logger } from '@/utils/logger'
import { readFileSync, existsSync } from 'fs'
import { join } from 'path'
import { OpenAI } from 'openai'
import { Telegraf as Bot } from 'telegraf'

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –±–æ—Ç–∞ –∏ –≥—Ä—É–ø–ø—ã
const BOT_TOKEN = process.env.MONITORING_BOT_TOKEN || process.env.BOT_TOKEN_1 // @neuro_blogger_bot
// –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É, –ø–æ–∫–∞ –±–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É
const ADMIN_TELEGRAM_ID = process.env.ADMIN_TELEGRAM_ID || '144022504'
const GROUP_CHAT_ID = ADMIN_TELEGRAM_ID // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∞–¥–º–∏–Ω–∞ –≤–º–µ—Å—Ç–æ –≥—Ä—É–ø–ø—ã

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ª–æ–≥–æ–≤
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY || process.env.DEEPSEEK_API_KEY,
  baseURL: process.env.DEEPSEEK_API_KEY
    ? 'https://api.deepseek.com'
    : undefined,
})

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
interface LogAnalysisResult {
  status: 'healthy' | 'warning' | 'critical'
  summary: string
  errors: Array<{
    message: string
    count: number
    severity: 'low' | 'medium' | 'high'
    solution?: string
  }>
  warnings: Array<{
    message: string
    count: number
  }>
  statistics: {
    totalRequests?: number
    successRate?: number
    averageResponseTime?: number
    errorRate?: number
    topEndpoints?: Array<{ endpoint: string; count: number }>
  }
  recommendations: string[]
  achievements?: string[]
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤
async function readLogs(): Promise<string> {
  // –í Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ LOG_DIR=/app/logs, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é /tmp/logs
  const logDir = process.env.LOG_DIR || '/tmp/logs'
  const logPath = join(logDir, 'combined.log')

  if (!existsSync(logPath)) {
    logger.warn(`Log file not found at ${logPath}`)
    return ''
  }

  try {
    // –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10000 —Å–∏–º–≤–æ–ª–æ–≤ –ª–æ–≥–æ–≤ (—á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å AI)
    const fullLog = readFileSync(logPath, 'utf-8')
    const last24Hours = filterLast24Hours(fullLog)
    return last24Hours.slice(-50000) // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50KB –ª–æ–≥–æ–≤
  } catch (error) {
    logger.error('Error reading logs:', error)
    return ''
  }
}

// –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ª–æ–≥–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
function filterLast24Hours(logs: string): string {
  const lines = logs.split('\n')
  const now = Date.now()
  const dayAgo = now - 24 * 60 * 60 * 1000

  return lines
    .filter(line => {
      try {
        const match = line.match(/"timestamp":"([^"]+)"/)
        if (match) {
          const timestamp = new Date(match[1]).getTime()
          return timestamp > dayAgo
        }
        return false
      } catch {
        return false
      }
    })
    .join('\n')
}

// –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ —Å –ø–æ–º–æ—â—å—é AI
async function analyzeLogs(logs: string): Promise<LogAnalysisResult> {
  if (!logs) {
    // –í Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ LOG_DIR=/app/logs, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é /tmp/logs
    const logDir = process.env.LOG_DIR || '/tmp/logs'
    const logPath = join(logDir, 'combined.log')
    return {
      status: 'warning',
      summary: `–õ–æ–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏–ª–∏ –ø—É—Å—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞. –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: ${logPath}`,
      errors: [],
      warnings: [],
      statistics: {},
      recommendations: [
        `–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–∏—à–µ—Ç –ª–æ–≥–∏ –≤ ${logPath}`,
        '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.',
      ],
    }
  }

  const systemPrompt = `–¢—ã - –æ–ø—ã—Ç–Ω—ã–π DevOps –∏–Ω–∂–µ–Ω–µ—Ä, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç.

–û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞:
1. –û—à–∏–±–∫–∏ –∏ –∏—Ö —á–∞—Å—Ç–æ—Ç—É
2. –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏ –∞–Ω–æ–º–∞–ª–∏–∏
3. –û–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤
4. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã
5. –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π:
{
  "status": "healthy|warning|critical",
  "summary": "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã",
  "errors": [
    {
      "message": "–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏",
      "count": —á–∏—Å–ª–æ_–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π,
      "severity": "low|medium|high",
      "solution": "–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º–æ–µ —Ä–µ—à–µ–Ω–∏–µ"
    }
  ],
  "warnings": [
    {
      "message": "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è",
      "count": —á–∏—Å–ª–æ_–ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    }
  ],
  "statistics": {
    "totalRequests": —á–∏—Å–ª–æ,
    "successRate": –ø—Ä–æ—Ü–µ–Ω—Ç,
    "averageResponseTime": –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã,
    "errorRate": –ø—Ä–æ—Ü–µ–Ω—Ç,
    "topEndpoints": [
      {"endpoint": "–ø—É—Ç—å", "count": —á–∏—Å–ª–æ}
    ]
  },
  "recommendations": ["–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 1", "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 2"],
  "achievements": ["–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 1", "–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 2"]
}`

  try {
    const response = await openai.chat.completions.create({
      model: process.env.DEEPSEEK_API_KEY
        ? 'deepseek-chat'
        : 'gpt-4-turbo-preview',
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –ª–æ–≥–∏:\n\n${logs}` },
      ],
      response_format: { type: 'json_object' },
      temperature: 0.3,
      max_tokens: 2000,
    })

    const result = JSON.parse(response.choices[0].message.content || '{}')
    return result as LogAnalysisResult
  } catch (error) {
    logger.error('Error analyzing logs with AI:', error)

    // Fallback –∞–Ω–∞–ª–∏–∑ –±–µ–∑ AI
    return basicLogAnalysis(logs)
  }
}

// –ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ –±–µ–∑ AI
function basicLogAnalysis(logs: string): LogAnalysisResult {
  const lines = logs.split('\n')
  const errors = lines.filter(line => line.includes('"level":"error"')).length
  const warnings = lines.filter(line => line.includes('"level":"warn"')).length
  const info = lines.filter(line => line.includes('"level":"info"')).length

  const status = errors > 10 ? 'critical' : errors > 5 ? 'warning' : 'healthy'

  return {
    status,
    summary: `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${lines.length} –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–æ–≤. –û—à–∏–±–æ–∫: ${errors}, –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${warnings}`,
    errors:
      errors > 0
        ? [
            {
              message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö',
              count: errors,
              severity: errors > 10 ? 'high' : 'medium',
              solution: '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫',
            },
          ]
        : [],
    warnings:
      warnings > 0
        ? [
            {
              message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è',
              count: warnings,
            },
          ]
        : [],
    statistics: {
      totalRequests: info,
      errorRate: (errors / (lines.length || 1)) * 100,
    },
    recommendations:
      errors > 0
        ? ['–ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –∏ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –æ—à–∏–±–æ–∫']
        : ['–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ'],
  }
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
async function generateTelegramMessage(
  analysis: LogAnalysisResult
): Promise<string> {
  const statusEmoji = {
    healthy: '‚úÖ',
    warning: '‚ö†Ô∏è',
    critical: 'üö®',
  }

  const severityEmoji = {
    low: 'üìù',
    medium: '‚ö°',
    high: 'üî•',
  }

  let message = `${
    statusEmoji[analysis.status]
  } <b>–û—Ç—á–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–∏—Å—Ç–µ–º—ã</b>\n`
  message += `üìÖ ${new Date().toLocaleString('ru-RU', {
    timeZone: 'Europe/Moscow',
  })}\n\n`

  message += `<b>üìä –û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> ${analysis.summary}\n\n`

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  if (Object.keys(analysis.statistics).length > 0) {
    message += `<b>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 24 —á–∞—Å–∞:</b>\n`
    if (analysis.statistics.totalRequests) {
      message += `‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${analysis.statistics.totalRequests}\n`
    }
    if (analysis.statistics.successRate !== undefined) {
      message += `‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${analysis.statistics.successRate.toFixed(
        1
      )}%\n`
    }
    if (analysis.statistics.errorRate !== undefined) {
      message += `‚Ä¢ –£—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–æ–∫: ${analysis.statistics.errorRate.toFixed(
        2
      )}%\n`
    }
    if (analysis.statistics.averageResponseTime) {
      message += `‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${analysis.statistics.averageResponseTime}–º—Å\n`
    }
    message += '\n'
  }

  // –û—à–∏–±–∫–∏
  if (analysis.errors.length > 0) {
    message += `<b>‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:</b>\n`
    for (const error of analysis.errors.slice(0, 3)) {
      // –ú–∞–∫—Å–∏–º—É–º 3 –æ—à–∏–±–∫–∏
      message += `${severityEmoji[error.severity]} ${error.message}\n`
      message += `   –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: ${error.count}\n`
      if (error.solution) {
        message += `   üí° –†–µ—à–µ–Ω–∏–µ: ${error.solution}\n`
      }
    }
    message += '\n'
  }

  // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
  if (analysis.warnings.length > 0) {
    message += `<b>‚ö° –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:</b>\n`
    for (const warning of analysis.warnings.slice(0, 3)) {
      message += `‚Ä¢ ${warning.message} (√ó${warning.count})\n`
    }
    message += '\n'
  }

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
  if (analysis.recommendations.length > 0) {
    message += `<b>üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:</b>\n`
    for (const rec of analysis.recommendations) {
      message += `‚Ä¢ ${rec}\n`
    }
    message += '\n'
  }

  // –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
  if (analysis.achievements && analysis.achievements.length > 0) {
    message += `<b>üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n`
    for (const achievement of analysis.achievements) {
      message += `‚Ä¢ ${achievement}\n`
    }
    message += '\n'
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ñ—Ä–∞–∑—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
  if (analysis.status === 'healthy') {
    const healthyPhrases = [
      'üí™ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —à–≤–µ–π—Ü–∞—Ä—Å–∫–∏–µ —á–∞—Å—ã!',
      'üöÄ –í—Å—ë –∏–¥—ë—Ç –ø–æ –ø–ª–∞–Ω—É, –∫–∞–ø–∏—Ç–∞–Ω!',
      'üåü –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! –î–µ—Ä–∂–∏–º –ø–ª–∞–Ω–∫—É!',
      '‚ú® –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å - –ø—Ä–∏–∑–Ω–∞–∫ –º–∞—Å—Ç–µ—Ä—Å—Ç–≤–∞!',
      'üéØ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞: –Ω—É–ª–µ–≤–æ–π –¥–∞—É–Ω—Ç–∞–π–º!',
    ]
    message += `\n${
      healthyPhrases[Math.floor(Math.random() * healthyPhrases.length)]
    }`
  } else if (analysis.status === 'warning') {
    message += '\n‚ö° –¢—Ä–µ–±—É–µ—Ç—Å—è –≤–Ω–∏–º–∞–Ω–∏–µ, –Ω–æ —Å–∏—Ç—É–∞—Ü–∏—è –ø–æ–¥ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º!'
  } else {
    message += '\nüîß –ü–æ—Ä–∞ –∑–∞—Å—É—á–∏—Ç—å —Ä—É–∫–∞–≤–∞ –∏ –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã!'
  }

  // –î–æ–±–∞–≤–ª—è–µ–º —Ö–µ—à—Ç–µ–≥–∏
  message += '\n\n#–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ #devops #ai_server'

  return message
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramNotification(message: string): Promise<void> {
  try {
    const bot = new Bot(BOT_TOKEN)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É (—Å–µ–π—á–∞—Å –∞–¥–º–∏–Ω—É)
    await bot.telegram.sendMessage(GROUP_CHAT_ID, message, {
      parse_mode: 'HTML',
      disable_web_page_preview: true,
    })

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏, –¥—É–±–ª–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    if (message.includes('üö®')) {
      await bot.telegram.sendMessage(
        ADMIN_TELEGRAM_ID,
        `üö® <b>–ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï</b>\n\n${message}`,
        { parse_mode: 'HTML' }
      )
    }

    logger.info('Log monitoring report sent successfully')
  } catch (error) {
    logger.error('Error sending Telegram notification:', error)
    throw error
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è Inngest —Ñ—É–Ω–∫—Ü–∏—è
export const logMonitor = inngest.createFunction(
  {
    id: 'log-monitor',
    name: 'üìä Log Monitor & Reporter',
    retries: 2,
  },
  {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞
    cron: '0 10 * * *', // –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00 UTC (13:00 MSK)
  },
  async ({ event, step }) => {
    logger.info('Starting log monitoring task...')

    // –®–∞–≥ 1: –ß—Ç–µ–Ω–∏–µ –ª–æ–≥–æ–≤
    const logs = await step.run('read-logs', async () => {
      logger.info('Reading logs from file system...')
      return await readLogs()
    })

    // –®–∞–≥ 2: –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤
    const analysis = await step.run('analyze-logs', async () => {
      logger.info('Analyzing logs with AI...')
      return await analyzeLogs(logs)
    })

    // –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    const message = await step.run('generate-message', async () => {
      logger.info('Generating Telegram message...')
      return await generateTelegramMessage(analysis)
    })

    // –®–∞–≥ 4: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await step.run('send-notification', async () => {
      logger.info('Sending Telegram notification...')
      await sendTelegramNotification(message)
    })

    logger.info('Log monitoring completed successfully', {
      status: analysis.status,
      errors: analysis.errors.length,
      warnings: analysis.warnings.length,
    })

    return {
      success: true,
      status: analysis.status,
      summary: analysis.summary,
      timestamp: new Date().toISOString(),
    }
  }
)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
export const triggerLogMonitor = inngest.createFunction(
  {
    id: 'trigger-log-monitor',
    name: 'üîÑ Trigger Log Monitor (Manual)',
    retries: 1,
  },
  { event: 'logs/monitor.trigger' },
  async ({ event, step }) => {
    logger.info('Manual log monitoring triggered')

    // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ –∂–µ —à–∞–≥–∏, —á—Ç–æ –∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    const logs = await step.run('read-logs', async () => {
      return await readLogs()
    })

    const analysis = await step.run('analyze-logs', async () => {
      return await analyzeLogs(logs)
    })

    const message = await step.run('generate-message', async () => {
      return await generateTelegramMessage(analysis)
    })

    await step.run('send-notification', async () => {
      await sendTelegramNotification(message)
    })

    return {
      success: true,
      manual: true,
      status: analysis.status,
      summary: analysis.summary,
      triggeredBy: event.data?.userId || 'system',
      timestamp: new Date().toISOString(),
    }
  }
)
