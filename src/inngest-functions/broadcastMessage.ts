import { inngest } from '@/core/inngest/clients'
import { broadcastService } from '@/services/broadcast.service'
import { logger } from '@utils/logger'
// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è
export interface BroadcastEventData {
  imageUrl?: string
  textRu: string // –¢–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º
  textEn: string // –¢–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º
  bot_name?: string
  sender_telegram_id?: string
  test_mode?: boolean
  test_telegram_id?: string
  contentType?: 'photo' | 'video' | 'post_link'
  postLink?: string
  videoFileId?: string
  parse_mode?: 'HTML' | 'Markdown' // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤ —Ä–∞–∑–º–µ—Ç–∫–∏
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
export const broadcastMessage = inngest.createFunction(
  {
    id: 'broadcast-message',
    retries: 3,
  },
  { event: 'broadcast/send-message' },
  async ({ event, step }) => {
    try {
      // –®–∞–≥ 1: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const params = await step.run('validate-input', async () => {
        const data = event.data as BroadcastEventData

        if (!data.textRu || !data.textEn) {
          throw new Error('–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞ –æ–¥–Ω–æ–º –∏–∑ —è–∑—ã–∫–æ–≤')
        }

        if (data.contentType === 'photo' && !data.imageUrl) {
          throw new Error('URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è —Ñ–æ—Ç–æ-—Ä–∞—Å—Å—ã–ª–∫–∏')
        } else if (data.contentType === 'video' && !data.videoFileId) {
          throw new Error('ID –≤–∏–¥–µ–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è –≤–∏–¥–µ–æ-—Ä–∞—Å—Å—ã–ª–∫–∏')
        } else if (data.contentType === 'post_link' && !data.postLink) {
          throw new Error('URL –ø–æ—Å—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å—Å—ã–ª–∫–∏')
        }

        return data
      })

      // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
      await step.run('check-permissions', async () => {
        if (params.sender_telegram_id && params.bot_name) {
          const broadcastResult = await broadcastService.checkOwnerPermissions(
            params.sender_telegram_id,
            params.bot_name
          )
          if (!broadcastResult.success) {
            throw new Error('–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏')
          }
        }
      })

      // –®–∞–≥ 3: –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      const users = await step.run('fetch-users', async () => {
        const result = await broadcastService.fetchUsers({
          bot_name: params.bot_name,
          test_mode: params.test_mode,
          test_telegram_id: params.test_telegram_id,
          sender_telegram_id: params.sender_telegram_id,
        })

        if (!result.users || result.users.length === 0) {
          throw new Error('–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏')
        }

        logger.info(`üë• –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${result.users.length}`, {
          description: `Fetched users count: ${result.users.length}`,
          bot_name: params.bot_name || 'all',
          test_mode: params.test_mode || false,
        })

        return result.users
      })

      // –®–∞–≥ 4: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–æ—Ç–æ–≤
      const bots = await step.run('prepare-bots', async () => {
        const uniqueBotNames = [...new Set(users.map(u => u.bot_name))]
        const botResults = {}

        for (const botName of uniqueBotNames) {
          const bot = await broadcastService.getBotInstance(botName)
          if (!bot) {
            throw new Error(`–ë–æ—Ç ${botName} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
          }
          botResults[botName] = bot
        }

        return botResults
      })

      // –®–∞–≥ 5: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
      const result = await step.run('send-messages', async () => {
        const broadcastResult = await broadcastService.sendToAllUsers(
          params.imageUrl,
          params.textRu,
          {
            ...params,
            bot_name: params.bot_name,
            textEn: params.textEn,
          }
        )
        return broadcastResult || { successCount: 0, errorCount: 0 }
      })

      // –®–∞–≥ 6: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const summary = await step.run('analyze-results', async () => {
        const totalUsers = users.length
        const successRate = (result.successCount / totalUsers) * 100

        logger.info('üìä –ò—Ç–æ–≥–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:', {
          description: 'Broadcast summary',
          totalUsers,
          successCount: result.successCount,
          errorCount: result.errorCount,
          successRate: `${successRate.toFixed(2)}%`,
          bot_name: params.bot_name || 'all',
          test_mode: params.test_mode || false,
        })

        return {
          totalUsers,
          successCount: result.successCount,
          errorCount: result.errorCount,
          successRate,
        }
      })

      return {
        success: true,
        timestamp: new Date().toISOString(),
        message: params.test_mode
          ? 'Test broadcast completed'
          : params.bot_name
          ? `Broadcast completed for bot ${params.bot_name}`
          : 'Broadcast completed for all users',
        statistics: summary,
        contentType: params.contentType || 'photo',
        bot_name: params.bot_name || 'all',
        sender: params.sender_telegram_id || 'system',
        test_mode: params.test_mode || false,
      }
    } catch (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:', {
        description: 'Error during broadcast execution',
        error: error?.message || 'Unknown error',
        step: error?.step || 'unknown',
        contentType: event.data.contentType || 'photo',
        bot_name: event.data.bot_name || 'all',
        test_mode: event.data.test_mode || false,
      })

      throw error // –ü–æ–∑–≤–æ–ª—è–µ–º Inngest –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
    }
  }
)
