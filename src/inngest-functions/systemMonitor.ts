/**
 * –°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ Instagram –ø–∞—Ä—Å–∏–Ω–≥–∞
 * –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ —Ä–∞–±–æ—Ç–µ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
 */

import { inngest } from '@/core/inngest/clients'
import pkg from 'pg'
const { Pool } = pkg

// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
const dbPool = new Pool({
  connectionString: process.env.NEON_DATABASE_URL || '',
  ssl: { rejectUnauthorized: false },
})

// –õ–æ–≥–≥–µ—Ä
const log = {
  info: (msg: string, data?: any) =>
    console.log(`[SYSTEM-MONITOR] ${msg}`, data || ''),
  error: (msg: string, data?: any) =>
    console.error(`[SYSTEM-MONITOR] ${msg}`, data || ''),
  warn: (msg: string, data?: any) =>
    console.warn(`[SYSTEM-MONITOR] ${msg}`, data || ''),
}

/**
 * –°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ - –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00 UTC
 */
export const systemMonitor = inngest.createFunction(
  {
    id: 'system-monitor',
    name: 'üìä System Monitor',
    concurrency: 1,
  },
  { cron: '0 9 * * *' }, // –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 09:00 UTC
  async ({ event, step, runId }) => {
    log.info('üìä –°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω', { runId })

    // Step 1: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    const subscriptionsStats = await step.run(
      'get-subscriptions-stats',
      async () => {
        const client = await dbPool.connect()

        try {
          // –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
          const activeResult = await client.query(`
          SELECT 
            COUNT(*) as total_active,
            COUNT(DISTINCT competitor_username) as unique_competitors,
            COUNT(DISTINCT user_telegram_id) as unique_subscribers
          FROM competitor_subscriptions 
          WHERE is_active = true
        `)

          // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ bot_name
          const botStats = await client.query(`
          SELECT 
            bot_name,
            COUNT(*) as subscriptions_count,
            COUNT(DISTINCT competitor_username) as competitors_count,
            COUNT(DISTINCT user_telegram_id) as subscribers_count
          FROM competitor_subscriptions 
          WHERE is_active = true
          GROUP BY bot_name
          ORDER BY subscriptions_count DESC
        `)

          // –¢–æ–ø –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
          const topCompetitors = await client.query(`
          SELECT 
            competitor_username,
            COUNT(*) as subscribers_count,
            AVG(max_reels::float) as avg_max_reels,
            MIN(min_views) as min_views_threshold
          FROM competitor_subscriptions 
          WHERE is_active = true
          GROUP BY competitor_username
          ORDER BY subscribers_count DESC
          LIMIT 10
        `)

          log.info('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–µ–Ω–∞')
          return {
            active: activeResult.rows[0],
            by_bot: botStats.rows,
            top_competitors: topCompetitors.rows,
          }
        } finally {
          client.release()
        }
      }
    )

    // Step 2: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    const parsingStats = await step.run('get-parsing-stats', async () => {
      const client = await dbPool.connect()

      try {
        const yesterday = new Date()
        yesterday.setHours(yesterday.getHours() - 24)

        // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
        const totalReels = await client.query(
          `
          SELECT 
            COUNT(*) as total_reels_parsed,
            COUNT(DISTINCT owner_username) as unique_accounts,
            AVG(views_count) as avg_views,
            MAX(views_count) as max_views,
            SUM(views_count) as total_views
          FROM instagram_apify_reels 
          WHERE scraped_at >= $1
        `,
          [yesterday]
        )

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º
        const competitorStats = await client.query(
          `
          SELECT 
            owner_username,
            COUNT(*) as reels_count,
            AVG(views_count) as avg_views,
            MAX(views_count) as max_views,
            SUM(likes_count) as total_likes
          FROM instagram_apify_reels 
          WHERE scraped_at >= $1
          GROUP BY owner_username
          ORDER BY reels_count DESC
          LIMIT 15
        `,
          [yesterday]
        )

        log.info('üé¨ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–ª—É—á–µ–Ω–∞')
        return {
          total: totalReels.rows[0],
          by_competitor: competitorStats.rows,
        }
      } finally {
        client.release()
      }
    })

    // Step 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    const deliveryStats = await step.run('get-delivery-stats', async () => {
      const client = await dbPool.connect()

      try {
        const yesterday = new Date()
        yesterday.setHours(yesterday.getHours() - 24)

        // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
        const totalDelivery = await client.query(
          `
          SELECT 
            COUNT(*) as total_deliveries,
            COUNT(*) FILTER (WHERE delivery_status = 'sent') as successful_deliveries,
            COUNT(*) FILTER (WHERE delivery_status = 'failed') as failed_deliveries,
            SUM(reels_count) as total_reels_delivered,
            AVG(reels_count) as avg_reels_per_delivery
          FROM competitor_delivery_history 
          WHERE delivered_at >= $1
        `,
          [yesterday]
        )

        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
        const errorStats = await client.query(
          `
          SELECT 
            error_message,
            COUNT(*) as error_count
          FROM competitor_delivery_history 
          WHERE delivered_at >= $1 
            AND delivery_status = 'failed'
            AND error_message IS NOT NULL
          GROUP BY error_message
          ORDER BY error_count DESC
          LIMIT 5
        `,
          [yesterday]
        )

        log.info('üì¨ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ–ª—É—á–µ–Ω–∞')
        return {
          total: totalDelivery.rows[0],
          errors: errorStats.rows,
        }
      } finally {
        client.release()
      }
    })

    // Step 4: –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã
    const performanceMetrics = await step.run(
      'analyze-performance',
      async () => {
        const stats = {
          parsing_efficiency: 0,
          delivery_success_rate: 0,
          avg_reels_per_competitor: 0,
          system_health_score: 100,
        }

        // –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–∞—Ä—Å–∏–Ω–≥–∞ (—Ä–∏–ª—Å–æ–≤ –Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞)
        if (parsingStats.by_competitor.length > 0) {
          stats.avg_reels_per_competitor =
            parsingStats.by_competitor.reduce(
              (sum, comp) => sum + parseInt(comp.reels_count),
              0
            ) / parsingStats.by_competitor.length

          stats.parsing_efficiency = Math.min(
            100,
            stats.avg_reels_per_competitor * 10
          )
        }

        // –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏
        const totalDeliveries =
          parseInt(deliveryStats.total.total_deliveries) || 1
        const successfulDeliveries =
          parseInt(deliveryStats.total.successful_deliveries) || 0
        stats.delivery_success_rate =
          (successfulDeliveries / totalDeliveries) * 100

        // –û–±—â–∏–π –∏–Ω–¥–µ–∫—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã
        stats.system_health_score = Math.round(
          stats.delivery_success_rate * 0.6 +
            Math.min(stats.parsing_efficiency, 100) * 0.4
        )

        return stats
      }
    )

    // Step 5: –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω–∞–º
    await step.run('send-daily-report', async () => {
      try {
        if (!process.env.ADMIN_CHAT_ID) {
          log.warn('ADMIN_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –æ—Ç—á–µ—Ç –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')
          return
        }

        const { getBotByName } = await import('@/core/bot')
        const { bot } = getBotByName('neuro_blogger_bot')

        // –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç—á–µ—Ç
        const report = `
üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç —Å–∏—Å—Ç–µ–º—ã Instagram –ø–æ–¥–ø–∏—Å–æ–∫
üïê ${new Date().toLocaleDateString('ru-RU', {
          weekday: 'long',
          year: 'numeric',
          month: 'long',
          day: 'numeric',
        })}

üéØ –ü–û–î–ü–ò–°–ö–ò:
‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏: ${subscriptionsStats.active.total_active}
‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: ${subscriptionsStats.active.unique_competitors}
‚Ä¢ –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${subscriptionsStats.active.unique_subscribers}

üé¨ –ü–ê–†–°–ò–ù–ì (–∑–∞ 24 —á–∞—Å–∞):
‚Ä¢ –†–∏–ª—Å–æ–≤ —Å–æ–±—Ä–∞–Ω–æ: ${parsingStats.total.total_reels_parsed || 0}
‚Ä¢ –ê–∫–∫–∞—É–Ω—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${parsingStats.total.unique_accounts || 0}
‚Ä¢ –û–±—â–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã: ${parseInt(
          parsingStats.total.total_views || 0
        ).toLocaleString()}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ —Ä–∏–ª—Å: ${Math.round(
          parsingStats.total.avg_views || 0
        ).toLocaleString()}

üì¨ –î–û–°–¢–ê–í–ö–ê (–∑–∞ 24 —á–∞—Å–∞):
‚Ä¢ –í—Å–µ–≥–æ –¥–æ—Å—Ç–∞–≤–æ–∫: ${deliveryStats.total.total_deliveries || 0}
‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: ${deliveryStats.total.successful_deliveries || 0}
‚Ä¢ –û—à–∏–±–æ–∫: ${deliveryStats.total.failed_deliveries || 0}
‚Ä¢ –†–∏–ª—Å–æ–≤ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${deliveryStats.total.total_reels_delivered || 0}

üèÜ –¢–û–ü-5 –ö–û–ù–ö–£–†–ï–ù–¢–û–í:
${parsingStats.by_competitor
  .slice(0, 5)
  .map(
    (comp, i) =>
      `${i + 1}. @${comp.owner_username}: ${
        comp.reels_count
      } —Ä–∏–ª—Å–æ–≤ (${Math.round(comp.avg_views).toLocaleString()} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤)`
  )
  .join('\n')}

üìà –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–¨:
‚Ä¢ –†–∏–ª—Å–æ–≤ –Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞: ${performanceMetrics.avg_reels_per_competitor.toFixed(
          1
        )}
‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: ${performanceMetrics.delivery_success_rate.toFixed(1)}%
‚Ä¢ –ó–¥–æ—Ä–æ–≤—å–µ —Å–∏—Å—Ç–µ–º—ã: ${performanceMetrics.system_health_score}%

${
  deliveryStats.errors.length > 0
    ? `
‚ö†Ô∏è –ß–ê–°–¢–´–ï –û–®–ò–ë–ö–ò:
${deliveryStats.errors
  .map(err => `‚Ä¢ ${err.error_message} (${err.error_count}x)`)
  .join('\n')}
`
    : '‚úÖ –û—à–∏–±–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ'
}

ü§ñ Run ID: ${runId}
        `

        await bot.api.sendMessage(process.env.ADMIN_CHAT_ID, report)
        log.info('üì§ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∞–º')
      } catch (error: any) {
        log.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞:', error.message)
      }
    })

    const summary = {
      subscriptions: subscriptionsStats,
      parsing: parsingStats,
      delivery: deliveryStats,
      performance: performanceMetrics,
      report_sent: true,
    }

    log.info('‚úÖ –°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω', {
      active_subscriptions: subscriptionsStats.active.total_active,
      reels_parsed_24h: parsingStats.total.total_reels_parsed,
      deliveries_24h: deliveryStats.total.total_deliveries,
      system_health: performanceMetrics.system_health_score,
    })

    return {
      success: true,
      timestamp: new Date(),
      summary,
    }
  }
)

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
 */
export const triggerSystemMonitor = inngest.createFunction(
  {
    id: 'trigger-system-monitor',
    name: 'üîÑ Trigger System Monitor',
  },
  { event: 'system/trigger-monitor' },
  async ({ event, step }) => {
    log.info('üîÑ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞')

    // –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
    const result = await inngest.send({
      name: 'inngest/function.invoked',
      data: {
        function_id: 'system-monitor',
        trigger: 'manual',
      },
    })

    return {
      success: true,
      message: 'System monitor triggered manually',
      event_id: result.ids[0],
    }
  }
)
