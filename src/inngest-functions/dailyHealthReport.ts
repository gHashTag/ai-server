/**
 * –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã —Å –∞–Ω–∞–ª–∏–∑–æ–º –≤—Å–µ—Ö –ª–æ–≥–æ–≤
 */

import { inngest } from '@/core/inngest/clients'
import { logger } from '@/utils/logger'
import { getBotByName } from '@/core/bot'
import { OpenAI } from 'openai'
import pkg from 'pg'
const { Pool } = pkg

const dbPool = new Pool({
  connectionString: process.env.SUPABASE_URL || '',
  ssl: { rejectUnauthorized: false },
})

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY || process.env.DEEPSEEK_API_KEY,
  baseURL: process.env.DEEPSEEK_API_KEY
    ? 'https://api.deepseek.com'
    : undefined,
})

interface DailyStats {
  totalRequests: number
  successfulRequests: number
  failedRequests: number
  avgResponseTime: number
  topErrors: Array<{ error: string; count: number }>
  networkCheckResults: Array<{
    endpoint: string
    successRate: number
    avgResponseTime: number
  }>
  deploymentsCount: number
  criticalIssues: number
}

/**
 * –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
 */
async function collectDailyStats(): Promise<DailyStats> {
  const client = await dbPool.connect()
  
  try {
    const yesterday = new Date()
    yesterday.setHours(yesterday.getHours() - 24)

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ network checks
    const networkStats = await client.query(`
      SELECT 
        endpoint,
        COUNT(*) as total_checks,
        COUNT(CASE WHEN status = 'success' THEN 1 END) as successful_checks,
        AVG(response_time) as avg_response_time
      FROM network_check_history 
      WHERE checked_at >= $1
      GROUP BY endpoint
    `, [yesterday])

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ª–æ–≥–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const systemStats = await client.query(`
      SELECT 
        COUNT(*) as total_logs,
        COUNT(CASE WHEN level = 'error' THEN 1 END) as error_logs,
        COUNT(CASE WHEN level = 'warn' THEN 1 END) as warn_logs
      FROM system_logs 
      WHERE created_at >= $1
    `, [yesterday])

    // –¢–æ–ø –æ—à–∏–±–æ–∫
    const topErrors = await client.query(`
      SELECT 
        data->>'error' as error,
        COUNT(*) as count
      FROM system_logs 
      WHERE level = 'error' AND created_at >= $1
      GROUP BY data->>'error'
      ORDER BY count DESC
      LIMIT 5
    `, [yesterday])

    client.release()

    return {
      totalRequests: parseInt(systemStats.rows[0]?.total_logs || '0'),
      successfulRequests: parseInt(systemStats.rows[0]?.total_logs || '0') - parseInt(systemStats.rows[0]?.error_logs || '0'),
      failedRequests: parseInt(systemStats.rows[0]?.error_logs || '0'),
      avgResponseTime: 0, // –ë—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ
      topErrors: topErrors.rows.map(row => ({
        error: row.error || 'Unknown error',
        count: parseInt(row.count)
      })),
      networkCheckResults: networkStats.rows.map(row => ({
        endpoint: row.endpoint,
        successRate: (parseInt(row.successful_checks) / parseInt(row.total_checks)) * 100,
        avgResponseTime: parseFloat(row.avg_response_time || '0')
      })),
      deploymentsCount: 0, // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –¥–µ–ø–ª–æ—è—Ö
      criticalIssues: parseInt(systemStats.rows[0]?.error_logs || '0')
    }
  } catch (error) {
    client.release()
    logger.error('Error collecting daily stats:', error)
    
    // Fallback —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    return {
      totalRequests: 0,
      successfulRequests: 0, 
      failedRequests: 0,
      avgResponseTime: 0,
      topErrors: [],
      networkCheckResults: [],
      deploymentsCount: 0,
      criticalIssues: 0
    }
  }
}

/**
 * –ê–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤ —Å –ø–æ–º–æ—â—å—é AI –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–æ–≤
 */
async function analyzeLogsWithAI(stats: DailyStats): Promise<{
  summary: string
  recommendations: string[]
  healthScore: number
  trends: string
}> {
  const prompt = `–¢—ã —Å–∏—Å—Ç–µ–º–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã –∑–∞ 24 —á–∞—Å–∞ –∏ –¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –æ—Ç—á–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ:

–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
- –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${stats.totalRequests}
- –£—Å–ø–µ—à–Ω—ã—Ö: ${stats.successfulRequests}
- –û—à–∏–±–æ–∫: ${stats.failedRequests}
- –ö—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º: ${stats.criticalIssues}
- –î–µ–ø–ª–æ–µ–≤: ${stats.deploymentsCount}

Network Check —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:
${stats.networkCheckResults.map(r => 
  `- ${r.endpoint}: ${r.successRate.toFixed(1)}% —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ (${r.avgResponseTime.toFixed(0)}ms)`
).join('\n')}

–¢–æ–ø –æ—à–∏–±–æ–∫:
${stats.topErrors.map(e => `- ${e.error}: ${e.count} —Ä–∞–∑`).join('\n')}

–û—Ç–≤–µ—Ç—å –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "summary": "–ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∑–∞ –¥–µ–Ω—å",
  "recommendations": ["—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 1", "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è 2"],
  "healthScore": 85,
  "trends": "–û–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–¥–æ–≤ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π"
}`

  try {
    const response = await openai.chat.completions.create({
      model: process.env.DEEPSEEK_API_KEY ? 'deepseek-chat' : 'gpt-4-turbo-preview',
      messages: [
        {
          role: 'system',
          content: '–¢—ã –æ–ø—ã—Ç–Ω—ã–π DevOps –∏–Ω–∂–µ–Ω–µ—Ä. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –∏ –¥–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.'
        },
        { role: 'user', content: prompt }
      ],
      response_format: { type: 'json_object' },
      temperature: 0.3,
      max_tokens: 800,
    })

    return JSON.parse(response.choices[0].message.content || '{}')
  } catch (error) {
    logger.error('Error analyzing logs with AI:', error)
    
    // Fallback –∞–Ω–∞–ª–∏–∑
    const successRate = stats.totalRequests > 0 
      ? (stats.successfulRequests / stats.totalRequests) * 100 
      : 100

    return {
      summary: `–ó–∞ —Å—É—Ç–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${stats.totalRequests} –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —É—Å–ø–µ—à–Ω–æ—Å—Ç—å—é ${successRate.toFixed(1)}%. ${stats.criticalIssues > 0 ? `–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${stats.criticalIssues} –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º.` : '–ö—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ—Ç.'}`,
      recommendations: stats.criticalIssues > 0 
        ? ['–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –æ—à–∏–±–æ–∫', '–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å']
        : ['–°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ'],
      healthScore: Math.max(0, 100 - (stats.criticalIssues * 10) - Math.max(0, (100 - successRate) * 2)),
      trends: stats.criticalIssues > 5 ? '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—à–∏–±–æ–∫' : '–°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞'
    }
  }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è Telegram
 */
function createInlineKeyboard() {
  return {
    inline_keyboard: [
      [
        { text: 'üìä –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏', callback_data: 'show_detailed_logs' },
        { text: 'üîç Network Check', callback_data: 'run_network_check' }
      ],
      [
        { text: 'üöÄ –°—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ–µ–≤', callback_data: 'deployment_status' },
        { text: '‚ö†Ô∏è –¢–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏', callback_data: 'show_errors_only' }
      ],
      [
        { text: 'üìà –¢—Ä–µ–Ω–¥—ã', callback_data: 'show_trends' },
        { text: 'üõ† –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã', callback_data: 'auto_fix' }
      ]
    ]
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
 */
export const dailyHealthReport = inngest.createFunction(
  {
    id: 'daily-health-report',
    name: 'üìä Daily Health Report',
    concurrency: 1,
  },
  { cron: '0 10 * * *' }, // –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 13:00 MSK (10:00 UTC)
  async ({ event, step, runId }) => {
    logger.info('üìä Daily Health Report –∑–∞–ø—É—â–µ–Ω', { runId })

    // Step 1: –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await step.run('collect-daily-stats', async () => {
      return await collectDailyStats()
    })

    // Step 2: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø–æ–º–æ—â—å—é AI
    const analysis = await step.run('analyze-with-ai', async () => {
      return await analyzeLogsWithAI(stats)
    })

    // Step 3: –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
    await step.run('send-daily-report', async () => {
      const { bot } = getBotByName('neuro_blogger_bot')

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º emoji —Å—Ç–∞—Ç—É—Å–∞
      let statusEmoji = 'üíö'
      if (analysis.healthScore < 50) statusEmoji = 'üö®'
      else if (analysis.healthScore < 80) statusEmoji = '‚ö†Ô∏è'

      let message = `${statusEmoji} –ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢ –û –°–û–°–¢–û–Ø–ù–ò–ò –°–ò–°–¢–ï–ú–´\n\n`
      
      message += `üìÖ ${new Date().toLocaleDateString('ru-RU', { 
        weekday: 'long', 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
      })}\n\n`

      // –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è
      message += `üè• –û—Ü–µ–Ω–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: ${analysis.healthScore}/100\n`
      
      // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
      message += `üìä –û–°–ù–û–í–ù–´–ï –ü–û–ö–ê–ó–ê–¢–ï–õ–ò:\n`
      message += `‚Ä¢ –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${stats.totalRequests.toLocaleString()}\n`
      message += `‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: ${stats.totalRequests > 0 ? ((stats.successfulRequests / stats.totalRequests) * 100).toFixed(1) : '100.0'}%\n`
      message += `‚Ä¢ –ö—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º: ${stats.criticalIssues}\n`
      
      if (stats.deploymentsCount > 0) {
        message += `‚Ä¢ –î–µ–ø–ª–æ–µ–≤ –∑–∞ –¥–µ–Ω—å: ${stats.deploymentsCount}\n`
      }

      // Network Check —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      if (stats.networkCheckResults.length > 0) {
        message += `\nüåê NETWORK CHECK:\n`
        stats.networkCheckResults.forEach(result => {
          const emoji = result.successRate >= 95 ? '‚úÖ' : result.successRate >= 80 ? '‚ö†Ô∏è' : '‚ùå'
          message += `${emoji} ${result.endpoint}: ${result.successRate.toFixed(1)}% (${result.avgResponseTime.toFixed(0)}ms)\n`
        })
      }

      // –¢–æ–ø –æ—à–∏–±–æ–∫
      if (stats.topErrors.length > 0) {
        message += `\n‚ùå –¢–û–ü –û–®–ò–ë–ö–ò:\n`
        stats.topErrors.slice(0, 3).forEach((error, index) => {
          message += `${index + 1}. ${error.error.substring(0, 50)}... (${error.count}x)\n`
        })
      }

      // AI –∞–Ω–∞–ª–∏–∑
      message += `\nü§ñ –ê–ù–ê–õ–ò–ó AI:\n`
      message += `${analysis.summary}\n`

      if (analysis.trends) {
        message += `\nüìà –¢—Ä–µ–Ω–¥—ã: ${analysis.trends}\n`
      }

      // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
      if (analysis.recommendations.length > 0) {
        message += `\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:\n`
        analysis.recommendations.forEach((rec, index) => {
          message += `${index + 1}. ${rec}\n`
        })
      }

      message += `\n‚¨áÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π:`

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
      await bot.api.sendMessage(
        process.env.ADMIN_CHAT_ID!,
        message,
        {
          reply_markup: createInlineKeyboard(),
          parse_mode: 'HTML'
        }
      )

      // –ï—Å–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã - –¥—É–±–ª–∏—Ä—É–µ–º –∞–¥–º–∏–Ω—É
      if (analysis.healthScore < 50) {
        await bot.api.sendMessage(
          process.env.ADMIN_TELEGRAM_ID!,
          `üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´ –í –°–ò–°–¢–ï–ú–ï!\n\n–û—Ü–µ–Ω–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è: ${analysis.healthScore}/100\n–ö—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º: ${stats.criticalIssues}\n\n–¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ!`
        )
      }

      logger.info('üìä Daily report sent', { 
        healthScore: analysis.healthScore,
        criticalIssues: stats.criticalIssues
      })
    })

    return {
      success: true,
      healthScore: analysis.healthScore,
      criticalIssues: stats.criticalIssues,
      stats,
      analysis,
      timestamp: new Date()
    }
  }
)

/**
 * –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
 */
export const triggerDailyReport = inngest.createFunction(
  {
    id: 'trigger-daily-report',
    name: 'üîÑ Trigger Daily Report',
  },
  { event: 'system/trigger-daily-report' },
  async ({ event, step }) => {
    logger.info('üîÑ –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞')

    const result = await inngest.send({
      name: 'inngest/function.invoked',
      data: {
        function_id: 'daily-health-report',
        trigger: 'manual',
        userId: event.data.userId
      },
    })

    return {
      success: true,
      message: 'Daily report triggered manually',
      event_id: result.ids[0],
    }
  }
)

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∫–Ω–æ–ø–æ–∫ –æ—Ç Telegram
 */
export const handleTelegramCallbacks = inngest.createFunction(
  {
    id: 'handle-telegram-callbacks',
    name: 'üîò Handle Telegram Callbacks',
  },
  { event: 'telegram/callback' },
  async ({ event, step }) => {
    const { callbackData, chatId, messageId, userId } = event.data

    const { bot } = getBotByName('neuro_blogger_bot')

    switch (callbackData) {
      case 'show_detailed_logs':
        await bot.api.sendMessage(
          chatId,
          'üìã –ü–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –∑–∞ 24 —á–∞—Å–∞:\n\n' +
          '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:\n' +
          '```bash\ntail -n 100 /tmp/logs/combined.log\n```',
          { parse_mode: 'Markdown' }
        )
        break

      case 'run_network_check':
        // –ó–∞–ø—É—Å–∫–∞–µ–º network check
        await inngest.send({
          name: 'network/trigger-check',
          data: { userId, source: 'telegram_button' }
        })
        await bot.api.sendMessage(chatId, 'üåê Network Check –∑–∞–ø—É—â–µ–Ω! –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–¥–µ—Ç —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.')
        break

      case 'deployment_status':
        await bot.api.sendMessage(
          chatId,
          'üöÄ –°—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ–µ–≤:\n\n' +
          `–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: ${process.env.RAILWAY_DEPLOYMENT_ID || 'unknown'}\n` +
          `–í–µ—Ç–∫–∞: ${process.env.RAILWAY_GIT_BRANCH || 'unknown'}\n` +
          `–ö–æ–º–º–∏—Ç: ${process.env.RAILWAY_GIT_COMMIT_SHA?.substring(0, 8) || 'unknown'}\n\n` +
          '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–ø–ª–æ–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.'
        )
        break

      case 'show_errors_only':
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—à–∏–±–∫–∏ –∑–∞ –¥–µ–Ω—å
        const client = await dbPool.connect()
        const errors = await client.query(`
          SELECT data, created_at 
          FROM system_logs 
          WHERE level = 'error' AND created_at >= NOW() - INTERVAL '24 hours'
          ORDER BY created_at DESC 
          LIMIT 10
        `)
        client.release()

        const errorMessage = errors.rows.length > 0 
          ? `‚ùå –û–®–ò–ë–ö–ò –ó–ê 24 –ß–ê–°–ê (${errors.rows.length}):\n\n` +
            errors.rows.map((row, i) => 
              `${i + 1}. ${new Date(row.created_at).toLocaleTimeString('ru-RU')}: ${JSON.stringify(row.data).substring(0, 100)}...`
            ).join('\n')
          : '‚úÖ –û—à–∏–±–æ–∫ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!'

        await bot.api.sendMessage(chatId, errorMessage)
        break

      case 'show_trends':
        await bot.api.sendMessage(
          chatId, 
          'üìà –ê–ù–ê–õ–ò–ó –¢–†–ï–ù–î–û–í:\n\n' +
          '–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Ç—Ä–µ–Ω–¥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∞—à–±–æ—Ä–¥—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.\n\n' +
          '–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:\n' +
          '‚Ä¢ –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤\n' +
          '‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –ø–æ –≤—Ä–µ–º–µ–Ω–∏\n' +
          '‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å network checks\n' +
          '‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ–µ–≤'
        )
        break

      case 'auto_fix':
        await bot.api.sendMessage(
          chatId,
          'üõ† –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï:\n\n' +
          '–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:\n' +
          '1. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤\n' +
          '2. –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–µ–π\n' +
          '3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π\n\n' +
          '‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.'
        )
        break
    }

    return {
      success: true,
      callbackData,
      chatId,
      processed: true
    }
  }
)