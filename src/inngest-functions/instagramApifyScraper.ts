/**
 * Instagram Apify Scraper - –ü–∞—Ä—Å–∏–Ω–≥ —Ä–∏–ª–∑ —á–µ—Ä–µ–∑ Apify
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ª–æ–≥–∏–∫–∏ –∏–∑ instagram-scraper-bot
 */

import { inngest } from '@/core/inngest/clients'
import { ApifyClient } from 'apify-client'
import { Pool } from 'pg'
import { z } from 'zod'
import { instagramScrapingRates } from '@/price/helpers/modelsCost'
import { updateUserBalance } from '@/core/supabase/updateUserBalance'

// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const ApifyScraperEventSchema = z.object({
  username_or_hashtag: z.string().min(1),
  project_id: z.number().positive(),
  source_type: z.enum(['competitor', 'hashtag']),
  max_reels: z.number().min(1).max(500).default(50),
  min_views: z.number().min(0).optional(),
  max_age_days: z.number().min(1).max(365).optional(),
  requester_telegram_id: z.string().optional(),
  bot_name: z.string().optional(),
})

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Apify —Ä–∏–ª—Å–∞
interface ApifyReelItem {
  id?: string
  shortCode?: string
  caption?: string
  hashtags?: string[]
  url?: string
  videoUrl?: string
  displayUrl?: string
  likesCount?: number
  commentsCount?: number
  videoViewCount?: number
  videoPlayCount?: number
  timestamp?: string
  ownerUsername?: string
  ownerId?: string
  videoDuration?: number
  isVideo?: boolean
  productType?: string
  type?: string
  musicInfo?: {
    artist_name?: string | null
    song_name?: string | null
  }
}

// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
const dbPool = new Pool({
  connectionString: process.env.SUPABASE_URL || '',
  ssl: { rejectUnauthorized: false },
})

// –õ–æ–≥–≥–µ—Ä
const log = {
  info: (msg: string, data?: any) =>
    console.log(`[APIFY-SCRAPER] ${msg}`, data || ''),
  error: (msg: string, data?: any) =>
    console.error(`[APIFY-SCRAPER] ${msg}`, data || ''),
  warn: (msg: string, data?: any) =>
    console.warn(`[APIFY-SCRAPER] ${msg}`, data || ''),
}

/**
 * –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Instagram —á–µ—Ä–µ–∑ Apify
 */
export const instagramApifyScraper = inngest.createFunction(
  {
    id: 'instagram-apify-scraper',
    name: 'ü§ñ Instagram Apify Scraper',
    concurrency: 2,
  },
  { event: 'instagram/apify-scrape' },
  async ({ event, step, runId }) => {
    log.info('üöÄ Instagram Apify Scraper –∑–∞–ø—É—â–µ–Ω', {
      runId,
      eventData: event.data,
    })

    // Step 1: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const validatedData = await step.run('validate-input', async () => {
      const result = ApifyScraperEventSchema.safeParse(event.data)

      if (!result.success) {
        throw new Error(`Invalid input: ${result.error.message}`)
      }

      if (!process.env.APIFY_TOKEN) {
        throw new Error('APIFY_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è')
      }

      log.info('‚úÖ –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã')
      return result.data
    })

    // Step 2: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Apify –∫–ª–∏–µ–Ω—Ç–∞
    const apifyClient = await step.run('init-apify-client', async () => {
      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
      log.info('üîç –û—Ç–ª–∞–¥–∫–∞ ApifyClient –∏–º–ø–æ—Ä—Ç–∞:', {
        ApifyClient: typeof ApifyClient,
        ApifyClientPrototype: ApifyClient?.prototype?.constructor?.name,
        ApifyClientKeys: ApifyClient
          ? Object.getOwnPropertyNames(ApifyClient.prototype)
          : 'undefined',
      })

      const client = new ApifyClient({
        token: process.env.APIFY_TOKEN!,
      })

      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–º –∫–ª–∏–µ–Ω—Ç–µ
      log.info('üîç –û—Ç–ª–∞–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞:', {
        clientType: typeof client,
        clientConstructor: client?.constructor?.name,
        hasActorMethod: typeof client?.actor,
        clientKeys: client
          ? Object.getOwnPropertyNames(Object.getPrototypeOf(client))
          : 'undefined',
      })

      log.info('‚úÖ Apify –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
      return client
    })

    // Step 3: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è Apify
    const apifyInput = await step.run('prepare-apify-input', async () => {
      const { username_or_hashtag, source_type, max_reels } = validatedData

      let input: any

      if (source_type === 'hashtag') {
        // –î–ª—è —Ö–µ—à—Ç–µ–≥–æ–≤
        const hashtag = username_or_hashtag.replace('#', '').trim()
        input = {
          search: `#${hashtag}`,
          searchType: 'hashtag',
          searchLimit: 250, // –ú–∞–∫—Å–∏–º—É–º –¥–ª—è –ø–æ–∏—Å–∫–∞
          resultsType: 'posts',
          resultsLimit: max_reels,
          proxy: {
            useApifyProxy: true,
            apifyProxyGroups: ['RESIDENTIAL'],
          },
        }
        log.info(`üìå –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ö–µ—à—Ç–µ–≥–∞ #${hashtag}`, input)
      } else {
        // –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –§–û–†–ú–ê–¢
        const username = username_or_hashtag.replace('@', '').trim()
        input = {
          directUrls: [`https://www.instagram.com/${username}/`], // –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!
          resultsType: 'posts',
          resultsLimit: Math.max(max_reels * 5, 20), // –ü–∞—Ä—Å–∏–º –±–æ–ª—å—à–µ –ø–æ—Å—Ç–æ–≤ —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ
          proxy: {
            useApifyProxy: true,
            apifyProxyGroups: ['RESIDENTIAL'],
          },
        }
        log.info(`üë§ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${username}`, input)
      }

      return input
    })

    // Step 4: –ó–∞–ø—É—Å–∫ Apify –∞–∫—Ç–æ—Ä–∞
    const apifyResults = await step.run('run-apify-actor', async () => {
      log.info('üé¨ –ó–∞–ø—É—Å–∫ Apify –∞–∫—Ç–æ—Ä–∞ instagram-scraper...')

      try {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –≤ –∫–∞–∂–¥–æ–º step –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
        const freshClient = new ApifyClient({
          token: process.env.APIFY_TOKEN!,
        })

        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–≤–µ–∂–µ—Å–æ–∑–¥–∞–Ω–Ω–æ–º –∫–ª–∏–µ–Ω—Ç–µ
        log.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ–∂–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞ –≤ step:', {
          clientType: typeof freshClient,
          hasActorMethod: typeof freshClient?.actor,
          actorType: typeof freshClient.actor,
        })

        // –ó–∞–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–æ—Ä —á–µ—Ä–µ–∑ —Å–≤–µ–∂–∏–π –∫–ª–∏–µ–Ω—Ç
        const run = await freshClient
          .actor('apify/instagram-scraper')
          .call(apifyInput)

        log.info('‚úÖ Apify –∞–∫—Ç–æ—Ä –∑–∞–≤–µ—Ä—à—ë–Ω', {
          runId: run.id,
          status: run.status,
        })

        // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —á–µ—Ä–µ–∑ —Ç–æ—Ç –∂–µ —Å–≤–µ–∂–∏–π –∫–ª–∏–µ–Ω—Ç
        const { items } = await freshClient
          .dataset(run.defaultDatasetId)
          .listItems()

        log.info(`üì¶ –ü–æ–ª—É—á–µ–Ω–æ ${items.length} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –æ—Ç Apify`)

        // –ü–æ–ª–Ω—ã–π –ª–æ–≥ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (items.length > 0) {
          log.info(
            'üîç –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–≤–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞:',
            JSON.stringify(items[0], null, 2)
          )
        }

        return items
      } catch (error: any) {
        log.error('‚ùå –û—à–∏–±–∫–∞ Apify', error)
        throw new Error(`Apify error: ${error.message}`)
      }
    })

    // Step 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const processedReels = await step.run('process-reels', async () => {
      const { source_type, min_views, max_age_days } = validatedData

      let allPosts: ApifyReelItem[] = []

      // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
      if (source_type === 'hashtag') {
        log.info('üìù –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Å—Ç—ã –∏–∑ —Ö–µ—à—Ç–µ–≥–æ–≤...')
        apifyResults.forEach((item: any) => {
          if (item.topPosts && Array.isArray(item.topPosts)) {
            allPosts.push(...item.topPosts)
          }
          if (item.latestPosts && Array.isArray(item.latestPosts)) {
            allPosts.push(...item.latestPosts)
          }
        })
      } else {
        allPosts = apifyResults as ApifyReelItem[]
      }

      log.info(`üìä –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${allPosts.length}`)

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –¥–∞—Ç–µ
      let maxAgeDate: Date | null = null
      if (max_age_days) {
        maxAgeDate = new Date()
        maxAgeDate.setDate(maxAgeDate.getDate() - max_age_days)
        log.info(`üìÖ –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ: –Ω–µ —Å—Ç–∞—Ä—à–µ ${max_age_days} –¥–Ω–µ–π`)
      }

      // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å—Ç–∞—Ö
      log.info('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã:', {
        posts_sample: allPosts.slice(0, 3).map(post => ({
          type: post.type,
          productType: post.productType,
          isVideo: post.isVideo,
          videoUrl: !!post.videoUrl,
          shortCode: post.shortCode,
        })),
      })

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–∏–ª—Å–æ–≤
      const filteredReels = allPosts.filter(item => {
        // –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê - –ø–∞—Ä—Å–∏–º –í–°–ï —á—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∏–¥–µ–æ
        const isReel =
          item.type === 'Video' || // –ü—Ä—è–º–æ–µ –≤–∏–¥–µ–æ
          item.productType === 'clips' || // –†–∏–ª—Å—ã
          item.isVideo === true || // –§–ª–∞–≥ –≤–∏–¥–µ–æ
          !!item.videoUrl || // –ï—Å—Ç—å URL –≤–∏–¥–µ–æ
          !!item.videoPlayUrl || // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π URL –≤–∏–¥–µ–æ
          (item.videoViewCount && item.videoViewCount > 0) || // –ï—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
          (item.videoPlayCount && item.videoPlayCount > 0) || // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã
          item.type === 'GraphVideo' || // –î—Ä—É–≥–æ–π —Ç–∏–ø –≤–∏–¥–µ–æ
          item.typename === 'GraphVideo' || // –ß–µ—Ä–µ–∑ typename
          (item.displayUrl && item.displayUrl.includes('video')) || // URL —Å–æ–¥–µ—Ä–∂–∏—Ç video
          item.isVideo === 'true' || // –°—Ç—Ä–æ–∫–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
          (item.media_type && item.media_type === 2) // Instagram media_type –¥–ª—è –≤–∏–¥–µ–æ

        if (!isReel) {
          log.info('‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω –Ω–µ-—Ä–∏–ª—Å:', {
            type: item.type,
            productType: item.productType,
            isVideo: item.isVideo,
            shortCode: item.shortCode,
          })
          return false
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã
        if (maxAgeDate && item.timestamp) {
          const pubDate = new Date(item.timestamp)
          if (pubDate < maxAgeDate) return false
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
        if (min_views !== undefined) {
          const views = item.videoViewCount || item.videoPlayCount || 0
          if (views < min_views) {
            log.info(
              `‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Ä–∏–ª—Å —Å ${views} –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º–∏ (–º–∏–Ω: ${min_views})`
            )
            return false
          }
        }

        return true
      })

      log.info(`‚úÖ –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: ${filteredReels.length} —Ä–∏–ª—Å–æ–≤`)

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      return filteredReels.map(reel => ({
        reel_id: reel.id || reel.shortCode || '',
        url: reel.url || `https://instagram.com/p/${reel.shortCode}/`,
        video_url: reel.videoUrl,
        thumbnail_url: reel.displayUrl,
        caption: reel.caption || '',
        hashtags: reel.hashtags || [],
        owner_username: reel.ownerUsername || '',
        owner_id: reel.ownerId || '',
        views_count: reel.videoViewCount || reel.videoPlayCount || 0,
        likes_count: reel.likesCount || 0,
        comments_count: reel.commentsCount || 0,
        duration: reel.videoDuration || 0,
        published_at: reel.timestamp ? new Date(reel.timestamp) : new Date(),
        music_artist: reel.musicInfo?.artist_name || null,
        music_title: reel.musicInfo?.song_name || null,
      }))
    })

    // Step 6: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    const saveResult = await step.run('save-to-database', async () => {
      const client = await dbPool.connect()
      let saved = 0
      let duplicates = 0

      try {
        // –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        await client.query(`
          CREATE TABLE IF NOT EXISTS instagram_apify_reels (
            id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
            reel_id VARCHAR(255) UNIQUE,
            url TEXT NOT NULL,
            video_url TEXT,
            thumbnail_url TEXT,
            caption TEXT,
            hashtags JSONB,
            owner_username VARCHAR(255),
            owner_id VARCHAR(255),
            views_count INTEGER DEFAULT 0,
            likes_count INTEGER DEFAULT 0,
            comments_count INTEGER DEFAULT 0,
            duration FLOAT,
            published_at TIMESTAMP,
            music_artist VARCHAR(255),
            music_title VARCHAR(255),
            project_id INTEGER,
            scraped_at TIMESTAMP DEFAULT NOW(),
            created_at TIMESTAMP DEFAULT NOW()
          )
        `)

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∏–ª—Å—ã
        for (const reel of processedReels) {
          try {
            await client.query(
              `INSERT INTO instagram_apify_reels 
               (reel_id, url, video_url, thumbnail_url, caption, hashtags,
                owner_username, owner_id, views_count, likes_count, 
                comments_count, duration, published_at, music_artist, 
                music_title, project_id)
               VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16)
               ON CONFLICT (reel_id) DO NOTHING`,
              [
                reel.reel_id,
                reel.url,
                reel.video_url,
                reel.thumbnail_url,
                reel.caption,
                JSON.stringify(reel.hashtags),
                reel.owner_username,
                reel.owner_id,
                reel.views_count,
                reel.likes_count,
                reel.comments_count,
                reel.duration,
                reel.published_at,
                reel.music_artist,
                reel.music_title,
                validatedData.project_id,
              ]
            )
            saved++
          } catch (error: any) {
            if (error.code === '23505') {
              duplicates++
            } else {
              log.error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∏–ª—Å–∞: ${error.message}`)
            }
          }
        }

        log.info(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î: ${saved} –Ω–æ–≤—ã—Ö, ${duplicates} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`)
        return { saved, duplicates, total: saved + duplicates }
      } finally {
        client.release()
      }
    })

    // Step 7: –ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è - —Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞ —Ä–∏–ª—Å—ã
    if (
      processedReels.length > 0 &&
      validatedData.requester_telegram_id !== 'auto-system'
    ) {
      await step.run('charge-for-reels', async () => {
        try {
          const totalCostStars =
            processedReels.length * instagramScrapingRates.costPerReelInStars

          log.info('üí∞ –°–ø–∏—Å–∞–Ω–∏–µ –∑–∞ —Ä–∏–ª—Å—ã:', {
            reelsCount: processedReels.length,
            costPerReel: instagramScrapingRates.costPerReelInStars,
            totalCost: totalCostStars,
            userId: validatedData.requester_telegram_id,
          })

          await updateUserBalance({
            telegram_id: validatedData.requester_telegram_id,
            bot_name: validatedData.bot_name || 'neuro_blogger_bot',
            amount: totalCostStars, // –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            operation_type: 'money_out_com', // –°–ø–∏—Å–∞–Ω–∏–µ —Å–æ —Å—á–µ—Ç–∞
            description: `Instagram –ø–∞—Ä—Å–∏–Ω–≥: ${processedReels.length} —Ä–∏–ª—Å–æ–≤ @${validatedData.username_or_hashtag}`,
          })

          log.info('‚úÖ –°–ø–∏—Å–∞–Ω–∏–µ –∑–∞ —Ä–∏–ª—Å—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ')
        } catch (error: any) {
          log.error('‚ùå –û—à–∏–±–∫–∞ —Å–ø–∏—Å–∞–Ω–∏—è –∑–∞ —Ä–∏–ª—Å—ã:', error.message)
          // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º
        }
      })
    }

    // Step 8: (–°—Ç–∞—Ä—ã–π —Ç—Ä–∏–≥–≥–µ—Ä —É–¥–∞–ª–µ–Ω - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä—è–º–æ–π —Ç—Ä–∏–≥–≥–µ—Ä –≤ –∫–æ–Ω—Ü–µ)

    // Step 9: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram (–µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ò —ç—Ç–æ –ù–ï auto-system)
    if (
      validatedData.requester_telegram_id &&
      validatedData.bot_name &&
      validatedData.requester_telegram_id !== 'auto-system'
    ) {
      await step.run('send-telegram-notification', async () => {
        try {
          const { getBotByName } = await import('@/core/bot')
          const { bot } = getBotByName(validatedData.bot_name!)

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º bot –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
          if (!bot || !bot.telegram) {
            log.error(
              '‚ùå Bot instance is invalid in instagramApifyScraper (telegram notification)'
            )
            return // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –Ω–æ –Ω–µ –ª–æ–º–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
          }

          const totalCostStars =
            processedReels.length * instagramScrapingRates.costPerReelInStars
          const totalCostRubles =
            processedReels.length * instagramScrapingRates.costPerReelInRubles

          const message = `
üé¨ –ü–∞—Ä—Å–∏–Ω–≥ Instagram —á–µ—Ä–µ–∑ Apify –∑–∞–≤–µ—Ä—à—ë–Ω!

üìå –ò—Å—Ç–æ—á–Ω–∏–∫: ${validatedData.username_or_hashtag}
üéØ –¢–∏–ø: ${validatedData.source_type === 'hashtag' ? '–•–µ—à—Ç–µ–≥' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
üìä –ù–∞–π–¥–µ–Ω–æ —Ä–∏–ª—Å–æ–≤: ${processedReels.length}
üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–æ–≤—ã—Ö: ${saveResult.saved}
üîÑ –ü—Ä–æ–ø—É—â–µ–Ω–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: ${saveResult.duplicates}

${
  processedReels.length > 0 &&
  validatedData.requester_telegram_id !== 'auto-system'
    ? `
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${totalCostStars.toFixed(2)} ‚≠ê (${totalCostRubles.toFixed(2)} ‚ÇΩ)
üí≥ –°–ø–∏—Å–∞–Ω–æ —Å –±–∞–ª–∞–Ω—Å–∞
`
    : ''
}

${
  processedReels.length > 0
    ? `
üèÜ –¢–æ–ø —Ä–∏–ª—Å –ø–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞–º:
${processedReels
  .sort((a, b) => b.views_count - a.views_count)
  .slice(0, 3)
  .map(
    (r, i) =>
      `${i + 1}. @${
        r.owner_username
      }: ${r.views_count.toLocaleString()} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤`
  )
  .join('\n')}
`
    : ''
}
‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö`

          await bot.telegram.sendMessage(
            validatedData.requester_telegram_id,
            message
          )

          log.info('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram')
        } catch (error) {
          log.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', error)
        }
      })
    }

    // –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const result = {
      success: true,
      source: validatedData.username_or_hashtag,
      sourceType: validatedData.source_type,
      projectId: validatedData.project_id,
      reelsFound: processedReels.length,
      reelsSaved: saveResult.saved,
      duplicatesSkipped: saveResult.duplicates,
      topReels: processedReels
        .sort((a, b) => b.views_count - a.views_count)
        .slice(0, 5)
        .map(r => ({
          username: r.owner_username,
          views: r.views_count,
          likes: r.likes_count,
          url: r.url,
        })),
      scrapedAt: new Date(),
    }

    log.info('üéâ Instagram Apify Scraper –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ', result)

    // –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–†–ò–ì–ì–ï–† –î–û–°–¢–ê–í–ö–ò - –ü–û–°–õ–ï –í–°–ï–• –û–ü–ï–†–ê–¶–ò–ô, –ù–û –ü–ï–†–ï–î RETURN!
    if (
      processedReels.length > 0 &&
      validatedData.requester_telegram_id === 'auto-system'
    ) {
      try {
        log.info('üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–†–ò–ì–ì–ï–†: –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞!', {
          reelsCount: processedReels.length,
          competitor: validatedData.username_or_hashtag,
          projectId: validatedData.project_id,
        })

        // –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ—Å—Ç–∞–≤–∫—É –ë–ï–ó step.run - –Ω–∞–ø—Ä—è–º—É—é!
        const deliveryResult = await inngest.send({
          name: 'competitor/delivery-reels',
          data: {
            competitor_username: validatedData.username_or_hashtag,
            project_id: validatedData.project_id,
            triggered_by: 'auto-parser',
          },
        })

        log.info('üéâ –£–°–ü–ï–•: –î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!', {
          eventId: deliveryResult.ids[0],
          competitor: validatedData.username_or_hashtag,
        })
      } catch (error: any) {
        log.error('üíÄ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–†–ò–ì–ì–ï–†–ê:', {
          error: error.message,
          stack: error.stack,
          competitor: validatedData.username_or_hashtag,
        })
      }
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
    if (process.env.ADMIN_CHAT_ID && validatedData.bot_name) {
      try {
        const { getBotByName } = await import('@/core/bot')
        const { bot } = getBotByName(validatedData.bot_name)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º bot –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        if (!bot || !bot.telegram) {
          log.error(
            '‚ùå Bot instance is invalid in instagramApifyScraper (admin notification)'
          )
          return // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É, –Ω–æ –Ω–µ –ª–æ–º–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
        }

        const adminMessage = `
üîß Instagram Apify Scraper –∑–∞–≤–µ—Ä—à—ë–Ω

üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:
‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: @${validatedData.username_or_hashtag}
‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —Ä–∏–ª—Å–æ–≤: ${processedReels.length}
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: ${saveResult.saved}
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${validatedData.requester_telegram_id}
‚Ä¢ Project ID: ${validatedData.project_id}

${
  processedReels.length > 0
    ? '‚úÖ –ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è: —Å–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'
    : 'üí∞ –ú–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏—è: —Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'
}
${
  processedReels.length > 0 &&
  validatedData.requester_telegram_id === 'auto-system'
    ? 'üì¨ –î–æ—Å—Ç–∞–≤–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—â–µ–Ω–∞'
    : ''
}
üéØ –§—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é
        `

        await bot.telegram.sendMessage(process.env.ADMIN_CHAT_ID, adminMessage)
        log.info('üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
      } catch (error: any) {
        log.error('‚ùå –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É:', error.message)
      }
    }

    return result
  }
)

// Helper —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
export async function triggerApifyInstagramScraping(data: any) {
  const result = await inngest.send({
    name: 'instagram/apify-scrape',
    data,
  })

  return {
    eventId: result.ids[0],
  }
}
