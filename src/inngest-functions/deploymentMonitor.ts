/**
 * –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–µ–ø–ª–æ—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ
 */

import { inngest } from '@/core/inngest/clients'
import { logger } from '@/utils/logger'
import { getBotByName } from '@/core/bot'
import {
  detectDeployment,
  notifyDeploymentComplete,
  waitForHealthySystem,
} from '@/utils/deploymentReporter'

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–µ–ø–ª–æ–µ–≤
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏
 */
export const deploymentAutoDetector = inngest.createFunction(
  {
    id: 'deployment-auto-detector',
    name: 'üîç Deployment Auto Detector',
    concurrency: 1,
  },
  { cron: '*/5 * * * *' }, // –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
  async ({ event, step, runId }) => {
    logger.info('üîç Deployment Auto Detector –∑–∞–ø—É—â–µ–Ω', { runId })

    // Step 1: –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é
    const currentVersion = await step.run('get-current-version', async () => {
      return (
        process.env.RAILWAY_DEPLOYMENT_ID ||
        process.env.DOCKER_IMAGE_TAG ||
        process.env.npm_package_version ||
        'unknown'
      )
    })

    // Step 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ –≤–µ—Ä—Å–∏—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    const versionChanged = await step.run('check-version-change', async () => {
      try {
        // –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å Redis/–ë–î
        // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞
        const uptime = process.uptime()

        // –ï—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –º–µ–Ω–µ–µ 10 –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –±—ã–ª –¥–µ–ø–ª–æ–π
        return uptime < 10 * 60 // 10 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
      } catch (error) {
        return false
      }
    })

    if (versionChanged) {
      // Step 3: –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π –¥–µ–ø–ª–æ–π
      const deploymentInfo = await step.run('detect-deployment', async () => {
        return await detectDeployment()
      })

      if (deploymentInfo) {
        // Step 4: –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –¥–µ–ø–ª–æ–µ
        await step.run('notify-deployment', async () => {
          await notifyDeploymentComplete(deploymentInfo)
        })

        // Step 5: –ó–∞–ø—É—Å–∫–∞–µ–º post-deploy –ø—Ä–æ–≤–µ—Ä–∫–∏
        await step.run('trigger-post-deploy-checks', async () => {
          await inngest.send({
            name: 'deployment/completed',
            data: {
              version: deploymentInfo.version,
              commit: deploymentInfo.commit,
              branch: deploymentInfo.branch,
              deployedAt: deploymentInfo.startedAt instanceof Date 
                ? deploymentInfo.startedAt.toISOString()
                : new Date(deploymentInfo.startedAt || Date.now()).toISOString(),
              environment: deploymentInfo.environment,
              autoDetected: true,
            },
          })
        })

        logger.info('üöÄ Deployment detected and processed', {
          version: deploymentInfo.version,
          environment: deploymentInfo.environment,
        })
      }
    }

    return {
      success: true,
      currentVersion,
      versionChanged,
      timestamp: new Date(),
    }
  }
)

/**
 * –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –¥–µ–ø–ª–æ—è
 */
export const deploymentRecoverySystem = inngest.createFunction(
  {
    id: 'deployment-recovery-system',
    name: 'üõ† Deployment Recovery System',
    concurrency: 1,
  },
  { event: 'deployment/recovery-needed' },
  async ({ event, step }) => {
    const { version, failureRate, criticalEndpoints } = event.data

    logger.info('üõ† Deployment Recovery System –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω', {
      version,
      failureRate,
      criticalEndpoints,
    })

    // Step 1: –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    await step.run('notify-recovery-start', async () => {
      const { bot } = getBotByName('neuro_blogger_bot')

      const message =
        `üõ† –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ó–ê–ü–£–©–ï–ù–û\n\n` +
        `üì¶ –ü—Ä–æ–±–ª–µ–º–Ω–∞—è –≤–µ—Ä—Å–∏—è: ${version}\n` +
        `üìä –ü—Ä–æ—Ü–µ–Ω—Ç –Ω–µ—É–¥–∞—á: ${failureRate}%\n` +
        `‚ö†Ô∏è –ö—Ä–∏—Ç–∏—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã: ${
          criticalEndpoints?.join(', ') || '–í—Å–µ'
        }\n\n` +
        `üîÑ –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...`

      await bot.api.sendMessage(process.env.ADMIN_CHAT_ID!, message)
    })

    // Step 2: –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã
    const restartResult = await step.run('restart-services', async () => {
      try {
        // –í Railway –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
        if (process.env.RAILWAY_TOKEN) {
          // –ó–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ Railway API
          logger.info('Attempting to restart Railway service')
        }

        // –î–ª—è Docker Compose
        if (process.env.DOCKER_COMPOSE_PROJECT) {
          // –ó–¥–µ—Å—å –±—ã–ª –±—ã –≤—ã–∑–æ–≤ Docker API
          logger.info('Attempting to restart Docker services')
        }

        return {
          success: true,
          method: 'service_restart',
          message: '–°–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã',
        }
      } catch (error) {
        return {
          success: false,
          error: error.message,
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã',
        }
      }
    })

    // Step 3: –ñ–¥–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
    await step.sleep('wait-for-stabilization', '2m')

    // Step 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    const healthCheckResult = await step.run(
      'check-recovery-result',
      async () => {
        return await waitForHealthySystem(5) // 5 –º–∏–Ω—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è
      }
    )

    // Step 5: –ï—Å–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–º–æ–≥–ª–æ, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ—Ç–∫–∞—Ç
    if (!healthCheckResult.healthy) {
      await step.run('recommend-rollback', async () => {
        const { bot } = getBotByName('neuro_blogger_bot')

        const message =
          `üö® –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ù–ï –ü–û–ú–û–ì–õ–û!\n\n` +
          `‚ùå ${healthCheckResult.message}\n\n` +
          `üìã –†–ï–ö–û–ú–ï–ù–î–£–ï–ú–´–ï –î–ï–ô–°–¢–í–ò–Ø:\n` +
          `1. üîÑ –û—Ç–∫–∞—Ç–∏—Ç—å –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏\n` +
          `2. üîç –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –¥–µ–ø–ª–æ—è\n` +
          `3. üõ† –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–¥–µ\n` +
          `4. üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ staging\n\n` +
          `‚ö° –¢–†–ï–ë–£–ï–¢–°–Ø –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ï –í–ú–ï–®–ê–¢–ï–õ–¨–°–¢–í–û!`

        await bot.api.sendMessage(process.env.ADMIN_CHAT_ID!, message)

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        await bot.api.sendMessage(
          process.env.ADMIN_TELEGRAM_ID!,
          `üö® –ö–†–ò–¢–ò–ß–ù–û! –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è ${version} –Ω–µ —É–¥–∞–ª–æ—Å—å! –¢—Ä–µ–±—É–µ—Ç—Å—è –æ—Ç–∫–∞—Ç!`
        )
      })
    } else {
      // Step 6: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
      await step.run('notify-recovery-success', async () => {
        const { bot } = getBotByName('neuro_blogger_bot')

        const message =
          `‚úÖ –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –£–°–ü–ï–®–ù–û!\n\n` +
          `üì¶ –í–µ—Ä—Å–∏—è: ${version}\n` +
          `üõ† –ú–µ—Ç–æ–¥: ${restartResult.method}\n` +
          `‚è± ${healthCheckResult.message}\n\n` +
          `üéâ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ!`

        await bot.api.sendMessage(process.env.ADMIN_CHAT_ID!, message)
      })
    }

    return {
      success: true,
      recovered: healthCheckResult.healthy,
      restartResult,
      healthCheckResult,
      timestamp: new Date(),
    }
  }
)

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö
 */
export const triggerRecoveryIfNeeded = async (
  version: string,
  failureRate: number,
  criticalEndpoints?: string[]
): Promise<void> => {
  // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ–Ω—Ç –Ω–µ—É–¥–∞—á > 50%
  if (failureRate > 50) {
    await inngest.send({
      name: 'deployment/recovery-needed',
      data: {
        version,
        failureRate,
        criticalEndpoints,
        timestamp: new Date().toISOString(),
      },
    })

    logger.warn('üõ† Recovery system triggered', {
      version,
      failureRate,
      criticalEndpoints,
    })
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç Railway –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–µ–ø–ª–æ–µ
 */
export const railwayDeploymentWebhook = inngest.createFunction(
  {
    id: 'railway-deployment-webhook',
    name: 'üöÇ Railway Deployment Webhook',
  },
  { event: 'railway/deployment.webhook' },
  async ({ event, step }) => {
    const { status, deploymentId, service, environment } = event.data

    logger.info('üöÇ Railway deployment webhook received', {
      status,
      deploymentId,
      service,
    })

    if (status === 'SUCCESS') {
      // –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–µ–Ω - –∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏
      await step.run('trigger-post-deploy-checks', async () => {
        await inngest.send({
          name: 'deployment/completed',
          data: {
            version: deploymentId,
            deployedAt: new Date().toISOString(),
            environment,
            service,
            source: 'railway_webhook',
          },
        })
      })
    } else if (status === 'FAILED') {
      // –î–µ–ø–ª–æ–π –Ω–µ—É–¥–∞—á–µ–Ω - —É–≤–µ–¥–æ–º–ª—è–µ–º
      await step.run('notify-failed-deployment', async () => {
        const { bot } = getBotByName('neuro_blogger_bot')

        const message =
          `‚ùå –î–ï–ü–õ–û–ô –ù–ï–£–î–ê–ß–ï–ù\n\n` +
          `üöÇ Railway Service: ${service}\n` +
          `üì¶ Deployment ID: ${deploymentId}\n` +
          `üåç Environment: ${environment}\n` +
          `üïê –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n\n` +
          `üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Railway –¥–ª—è –¥–µ—Ç–∞–ª–µ–π\n` +
          `#deployment #failed #railway`

        await bot.api.sendMessage(process.env.ADMIN_CHAT_ID!, message)
      })
    }

    return {
      success: true,
      status,
      deploymentId,
      processed: true,
    }
  }
)
