import { inngest } from '@/core/inngest/clients'
import { logger } from '@/utils/logger'
import { getUserBalance } from '@/core/supabase/getUserBalance'
import { getUserByTelegramId } from '@/core/supabase'
import { getBotByName } from '@/core/bot'
import { processSequentialMorphing } from '@/core/kling/pairwiseMorphing'
import { MorphingType } from '@/interfaces/morphing.interface'
import fs from 'fs'

// üîß –ù–û–í–´–ô –ò–ù–¢–ï–†–§–ï–ô–°: –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º, –Ω–µ ZIP
interface MorphingJobData {
  telegram_id: string
  image_count: number
  morphing_type: 'seamless' | 'loop'
  model: string
  is_ru: boolean
  bot_name: string
  job_id: string
  // üéØ –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ú–∞—Å—Å–∏–≤ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º –≤–º–µ—Å—Ç–æ zip_file_path
  image_files: Array<{
    filename: string
    path: string
    order: number
  }>
  extraction_path: string // –ü—É—Ç—å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
}

export const morphImages = inngest.createFunction(
  {
    id: 'morph-images',
    name: 'üß¨ Morph Images', // –î–æ–±–∞–≤–ª—è–µ–º emoji –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∫ —É –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
    retries: 3,
  },
  { event: 'morph/images.requested' },
  async ({ event, step }) => {
    const {
      telegram_id,
      morphing_type,
      model,
      is_ru,
      bot_name,
      job_id,
      image_files,
      extraction_path,
    } = event.data as MorphingJobData

    logger.info('üß¨ Morphing job started:', {
      telegram_id,
      job_id,
      image_files_count: image_files.length,
      morphing_type,
      model,
    })

    // –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await step.run('check-user-exists', async () => {
      const user = await getUserByTelegramId(telegram_id)

      if (!user) {
        throw new Error(`User ${telegram_id} does not exist`)
      }

      logger.info('‚úÖ User exists:', { telegram_id })
      return { exists: true, user }
    })

    // –®–ê–ì 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await step.run('check-balance', async () => {
      const balance = await getUserBalance(telegram_id, bot_name)
      const requiredStars = 50 // –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ—Ä—Ñ–∏–Ω–≥–∞

      if (balance < requiredStars) {
        throw new Error(`Insufficient balance: ${balance} < ${requiredStars}`)
      }

      logger.info('‚úÖ Balance sufficient:', {
        telegram_id,
        balance,
        required: requiredStars,
      })
      return { balance, required: requiredStars }
    })

    // –®–ê–ì 3: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ!)
    await step.run('notify-start', async () => {
      const { bot, error } = getBotByName(bot_name)
      if (error || !bot) {
        throw new Error(`Bot ${bot_name} not found: ${error}`)
      }

      const startMessage = is_ru
        ? `üß¨ –ù–∞—á–∏–Ω–∞—é –º–æ—Ä—Ñ–∏–Ω–≥ ${image_files.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\nJob ID: ${job_id}`
        : `üß¨ Starting morphing of ${image_files.length} images...\nJob ID: ${job_id}`

      await bot.telegram.sendMessage(telegram_id, startMessage)

      logger.info('‚úÖ Start notification sent:', { telegram_id, job_id })
      return { notified: true }
    })

    // –®–ê–ì 4: üöÄ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–´–ô –ú–û–†–§–ò–ù–ì –° –û–†–ö–ï–°–¢–†–ê–¶–ò–ï–ô
    const morphingResult = await step.run(
      'execute-parallel-morphing',
      async () => {
        logger.info('üß¨ Starting parallel morphing orchestration:', {
          telegram_id,
          job_id,
          image_files_count: image_files.length,
        })

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—É—Ç–∏ —Ñ–∞–π–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç ExtractedImage –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–≥–∏–∫–∏
        const extractedImages = image_files.map(file => ({
          filename: file.filename,
          originalName: file.filename,
          path: file.path,
          order: file.order,
        }))

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ª–æ–≥–∏–∫—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –º–æ—Ä—Ñ–∏–Ω–≥–∞
        // –ü—Ä–∏–≤–æ–¥–∏–º —Ç–∏–ø morphing_type –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É enum
        const morphingTypeEnum =
          morphing_type === 'seamless'
            ? MorphingType.SEAMLESS
            : MorphingType.LOOP

        const result = await processSequentialMorphing(
          extractedImages,
          morphingTypeEnum,
          telegram_id
        )

        if (!result.success) {
          throw new Error(`Morphing failed: ${result.error}`)
        }

        logger.info('‚úÖ Parallel morphing completed:', {
          telegram_id,
          job_id,
          video_url: result.video_url,
          processing_time: result.processing_time,
        })

        return {
          success: true,
          job_id: result.job_id,
          video_url: result.video_url,
          processing_time: result.processing_time,
        }
      }
    )

    // –®–ê–ì 5: –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    await step.run('cleanup-temp-files', async () => {
      try {
        // –û—á–∏—â–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        if (fs.existsSync(extraction_path)) {
          await fs.promises.rm(extraction_path, {
            recursive: true,
            force: true,
          })
          logger.info('‚úÖ Temporary extraction path cleaned:', {
            extraction_path,
          })
        }

        return { cleaned: true, path: extraction_path }
      } catch (error) {
        logger.error('‚ö†Ô∏è Failed to clean temporary files:', {
          extraction_path,
          error: error instanceof Error ? error.message : String(error),
        })
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –æ—á–∏—Å—Ç–∫–∏
        return { cleaned: false, error: String(error) }
      }
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const deliverResult = await step.run('deliver-result', async () => {
      logger.info('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–æ—Ä—Ñ–∏–Ω–≥ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', {
        description: 'Delivering morphing video to user',
        telegram_id,
        video_url: morphingResult.video_url,
        bot_name,
      })

      const { bot, error } = getBotByName(bot_name)
      if (error || !bot) {
        throw new Error(`Bot ${bot_name} not found: ${error}`)
      }

      // üé¨ –†–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞
      const botMention =
        bot_name === 'clip_maker_neuro_bot'
          ? '@clip_maker_neuro_bot'
          : '@ai_koshey_bot'
      const advertisementText = `üß¨ **–ú–æ—Ä—Ñ–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n‚ú® –°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é ${botMention}\nüéØ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ~5 –º–∏–Ω—É—Ç\nüí´ –ö–∞—á–µ—Å—Ç–≤–æ: Full HD 1080p\n\nüì• **–°–∫–∞—á–∞—Ç—å:** –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç\nüëÄ **–ü—Ä–æ—Å–º–æ—Ç—Ä:** –í–∏–¥–µ–æ –≤—ã—à–µ\n\nüöÄ –°–æ–∑–¥–∞–≤–∞–π –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –Ω–∞—à–∏–º–∏ –±–æ—Ç–∞–º–∏!`

      try {
        // üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (—Å –ø—Ä–µ–≤—å—é)
        await bot.telegram.sendVideo(telegram_id, morphingResult.video_url, {
          caption: advertisementText,
          parse_mode: 'Markdown',
          width: 1920, // Full HD —à–∏—Ä–∏–Ω–∞
          height: 1080, // Full HD –≤—ã—Å–æ—Ç–∞
          duration: 5, // 5 —Å–µ–∫—É–Ω–¥
          supports_streaming: true, // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
        })

        // üìé –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        const fileDownloadText = `üìÅ **–§–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è**\n\nüé¨ –ú–æ—Ä—Ñ–∏–Ω–≥ –≤–∏–¥–µ–æ –≤ –≤—ã—Å–æ–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ\nüíæ –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n\n${botMention} - —Å–æ–∑–¥–∞–µ–º –±—É–¥—É—â–µ–µ –≤–º–µ—Å—Ç–µ!`
        await bot.telegram.sendDocument(telegram_id, morphingResult.video_url, {
          caption: fileDownloadText,
          parse_mode: 'Markdown',
        })

        logger.info('‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', {
          telegram_id,
          delivered_as: 'video_and_document',
          bot_name,
        })

        return { delivered: true, method: 'video_and_document' }
      } catch (deliveryError) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤–∏–¥–µ–æ:', {
          telegram_id,
          error:
            deliveryError instanceof Error
              ? deliveryError.message
              : String(deliveryError),
        })

        // –§–æ–ª–ª–±—ç–∫: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ—Ç—è –±—ã —Å—Å—ã–ª–∫—É
        await bot.telegram.sendMessage(
          telegram_id,
          `üé¨ **–ú–æ—Ä—Ñ–∏–Ω–≥ –≥–æ—Ç–æ–≤!**\n\nüìé **–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ:** ${morphingResult.video_url}\n\n‚ú® –°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é ${botMention}`,
          { parse_mode: 'Markdown' }
        )

        return { delivered: true, method: 'link_fallback' }
      }
    })

    // üîß –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ (–ë–ï–ó –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤)
    const finalResult = {
      job_id,
      telegram_id,
      status: 'completed',
      morphing_result: {
        success: morphingResult.success,
        job_id: morphingResult.job_id,
        video_url: morphingResult.video_url,
        processing_time: morphingResult.processing_time,
      },
      delivery: deliverResult,
      processing_time: Date.now() - new Date(event.ts).getTime(),
    }

    logger.info('üéâ Morphing job completed successfully:', finalResult)
    return finalResult
  }
)
