import { inngest } from '@/core/inngest/clients'
import { logger } from '@/utils/logger'
import { getUserBalance } from '@/core/supabase/getUserBalance'
import { getUserByTelegramId } from '@/core/supabase'
import { getBotByName } from '@/core/bot'
import { createKlingMorphingVideo } from '@/core/kling'
import { MorphingType } from '@/interfaces/morphing.interface'
import fs from 'fs'
import path from 'path'

// üîß –ù–û–í–´–ô –ò–ù–¢–ï–†–§–ï–ô–°: –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º, –Ω–µ ZIP
interface MorphingJobData {
  telegram_id: string
  image_count: number
  morphing_type: 'seamless' | 'loop'
  model: string
  is_ru: boolean
  bot_name: string
  job_id: string
  // üéØ –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ú–∞—Å—Å–∏–≤ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º –≤–º–µ—Å—Ç–æ zip_file_path
  image_files: Array<{
    filename: string
    path: string
    order: number
  }>
  extraction_path: string // –ü—É—Ç—å –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
}

export const morphImages = inngest.createFunction(
  {
    id: 'morph-images',
    name: 'üß¨ Morph Images', // –î–æ–±–∞–≤–ª—è–µ–º emoji –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∫ —É –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
    retries: 3,
  },
  { event: 'morph/images.requested' },
  async ({ event, step }) => {
    const {
      telegram_id,
      morphing_type,
      model,
      is_ru,
      bot_name,
      job_id,
      image_files,
      extraction_path,
    } = event.data as MorphingJobData

    logger.info('üß¨ Morphing job started:', {
      telegram_id,
      job_id,
      image_files_count: image_files.length,
      morphing_type,
      model,
    })

    // –®–ê–ì 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await step.run('check-user-exists', async () => {
      const user = await getUserByTelegramId(telegram_id)

      if (!user) {
        throw new Error(`User ${telegram_id} does not exist`)
      }

      logger.info('‚úÖ User exists:', { telegram_id })
      return { exists: true, user }
    })

    // –®–ê–ì 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await step.run('check-balance', async () => {
      const balance = await getUserBalance(telegram_id, bot_name)
      const requiredStars = 50 // –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–æ—Ä—Ñ–∏–Ω–≥–∞

      if (balance < requiredStars) {
        throw new Error(`Insufficient balance: ${balance} < ${requiredStars}`)
      }

      logger.info('‚úÖ Balance sufficient:', {
        telegram_id,
        balance,
        required: requiredStars,
      })
      return { balance, required: requiredStars }
    })

    // –®–ê–ì 3: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–æ–ª—å—à–∏–µ –¥–∞–Ω–Ω—ã–µ!)
    await step.run('notify-start', async () => {
      const { bot, error } = getBotByName(bot_name)
      if (error || !bot) {
        throw new Error(`Bot ${bot_name} not found: ${error}`)
      }

      const startMessage = is_ru
        ? `üß¨ –ù–∞—á–∏–Ω–∞—é –º–æ—Ä—Ñ–∏–Ω–≥ ${image_files.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...\nJob ID: ${job_id}`
        : `üß¨ Starting morphing of ${image_files.length} images...\nJob ID: ${job_id}`

      await bot.telegram.sendMessage(telegram_id, startMessage)

      logger.info('‚úÖ Start notification sent:', { telegram_id, job_id })
      return { notified: true }
    })

    // –®–ê–ì 4: üöÄ –ü–û–®–ê–ì–û–í–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ú–û–†–§–ò–ù–ì –ü–ê–†
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—É—Ç–∏ —Ñ–∞–π–ª–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç ExtractedImage –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ª–æ–≥–∏–∫–∏
    const extractedImages = image_files.map(file => ({
      filename: file.filename,
      originalName: file.filename,
      path: file.path,
      order: file.order,
    }))

    // üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º extraction_path –∏ –≤—Å–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    logger.info('üß¨ üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º:', {
      telegram_id,
      extraction_path,
      extraction_path_exists: fs.existsSync(extraction_path),
      cwd: process.cwd(),
      image_files_received: image_files.length,
      extracted_images_paths: extractedImages.map(img => ({
        filename: img.filename,
        path: img.path,
        exists: fs.existsSync(img.path),
        absolute_path: path.resolve(img.path),
      })),
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ extraction_path —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync(extraction_path)) {
      const error = `Extraction path does not exist: ${extraction_path}`
      logger.error('üß¨ ‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', {
        telegram_id,
        extraction_path,
        cwd: process.cwd(),
        absolute_extraction_path: path.resolve(extraction_path),
      })
      throw new Error(error)
    }

    // –ü—Ä–∏–≤–æ–¥–∏–º —Ç–∏–ø morphing_type –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É enum
    const morphingTypeEnum =
      morphing_type === 'seamless' ? MorphingType.SEAMLESS : MorphingType.LOOP

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ –ø–∞—Ä –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
    const totalPairs =
      extractedImages.length -
      1 +
      (morphingTypeEnum === MorphingType.LOOP && extractedImages.length > 2
        ? 1
        : 0)
    logger.info('üß¨ üéØ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—à–∞–≥–æ–≤—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –º–æ—Ä—Ñ–∏–Ω–≥ –ø–∞—Ä:', {
      telegram_id,
      total_images: extractedImages.length,
      total_pairs: totalPairs,
      morphing_type: morphingTypeEnum,
      includes_loop:
        morphingTypeEnum === MorphingType.LOOP && extractedImages.length > 2,
    })

    // –®–ê–ì 4.1: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä—ã –°–¢–ê–¢–ò–ß–ï–°–ö–ò (–±–µ–∑ —Ü–∏–∫–ª–æ–≤!)
    const pairVideoUrls: string[] = []

    // –ü–ê–†–ê 1: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 1 -> –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 2 (–≤—Å–µ–≥–¥–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–ª—è 2+ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
    const pair1VideoUrl = await step.run('process-pair-1', async () => {
      const image1 = extractedImages[0]
      const image2 = extractedImages[1]

      logger.info(`üß¨ ‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä—É 1/${totalPairs}:`, {
        telegram_id,
        pair_index: 1,
        total_pairs: totalPairs,
        from: image1.filename,
        to: image2.filename,
        image1_path: image1.path,
        image2_path: image2.path,
      })

      // üîç –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø –§–ê–ô–õ–û–í –ü–ï–†–ï–î –û–ë–†–ê–ë–û–¢–ö–û–ô
      if (!fs.existsSync(image1.path)) {
        const error = `Image 1 file does not exist: ${image1.path}`
        logger.error('üß¨ ‚ùå –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 1 –Ω–µ –Ω–∞–π–¥–µ–Ω:', {
          telegram_id,
          pair_index: 1,
          expected_path: image1.path,
          cwd: process.cwd(),
          absolute_path: path.resolve(image1.path),
        })
        throw new Error(error)
      }

      if (!fs.existsSync(image2.path)) {
        const error = `Image 2 file does not exist: ${image2.path}`
        logger.error('üß¨ ‚ùå –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 2 –Ω–µ –Ω–∞–π–¥–µ–Ω:', {
          telegram_id,
          pair_index: 1,
          expected_path: image2.path,
          cwd: process.cwd(),
          absolute_path: path.resolve(image2.path),
        })
        throw new Error(error)
      }

      logger.info(`üß¨ ‚úÖ –§–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–∞—Ä—ã 1:`, {
        telegram_id,
        image1_size: fs.statSync(image1.path).size,
        image2_size: fs.statSync(image2.path).size,
      })

      const result = await createKlingMorphingVideo(
        [image1, image2],
        morphingTypeEnum,
        telegram_id
      )

      if (!result.success || !result.video_url) {
        throw new Error(`Pair 1 morphing failed: ${result.error}`)
      }

      logger.info(`‚úÖ –ü–∞—Ä–∞ 1/${totalPairs} –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`, {
        telegram_id,
        pair_index: 1,
        video_url: result.video_url,
      })

      return result.video_url
    })

    pairVideoUrls.push(pair1VideoUrl)

    // –ü–ê–†–ê 2: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 2 -> –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 3 (–µ—Å–ª–∏ –µ—Å—Ç—å 3+ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
    let pair2VideoUrl: string | null = null
    if (extractedImages.length >= 3) {
      pair2VideoUrl = await step.run('process-pair-2', async () => {
        const image1 = extractedImages[1]
        const image2 = extractedImages[2]

        logger.info(`üß¨ ‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä—É 2/${totalPairs}:`, {
          telegram_id,
          pair_index: 2,
          total_pairs: totalPairs,
          from: image1.filename,
          to: image2.filename,
          image1_path: image1.path,
          image2_path: image2.path,
        })

        // üîç –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø –§–ê–ô–õ–û–í –ü–ï–†–ï–î –û–ë–†–ê–ë–û–¢–ö–û–ô
        if (!fs.existsSync(image1.path)) {
          const error = `Image 1 file does not exist: ${image1.path}`
          logger.error('üß¨ ‚ùå –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 1 –Ω–µ –Ω–∞–π–¥–µ–Ω:', {
            telegram_id,
            pair_index: 2,
            expected_path: image1.path,
            cwd: process.cwd(),
            absolute_path: path.resolve(image1.path),
          })
          throw new Error(error)
        }

        if (!fs.existsSync(image2.path)) {
          const error = `Image 2 file does not exist: ${image2.path}`
          logger.error('üß¨ ‚ùå –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 2 –Ω–µ –Ω–∞–π–¥–µ–Ω:', {
            telegram_id,
            pair_index: 2,
            expected_path: image2.path,
            cwd: process.cwd(),
            absolute_path: path.resolve(image2.path),
          })
          throw new Error(error)
        }

        logger.info(`üß¨ ‚úÖ –§–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–∞—Ä—ã 2:`, {
          telegram_id,
          image1_size: fs.statSync(image1.path).size,
          image2_size: fs.statSync(image2.path).size,
        })

        const result = await createKlingMorphingVideo(
          [image1, image2],
          morphingTypeEnum,
          telegram_id
        )

        if (!result.success || !result.video_url) {
          throw new Error(`Pair 2 morphing failed: ${result.error}`)
        }

        logger.info(`‚úÖ –ü–∞—Ä–∞ 2/${totalPairs} –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`, {
          telegram_id,
          pair_index: 2,
          video_url: result.video_url,
        })

        return result.video_url
      })

      if (pair2VideoUrl) {
        pairVideoUrls.push(pair2VideoUrl)
      }
    }

    // –ü–ê–†–ê 3: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 3 -> –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 4 (–µ—Å–ª–∏ –µ—Å—Ç—å 4+ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
    let pair3VideoUrl: string | null = null
    if (extractedImages.length >= 4) {
      pair3VideoUrl = await step.run('process-pair-3', async () => {
        const image1 = extractedImages[2]
        const image2 = extractedImages[3]

        logger.info(`üß¨ ‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä—É 3/${totalPairs}:`, {
          telegram_id,
          pair_index: 3,
          total_pairs: totalPairs,
          from: image1.filename,
          to: image2.filename,
          image1_path: image1.path,
          image2_path: image2.path,
        })

        // üîç –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø –§–ê–ô–õ–û–í –ü–ï–†–ï–î –û–ë–†–ê–ë–û–¢–ö–û–ô
        if (!fs.existsSync(image1.path)) {
          const error = `Image 1 file does not exist: ${image1.path}`
          logger.error('üß¨ ‚ùå –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 1 –Ω–µ –Ω–∞–π–¥–µ–Ω:', {
            telegram_id,
            pair_index: 3,
            expected_path: image1.path,
            cwd: process.cwd(),
            absolute_path: path.resolve(image1.path),
          })
          throw new Error(error)
        }

        if (!fs.existsSync(image2.path)) {
          const error = `Image 2 file does not exist: ${image2.path}`
          logger.error('üß¨ ‚ùå –§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è 2 –Ω–µ –Ω–∞–π–¥–µ–Ω:', {
            telegram_id,
            pair_index: 3,
            expected_path: image2.path,
            cwd: process.cwd(),
            absolute_path: path.resolve(image2.path),
          })
          throw new Error(error)
        }

        logger.info(`üß¨ ‚úÖ –§–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è –ø–∞—Ä—ã 3:`, {
          telegram_id,
          image1_size: fs.statSync(image1.path).size,
          image2_size: fs.statSync(image2.path).size,
        })

        const result = await createKlingMorphingVideo(
          [image1, image2],
          morphingTypeEnum,
          telegram_id
        )

        if (!result.success || !result.video_url) {
          throw new Error(`Pair 3 morphing failed: ${result.error}`)
        }

        logger.info(`‚úÖ –ü–∞—Ä–∞ 3/${totalPairs} –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`, {
          telegram_id,
          pair_index: 3,
          video_url: result.video_url,
        })

        return result.video_url
      })

      if (pair3VideoUrl) {
        pairVideoUrls.push(pair3VideoUrl)
      }
    }

    // –ü–ê–†–ê 4: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 4 -> –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 5 (–µ—Å–ª–∏ –µ—Å—Ç—å 5+ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
    let pair4VideoUrl: string | null = null
    if (extractedImages.length >= 5) {
      pair4VideoUrl = await step.run('process-pair-4', async () => {
        const image1 = extractedImages[3]
        const image2 = extractedImages[4]

        logger.info(`üß¨ ‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä—É 4/${totalPairs}:`, {
          telegram_id,
          pair_index: 4,
          total_pairs: totalPairs,
          from: image1.filename,
          to: image2.filename,
        })

        const result = await createKlingMorphingVideo(
          [image1, image2],
          morphingTypeEnum,
          telegram_id
        )

        if (!result.success || !result.video_url) {
          throw new Error(`Pair 4 morphing failed: ${result.error}`)
        }

        logger.info(`‚úÖ –ü–∞—Ä–∞ 4/${totalPairs} –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`, {
          telegram_id,
          pair_index: 4,
          video_url: result.video_url,
        })

        return result.video_url
      })

      if (pair4VideoUrl) {
        pairVideoUrls.push(pair4VideoUrl)
      }
    }

    // –ü–ê–†–ê 5: –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 5 -> –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 6 (–µ—Å–ª–∏ –µ—Å—Ç—å 6+ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
    let pair5VideoUrl: string | null = null
    if (extractedImages.length >= 6) {
      pair5VideoUrl = await step.run('process-pair-5', async () => {
        const image1 = extractedImages[4]
        const image2 = extractedImages[5]

        logger.info(`üß¨ ‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞—Ä—É 5/${totalPairs}:`, {
          telegram_id,
          pair_index: 5,
          total_pairs: totalPairs,
          from: image1.filename,
          to: image2.filename,
        })

        const result = await createKlingMorphingVideo(
          [image1, image2],
          morphingTypeEnum,
          telegram_id
        )

        if (!result.success || !result.video_url) {
          throw new Error(`Pair 5 morphing failed: ${result.error}`)
        }

        logger.info(`‚úÖ –ü–∞—Ä–∞ 5/${totalPairs} –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`, {
          telegram_id,
          pair_index: 5,
          video_url: result.video_url,
        })

        return result.video_url
      })

      if (pair5VideoUrl) {
        pairVideoUrls.push(pair5VideoUrl)
      }
    }

    // TODO: –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –ø–∞—Ä –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (–ø–æ–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –¥–æ 6 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π)
    if (extractedImages.length > 6) {
      logger.warn(
        '‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 6:',
        {
          telegram_id,
          total_images: extractedImages.length,
          supported_images: 6,
        }
      )
    }

    // –®–ê–ì 4.2: –ï—Å–ª–∏ LOOP - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–º—ã–∫–∞—é—â—É—é –ø–∞—Ä—É (–ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å –ø–µ—Ä–≤—ã–º)
    let loopVideoUrl: string | null = null
    if (morphingTypeEnum === MorphingType.LOOP && extractedImages.length > 2) {
      const actualTotalPairs = Math.min(extractedImages.length - 1, 5) // –ú–∞–∫—Å–∏–º—É–º 5 –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø–∞—Ä
      const loopPairIndex = actualTotalPairs + 1

      loopVideoUrl = await step.run('process-loop-pair', async () => {
        const lastProcessedIndex = Math.min(extractedImages.length - 1, 5) // –ò–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const lastImage = extractedImages[lastProcessedIndex]
        const firstImage = extractedImages[0]

        logger.info(
          `üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º LOOP –ø–∞—Ä—É ${loopPairIndex}/${totalPairs}:`,
          {
            telegram_id,
            pair_index: loopPairIndex,
            total_pairs: totalPairs,
            from: lastImage.filename,
            to: firstImage.filename,
            lastImage_path: lastImage.path,
            firstImage_path: firstImage.path,
          }
        )

        // üîç –ü–†–û–í–ï–†–ö–ê –°–£–©–ï–°–¢–í–û–í–ê–ù–ò–Ø –§–ê–ô–õ–û–í –î–õ–Ø LOOP –ü–ê–†–´
        if (!fs.existsSync(lastImage.path)) {
          const error = `Last image file does not exist: ${lastImage.path}`
          logger.error('üß¨ ‚ùå –§–∞–π–ª –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω:', {
            telegram_id,
            expected_path: lastImage.path,
            cwd: process.cwd(),
            absolute_path: path.resolve(lastImage.path),
          })
          throw new Error(error)
        }

        if (!fs.existsSync(firstImage.path)) {
          const error = `First image file does not exist: ${firstImage.path}`
          logger.error('üß¨ ‚ùå –§–∞–π–ª –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω:', {
            telegram_id,
            expected_path: firstImage.path,
            cwd: process.cwd(),
            absolute_path: path.resolve(firstImage.path),
          })
          throw new Error(error)
        }

        logger.info(`üîÑ ‚úÖ –§–∞–π–ª—ã –¥–ª—è LOOP –ø–∞—Ä—ã –Ω–∞–π–¥–µ–Ω—ã:`, {
          telegram_id,
          lastImage_size: fs.statSync(lastImage.path).size,
          firstImage_size: fs.statSync(firstImage.path).size,
        })

        const result = await createKlingMorphingVideo(
          [lastImage, firstImage],
          morphingTypeEnum,
          telegram_id
        )

        if (!result.success || !result.video_url) {
          throw new Error(`Loop pair morphing failed: ${result.error}`)
        }

        logger.info(`‚úÖ LOOP –ø–∞—Ä–∞ ${loopPairIndex}/${totalPairs} –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`, {
          telegram_id,
          video_url: result.video_url,
        })

        return result.video_url
      })

      if (loopVideoUrl) {
        pairVideoUrls.push(loopVideoUrl)
      }
    }

    // –®–ê–ì 5: üé¨ –°–ö–õ–ï–ô–ö–ê –í–°–ï–• –í–ò–î–ï–û
    const finalVideoResult = await step.run(
      'concatenate-all-videos',
      async () => {
        logger.info('üé¨ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–ª–µ–π–∫—É –≤—Å–µ—Ö –≤–∏–¥–µ–æ:', {
          telegram_id,
          videos_to_concatenate: pairVideoUrls.length,
          video_urls: pairVideoUrls,
        })

        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–∫–ª–µ–π–∫–∏
        const tempDir = path.join(
          __dirname,
          '../../../tmp/morphing',
          telegram_id,
          `final_concatenation_${Date.now()}`
        )

        await fs.promises.mkdir(tempDir, { recursive: true })

        try {
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –≤–∏–¥–µ–æ –ª–æ–∫–∞–ª—å–Ω–æ
          const localVideoPaths: string[] = []
          for (let i = 0; i < pairVideoUrls.length; i++) {
            const videoUrl = pairVideoUrls[i]
            const localPath = path.join(tempDir, `video_${i + 1}.mp4`)

            // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ
            const axios = require('axios')
            const response = await axios.get(videoUrl, {
              responseType: 'stream',
              timeout: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
            })

            const writer = fs.createWriteStream(localPath)
            response.data.pipe(writer)

            await new Promise<void>((resolve, reject) => {
              writer.on('finish', () => resolve())
              writer.on('error', reject)
            })

            localVideoPaths.push(localPath)
          }

          // –°–∫–ª–µ–∏–≤–∞–µ–º –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é FFmpeg
          const outputPath = path.join(
            tempDir,
            `final_morphing_${Date.now()}.mp4`
          )
          const listFilePath = outputPath.replace('.mp4', '_list.txt')
          const listContent = localVideoPaths
            .map(videoPath => `file '${videoPath}'`)
            .join('\n')

          await fs.promises.writeFile(listFilePath, listContent)

          const { exec } = require('child_process')
          const { promisify } = require('util')
          const execAsync = promisify(exec)

          const ffmpegCommand = `ffmpeg -f concat -safe 0 -i "${listFilePath}" -c copy "${outputPath}"`
          await execAsync(ffmpegCommand)

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          if (!fs.existsSync(outputPath)) {
            throw new Error('Final video was not created')
          }

          // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
          await fs.promises.unlink(listFilePath)
          for (const videoPath of localVideoPaths) {
            if (fs.existsSync(videoPath)) {
              await fs.promises.unlink(videoPath)
            }
          }

          logger.info('‚úÖ –°–∫–ª–µ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', {
            telegram_id,
            final_video_path: outputPath,
          })

          return {
            success: true,
            video_url: outputPath,
            processing_pairs: pairVideoUrls.length,
            job_id: `morphing_${telegram_id}_${Date.now()}`,
            processing_time: 0, // –ë—É–¥–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–æ –ø–æ–∑–∂–µ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
          }
        } catch (error) {
          // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
          if (fs.existsSync(tempDir)) {
            await fs.promises.rm(tempDir, { recursive: true, force: true })
          }
          throw error
        }
      }
    )

    // –®–ê–ì 6: –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    await step.run('cleanup-temp-files', async () => {
      try {
        // –û—á–∏—â–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        if (fs.existsSync(extraction_path)) {
          await fs.promises.rm(extraction_path, {
            recursive: true,
            force: true,
          })
          logger.info('‚úÖ Temporary extraction path cleaned:', {
            extraction_path,
          })
        }

        return { cleaned: true, path: extraction_path }
      } catch (error) {
        logger.error('‚ö†Ô∏è Failed to clean temporary files:', {
          extraction_path,
          error: error instanceof Error ? error.message : String(error),
        })
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –æ—á–∏—Å—Ç–∫–∏
        return { cleaned: false, error: String(error) }
      }
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const deliverResult = await step.run('deliver-result', async () => {
      logger.info('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–æ—Ä—Ñ–∏–Ω–≥ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', {
        description: 'Delivering morphing video to user',
        telegram_id,
        video_url: finalVideoResult.video_url,
        bot_name,
      })

      const { bot, error } = getBotByName(bot_name)
      if (error || !bot) {
        throw new Error(`Bot ${bot_name} not found: ${error}`)
      }

      // üé¨ –†–µ–∫–ª–∞–º–Ω—ã–π —Ç–µ–∫—Å—Ç —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –±–æ—Ç–∞
      const botMention =
        bot_name === 'clip_maker_neuro_bot'
          ? '@clip_maker_neuro_bot'
          : '@ai_koshey_bot'
      const advertisementText = `üß¨ **–ú–æ—Ä—Ñ–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n‚ú® –°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é ${botMention}\nüéØ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ~5 –º–∏–Ω—É—Ç\nüí´ –ö–∞—á–µ—Å—Ç–≤–æ: Full HD 1080p\n\nüì• **–°–∫–∞—á–∞—Ç—å:** –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç\nüëÄ **–ü—Ä–æ—Å–º–æ—Ç—Ä:** –í–∏–¥–µ–æ –≤—ã—à–µ\n\nüöÄ –°–æ–∑–¥–∞–≤–∞–π –±–æ–ª—å—à–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å –Ω–∞—à–∏–º–∏ –±–æ—Ç–∞–º–∏!`

      try {
        // üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ (—Å –ø—Ä–µ–≤—å—é)
        await bot.telegram.sendVideo(telegram_id, finalVideoResult.video_url, {
          caption: advertisementText,
          parse_mode: 'Markdown',
          width: 1920, // Full HD —à–∏—Ä–∏–Ω–∞
          height: 1080, // Full HD –≤—ã—Å–æ—Ç–∞
          duration: 5, // 5 —Å–µ–∫—É–Ω–¥
          supports_streaming: true, // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
        })

        // üìé –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        const fileDownloadText = `üìÅ **–§–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è**\n\nüé¨ –ú–æ—Ä—Ñ–∏–Ω–≥ –≤–∏–¥–µ–æ –≤ –≤—ã—Å–æ–∫–æ–º –∫–∞—á–µ—Å—Ç–≤–µ\nüíæ –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ\n\n${botMention} - —Å–æ–∑–¥–∞–µ–º –±—É–¥—É—â–µ–µ –≤–º–µ—Å—Ç–µ!`
        await bot.telegram.sendDocument(
          telegram_id,
          finalVideoResult.video_url,
          {
            caption: fileDownloadText,
            parse_mode: 'Markdown',
          }
        )

        logger.info('‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', {
          telegram_id,
          delivered_as: 'video_and_document',
          bot_name,
        })

        return { delivered: true, method: 'video_and_document' }
      } catch (deliveryError) {
        logger.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤–∏–¥–µ–æ:', {
          telegram_id,
          error:
            deliveryError instanceof Error
              ? deliveryError.message
              : String(deliveryError),
        })

        // –§–æ–ª–ª–±—ç–∫: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ö–æ—Ç—è –±—ã —Å—Å—ã–ª–∫—É
        await bot.telegram.sendMessage(
          telegram_id,
          `üé¨ **–ú–æ—Ä—Ñ–∏–Ω–≥ –≥–æ—Ç–æ–≤!**\n\nüìé **–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ:** ${finalVideoResult.video_url}\n\n‚ú® –°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é ${botMention}`,
          { parse_mode: 'Markdown' }
        )

        return { delivered: true, method: 'link_fallback' }
      }
    })

    // üîß –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ (–ë–ï–ó –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–∫—Ç–æ–≤)
    const processingEndTime = Date.now()
    const eventTime = new Date(event.ts).getTime()
    const totalProcessingTime = processingEndTime - eventTime

    const finalResult = {
      job_id,
      telegram_id,
      status: 'completed',
      morphing_result: {
        success: finalVideoResult.success,
        job_id: finalVideoResult.job_id,
        video_url: finalVideoResult.video_url,
        processing_time: totalProcessingTime,
        processing_pairs: finalVideoResult.processing_pairs,
      },
      delivery: deliverResult,
      processing_time: totalProcessingTime,
      total_pairs_processed: finalVideoResult.processing_pairs,
    }

    logger.info('üéâ Morphing job completed successfully:', finalResult)
    return finalResult
  }
)
