import { replicate } from '@/core/replicate'
import {
  getUserByTelegramId,
  updateUserBalance,
  updateUserLevelPlusOne,
  getUserBalance,
  createModelTraining,
  updateLatestModelTraining,
  supabase,
} from '@/core/supabase'
import { getBotByName } from '@/core/bot'
import { ModeEnum } from '@/interfaces/modes'
import { calculateModeCost } from '@/price/helpers/modelsCost'
import { inngest } from '@/core/inngest/clients'
import { API_URL } from '@/config'
import { BalanceHelper } from '@/helpers/inngest'
import { logger } from '@utils/logger'
import { PaymentType } from '@/interfaces/payments.interface'
import { slugify } from 'inngest' // For v3 migration

import type { Prediction } from 'replicate'

// –ë–æ–ª–µ–µ —á—ë—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤
type ActiveCheckFromDB = {
  exists: true
  source: 'database'
  training: {
    id: any
    replicate_training_id: any
    status: any
  }
}

type ActiveCheckFromCache = {
  exists: true
  source: 'cache'
  cachedEntry: {
    timestamp: number
    status: string
    trainingId?: string
  }
}

type NoActiveCheck = {
  exists: false
}

type ErrorActiveCheck = {
  exists: false
  error: string
}

type ActiveCheckResult =
  | ActiveCheckFromDB
  | ActiveCheckFromCache
  | NoActiveCheck
  | ErrorActiveCheck

// 1. –ò–∑–º–µ–Ω–∏–º –∫—ç—à –Ω–∞ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω—ã–π –º–µ—Ö–∞–Ω–∏–∑–º —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—Ç–∞—Ç—É—Å–∞
const replicateTrainingCache = new Map<
  string,
  {
    timestamp: number
    status: 'starting' | 'running' | 'completed' | 'failed'
    trainingId?: string
  }
>()

// 2. –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
function checkAndSetTrainingCache(
  telegram_id: string,
  modelName: string,
  status: 'starting'
): boolean {
  const cacheKey = `${telegram_id}:${modelName}`
  const now = Date.now()

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å
  const currentEntry = replicateTrainingCache.get(cacheKey)

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
  if (
    currentEntry &&
    currentEntry.status === 'running' &&
    now - currentEntry.timestamp < CACHE_TTL_MS
  ) {
    logger.warn({
      message: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ –∫—ç—à–µ',
      telegram_id,
      modelName,
      currentStatus: currentEntry.status,
      startedAt: new Date(currentEntry.timestamp).toISOString(),
    })
    return false // –ë–ª–æ–∫–∏—Ä—É–µ–º –∑–∞–ø—É—Å–∫ - —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–¥–µ—Ç
  }

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å 'starting' - —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è
  replicateTrainingCache.set(cacheKey, {
    timestamp: now,
    status,
  })

  logger.info({
    message: '–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∫—ç—à–µ',
    telegram_id,
    modelName,
    status: 'starting',
    timestamp: new Date(now).toISOString(),
  })

  // –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π
  for (const [key, entry] of replicateTrainingCache.entries()) {
    if (now - entry.timestamp > CACHE_TTL_MS) {
      replicateTrainingCache.delete(key)
    }
  }

  return true // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—É—Å–∫
}

// 3. –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
function updateTrainingStatus(
  telegram_id: string,
  modelName: string,
  status: 'running' | 'completed' | 'failed',
  trainingId?: string
): void {
  const cacheKey = `${telegram_id}:${modelName}`
  const entry = replicateTrainingCache.get(cacheKey)

  if (entry) {
    replicateTrainingCache.set(cacheKey, {
      ...entry,
      status,
      trainingId,
    })

    logger.info({
      message: '–û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –∫—ç—à–µ',
      telegram_id,
      modelName,
      oldStatus: entry.status,
      newStatus: status,
      trainingId,
    })
  }
}

// –í—Ä–µ–º—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è - 5 –º–∏–Ω—É—Ç
const CACHE_TTL_MS = 5 * 60 * 1000

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –¥–ª—è –Ω–∞—à–∏—Ö —Å–æ–±—ã—Ç–∏–π
interface TrainingEventData {
  bot_name: string
  is_ru: string | boolean
  modelName: string
  steps: string | number
  telegram_id: string
  triggerWord: string
  zipUrl: string
  gender?: string
}

export interface ApiError extends Error {
  response?: {
    status: number
  }
}

const activeTrainings = new Map<string, { cancel: () => void }>()

// –õ–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
const TRAINING_MESSAGES = {
  start: {
    ru: 'üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏...',
    en: 'üîç Starting model training...',
  },
  success: (modelName: string) => ({
    ru: `üéâ –ú–æ–¥–µ–ª—å ${modelName} –≥–æ—Ç–æ–≤–∞!`,
    en: `üéâ Model ${modelName} ready!`,
  }),
  error: (error: string) => ({
    ru: `‚ùå –û—à–∏–±–∫–∞: ${error}`,
    en: `‚ùå Error: ${error}`,
  }),
  duplicateRequest: {
    ru: '‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ —ç—Ç–æ–π –º–æ–¥–µ–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ...',
    en: '‚ö†Ô∏è Your training request is already processing. Please wait...',
  },
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é
export const generateModelTraining = inngest.createFunction(
  {
    id: slugify('model-training'), // v3 requires id
    name: 'Model Training', // Optional display name
    concurrency: 2,
  },
  { event: 'model/training.start' },
  async ({ event, step, runId }) => {
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –ª–æ–≥ –æ –≤—Ö–æ–¥—è—â–µ–º —Å–æ–±—ã—Ç–∏–∏
    console.log('üéØ –°–û–ë–´–¢–ò–ï –¢–†–ï–ù–ò–†–û–í–ö–ò –ü–û–õ–£–ß–ï–ù–û:', {
      eventName: event.name,
      runId: runId, // Use runId from args
      telegram_id: event.data.telegram_id,
      modelName: event.data.modelName,
      timestamp: new Date(event.ts).toISOString(),
    })

    logger.info({
      message: '–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏',
      runId: runId, // Use runId from args
      timestamp: new Date(event.ts).toISOString(),
    })

    // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –¥–ª—è event.data
    const eventData = event.data as TrainingEventData
    const cacheKey = `${eventData.telegram_id}:${eventData.modelName}`

    // üîç –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    logger.info({
      message: 'üîç –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏',
      eventData: {
        telegram_id: eventData.telegram_id,
        modelName: eventData.modelName,
        bot_name: eventData.bot_name,
        gender: eventData.gender,
        is_ru: eventData.is_ru,
        triggerWord: eventData.triggerWord,
        zipUrl: eventData.zipUrl,
        steps: eventData.steps,
      },
    })

    // –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–µ–∞–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ Replicate
    const activeCheck = (await step.run('check-active-training', async () => {
      try {
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        const { data: existingTrainings } = await supabase
          .from('model_trainings')
          .select('id, replicate_training_id, status')
          .eq('telegram_id', eventData.telegram_id)
          .eq('model_name', eventData.modelName)
          .in('status', ['active', 'pending'])
          .order('created_at', { ascending: false })
          .limit(1)

        if (existingTrainings?.length > 0) {
          const training = existingTrainings[0]
          logger.info({
            message: '–ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
            trainingRecord: training,
          })

          // –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –≤ –ë–î, –æ–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
          if (training.replicate_training_id) {
            replicateTrainingCache.set(cacheKey, {
              timestamp: Date.now(),
              status: 'running',
              trainingId: training.replicate_training_id,
            })
          }

          return {
            exists: true,
            source: 'database',
            training,
          } as ActiveCheckFromDB
        }

        // 2. –ö—ç—à –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –ë–î –Ω–µ—Ç –∑–∞–ø–∏—Å–∏
        const cachedEntry = replicateTrainingCache.get(cacheKey)
        if (
          cachedEntry?.status === 'running' &&
          Date.now() - cachedEntry.timestamp < CACHE_TTL_MS
        ) {
          logger.info({
            message: '–ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ –∫—ç—à–µ',
            cachedEntry,
          })
          return {
            exists: true,
            source: 'cache',
            cachedEntry,
          } as ActiveCheckFromCache
        }

        // –ï—Å–ª–∏ –Ω–∏ –≤ –ë–î, –Ω–∏ –≤ –∫—ç—à–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
        return { exists: false } as NoActiveCheck
      } catch (error) {
        logger.error({
          message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫',
          error: error.message,
        })
        // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—É—Å–∫ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        return { exists: false, error: error.message } as ErrorActiveCheck
      }
    })) as ActiveCheckResult

    // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞, –Ω–µ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—É—é
    if (activeCheck.exists) {
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      const { bot } = getBotByName(eventData.bot_name)

      if (bot) {
        const isRussian = eventData.is_ru === true || eventData.is_ru === 'true'
        try {
          await bot.telegram.sendMessage(
            eventData.telegram_id,
            TRAINING_MESSAGES.duplicateRequest[isRussian ? 'ru' : 'en']
          )

          // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –≤ –ë–î, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
          if ('training' in activeCheck && activeCheck.training?.id) {
            await bot.telegram.sendMessage(
              eventData.telegram_id,
              isRussian
                ? `–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é.`
                : `You can cancel the current training if you want to start a new one.`,
              {
                reply_markup: {
                  inline_keyboard: [
                    [
                      {
                        text: isRussian
                          ? '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É'
                          : '‚ùå Cancel current training',
                        callback_data: `cancel_train:${activeCheck.training.id}`,
                      },
                    ],
                  ],
                },
              }
            )
          }
        } catch (error) {
          logger.error({
            message: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∑–∞–ø—Ä–æ—Å–µ',
            error: error.message,
          })
        }
      }

      logger.info({
        message:
          '–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –æ—Ç–∫–ª–æ–Ω–µ–Ω - –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞',
        telegram_id: eventData.telegram_id,
        modelName: eventData.modelName,
        activeCheck,
      })

      return {
        success: false,
        message: 'Active training already exists',
        activeTrainingExists: true,
        trainingId:
          'training' in activeCheck
            ? activeCheck.training?.replicate_training_id
            : undefined,
      }
    }

    // –¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ –º—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ—Ç,
    // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å 'starting'
    if (
      !checkAndSetTrainingCache(
        eventData.telegram_id,
        eventData.modelName,
        'starting'
      )
    ) {
      logger.warn({
        message:
          '–°—Ç—Ä–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ - –∫—ç—à –±–ª–æ–∫–∏—Ä—É–µ—Ç, –Ω–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –ø—Ä–æ—à–ª–∞',
        telegram_id: eventData.telegram_id,
        modelName: eventData.modelName,
      })
      // –í—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –º—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ä–µ–∞–ª—å–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    }

    // üîÑ –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    logger.debug({ message: '–î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è', data: eventData })
    const { bot } = getBotByName(eventData.bot_name)
    logger.info({
      message: '–ü–æ–ª—É—á–µ–Ω –±–æ—Ç',
      botUsername: bot?.botInfo?.username || '–Ω–µ –Ω–∞–π–¥–µ–Ω',
      botName: eventData.bot_name,
    })

    if (!bot) {
      logger.error({ message: '–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', botName: eventData.bot_name })
      throw new Error(`‚ùå –ë–æ—Ç ${eventData.bot_name} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
    }
    const helpers = {
      sendMessage: async (message: string) => {
        await step.run('send-message', async () => {
          try {
            await bot.telegram.sendMessage(eventData.telegram_id, message)
            logger.info({
              message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
              telegram_id: eventData.telegram_id,
            })
            return true
          } catch (error) {
            logger.error({
              message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è',
              error: error.message,
              telegram_id: eventData.telegram_id,
            })
            return false
          }
        })
      },
    }

    // üß© –û—Å–Ω–æ–≤–Ω—ã–µ —à–∞–≥–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
    const trainingSteps = {
      validateInput: async () => {
        const { modelName, steps: rawSteps, is_ru } = eventData
        const steps = Number(rawSteps)

        if (isNaN(steps) || steps <= 0) {
          const errorMessage = is_ru
            ? '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à–∞–≥–æ–≤'
            : 'Invalid steps count'
          logger.error({
            message: errorMessage,
            steps: rawSteps,
            telegram_id: eventData.telegram_id,
          })
          throw new Error(errorMessage)
        }

        logger.info({
          message: '–í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã',
          modelName,
          steps,
          telegram_id: eventData.telegram_id,
        })

        return { modelName, steps }
      },

      checkUserAndBalance: async () => {
        const { telegram_id } = eventData
        return Promise.all([
          step.run('get-user', async () => {
            const user = await getUserByTelegramId(telegram_id)
            if (!user) {
              logger.error({
                message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
                telegram_id,
              })
              return Promise.reject('User not found')
            }
            logger.info({
              message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω',
              userId: user.user_id,
              telegram_id,
            })
            return user
          }),
        ])
      },

      createTrainingRecord: async (trainingId: string) => {
        await step.run('create-training-record', async () => {
          // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º steps –≤ —á–∏—Å–ª–æ
          const steps = Number(eventData.steps)

          const training = {
            telegram_id: eventData.telegram_id,
            model_name: eventData.modelName,
            trigger_word: eventData.triggerWord,
            zip_url: eventData.zipUrl,
            steps: steps, // –¢–µ–ø–µ—Ä—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —á–∏—Å–ª–æ
            replicate_training_id: trainingId,
          }
          logger.info('üîµ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ', training)
          createModelTraining(training)
          return training
        })
      },

      createReplicateModel: async (modelName: string) => {
        const username = process.env.REPLICATE_USERNAME
        if (!username) throw new Error('REPLICATE_USERNAME not set')

        try {
          const existing = await replicate.models.get(username, modelName)
          logger.info('üîµ –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –º–æ–¥–µ–ª—å:', existing.url)
          return `${username}/${modelName}`
        } catch (error) {
          logger.info('üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏...')
          try {
            const newModel = await replicate.models.create(
              username,
              modelName,
              {
                description: `LoRA: ${eventData.triggerWord}`,
                visibility: 'public',
                hardware: 'gpu-t4',
              }
            )
            logger.info('‚úÖ –ú–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞:', newModel.latest_version?.id)
            await new Promise(resolve => setTimeout(resolve, 5000))
            return `${username}/${modelName}`
          } catch (createError) {
            logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏:', createError)
            throw new Error('Failed to create model')
          }
        }
      },

      registerCancelHandler: (telegram_id: string, trainingId: string) => {
        const cancelProcess = {
          cancel: async () => {
            try {
              await replicate.trainings.cancel(trainingId)
              logger.info(`‚ùå Training ${trainingId} canceled`)
            } catch (error) {
              logger.error('Cancel error:', error)
            }
            activeTrainings.delete(telegram_id)
          },
        }
        activeTrainings.set(telegram_id, cancelProcess)
        logger.info('üõë Cancel handler registered for:', telegram_id)
      },

      startTraining: async (destination: string) => {
        if (!eventData.zipUrl || !eventData.triggerWord) {
          throw new Error(
            '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: zipUrl –∏–ª–∏ triggerWord'
          )
        }
        const training: Prediction = await replicate.trainings.create(
          'ostris',
          'flux-dev-lora-trainer',
          'e440909d3512c31646ee2e0c7d6f6f4923224863a6a10c494606e79fb5844497',
          {
            destination: destination as `${string}/${string}`,
            input: {
              input_images: eventData.zipUrl,
              trigger_word: eventData.triggerWord,
              steps: Number(eventData.steps), // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
              lora_rank: 128,
              optimizer: 'adamw8bit',
              batch_size: 1,
              resolution: '512,768,1024',
              learning_rate: 0.0001,
              wandb_project: 'flux_train_replicate',
            },
            webhook: `${API_URL}/webhooks/replicate`,
            webhook_events_filter: ['completed'],
          }
        )

        logger.info('üöÄ Training ID:', training.id)
        // –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π URL –≤–µ–±—Ö—É–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω Replicate
        logger.info({
          message: '‚öôÔ∏è Replicate Webhook URL for this training',
          url: `${API_URL}/webhooks/replicate`,
          api_url_from_config: API_URL, // –õ–æ–≥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ API_URL –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
          raw_webhook_url_env: process.env.WEBHOOK_URL, // –õ–æ–≥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ process.env –Ω–∞–ø—Ä—è–º—É—é
          raw_origin_env: process.env.ORIGIN, // –õ–æ–≥–∏—Ä—É–µ–º ORIGIN –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
          node_env: process.env.NODE_ENV, // –õ–æ–≥–∏—Ä—É–µ–º NODE_ENV
        })
        trainingSteps.registerCancelHandler(eventData.telegram_id, training.id)
        return training
      },
    }
    let balanceCheck: { success?: boolean; currentBalance?: number } | null =
      null
    let paymentAmount: number | null = null
    // üöÄ –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å
    try {
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º is_ru –∫ –±—É–ª–µ–≤–æ–º—É —Ç–∏–ø—É –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
      const isRussian = eventData.is_ru === true || eventData.is_ru === 'true'
      await helpers.sendMessage(
        TRAINING_MESSAGES.start[isRussian ? 'ru' : 'en']
      )

      // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const { modelName, steps } = await trainingSteps.validateInput()

      // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–∞–ª–∞–Ω—Å–∞
      const [user] = await trainingSteps.checkUserAndBalance()
      logger.info({
        message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω',
        userId: user.user_id,
        telegram_id: eventData.telegram_id,
      })

      // 3. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      if (user.level === 0) {
        await step.run('update-level', () =>
          updateUserLevelPlusOne(eventData.telegram_id, 0)
        )
        logger.info({
          message: '–£—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω',
          telegram_id: eventData.telegram_id,
          newLevel: 1,
        })
      }

      // 4. –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
      const costResult = calculateModeCost({
        mode: ModeEnum.DigitalAvatarBody,
        steps: steps, // Assuming steps is already a number here
        numImages: 1, // Assuming 1 image/model for training cost calculation
      })
      paymentAmount = costResult.stars

      logger.info({
        message: '–†–∞—Å—Å—á–∏—Ç–∞–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
        steps,
        paymentAmount,
        telegram_id: eventData.telegram_id,
      })

      // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
      balanceCheck = await step.run('balance-check', async () => {
        const result = await BalanceHelper.checkBalance(
          eventData.telegram_id,
          paymentAmount,
          {
            notifyUser: true,
            botInstance: bot,
            isRu: isRussian,
          }
        )
        logger.info({
          message: '–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞',
          result,
          telegram_id: eventData.telegram_id,
        })

        return {
          success: result.success,
          currentBalance: result.currentBalance,
        }
      })

      if (!balanceCheck?.success) {
        logger.warn({
          message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',
          currentBalance: balanceCheck?.currentBalance,
          requiredAmount: paymentAmount,
          telegram_id: eventData.telegram_id,
        })
        throw new Error('Insufficient balance')
      }

      // 6. –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
      // –°–Ω–∞—á–∞–ª–∞ –ª–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–ø–µ—Ä–∞—Ü–∏–∏
      logger.info({
        message: 'üí∞ –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –º–æ–¥–µ–ª–∏',
        telegram_id: eventData.telegram_id,
        currentBalance: balanceCheck.currentBalance,
        paymentAmount,
        newBalance: balanceCheck.currentBalance - paymentAmount,
        modelName,
        steps,
      })

      // –ó–∞—Ç–µ–º –≤—ã–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–∞–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —à–∞–≥–µ
      const chargeResult = await step.run('charge-user-balance', async () => {
        const newBalance = balanceCheck.currentBalance - paymentAmount

        // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –Ω–∞–ø—Ä—è–º—É—é
        const current = await getUserBalance(eventData.telegram_id)

        if (current === null) {
          throw new Error('User not found')
        }

        await updateUserBalance(
          eventData.telegram_id,
          newBalance,
          PaymentType.MONEY_OUTCOME,
          `–û–ø–ª–∞—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ ${modelName} (—à–∞–≥–æ–≤: ${steps})`,
          {
            payment_method: 'Training',
            bot_name: eventData.bot_name,
            language:
              eventData.is_ru === true || eventData.is_ru === 'true'
                ? 'ru'
                : 'en',
          }
        )

        return {
          success: true,
          oldBalance: current,
          newBalance,
          paymentAmount,
        }
      })

      logger.info({
        message: '‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω—ã',
        chargeResult,
        telegram_id: eventData.telegram_id,
      })

      // 7. –°–æ–∑–¥–∞–Ω–∏–µ/–ø—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏ Replicate
      const destination = await step.run('create-replicate-model', async () => {
        try {
          const username = process.env.REPLICATE_USERNAME
          if (!username) throw new Error('REPLICATE_USERNAME –Ω–µ –∑–∞–¥–∞–Ω')

          logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏', { modelName })
          try {
            const existing = await replicate.models.get(username, modelName)
            logger.info('üîµ –°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –º–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞:', existing.url)
            return `${username}/${modelName}`
          } catch (error) {
            logger.info('üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–¥–µ–ª–∏...')
            const newModel = await replicate.models.create(
              username,
              modelName,
              {
                description: `LoRA: ${eventData.triggerWord}`,
                visibility: 'public',
                hardware: 'gpu-t4',
              }
            )
            logger.info('‚úÖ –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å —Å–æ–∑–¥–∞–Ω–∞:', newModel.url)
            return `${username}/${modelName}`
          }
        } catch (error) {
          logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/–ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–µ–ª–∏:', error)
          throw error
        }
      })

      logger.info('üéØ –ú–æ–¥–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞:', destination)

      // –ó–∞–ø—É—Å–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å Replicate
      const trainingResult = await step.run(
        'start-replicate-training',
        async () => {
          try {
            const training = await trainingSteps.startTraining(destination)

            // ‚ö†Ô∏è –°—Ä–∞–∑—É —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∑–¥–µ—Å—å –∂–µ
            // –¢–∞–∫ –º—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ –¥–∞–∂–µ –µ—Å–ª–∏ –¥–∞–ª—å–Ω–µ–π—à–∏–π –∫–æ–¥ —Å–ª–æ–º–∞–µ—Ç—Å—è,
            // –∑–∞–ø–∏—Å—å –≤ –ë–î –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞
            const trainingRecord = await createModelTraining({
              telegram_id: eventData.telegram_id,
              model_name: eventData.modelName,
              trigger_word: eventData.triggerWord,
              zip_url: eventData.zipUrl,
              steps: Number(eventData.steps),
              replicate_training_id: training.id,
              cancel_url: training.urls?.cancel,
              status: 'pending', // –ù–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
              gender: eventData.gender,
              bot_name: eventData.bot_name,
            })

            logger.info({
              message: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î',
              trainingId: training.id,
              dbRecordId: trainingRecord.id,
            })

            // –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –∫—ç—à
            updateTrainingStatus(
              eventData.telegram_id,
              eventData.modelName,
              'running',
              training.id
            )
            updateLatestModelTraining(
              eventData.telegram_id,
              eventData.modelName,
              {
                status: 'running',
                replicate_training_id: training.id,
              },
              'replicate'
            )
            return {
              training,
              dbRecord: trainingRecord,
            }
          } catch (error) {
            // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            replicateTrainingCache.delete(
              `${eventData.telegram_id}:${eventData.modelName}`
            )
            throw error
          }
        }
      )

      logger.info('üöÄ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', trainingResult.training.id)

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∫—ç—à–µ
      updateTrainingStatus(
        eventData.telegram_id,
        eventData.modelName,
        'running',
        trainingResult.training.id
      )

      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      logger.info({
        message: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞',
        trainingId: trainingResult.training.id,
        telegram_id: eventData.telegram_id,
      })

      return {
        success: true,
        message: '–û–±—É—á–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ. –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.',
        trainingId: trainingResult.training.id,
      }
    } catch (error) {
      logger.error({
        message: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
        error: error.message,
        stack: error.stack,
        telegram_id: eventData.telegram_id,
      })

      // –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
      if (balanceCheck?.success && paymentAmount) {
        // –°–Ω–∞—á–∞–ª–∞ –ª–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
        logger.info({
          message: 'üí∏ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ –Ω–µ—É–¥–∞–≤—à—É—é—Å—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É',
          telegram_id: eventData.telegram_id,
          currentBalance: balanceCheck.currentBalance,
          refundAmount: paymentAmount,
          modelName: eventData.modelName,
        })

        // –í—ã–ø–æ–ª–Ω—è–µ–º –≤–æ–∑–≤—Ä–∞—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —à–∞–≥–µ
        const refundResult = await step.run('refund-user-balance', async () => {
          const current = await getUserBalance(eventData.telegram_id)

          if (current === null) {
            throw new Error('User not found')
          }

          await updateUserBalance(
            eventData.telegram_id,
            balanceCheck.currentBalance,
            PaymentType.MONEY_INCOME,
            `–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ –Ω–µ—É–¥–∞–≤—à—É—é—Å—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –º–æ–¥–µ–ª–∏ ${eventData.modelName}`,
            {
              payment_method: 'Refund',
              bot_name: eventData.bot_name,
              language:
                eventData.is_ru === true || eventData.is_ru === 'true'
                  ? 'ru'
                  : 'en',
            }
          )

          return {
            success: true,
            oldBalance: current,
            newBalance: balanceCheck.currentBalance,
            refundAmount: paymentAmount,
          }
        })

        logger.info({
          message: '‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ —É—Å–ø–µ—à–Ω–æ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã',
          refundResult,
          telegram_id: eventData.telegram_id,
          error: error.message,
        })
      }

      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º is_ru –∫ –±—É–ª–µ–≤–æ–º—É —Ç–∏–ø—É –µ—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞
      const isRussian = eventData.is_ru === true || eventData.is_ru === 'true'

      await helpers.sendMessage(
        TRAINING_MESSAGES.error(error.message)[isRussian ? 'ru' : 'en']
      )

      if (activeTrainings.has(eventData.telegram_id)) {
        activeTrainings.get(eventData.telegram_id)?.cancel()
        logger.info({
          message: '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–º–µ–Ω–µ–Ω —Ç–µ–∫—É—â–µ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
          telegram_id: eventData.telegram_id,
        })
      }

      throw error
    }
  }
)
// inngest event data
// "data": {
//   "bot_name": "neuro_blogger_bot",
//   "is_ru": true,
//   "modelName": "test_lora_model",
//   "steps": 1500,
//   "telegram_id": "144022504",
//   "triggerWord": "person1",
//   "zipUrl": "https://example.com/training-images.zip"
// },
