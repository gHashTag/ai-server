/**
 * –§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ - –ø–æ–¥–ø–∏—Å–∫–∞ –∏ –ø–∞—Ä—Å–∏–Ω–≥ Instagram –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
 * –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –ª–æ–≥–∏–∫—É –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å –≤–æ–∑–≤—Ä–∞—Ç–æ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–∏–ª–∑–∞
 */

import { inngest } from '@/core/inngest/clients'
import { Pool } from 'pg'
import { z } from 'zod'

// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Neon
const dbPool = new Pool({
  connectionString: process.env.NEON_DATABASE_URL || 'postgresql://neondb_owner:npg_5RWzh7CwrXxE@ep-delicate-block-a1l1lt0p-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require',
  ssl: { rejectUnauthorized: false }
})

// –°—Ö–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const CompetitorMonitoringEventSchema = z.object({
  username: z.string().min(1), // Instagram username –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ (–±–µ–∑ @)
  user_telegram_id: z.string().min(1),
  user_chat_id: z.string().optional(),
  bot_name: z.string().min(1),
  max_reels: z.number().min(1).max(50).default(10), // —Å–∫–æ–ª—å–∫–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
  min_views: z.number().min(0).default(1000),
  max_age_days: z.number().min(1).max(30).default(7),
  delivery_format: z.enum(['digest', 'individual', 'archive']).default('digest'),
  project_id: z.number().positive().optional(),
})

// –õ–æ–≥–≥–µ—Ä
const log = {
  info: (msg: string, data?: any) =>
    console.log(`[COMPETITOR-MONITORING] ${msg}`, data || ''),
  error: (msg: string, data?: any) =>
    console.error(`[COMPETITOR-MONITORING] ${msg}`, data || ''),
  warn: (msg: string, data?: any) =>
    console.warn(`[COMPETITOR-MONITORING] ${msg}`, data || ''),
}

/**
 * –§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
 */
export const competitorMonitoring = inngest.createFunction(
  {
    id: 'competitor-monitoring',
    name: 'üîç Competitor Monitoring',
    concurrency: 2,
  },
  { event: 'competitor/monitor' },
  async ({ event, step, runId }) => {
    log.info('üöÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ –∑–∞–ø—É—â–µ–Ω', {
      runId,
      eventData: event.data,
    })

    // Step 1: –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const validatedData = await step.run('validate-input', async () => {
      const result = CompetitorMonitoringEventSchema.safeParse(event.data)
      
      if (!result.success) {
        throw new Error(`Invalid input: ${result.error.message}`)
      }

      log.info('‚úÖ –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω—ã')
      return result.data
    })

    // Step 2: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
    const subscription = await step.run('create-subscription', async () => {
      const client = await dbPool.connect()
      
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–¥–ø–∏—Å–æ–∫ (–º–∞–∫—Å–∏–º—É–º 10 –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        const { rows: countResult } = await client.query(`
          SELECT COUNT(*) as count
          FROM competitor_subscriptions 
          WHERE user_telegram_id = $1 AND bot_name = $2 AND is_active = true
        `, [validatedData.user_telegram_id, validatedData.bot_name])

        const count = parseInt(countResult[0].count)
        if (count >= 10) {
          throw new Error('Maximum 10 active subscriptions per user')
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
        const { rows: existingRows } = await client.query(`
          SELECT * FROM competitor_subscriptions 
          WHERE user_telegram_id = $1 AND competitor_username = $2 AND bot_name = $3
        `, [
          validatedData.user_telegram_id,
          validatedData.username.replace('@', ''),
          validatedData.bot_name
        ])

        let subscriptionResult

        if (existingRows.length > 0) {
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
          const { rows } = await client.query(`
            UPDATE competitor_subscriptions 
            SET user_chat_id = $1, max_reels = $2, min_views = $3, 
                max_age_days = $4, delivery_format = $5, is_active = true, 
                updated_at = NOW()
            WHERE id = $6
            RETURNING *
          `, [
            validatedData.user_chat_id,
            validatedData.max_reels,
            validatedData.min_views,
            validatedData.max_age_days,
            validatedData.delivery_format,
            existingRows[0].id
          ])
          subscriptionResult = rows[0]
        } else {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
          const { rows } = await client.query(`
            INSERT INTO competitor_subscriptions 
            (user_telegram_id, user_chat_id, bot_name, competitor_username, 
             max_reels, min_views, max_age_days, delivery_format, is_active)
            VALUES ($1, $2, $3, $4, $5, $6, $7, $8, true)
            RETURNING *
          `, [
            validatedData.user_telegram_id,
            validatedData.user_chat_id,
            validatedData.bot_name,
            validatedData.username.replace('@', ''),
            validatedData.max_reels,
            validatedData.min_views,
            validatedData.max_age_days,
            validatedData.delivery_format
          ])
          subscriptionResult = rows[0]
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
        const { rows: profileRows } = await client.query(`
          SELECT * FROM competitor_profiles WHERE username = $1
        `, [validatedData.username.replace('@', '')])

        if (profileRows.length > 0) {
          await client.query(`
            UPDATE competitor_profiles 
            SET total_subscribers = total_subscribers + 1, updated_at = NOW()
            WHERE username = $1
          `, [validatedData.username.replace('@', '')])
        } else {
          await client.query(`
            INSERT INTO competitor_profiles (username, total_subscribers)
            VALUES ($1, 1)
          `, [validatedData.username.replace('@', '')])
        }

        log.info(`‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ @${validatedData.username}`)
        return subscriptionResult
        
      } finally {
        client.release()
      }
    })

    // Step 3: –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∏–ª–∑–æ–≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
    const parsingResult = await step.run('parse-competitor-reels', async () => {
      log.info(`üé¨ –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ä–∏–ª–∑–æ–≤ @${validatedData.username}`)
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π Apify —Å–∫—Ä–∞–ø–µ—Ä
      const parseEvent = await inngest.send({
        name: 'instagram/apify-scrape',
        data: {
          username_or_hashtag: validatedData.username,
          project_id: validatedData.project_id || 999,
          source_type: 'competitor',
          max_reels: validatedData.max_reels,
          min_views: validatedData.min_views,
          max_age_days: validatedData.max_age_days,
          requester_telegram_id: validatedData.user_telegram_id,
          bot_name: validatedData.bot_name,
        }
      })

      log.info('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω', { 
        event_id: parseEvent.ids[0] 
      })
      
      return {
        parse_event_id: parseEvent.ids[0],
        status: 'started'
      }
    })

    // Step 4: –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (—Å —Ç–∞–π–º–∞—É—Ç–æ–º)
    const reelsData = await step.run('wait-for-parsing-complete', async () => {
      // –ñ–¥–µ–º –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
      await new Promise(resolve => setTimeout(resolve, 15000)) // 15 —Å–µ–∫—É–Ω–¥
      
      const client = await dbPool.connect()
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ —Ä–∏–ª–∑—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ –∏–∑ –ë–î
        const oneHourAgo = new Date()
        oneHourAgo.setHours(oneHourAgo.getHours() - 1)

        const { rows: reels } = await client.query(`
          SELECT * FROM instagram_apify_reels
          WHERE owner_username = $1 
            AND project_id = $2 
            AND scraped_at >= $3
          ORDER BY published_at DESC, views_count DESC
          LIMIT $4
        `, [
          validatedData.username.replace('@', ''),
          validatedData.project_id || 999,
          oneHourAgo.toISOString(),
          validatedData.max_reels
        ])

        log.info(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${reels.length} —Ä–∏–ª–∑–æ–≤ –≤ –ë–î`)
        return reels
        
      } catch (error) {
        log.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∏–ª–∑–æ–≤:', error)
        return []
      } finally {
        client.release()
      }
    })

    // Step 5: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (1 –ª—É—á—à–∏–π —Ä–∏–ª–∑)
    const userResult = await step.run('prepare-user-result', async () => {
      if (reelsData.length === 0) {
        log.warn('‚ö†Ô∏è –†–∏–ª–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ')
        
        return {
          success: true,
          subscribed: true,
          competitor_username: validatedData.username,
          subscription_id: subscription.id,
          message: `–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ @${validatedData.username} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –†–∏–ª–∑—ã –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`,
          reels_count_in_db: 0,
          latest_reel: null
        }
      }

      // –ë–µ—Ä–µ–º –ª—É—á—à–∏–π —Ä–∏–ª–∑ (–ø–µ—Ä–≤—ã–π –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ)
      const bestReel = reelsData[0]
      
      return {
        success: true,
        subscribed: true,
        competitor_username: validatedData.username,
        subscription_id: subscription.id,
        message: `‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ @${validatedData.username}!`,
        reels_count_in_db: reelsData.length,
        latest_reel: {
          id: bestReel.reel_id,
          url: bestReel.url,
          video_url: bestReel.video_url,
          thumbnail_url: bestReel.thumbnail_url,
          caption: bestReel.caption,
          owner_username: bestReel.owner_username,
          views_count: bestReel.views_count,
          likes_count: bestReel.likes_count,
          comments_count: bestReel.comments_count,
          published_at: bestReel.published_at,
          music_artist: bestReel.music_artist,
          music_title: bestReel.music_title,
        }
      }
    })

    // Step 6: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (validatedData.user_telegram_id && validatedData.bot_name) {
      await step.run('send-user-notification', async () => {
        try {
          const { getBotByName } = await import('@/core/bot')
          const { bot } = getBotByName(validatedData.bot_name)
          
          let message = userResult.message + '\n\n'
          
          if (userResult.latest_reel) {
            const reel = userResult.latest_reel
            message += `üé¨ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∏–ª–∑ –æ—Ç @${reel.owner_username}:\n`
            message += `üëÅ ${reel.views_count.toLocaleString()} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n`
            message += `‚ù§Ô∏è ${reel.likes_count.toLocaleString()} –ª–∞–π–∫–æ–≤\n`
            
            if (reel.music_artist && reel.music_title) {
              message += `üéµ ${reel.music_artist} - ${reel.music_title}\n`
            }
            
            message += `\nüîó ${reel.url}`
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∏–¥–µ–æ URL, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ
            if (reel.video_url) {
              try {
                await bot.telegram.sendVideo(
                  validatedData.user_telegram_id,
                  reel.video_url,
                  {
                    caption: message,
                    parse_mode: 'HTML'
                  }
                )
              } catch (videoError) {
                // –ï—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ç–µ–∫—Å—Ç —Å —Å—Å—ã–ª–∫–æ–π
                await bot.telegram.sendMessage(
                  validatedData.user_telegram_id,
                  message
                )
              }
            } else {
              await bot.telegram.sendMessage(
                validatedData.user_telegram_id,
                message
              )
            }
          } else {
            message += `üìä –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ ${userResult.reels_count_in_db} —Ä–∏–ª–∑–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö`
            message += '\nüîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω'
            
            await bot.telegram.sendMessage(
              validatedData.user_telegram_id,
              message
            )
          }
          
          log.info('‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é')
        } catch (error) {
          log.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', error)
        }
      })
    }

    // Step 7: –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ—Å—Ç–∞–≤–∫–∏
    await step.run('record-delivery-history', async () => {
      const client = await dbPool.connect()
      
      try {
        await client.query(`
          INSERT INTO competitor_delivery_history 
          (subscription_id, reels_count, delivery_status, reels_data)
          VALUES ($1, $2, $3, $4)
        `, [
          subscription.id,
          userResult.reels_count_in_db,
          'sent',
          JSON.stringify({
            latest_reel: userResult.latest_reel,
            total_reels: userResult.reels_count_in_db
          })
        ])

        log.info('üìù –ò—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–ø–∏—Å–∞–Ω–∞')
      } catch (error) {
        log.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ—Å—Ç–∞–≤–∫–∏:', error)
      } finally {
        client.release()
      }
    })

    // Step 8: –ó–∞–ø—É—Å–∫–∞–µ–º –±—É–¥—É—â–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (–¥–æ—Å—Ç–∞–≤–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π)
    await step.run('setup-monitoring', async () => {
      log.info(`üîÑ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è @${validatedData.username}`)
      log.info('‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥: –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞ –≤ 08:00 UTC')
      log.info('‚Ä¢ –î–æ—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö —Ä–∏–ª–∑–æ–≤: —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞')
      log.info('‚Ä¢ –§–æ—Ä–º–∞—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: ' + validatedData.delivery_format)
      
      return {
        monitoring_enabled: true,
        check_interval: '24 hours',
        next_check: 'Daily at 08:00 UTC'
      }
    })

    log.info('üéâ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ', userResult)
    return userResult
  }
)

/**
 * Helper —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
 */
export async function triggerCompetitorMonitoring(data: any) {
  const result = await inngest.send({
    name: 'competitor/monitor',
    data,
  })
  
  return {
    eventId: result.ids[0],
  }
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∏–ª–∑–æ–≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ –∏–∑ –ë–î
 */
export async function getCompetitorReels(
  username: string, 
  limit: number = 10, 
  projectId?: number
) {
  const client = await dbPool.connect()
  
  try {
    let sql = `
      SELECT * FROM instagram_apify_reels
      WHERE owner_username = $1
    `
    const params = [username.replace('@', '')]
    
    if (projectId) {
      sql += ` AND project_id = $2`
      params.push(projectId.toString())
    }
    
    sql += ` ORDER BY published_at DESC, views_count DESC LIMIT $${params.length + 1}`
    params.push(limit.toString())

    const { rows } = await client.query(sql, params)

    return rows
  } catch (error) {
    log.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∏–ª–∑–æ–≤ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞:', error)
    return []
  } finally {
    client.release()
  }
}