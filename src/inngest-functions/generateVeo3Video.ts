/**
 * üé¨ VEO3 Video Generation via Kie.ai API
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Kie.ai —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ (9:16, 16:9, 1:1)
 * –° fallback –Ω–∞ Vertex AI –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Kie.ai
 */

import { inngest } from '@/core/inngest/clients'
import { KieAiService } from '@/services/kieAiService'
import { processVideoGeneration } from '@/services/generateTextToVideo'
import { getBotByName } from '@/core/bot'
import {
  getUserByTelegramId,
  supabase,
} from '@/core/supabase'
import { ProjectManager } from '@/core/instagram/project-manager'
import { errorMessage, errorMessageAdmin } from '@/helpers'
import { logger } from '@/utils/logger'
import { PaymentType } from '@/interfaces/payments.interface'
import { ModeEnum } from '@/interfaces/modes'

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
function categorizeError(error: any): { type: string; critical: boolean } {
  const message = error.message?.toLowerCase() || ''
  const status = error.response?.status

  if (
    status === 401 ||
    message.includes('api key') ||
    message.includes('unauthorized')
  ) {
    return { type: 'authentication', critical: true }
  }

  if (
    status === 402 ||
    message.includes('insufficient') ||
    message.includes('credits') ||
    message.includes('balance')
  ) {
    return { type: 'insufficient_credits', critical: false }
  }

  if (
    status === 429 ||
    message.includes('rate limit') ||
    message.includes('too many requests')
  ) {
    return { type: 'rate_limit', critical: false }
  }

  if (message.includes('bot not found') || message.includes('user not found')) {
    return { type: 'user_not_found', critical: false }
  }

  if (
    message.includes('kie.ai unavailable') ||
    message.includes('connection') ||
    message.includes('network')
  ) {
    return { type: 'service_unavailable', critical: false }
  }

  if (message.includes('timeout') || message.includes('timed out')) {
    return { type: 'timeout', critical: false }
  }

  return { type: 'unknown', critical: true }
}

function getUserFriendlyErrorMessage(error: any, isRu: boolean): string {
  const errorType = categorizeError(error)

  const messages = {
    authentication: {
      ru: 'üîê –ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π —Å–µ—Ä–≤–∏—Å–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.',
      en: 'üîê Service authentication issue. Administrator has been notified.',
    },
    insufficient_credits: {
      ru: 'üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
      en: 'üí∞ Insufficient system credits. Please try later or contact administrator.',
    },
    rate_limit: {
      ru: '‚è±Ô∏è –°–∏—Å—Ç–µ–º–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.',
      en: '‚è±Ô∏è System temporarily overloaded. Please try again in a few minutes.',
    },
    user_not_found: {
      ru: '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start',
      en: '‚ùå User not found. Please restart the bot with /start command.',
    },
    service_unavailable: {
      ru: 'üîß –°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      en: 'üîß Service temporarily unavailable. Please try later.',
    },
    timeout: {
      ru: '‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
      en: '‚è∞ Request timed out. Please try again.',
    },
    unknown: {
      ru: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.',
      en: '‚ùå An unexpected error occurred. Administrator has been notified.',
    },
  }

  return (
    messages[errorType.type]?.[isRu ? 'ru' : 'en'] ||
    messages.unknown[isRu ? 'ru' : 'en']
  )
}
import { slugify } from 'inngest'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è
interface Veo3GenerationEventData {
  prompt: string
  model: 'veo3_fast' | 'veo3' | 'runway-aleph'
  aspectRatio: '9:16' | '16:9' | '1:1'
  duration: number // 2-10 —Å–µ–∫—É–Ω–¥
  telegram_id: string
  username: string
  is_ru: boolean
  bot_name: string
  imageUrl?: string // –¥–ª—è image-to-video
  style?: string
  cameraMovement?: string
}

export const generateVeo3Video = inngest.createFunction(
  {
    id: slugify('veo3-video-generation'),
    name: 'üé¨ VEO3 Video Generation',
    retries: 3,
  },
  { event: 'veo3/video.generate' },
  async ({ event, step }) => {
    // ‚úÖ –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–£–ß–ï–ù–ò–Ø –°–û–ë–´–¢–ò–Ø –û–¢ INNGEST 
    logger.info('üì® VEO3 INNGEST –§–£–ù–ö–¶–ò–Ø –ü–û–õ–£–ß–ò–õ–ê –°–û–ë–´–¢–ò–ï:', {
      timestamp: new Date().toISOString(),
      eventId: event.id,
      eventName: event.name,
      eventTimestamp: event.timestamp,
      rawEventData: event.data,
      eventDataSize: JSON.stringify(event.data).length,
      source: 'generateVeo3Video.inngest.received'
    })

    try {
      const {
        prompt,
        model = 'veo3_fast',
        aspectRatio = '9:16',
        duration: inputDuration,
        telegram_id,
        username,
        is_ru,
        bot_name: rawBotName,
        imageUrl,
        style,
        cameraMovement,
      } = event.data as Veo3GenerationEventData

      // ‚úÖ VEO3_FAST –í–°–ï–ì–î–ê 8 –°–ï–ö–£–ù–î - –ù–ï –ü–†–ò–ù–ò–ú–ê–ï–ú –î–†–£–ì–ò–ï –ó–ù–ê–ß–ï–ù–ò–Ø!
      const duration = model === 'veo3_fast' ? 8 : (inputDuration || 5)

      // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º fallback –¥–ª—è bot_name
      const bot_name = rawBotName || 'neuro_blogger_bot'

      // ‚úÖ –î–ï–¢–ê–õ–¨–ù–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –†–ê–ó–û–ë–†–ê–ù–ù–´–• –ü–ê–†–ê–ú–ï–¢–†–û–í
      logger.info('üîç VEO3 –†–ê–ó–û–ë–†–ê–ù–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ –°–û–ë–´–¢–ò–Ø:', {
        telegram_id,
        username,
        is_ru,
        received_bot_name: rawBotName,
        actual_bot_name: bot_name,
        model,
        aspectRatio,
        duration,
        prompt: prompt ? `"${prompt.substring(0, 150)}${prompt.length > 150 ? '...' : ''}"` : '–û–¢–°–£–¢–°–¢–í–£–ï–¢',
        promptLength: prompt?.length || 0,
        imageUrl: imageUrl ? `PROVIDED (${imageUrl.substring(0, 100)}...)` : 'NOT_PROVIDED',
        style: style || 'NOT_PROVIDED',
        cameraMovement: cameraMovement || 'NOT_PROVIDED',
        timestamp: new Date().toISOString(),
        source: 'generateVeo3Video.inngest.parsed'
      })

      logger.info('üìã Event data validation:', {
        received_bot_name: rawBotName,
        actual_bot_name: bot_name,
        telegram_id,
        has_prompt: !!prompt,
      })

      logger.info({
        message: 'üé¨ Starting VEO3 video generation',
        telegram_id,
        model,
        aspectRatio,
        duration,
        prompt: prompt.substring(0, 50) + '...',
      })

      // –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
      const botData = (await step.run('get-bot', async () => {
        logger.info({
          message: 'ü§ñ Getting bot instance',
          botName: bot_name,
          step: 'get-bot',
        })
        return getBotByName(bot_name)
      })) as { bot: any }

      const bot = botData.bot
      if (!bot) {
        logger.error({
          message: '‚ùå Bot instance not found',
          bot_name,
          telegram_id,
        })
        throw new Error(`Bot not found: ${bot_name}`)
      }

      // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userExists = await step.run('check-user', async () => {
        logger.info({
          message: 'üë§ Checking user exists',
          telegram_id,
          step: 'check-user',
        })
        return await getUserByTelegramId(telegram_id)
      })

      if (!userExists) {
        await bot.telegram.sendMessage(
          telegram_id,
          is_ru
            ? '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start'
            : '‚ùå User not found. Please start again /start'
        )
        throw new Error(`User not found: ${telegram_id}`)
      }

      // –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ KieAi API
      const generationResult = await step.run('generate-video', async () => {
        logger.info({
          message: 'üé¨ Starting video generation',
          provider: 'kie.ai',
          model,
          aspectRatio,
          duration,
          step: 'generate-video',
        })

        const kieAiService = new KieAiService()

        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Kie.ai
          const isHealthy = await kieAiService.checkHealth()
          if (!isHealthy) {
            logger.warn(
              '‚ö†Ô∏è Kie.ai API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –Ω–∞ Vertex AI'
            )
            throw new Error('Kie.ai unavailable, fallback to Vertex AI')
          }

          // ‚úÖ –ü–û–õ–£–ß–ê–ï–ú –ò–õ–ò –°–û–ó–î–ê–ï–ú –ü–†–û–ï–ö–¢ –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ü–ï–†–í–´–ú –î–ï–õ–û–ú
          const projectManager = new ProjectManager()
          const { project } = await projectManager.validateOrCreateProject(
            undefined, // project_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
            telegram_id,
            username,
            bot_name
          )
          
          logger.info('üìä Project validated/created', {
            projectId: project.id,
            projectName: project.name,
            telegram_id,
            username
          })

          // ‚úÖ –õ–û–ì–ò–†–£–ï–ú –î–ê–ù–ù–´–ï –ü–ï–†–ï–î –û–¢–ü–†–ê–í–ö–û–ô –í KIE.AI API
          // ‚ö° –í–ê–ñ–ù–û: –î–æ–±–∞–≤–ª—è–µ–º callback URL –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏
          const callbackUrl = process.env.API_URL 
            ? `${process.env.API_URL}/api/kie-ai/callback`
            : process.env.CALLBACK_BASE_URL 
            ? `${process.env.CALLBACK_BASE_URL}/api/kie-ai/callback`
            : null

          const requestPayload = {
            model,
            prompt,
            duration,
            aspectRatio,
            imageUrl,
            userId: telegram_id,
            projectId: project.id, // ‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑ –ë–î
            callBackUrl: callbackUrl, // üîó –î–æ–±–∞–≤–ª—è–µ–º callback URL!
          }
          
          logger.info('üì§ –û–¢–ü–†–ê–í–õ–Ø–Æ –ó–ê–ü–†–û–° –í KIE.AI API:', {
            telegram_id,
            bot_name,
            callbackUrl: callbackUrl || '–ù–ï –ù–ê–°–¢–†–û–ï–ù ‚ùå',
            hasCallbackUrl: !!callbackUrl,
            requestPayload: {
              ...requestPayload,
              prompt: prompt ? `"${prompt.substring(0, 150)}${prompt.length > 150 ? '...' : ''}"` : null,
            },
            requestSize: JSON.stringify(requestPayload).length,
            timestamp: new Date().toISOString(),
            source: 'generateVeo3Video.inngest.kieai.request'
          })

          // ‚úÖ –°–û–•–†–ê–ù–Ø–ï–ú –ó–ê–î–ê–ß–£ –í –ë–î –î–õ–Ø CALLBACK –û–ë–†–ê–ë–û–¢–ö–ò
          let taskTrackingId: string | null = null
          try {
            const { data: taskRecord, error: taskError } = await supabase
              .from('video_tasks')
              .insert({
                telegram_id: telegram_id,
                bot_name: bot_name,
                prompt: prompt,
                model: model,
                status: 'processing',
                provider: 'kie.ai',
                project_id: project.id, // ‚úÖ –°–≤—è–∑—ã–≤–∞–µ–º —Å –ø—Ä–æ–µ–∫—Ç–æ–º
                created_at: new Date().toISOString(),
                duration: duration,
                aspect_ratio: aspectRatio,
                estimated_cost: duration * 0.05, // $0.05/—Å–µ–∫ –¥–ª—è veo3_fast
              })
              .select('id')
              .single()

            if (taskError) {
              logger.warn('‚ö†Ô∏è Failed to save task to database', {
                error: taskError.message,
                telegram_id,
                model,
              })
            } else {
              taskTrackingId = taskRecord?.id?.toString() || null
              logger.info('‚úÖ Task saved to database', {
                taskId: taskTrackingId,
                telegram_id,
                bot_name,
                model,
              })
            }
          } catch (dbError) {
            logger.error('‚ùå Database save error', {
              error: dbError,
              telegram_id,
              model,
            })
          }

          // ‚úÖ ASYNC –ì–ï–ù–ï–†–ê–¶–ò–Ø –ß–ï–†–ï–ó KIE.AI (–ù–ï –ñ–î–ï–ú –†–ï–ó–£–õ–¨–¢–ê–¢!)
          const result = await kieAiService.generateVideo(requestPayload)

          // ‚úÖ –û–ë–ù–û–í–õ–Ø–ï–ú –ó–ê–î–ê–ß–£ –° TASK_ID –û–¢ KIE.AI
          if (result.taskId && taskTrackingId) {
            try {
              const { error: updateError } = await supabase
                .from('video_tasks')
                .update({ 
                  task_id: result.taskId,
                  external_task_id: result.taskId, // –î—É–±–ª–∏—Ä—É–µ–º –¥–ª—è –ø–æ–∏—Å–∫–∞
                })
                .eq('id', taskTrackingId)

              if (updateError) {
                logger.warn('‚ö†Ô∏è Failed to update task with Kie.ai task_id', {
                  error: updateError.message,
                  taskTrackingId,
                  kieaiTaskId: result.taskId,
                })
              } else {
                logger.info('‚úÖ Task updated with Kie.ai task_id', {
                  taskTrackingId,
                  kieaiTaskId: result.taskId,
                  telegram_id,
                  bot_name,
                })
              }
            } catch (updateError) {
              logger.error('‚ùå Database update error', {
                error: updateError,
                taskTrackingId,
                kieaiTaskId: result.taskId,
              })
            }
          }

          // ‚úÖ –ï–°–õ–ò CALLBACK –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø - –ó–ê–í–ï–†–®–ê–ï–ú –§–£–ù–ö–¶–ò–Æ –°–†–ê–ó–£!
          if (result.callbackUrl) {
            logger.info('üîó ASYNC MODE: Task submitted to Kie.ai with callback', {
              taskId: result.taskId,
              callbackUrl: result.callbackUrl,
              telegram_id,
              bot_name,
              taskTrackingId,
            })

            // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á—Ç–æ –∑–∞–¥–∞—á–∞ –ø—Ä–∏–Ω—è—Ç–∞  
            const bot = botData.bot
            if (bot && telegram_id) {
              await bot.telegram.sendMessage(
                telegram_id,
                is_ru 
                  ? 'üé¨ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∑–∞–ø—É—â–µ–Ω–∞! –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∏–¥–µ—Ç —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...'
                  : 'üé¨ Video generation started! Result will be delivered in a few minutes...'
              )
            }

            // ‚úÖ –í–û–ó–í–†–ê–©–ê–ï–ú –£–°–ü–ï–• –ë–ï–ó –û–ñ–ò–î–ê–ù–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–ê!
            return {
              success: true,
              taskId: result.taskId,
              message: 'Video generation submitted to Kie.ai with callback',
              provider: 'kie.ai',
              model,
              async: true,
              callbackUrl: result.callbackUrl,
            }
          }

          // ‚úÖ –°–¢–ê–†–´–ô SYNC –†–ï–ñ–ò–ú (–µ—Å–ª–∏ –Ω–µ—Ç callback URL)
          logger.info({
            message: '‚úÖ Video generated via Kie.ai (SYNC)',
            videoUrl: result.videoUrl,
            cost: result.cost,
            processingTime: result.processingTime,
            taskId: result.taskId,
            taskTrackingId,
          })

          return {
            videoUrl: result.videoUrl,
            cost: result.cost,
            provider: 'kie.ai',
            model,
            processingTime: result.processingTime,
          }
        } catch (kieError: any) {
          logger.warn({
            message: '‚ö†Ô∏è Kie.ai generation failed, falling back to Vertex AI',
            error: kieError.message,
            errorCode: kieError.response?.status,
            step: 'fallback-to-vertex',
            telegram_id,
            model,
          })

          // –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ fallback
          try {
            const bot = botData.bot
            if (bot && telegram_id) {
              await bot.telegram.sendMessage(
                telegram_id,
                is_ru
                  ? '‚ö†Ô∏è –û—Å–Ω–æ–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é (–º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω–µ–µ)...'
                  : '‚ö†Ô∏è Primary system unavailable. Using backup system (may be slower)...'
              )
            }
          } catch (notifyError) {
            logger.warn(
              'Failed to notify user about fallback:',
              notifyError.message
            )
          }

          // Fallback –Ω–∞ Vertex AI
          const fallbackVideoUrl = await processVideoGeneration(
            model === 'veo3_fast' ? 'veo-3-fast' : 'veo-3',
            aspectRatio,
            prompt,
            imageUrl,
            duration
          )

          // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å Vertex AI (–¥–æ—Ä–æ–∂–µ Kie.ai)
          const vertexCost = duration * 0.4 // $0.40/—Å–µ–∫ –¥–ª—è Vertex AI

          logger.info({
            message: '‚úÖ Video generated via Vertex AI (fallback)',
            videoUrl: fallbackVideoUrl,
            estimatedCost: vertexCost,
          })

          return {
            videoUrl: fallbackVideoUrl,
            cost: vertexCost,
            provider: 'vertex-ai',
            model: model === 'veo3_fast' ? 'veo-3-fast' : 'veo-3',
            processingTime: null,
          }
        }
      })

      // ‚ö° ASYNC –†–ï–ñ–ò–ú: –±–∞–ª–∞–Ω—Å –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏—Å—Ö–æ–¥—è—Ç –≤ webhook callback!

      // –®–∞–≥ 4: –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 
      await step.run('notify-generation-started', async () => {
        logger.info({
          message: 'üì§ Sending generation started notification',
          telegram_id,
          taskId: generationResult.taskId,
          step: 'notify-generation-started',
        })

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
          const asyncMessage = is_ru
            ? `‚è≥ **–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –Ω–∞—á–∞—Ç–∞!**\n\n` +
              `üì± **–§–æ—Ä–º–∞—Ç:** ${aspectRatio}\n` +
              `‚è±Ô∏è **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** ${duration}—Å\n` +
              `ü§ñ **–ú–æ–¥–µ–ª—å:** ${generationResult.model}\n` +
              `üîó **–ü—Ä–æ–≤–∞–π–¥–µ—Ä:** ${generationResult.provider}\n` +
              `üìã **ID –∑–∞–¥–∞—á–∏:** ${generationResult.taskId}\n\n` +
              `üîî **–í–∏–¥–µ–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏**\n\n` +
              `‚ú® –°–æ–∑–¥–∞–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é VEO3 AI`
            : `‚è≥ **Video Generation Started!**\n\n` +
              `üì± **Format:** ${aspectRatio}\n` +
              `‚è±Ô∏è **Duration:** ${duration}s\n` +
              `ü§ñ **Model:** ${generationResult.model}\n` +
              `üîó **Provider:** ${generationResult.provider}\n` +
              `üìã **Task ID:** ${generationResult.taskId}\n\n` +
              `üîî **Video will be delivered automatically after generation completes**\n\n` +
              `‚ú® Generating with VEO3 AI`

          await bot.telegram.sendMessage(telegram_id, asyncMessage, {
            parse_mode: 'Markdown',
          })

          logger.info({
            message: '‚úÖ Generation started notification sent',
            taskId: generationResult.taskId,
            telegram_id,
          })
      })

      // ‚ö° –§—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–∞–ª—å—à–µ webhook –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç

      logger.info({
        message: '‚úÖ VEO3 video generation request sent successfully',
        telegram_id,
        taskId: generationResult.taskId,
        provider: generationResult.provider,
        asyncMode: true,
      })

      return {
        success: true,
        taskId: generationResult.taskId,
        provider: generationResult.provider,
        model: generationResult.model,
        aspectRatio,
        duration,
        asyncMode: true,
        message: 'Generation started, video will be delivered via callback'
      }
    } catch (error: any) {
      // –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è –ª—É—á—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      const errorType = categorizeError(error)

      logger.error({
        message: '‚ùå VEO3 video generation failed',
        error: error.message,
        errorType: errorType.type,
        telegram_id: event.data.telegram_id,
        bot_name: event.data.bot_name,
        model: event.data.model || 'veo3_fast',
        stack: error.stack,
        httpStatus: error.response?.status,
        responseData: error.response?.data,
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      try {
        const bot = (await getBotByName(event.data.bot_name)) as { bot: any }
        if (bot?.bot) {
          const userMessage = getUserFriendlyErrorMessage(
            error,
            event.data.is_ru
          )
          await errorMessage(
            bot.bot,
            event.data.telegram_id,
            event.data.is_ru,
            userMessage
          )

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
          if (errorType.critical) {
            await errorMessageAdmin(
              bot.bot,
              `üö® Critical video generation error\n` +
                `User: ${event.data.telegram_id}\n` +
                `Bot: ${event.data.bot_name}\n` +
                `Error: ${error.message}\n` +
                `Type: ${errorType.type}`
            )
          }
        }
      } catch (botError: any) {
        logger.error({
          message: '‚ùå Failed to send error message to user',
          error: botError.message,
          originalError: error.message,
        })
      }

      throw error
    }
  }
)
