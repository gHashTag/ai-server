/**
 * üé¨ VEO3 Video Generation via Kie.ai API
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Kie.ai —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ (9:16, 16:9, 1:1)
 * –° fallback –Ω–∞ Vertex AI –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Kie.ai
 */

import { inngest } from '@/core/inngest/clients'
import { KieAiService } from '@/services/kieAiService'
import { processVideoGeneration } from '@/services/generateTextToVideo'
import { getBotByName } from '@/core/bot'
import {
  getUserByTelegramId,
  updateUserLevelPlusOne,
  updateUserBalance,
} from '@/core/supabase'
import { saveVideoUrlToSupabase } from '@/core/supabase/saveVideoUrlToSupabase'
import { processBalanceVideoOperation } from '@/price/helpers'
import { errorMessage, errorMessageAdmin } from '@/helpers'
import { logger } from '@/utils/logger'
import { PaymentType } from '@/interfaces/payments.interface'
import { ModeEnum } from '@/interfaces/modes'
import { slugify } from 'inngest'

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è
interface Veo3GenerationEventData {
  prompt: string
  model: 'veo3_fast' | 'veo3' | 'runway-aleph'
  aspectRatio: '9:16' | '16:9' | '1:1'
  duration: number // 2-10 —Å–µ–∫—É–Ω–¥
  telegram_id: string
  username: string
  is_ru: boolean
  bot_name: string
  imageUrl?: string // –¥–ª—è image-to-video
  style?: string
  cameraMovement?: string
}

export const generateVeo3Video = inngest.createFunction(
  {
    id: slugify('veo3-video-generation'),
    name: 'üé¨ VEO3 Video Generation',
    retries: 3,
  },
  { event: 'veo3/video.generate' },
  async ({ event, step }) => {
    try {
      const {
        prompt,
        model = 'veo3_fast',
        aspectRatio = '9:16',
        duration = 3,
        telegram_id,
        username,
        is_ru,
        bot_name,
        imageUrl,
        style,
        cameraMovement,
      } = event.data as Veo3GenerationEventData

      logger.info({
        message: 'üé¨ Starting VEO3 video generation',
        telegram_id,
        model,
        aspectRatio,
        duration,
        prompt: prompt.substring(0, 50) + '...',
      })

      // –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –±–æ—Ç–∞
      const botData = (await step.run('get-bot', async () => {
        logger.info({
          message: 'ü§ñ Getting bot instance',
          botName: bot_name,
          step: 'get-bot',
        })
        return getBotByName(bot_name)
      })) as { bot: any }

      const bot = botData.bot
      if (!bot) {
        logger.error({
          message: '‚ùå Bot instance not found',
          bot_name,
          telegram_id,
        })
        throw new Error(`Bot not found: ${bot_name}`)
      }

      // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userExists = await step.run('check-user', async () => {
        logger.info({
          message: 'üë§ Checking user exists',
          telegram_id,
          step: 'check-user',
        })
        return await getUserByTelegramId(telegram_id)
      })

      if (!userExists) {
        await bot.telegram.sendMessage(
          telegram_id,
          is_ru
            ? '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ /start'
            : '‚ùå User not found. Please start again /start'
        )
        throw new Error(`User not found: ${telegram_id}`)
      }

      // –®–∞–≥ 3: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ KieAi API
      const generationResult = await step.run('generate-video', async () => {
        logger.info({
          message: 'üé¨ Starting video generation',
          provider: 'kie.ai',
          model,
          aspectRatio,
          duration,
          step: 'generate-video',
        })

        const kieAiService = new KieAiService()

        try {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Kie.ai
          const isHealthy = await kieAiService.checkHealth()
          if (!isHealthy) {
            logger.warn(
              '‚ö†Ô∏è Kie.ai API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback –Ω–∞ Vertex AI'
            )
            throw new Error('Kie.ai unavailable, fallback to Vertex AI')
          }

          // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ Kie.ai
          const result = await kieAiService.generateVideo({
            model,
            prompt,
            duration,
            aspectRatio,
            imageUrl,
            userId: telegram_id,
          })

          logger.info({
            message: '‚úÖ Video generated via Kie.ai',
            videoUrl: result.videoUrl,
            cost: result.cost,
            processingTime: result.processingTime,
          })

          return {
            videoUrl: result.videoUrl,
            cost: result.cost,
            provider: 'kie.ai',
            model,
            processingTime: result.processingTime,
          }
        } catch (kieError: any) {
          logger.warn({
            message: '‚ö†Ô∏è Kie.ai generation failed, falling back to Vertex AI',
            error: kieError.message,
            step: 'fallback-to-vertex',
          })

          // Fallback –Ω–∞ Vertex AI
          const fallbackVideoUrl = await processVideoGeneration(
            model === 'veo3_fast' ? 'veo-3-fast' : 'veo-3',
            aspectRatio,
            prompt,
            imageUrl,
            duration
          )

          // –ü—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å Vertex AI (–¥–æ—Ä–æ–∂–µ Kie.ai)
          const vertexCost = duration * 0.4 // $0.40/—Å–µ–∫ –¥–ª—è Vertex AI

          logger.info({
            message: '‚úÖ Video generated via Vertex AI (fallback)',
            videoUrl: fallbackVideoUrl,
            estimatedCost: vertexCost,
          })

          return {
            videoUrl: fallbackVideoUrl,
            cost: vertexCost,
            provider: 'vertex-ai',
            model: model === 'veo3_fast' ? 'veo-3-fast' : 'veo-3',
            processingTime: null,
          }
        }
      })

      // –®–∞–≥ 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await step.run('process-balance', async () => {
        logger.info({
          message: 'üí∞ Processing user balance',
          cost: generationResult.cost,
          provider: generationResult.provider,
          step: 'process-balance',
        })

        // –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤ –∑–≤–µ–∑–¥–∞—Ö (—Å –Ω–∞—Ü–µ–Ω–∫–æ–π)
        const STAR_COST_USD = 0.016
        const MARKUP_RATE = 1.5
        const starsRequired = Math.ceil(
          (generationResult.cost * MARKUP_RATE) / STAR_COST_USD
        )

        await processBalanceVideoOperation({
          telegram_id,
          cost: starsRequired,
          paymentType: PaymentType.VEO3_VIDEO_GENERATION,
          mode: ModeEnum.TextToVideo,
          username,
          is_ru,
          bot,
        })
      })

      // –®–∞–≥ 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–∏–¥–µ–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await step.run('save-video-url', async () => {
        logger.info({
          message: 'üíæ Saving video URL to database',
          videoUrl: generationResult.videoUrl,
          step: 'save-video-url',
        })

        await saveVideoUrlToSupabase(
          generationResult.videoUrl,
          telegram_id,
          prompt,
          'veo3_video_generation'
        )
      })

      // –®–∞–≥ 6: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await step.run('send-result', async () => {
        logger.info({
          message: 'üì§ Sending result to user',
          telegram_id,
          provider: generationResult.provider,
          step: 'send-result',
        })

        const successMessage = is_ru
          ? `üé¨ **–í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!**\n\n` +
            `üì± **–§–æ—Ä–º–∞—Ç:** ${aspectRatio}\n` +
            `‚è±Ô∏è **–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:** ${duration}—Å\n` +
            `ü§ñ **–ú–æ–¥–µ–ª—å:** ${generationResult.model}\n` +
            `üîó **–ü—Ä–æ–≤–∞–π–¥–µ—Ä:** ${generationResult.provider}\n\n` +
            `‚ú® –°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é VEO3 AI`
          : `üé¨ **Video Ready!**\n\n` +
            `üì± **Format:** ${aspectRatio}\n` +
            `‚è±Ô∏è **Duration:** ${duration}s\n` +
            `ü§ñ **Model:** ${generationResult.model}\n` +
            `üîó **Provider:** ${generationResult.provider}\n\n` +
            `‚ú® Generated with VEO3 AI`

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–º
        try {
          await bot.telegram.sendVideo(telegram_id, generationResult.videoUrl, {
            caption: successMessage,
            parse_mode: 'Markdown',
          })
        } catch (videoError: any) {
          // –ï—Å–ª–∏ –≤–∏–¥–µ–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É
          logger.warn({
            message: '‚ö†Ô∏è Failed to send video file, sending URL instead',
            error: videoError.message,
          })

          await bot.telegram.sendMessage(
            telegram_id,
            `${successMessage}\n\nüìé **–°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ:** ${generationResult.videoUrl}`,
            { parse_mode: 'Markdown' }
          )
        }
      })

      // –®–∞–≥ 7: –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await step.run('level-up', async () => {
        logger.info({
          message: '‚≠ê Processing user level up',
          telegram_id,
          step: 'level-up',
        })

        await updateUserLevelPlusOne(telegram_id)
      })

      logger.info({
        message: '‚úÖ VEO3 video generation completed successfully',
        telegram_id,
        provider: generationResult.provider,
        cost: generationResult.cost,
        videoUrl: generationResult.videoUrl,
      })

      return {
        success: true,
        videoUrl: generationResult.videoUrl,
        provider: generationResult.provider,
        model: generationResult.model,
        aspectRatio,
        duration,
        cost: generationResult.cost,
        processingTime: generationResult.processingTime,
      }
    } catch (error: any) {
      logger.error({
        message: '‚ùå VEO3 video generation failed',
        error: error.message,
        telegram_id: event.data.telegram_id,
        stack: error.stack,
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      try {
        const bot = (await getBotByName(event.data.bot_name)) as { bot: any }
        if (bot?.bot) {
          await errorMessage(
            bot.bot,
            event.data.telegram_id,
            event.data.is_ru,
            error.message
          )
        }
      } catch (botError: any) {
        logger.error({
          message: '‚ùå Failed to send error message to user',
          error: botError.message,
        })
      }

      throw error
    }
  }
)
