import { inngest } from '../core/inngest/clients'
import { getBotByName } from '@/core/bot'
import {
  getUserByTelegramId,
  updateUserBalance,
  updateUserLevelPlusOne,
  getUserBalance,
  createModelTrainingV2,
} from '@/core/supabase'
import { processBalanceOperation } from '@/price/helpers'
// import { modeCosts } from '@/price/helpers/modelsCost' // –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω—É–∂–µ–Ω –ª–∏ modeCosts –∑–¥–µ—Å—å
import { ModeEnum } from '@/interfaces/modes'
import { calculateModeCost } from '@/price/helpers/modelsCost' // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º calculateModeCost, –µ—Å–ª–∏ –æ–Ω –Ω—É–∂–µ–Ω
import { errorMessageAdmin } from '@/helpers/errorMessageAdmin'
import axios from 'axios'
import { logger } from '@/utils/logger'
import { PaymentType } from '@/interfaces/payments.interface'
import { slugify } from 'inngest' // For v3 migration

interface TrainingResponse {
  id: string
  status: string
  urls: { get: string }
  error?: string
  finetune_id?: string
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –≤ base64
async function encodeFileToBase64(url: string): Promise<string> {
  const response = await axios.get(url, { responseType: 'arraybuffer' })
  const buffer = Buffer.from(response.data)
  return buffer.toString('base64')
}

// –°–æ–∑–¥–∞–µ–º Inngest —Ñ—É–Ω–∫—Ü–∏—é
export const modelTrainingV2 = inngest.createFunction(
  {
    id: slugify('model-training-v2'), // v3 requires id
    name: 'Model Training V2', // Optional display name
  },
  { event: 'model/training.v2.requested' },
  async ({ event, step, runId }) => {
    logger.info({
      message: 'üöÄ Model training initiated',
      runId: runId, // Use runId from args
      data: event.data,
    })

    const {
      zipUrl,
      triggerWord,
      modelName,
      steps,
      telegram_id,
      is_ru,
      bot_name,
      gender,
    } = event.data

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    const userExists = await step.run('check-user-exists', async () => {
      logger.info({
        message: 'üîç Checking user existence',
        telegramId: telegram_id,
        step: 'check-user-exists',
      })

      const user = await getUserByTelegramId(telegram_id)
      if (!user) {
        logger.error({
          message: '‚ùå User not found',
          telegramId: telegram_id,
          step: 'check-user-exists',
        })
        throw new Error(`User with ID ${telegram_id} does not exist.`)
      }

      logger.info({
        message: '‚úÖ User found',
        telegramId: telegram_id,
        userId: user.user_id,
        step: 'check-user-exists',
      })

      return user
    })

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–∞ —É—Ä–æ–≤–Ω–µ 0
    if (userExists.level === 0) {
      await step.run('update-user-level', async () => {
        logger.info({
          message: '‚¨ÜÔ∏è Upgrading user level from 0 to 1',
          telegramId: telegram_id,
          currentLevel: userExists.level,
          step: 'update-user-level',
        })

        await updateUserLevelPlusOne(telegram_id, userExists.level)

        logger.info({
          message: '‚úÖ User level updated successfully',
          telegramId: telegram_id,
          newLevel: 1,
          step: 'update-user-level',
        })
      })
    }

    // –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç –ø–æ –∏–º–µ–Ω–∏
    const botData = (await step.run('get-bot', async () => {
      logger.info({
        message: 'ü§ñ Getting bot instance',
        botName: bot_name,
        step: 'get-bot',
      })

      return getBotByName(bot_name)
    })) as { bot: any }

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –±–æ—Ç–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ñ—É–Ω–∫—Ü–∏–∏ getBotByName
    const bot = botData.bot

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
    const { currentBalance, paymentAmount } = await step.run(
      'check-balance',
      async () => {
        logger.info({
          message: 'üí∞ Checking user balance',
          telegramId: telegram_id,
          botName: bot_name,
          step: 'check-balance',
        })

        const currentBalance = await getUserBalance(telegram_id)

        logger.info({
          message: 'üí≤ Current user balance',
          telegramId: telegram_id,
          balance: currentBalance,
          step: 'check-balance',
        })

        const paymentAmount = (
          calculateModeCost[ModeEnum.DigitalAvatarBodyV2] as (
            steps: number
          ) => number
        )(steps)

        logger.info({
          message: 'üßÆ Calculated payment amount',
          telegramId: telegram_id,
          paymentAmount: paymentAmount,
          trainingSteps: steps,
          step: 'check-balance',
        })

        const balanceCheck = await processBalanceOperation({
          telegram_id,
          paymentAmount,
          is_ru,
          bot_name,
        })

        if (!balanceCheck.success) {
          logger.error({
            message: '‚ö†Ô∏è Balance check failed or insufficient funds',
            telegramId: telegram_id,
            requiredAmount: paymentAmount,
            currentBalance: balanceCheck.currentBalance,
            error: balanceCheck.error,
            step: 'check-balance',
          })

          if (balanceCheck.error) {
            try {
              await bot.telegram.sendMessage(
                telegram_id.toString(),
                balanceCheck.error
              )
            } catch (notifyError) {
              logger.error(
                'Failed to send balance error notification to user',
                { telegramId: telegram_id, error: notifyError }
              )
            }
          }

          throw new Error(balanceCheck.error || 'Balance check failed')
        }

        logger.info({
          message: '‚úÖ Balance check successful',
          telegramId: telegram_id,
          currentBalance: balanceCheck.currentBalance,
          requiredAmount: paymentAmount,
          step: 'check-balance',
        })

        return { currentBalance: balanceCheck.currentBalance, paymentAmount }
      }
    )

    try {
      // –ö–æ–¥–∏—Ä—É–µ–º ZIP —Ñ–∞–π–ª –≤ base64
      const encodedZip = await step.run('encode-zip', async () => {
        logger.info({
          message: 'üì¶ Encoding ZIP file to base64',
          zipUrl: zipUrl,
          step: 'encode-zip',
        })

        const result = await encodeFileToBase64(zipUrl)

        logger.info({
          message: '‚úÖ ZIP file encoded successfully',
          zipUrl: zipUrl,
          step: 'encode-zip',
        })

        return result
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
      const training = await step.run('create-training', async () => {
        logger.info({
          message: 'üîç Checking environment variables',
          step: 'create-training',
        })

        if (!process.env.BFL_API_KEY) {
          logger.error({
            message: 'üö´ Missing required environment variable',
            variable: 'BFL_API_KEY',
            step: 'create-training',
          })

          throw new Error('BFL_API_KEY is not set')
        }
        if (!process.env.BFL_WEBHOOK_URL) {
          logger.error({
            message: 'üö´ Missing required environment variable',
            variable: 'BFL_WEBHOOK_URL',
            step: 'create-training',
          })

          throw new Error('BFL_WEBHOOK_URL is not set')
        }
        if (!process.env.REPLICATE_USERNAME) {
          logger.error({
            message: 'üö´ Missing required environment variable',
            variable: 'REPLICATE_USERNAME',
            step: 'create-training',
          })

          throw new Error('REPLICATE_USERNAME is not set')
        }

        logger.info({
          message: 'üåê Sending request to BFL API for model creation',
          telegramId: telegram_id,
          triggerWord: triggerWord,
          modelName: modelName,
          steps: steps,
          step: 'create-training',
        })

        const response = await fetch('https://api.us1.bfl.ai/v1/finetune', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Key': process.env.BFL_API_KEY,
          },
          body: JSON.stringify({
            file_data: encodedZip,
            finetune_comment: telegram_id,
            trigger_word: triggerWord,
            mode: 'character',
            iterations: steps,
            learning_rate: 0.00001,
            captioning: true,
            priority: 'high_res_only',
            finetune_type: 'full',
            lora_rank: 32,
            webhook_url: process.env.BFL_WEBHOOK_URL,
            webhook_secret: process.env.BFL_WEBHOOK_SECRET,
          }),
        })

        logger.info({
          message: 'üì° Received response from BFL API',
          statusCode: response.status,
          step: 'create-training',
        })

        if (!response.ok) {
          logger.error({
            message: '‚ùå Failed to create model training',
            statusCode: response.status,
            step: 'create-training',
          })

          throw new Error(
            `Failed to initiate training with new API. Status: ${response.status}`
          )
        }

        const jsonResponse = (await response.json()) as TrainingResponse

        logger.info({
          message: 'üéâ Model training initiated successfully',
          finetune_id: jsonResponse.finetune_id,
          telegramId: telegram_id,
          modelName: modelName,
          step: 'create-training',
        })

        return jsonResponse
      })

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
      await step.run('save-training-to-db', async () => {
        logger.info({
          message: 'üíæ Saving training information to database',
          finetune_id: training.finetune_id,
          telegramId: telegram_id,
          modelName: modelName,
          step: 'save-training-to-db',
        })

        await createModelTrainingV2({
          finetune_id: training.finetune_id,
          telegram_id: telegram_id,
          model_name: modelName,
          trigger_word: triggerWord,
          zip_url: zipUrl,
          steps,
          api: 'bfl',
          gender,
          bot_name,
        })

        logger.info({
          message: '‚úÖ Training information saved successfully',
          finetune_id: training.finetune_id,
          telegramId: telegram_id,
          modelName: modelName,
          step: 'save-training-to-db',
        })
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await step.run('notify-user', async () => {
        logger.info({
          message: 'üì© Sending notification to user',
          telegramId: telegram_id,
          modelName: modelName,
          step: 'notify-user',
        })

        await bot.telegram.sendMessage(
          telegram_id,
          is_ru
            ? `‚úÖ –û–±—É—á–µ–Ω–∏–µ –≤–∞—à–µ–π –º–æ–¥–µ–ª–∏ "${modelName}" –Ω–∞—á–∞–ª–æ—Å—å! –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –º–æ–¥–µ–ª—å –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–∞.`
            : `‚úÖ Your model "${modelName}" training has started! We'll notify you when it's ready.`
        )

        logger.info({
          message: 'üì® Notification sent successfully',
          telegramId: telegram_id,
          step: 'notify-user',
        })
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± —É—Å–ø–µ—Ö–µ –∏ —Å–ø–∏—Å–∞–Ω–∏–∏
      await step.run('deduct-balance', async () => {
        logger.info({
          message: 'üí∏ Deducting balance after successful training start',
          telegramId: telegram_id,
          paymentAmount: paymentAmount,
          currentBalance: currentBalance,
          step: 'deduct-balance',
        })

        const newBalance = currentBalance - paymentAmount

        await updateUserBalance(
          telegram_id,
          paymentAmount, // ‚Üê –ò–°–ü–†–ê–í–õ–ï–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º —Å—É–º–º—É –æ–ø–µ—Ä–∞—Ü–∏–∏, –∞ –Ω–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
          PaymentType.MONEY_OUTCOME,
          `–û–ø–ª–∞—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏ ${modelName} (—à–∞–≥–æ–≤: ${steps})`,
          {
            stars: paymentAmount,
            payment_method: 'System',
            bot_name,
            language: is_ru ? 'ru' : 'en',
            service_type: ModeEnum.DigitalAvatarBodyV2, // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: —É–∫–∞–∑—ã–≤–∞–µ–º —Ç–∏–ø —Å–µ—Ä–≤–∏—Å–∞
            operation_id: training.id,
            category: 'REAL',
            cost: paymentAmount / 1.5, // ‚Üê –î–û–ë–ê–í–õ–ï–ù–û: —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ü–µ–Ω–∞ √∑ –Ω–∞—Ü–µ–Ω–∫–∞ 50%)
          }
        )

        logger.info({
          message: '‚úÖ Balance updated successfully',
          telegramId: telegram_id,
          newBalance: newBalance,
          step: 'deduct-balance',
        })

        const successMessage = is_ru
          ? `‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ ${modelName} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞! –° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ ${paymentAmount} ‚≠ê. –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance.toFixed(
              2
            )} ‚≠ê.`
          : `‚úÖ Model training ${modelName} started successfully! ${paymentAmount} ‚≠ê deducted from your balance. Your new balance: ${newBalance.toFixed(
              2
            )} ‚≠ê.`

        await bot.telegram.sendMessage(telegram_id.toString(), successMessage)
      })

      logger.info({
        message: 'üèÅ Model training process completed successfully',
        telegramId: telegram_id,
        modelName: modelName,
        finetune_id: training.finetune_id,
      })

      return {
        success: true,
        message: `Training initiated successfully: ${JSON.stringify(training)}`,
      }
    } catch (error) {
      // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–ø–∏—Å–∞–Ω–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞
      await step.run('refund-balance', async () => {
        logger.info({
          message: '‚ôªÔ∏è Refunding payment due to error',
          telegramId: telegram_id,
          amount: paymentAmount,
          currentBalance: currentBalance,
          newBalance: currentBalance + paymentAmount,
          step: 'refund-balance',
        })

        await updateUserBalance(
          telegram_id,
          currentBalance + paymentAmount,
          PaymentType.MONEY_INCOME,
          `Refund for model training ${modelName} (steps: ${steps})`,
          {
            payment_method: 'System',
            bot_name,
            language: is_ru ? 'ru' : 'en',
          }
        )

        logger.info({
          message: '‚úÖ Payment refunded successfully',
          telegramId: telegram_id,
          newBalance: currentBalance + paymentAmount,
          step: 'refund-balance',
        })
      })

      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      await step.run('handle-error', async () => {
        logger.error({
          message: 'üö® Error during model training',
          error: error.message,
          stack: error.stack,
          telegramId: telegram_id,
          modelName: modelName,
          triggerWord: triggerWord,
          step: 'handle-error',
        })

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        logger.info({
          message: 'üì± Sending error notification to user',
          telegramId: telegram_id,
          step: 'handle-error',
        })

        await bot.telegram.sendMessage(
          telegram_id,
          is_ru
            ? `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n\n–û—à–∏–±–∫–∞: ${error.message}`
            : `‚ùå An error occurred during model generation. Please try again.\n\nError: ${error.message}`
        )

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        logger.info({
          message: 'üë®‚Äçüíº Sending error notification to admin',
          telegramId: telegram_id,
          error: error.message,
          step: 'handle-error',
        })

        errorMessageAdmin(error as Error)
      })

      logger.error({
        message: 'üõë Model training process failed',
        telegramId: telegram_id,
        modelName: modelName,
        error: error.message,
      })

      throw error
    }
  }
)
