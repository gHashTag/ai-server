import { inngest } from '@/core/inngest/clients'
import { logger } from '@/utils/logger'
import { Telegraf as Bot } from 'telegraf'
import { OpenAI } from 'openai'

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const BOT_TOKEN = '7667727700:AAEJIvtBWxgy_cj_Le_dGMpqA_dz7Pwhj0c'
const ADMIN_TELEGRAM_ID = process.env.ADMIN_TELEGRAM_ID || '144022504'
const GROUP_CHAT_ID = ADMIN_TELEGRAM_ID // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º ID –∞–¥–º–∏–Ω–∞

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY || process.env.DEEPSEEK_API_KEY,
  baseURL: process.env.DEEPSEEK_API_KEY ? 'https://api.deepseek.com' : undefined
})

interface ErrorContext {
  error: string
  stack?: string
  endpoint?: string
  userId?: string
  timestamp: string
  severity: 'critical' | 'high' | 'medium'
  context?: any
}

// –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏—è
async function analyzeError(errorContext: ErrorContext): Promise<{
  analysis: string
  solution: string
  urgency: 'immediate' | 'high' | 'normal'
  tags: string[]
}> {
  const prompt = `–¢—ã –æ–ø—ã—Ç–Ω—ã–π DevOps –∏–Ω–∂–µ–Ω–µ—Ä. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç—É –æ—à–∏–±–∫—É –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —Ä–µ—à–µ–Ω–∏–µ:

–û—à–∏–±–∫–∞: ${errorContext.error}
–°—Ç–µ–∫: ${errorContext.stack || '–ù–µ –¥–æ—Å—Ç—É–ø–µ–Ω'}
–≠–Ω–¥–ø–æ–∏–Ω—Ç: ${errorContext.endpoint || '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω'}
–í—Ä–µ–º—è: ${errorContext.timestamp}
–ö–æ–Ω—Ç–µ–∫—Å—Ç: ${JSON.stringify(errorContext.context || {})}

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å:
1. –ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏
2. –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —à–∞–≥–∏ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
3. –£—Ä–æ–≤–µ–Ω—å —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ (immediate/high/normal)
4. –¢–µ–≥–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏

–û—Ç–≤–µ—Ç –≤ JSON —Ñ–æ—Ä–º–∞—Ç–µ:
{
  "analysis": "–ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑",
  "solution": "–®–∞–≥–∏ —Ä–µ—à–µ–Ω–∏—è",
  "urgency": "immediate|high|normal",
  "tags": ["tag1", "tag2"]
}`

  try {
    const response = await openai.chat.completions.create({
      model: process.env.DEEPSEEK_API_KEY ? 'deepseek-chat' : 'gpt-4-turbo-preview',
      messages: [
        { role: 'system', content: '–¢—ã –æ–ø—ã—Ç–Ω—ã–π DevOps –∏–Ω–∂–µ–Ω–µ—Ä, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—â–∏–π—Å—è –Ω–∞ Node.js –∏ TypeScript –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö.' },
        { role: 'user', content: prompt }
      ],
      response_format: { type: 'json_object' },
      temperature: 0.3,
      max_tokens: 800
    })

    return JSON.parse(response.choices[0].message.content || '{}')
  } catch (error) {
    logger.error('Error analyzing with AI:', error)
    
    // Fallback –∞–Ω–∞–ª–∏–∑
    return {
      analysis: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, —Ç—Ä–µ–±—É—é—â–∞—è –≤–Ω–∏–º–∞–Ω–∏—è',
      solution: '1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏\n2. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å\n3. –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É',
      urgency: errorContext.severity === 'critical' ? 'immediate' : 'high',
      tags: ['error', errorContext.severity]
    }
  }
}

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
function formatErrorMessage(
  errorContext: ErrorContext,
  analysis: {
    analysis: string
    solution: string
    urgency: 'immediate' | 'high' | 'normal'
    tags: string[]
  }
): string {
  const urgencyEmoji = {
    immediate: 'üö®üî¥',
    high: '‚ö†Ô∏èüü°',
    normal: '‚ÑπÔ∏èüîµ'
  }

  let message = `${urgencyEmoji[analysis.urgency]} <b>–û–ë–ù–ê–†–£–ñ–ï–ù–ê –û–®–ò–ë–ö–ê</b>\n\n`
  
  message += `<b>üêõ –û—à–∏–±–∫–∞:</b> <code>${errorContext.error}</code>\n`
  message += `<b>üìç –ú–µ—Å—Ç–æ:</b> ${errorContext.endpoint || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n`
  message += `<b>üïê –í—Ä–µ–º—è:</b> ${new Date(errorContext.timestamp).toLocaleString('ru-RU')}\n`
  message += `<b>‚ö° –£—Ä–æ–≤–µ–Ω—å:</b> ${errorContext.severity.toUpperCase()}\n\n`
  
  message += `<b>üîç –ê–Ω–∞–ª–∏–∑:</b>\n${analysis.analysis}\n\n`
  
  message += `<b>üõ† –†–µ—à–µ–Ω–∏–µ:</b>\n${analysis.solution}\n\n`
  
  if (errorContext.stack && errorContext.stack.length < 500) {
    message += `<b>üìö –°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:</b>\n<pre>${errorContext.stack.split('\n').slice(0, 5).join('\n')}</pre>\n\n`
  }
  
  message += `<b>üè∑ –¢–µ–≥–∏:</b> ${analysis.tags.map(tag => `#${tag}`).join(' ')}\n`
  
  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é
  if (analysis.urgency === 'immediate') {
    message += '\n‚ö° <b>–¢–†–ï–ë–£–ï–¢–°–Ø –ù–ï–ú–ï–î–õ–ï–ù–ù–û–ï –í–ú–ï–®–ê–¢–ï–õ–¨–°–¢–í–û!</b>'
  } else if (analysis.urgency === 'high') {
    message += '\n‚è∞ <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–∏—Ç—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è</b>'
  }
  
  return message
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async function sendErrorNotification(message: string, urgency: string): Promise<void> {
  const bot = new Bot(BOT_TOKEN)
  
  try {
    // –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É (—Å–µ–π—á–∞—Å –∞–¥–º–∏–Ω—É)
    await bot.telegram.sendMessage(GROUP_CHAT_ID, message, {
      parse_mode: 'HTML',
      disable_web_page_preview: true
    })
    
    // –î–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –¥—É–±–ª–∏—Ä—É–µ–º –∞–¥–º–∏–Ω—É
    if (urgency === 'immediate') {
      await bot.telegram.sendMessage(
        ADMIN_TELEGRAM_ID,
        `üö® <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê!</b>\n\n${message}`,
        { parse_mode: 'HTML' }
      )
    }
    
    logger.info('Error notification sent successfully')
  } catch (error) {
    logger.error('Failed to send error notification:', error)
    throw error
  }
}

// –§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
export const criticalErrorMonitor = inngest.createFunction(
  {
    id: 'critical-error-monitor',
    name: 'üö® Critical Error Monitor',
    retries: 1,
  },
  { event: 'app/error.critical' },
  async ({ event, step }) => {
    const errorContext: ErrorContext = {
      error: event.data.error || 'Unknown error',
      stack: event.data.stack,
      endpoint: event.data.endpoint,
      userId: event.data.userId,
      timestamp: event.data.timestamp || new Date().toISOString(),
      severity: event.data.severity || 'high',
      context: event.data.context
    }
    
    logger.error('Critical error detected:', errorContext)
    
    // –®–∞–≥ 1: –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏
    const analysis = await step.run('analyze-error', async () => {
      return await analyzeError(errorContext)
    })
    
    // –®–∞–≥ 2: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    const message = await step.run('format-message', async () => {
      return formatErrorMessage(errorContext, analysis)
    })
    
    // –®–∞–≥ 3: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await step.run('send-notification', async () => {
      await sendErrorNotification(message, analysis.urgency)
    })
    
    // –®–∞–≥ 4: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    await step.run('log-for-analysis', async () => {
      logger.info('Error processed and notification sent', {
        errorId: event.id,
        urgency: analysis.urgency,
        tags: analysis.tags
      })
    })
    
    return {
      success: true,
      errorId: event.id,
      urgency: analysis.urgency,
      notificationSent: true,
      timestamp: new Date().toISOString()
    }
  }
)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
export const healthCheck = inngest.createFunction(
  {
    id: 'health-check',
    name: 'üíö Health Check Monitor',
    retries: 2,
  },
  {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    cron: '*/30 * * * *',
  },
  async ({ event, step }) => {
    const results: any[] = []
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ API
    const apiHealth = await step.run('check-api-health', async () => {
      try {
        const response = await fetch('http://localhost:4000/health')
        return {
          service: 'Main API',
          status: response.ok ? 'healthy' : 'unhealthy',
          statusCode: response.status
        }
      } catch (error) {
        return {
          service: 'Main API',
          status: 'error',
          error: error.message
        }
      }
    })
    results.push(apiHealth)
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Inngest
    const inngestHealth = await step.run('check-inngest-health', async () => {
      try {
        const response = await fetch('http://localhost:8288/health')
        return {
          service: 'Inngest',
          status: response.ok ? 'healthy' : 'unhealthy',
          statusCode: response.status
        }
      } catch (error) {
        return {
          service: 'Inngest',
          status: 'error',
          error: error.message
        }
      }
    })
    results.push(inngestHealth)
    
    // –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    const unhealthyServices = results.filter(r => r.status !== 'healthy')
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (unhealthyServices.length > 0) {
      await step.run('notify-unhealthy', async () => {
        const bot = new Bot(BOT_TOKEN)
        
        let message = '‚ö†Ô∏è <b>–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏:</b>\n\n'
        for (const service of unhealthyServices) {
          message += `‚ùå <b>${service.service}:</b> ${service.status}\n`
          if (service.error) {
            message += `   –û—à–∏–±–∫–∞: ${service.error}\n`
          }
        }
        
        message += '\nüîß –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞!'
        
        await bot.telegram.sendMessage(GROUP_CHAT_ID, message, {
          parse_mode: 'HTML'
        })
      })
    }
    
    return {
      success: true,
      healthyServices: results.filter(r => r.status === 'healthy').length,
      unhealthyServices: unhealthyServices.length,
      timestamp: new Date().toISOString()
    }
  }
)
