import 'reflect-metadata'
import express, { Application } from 'express'
import compression from 'compression'
import cookieParser from 'cookie-parser'
import cors from 'cors'
import helmet from 'helmet'
import hpp from 'hpp'
// import { createProxyMiddleware } from 'http-proxy-middleware' // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω
// const server = require('@nexrender/server')
// const { start } = require('@nexrender/worker')
import swaggerJSDoc from 'swagger-jsdoc'
import swaggerUi from 'swagger-ui-express'
import {
  NODE_ENV,
  PORT,
  LOG_FORMAT,
  // ORIGIN,
  // CREDENTIALS,
  // NEXRENDER_PORT,
} from '@config'
import { Routes } from '@interfaces/routes.interface'
import { getDynamicLogger, logger } from '@utils/logger'

import { Server } from 'http'
import path from 'path'
import morgan from 'morgan'
// import { checkSecretKey } from './utils/checkSecretKey'
import { inngestRouter } from './routes/inngest.route'
import { UploadRoute } from './routes/upload.route'
import { inngest } from './core/inngest/clients'

// const nexrenderPort = NEXRENDER_PORT
// const secret = process.env.NEXRENDER_SECRET

// server.listen(nexrenderPort, secret, () => {
//   console.log(`üöÄ Nexrender Server listening on port ${nexrenderPort}`)
// })

export class App {
  public app: Application
  public env: string
  public port: string | number
  private server: Server

  constructor(routes: Routes[]) {
    this.app = express()
    this.env = NODE_ENV || 'development'
    this.port = PORT || 3000

    this.initializeMiddlewares()
    this.initializeRoutes(routes)
    this.initializeSwagger()
    this.initializeErrorHandling()
  }

  public listen() {
    this.server = this.app.listen(this.port, () => {
      logger.info(`=================================`)
      logger.info(`======= ENV: ${this.env} =======`)
      logger.info(`üöÄ App listening on the port ${this.port}`)
      logger.info(`http://localhost:${this.port}`)
      logger.info(`=================================`)
      logger.info(`üìã API ENDPOINTS:`)
      logger.info(`   GET  /               - Welcome page`)
      logger.info(`   GET  /health         - Health check`)
      logger.info(`   GET  /api/test       - API test`)
      logger.info(`   GET  /trigger        - Trigger test event`)
      logger.info(`   POST /api/inngest    - Inngest webhook`)
      logger.info(`   POST /api/upload     - File upload`)
      logger.info(`   GET  /api-docs       - Swagger documentation`)
      logger.info(`   GET  /uploads/*      - Static files`)
      logger.info(`=================================`)
      logger.info(`üîß DEVELOPMENT TOOLS:`)
      logger.info(`   üìä Inngest Dashboard: http://localhost:8289`)
      logger.info(`   üîó Inngest Functions: http://localhost:8289/functions`)
      logger.info(`   ‚ö° Inngest Events: http://localhost:8289/events`)
      logger.info(`   üìñ API Docs: http://localhost:${this.port}/api-docs`)
      logger.info(`=================================`)
    })
    return this.server
  }

  public getServer() {
    return this.app
  }

  public close(callback?: () => void) {
    if (this.server) {
      this.server.close(callback)
    }
  }

  private initializeMiddlewares() {
    // –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π middleware, –∫–æ—Ç–æ—Ä—ã–π –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–ª res.send
    // –∏ –≤—ã–∑—ã–≤–∞–ª –æ—à–∏–±–∫–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –æ—à–∏–±–æ–∫

    // this.app.use(checkSecretKey);
    this.app.use((req, res, next) => {
      getDynamicLogger(LOG_FORMAT)(req, res, next)
    })
    this.app.use(
      cors({
        origin: '*',
        methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
        allowedHeaders: [
          'Content-Type',
          'Authorization',
          'x-inngest-signature',
          'x-inngest-sdk',
        ],
      })
    )
    this.app.use(hpp())
    // this.app.use(helmet()); // Temporarily commented out for Inngest dev troubleshooting
    this.app.use(compression())
    // –í—Ä–µ–º–µ–Ω–Ω–æ –∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–µ–º –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å multipart
    this.app.use(express.json({ limit: '10mb' }))
    this.app.use(express.urlencoded({ limit: '10mb', extended: true }))
    this.app.use(cookieParser())
    this.app.use(morgan('combined'))
    // ‚úÖ RESTORED: –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–∞–ø–∫–∞ –∫–∞–∫ –±—ã–ª–æ —Ä–∞–Ω—å—à–µ
    this.app.use(
      '/uploads',
      express.static(path.join(__dirname, '..', 'uploads'))
    )
  }

  private initializeRoutes(routes: Routes[]) {
    // –£–¥–∞–ª—è–µ–º —ç—Ç–æ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, —Ç–∞–∫ –∫–∞–∫ serve –∏–∑ inngest/express –¥–æ–ª–∂–µ–Ω —Å–∞–º –µ–≥–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
    // this.app.head('/api/inngest', (req, res) => {
    //   res.status(200).end()
    // })

<<<<<<< HEAD
    // N8N Proxy - –ø—Ä–æ–∫—Å–∏ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã /n8n/* –Ω–∞ N8N —Å–µ—Ä–≤–µ—Ä
    const n8nPort = process.env.N8N_PORT || '5678'
    const n8nHost = process.env.N8N_HOST || 'localhost'

    this.app.use(
      '/n8n',
      createProxyMiddleware({
        target: `http://${n8nHost}:${n8nPort}`,
        changeOrigin: true,
        pathRewrite: {
          '^/n8n': '', // —É–±–∏—Ä–∞–µ–º /n8n –∏–∑ –ø—É—Ç–∏ –ø—Ä–∏ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–∏
        },
        ws: true, // –ø–æ–¥–¥–µ—Ä–∂–∫–∞ WebSocket –¥–ª—è N8N
        logLevel: 'debug',
        onProxyReq: (proxyReq, req, res) => {
          getDynamicLogger().info(
            `N8N Proxy: ${req.method} ${req.url} -> ${proxyReq.getHeader(
              'host'
            )}${proxyReq.path}`
          )
        },
        onError: (err, req, res) => {
          getDynamicLogger().error(`N8N Proxy Error: ${err.message}`)
          res.status(503).json({
            error: 'N8N service unavailable',
            message: 'N8N server is not responding',
            hint: 'Make sure N8N is running on port ' + n8nPort,
          })
        },
      })
    )
=======
    // N8N Proxy - –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
    // TODO: –í–∫–ª—é—á–∏—Ç—å –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ N8N —Å–µ—Ä–≤–µ—Ä–∞
    this.app.get('/n8n', (req, res) => {
      res.status(503).json({
        error: 'N8N service temporarily unavailable',
        message: 'N8N is being configured for production deployment',
        status: 'coming_soon'
      })
    })
    
    this.app.all('/n8n/*', (req, res) => {
      res.status(503).json({
        error: 'N8N service temporarily unavailable', 
        message: 'N8N is being configured for production deployment',
        status: 'coming_soon'
      })
    })
>>>>>>> db1a088696d21b59a3333f88c7bfd3050f7edbc6

    this.app.use('/api/inngest', inngestRouter)
    this.app.use('/api/upload', new UploadRoute().router)
    this.app.get('/trigger', async (req, res) => {
      await inngest.send({
        name: 'test/hello',
        data: { name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' },
      })
      res.json({ status: '–°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! üöÄ' })
    })

    routes.forEach(route => {
      this.app.use('/', route.router)
    })

    this.app.get('/', (_req, res) => {
      try {
        res.status(200).json({
          status: 'success',
          message: 'Welcome to AI Server Express',
          version: '1.0.0',
          endpoints: {
            health: '/health',
            api: '/api/test',
          },
        })
      } catch (error) {
        logger.error('Error in root route:', error)
        res.status(500).json({
          status: 'error',
          message: 'Internal server error',
        })
      }
    })

    this.app.get('/health', (_req, res) => {
      res.json({
        status: 'OK',
        timestamp: new Date().toISOString(),
      })
    })

    this.app.get('/api/test', (_req, res) => {
      res.json({
        message: 'API is working',
      })
    })
  }

  private initializeSwagger() {
    const options = {
      swaggerDefinition: {
        info: {
          title: 'REST API',
          version: '1.0.0',
          description: 'Example docs',
        },
      },
      apis: ['swagger.yaml'],
    }

    const specs = swaggerJSDoc(options)
    this.app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(specs))
  }

  private initializeErrorHandling() {
    /* // Temporarily commented out for Inngest dev troubleshooting
    this.app.use((_req, res) => { 
      res.status(404).json({
        status: 'error',
        message: 'Route not found',
      });
    });
    */
    // –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    /*
    this.app.use((err: Error, _req: express.Request, res: express.Response) => {
      logger.error('Error:', err)

      // –ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –±–µ–∑ fallback
      try {
        res.status(500).json({
          status: 'error',
          message: 'Internal server error',
        })
      } catch (responseError) {
        logger.error('Error sending error response:', responseError)
        // –ï—Å–ª–∏ –¥–∞–∂–µ —ç—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ—Å—Ç–æ –∑–∞–≤–µ—Ä—à–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        res.end()
      }
    })
    */
  }
}
