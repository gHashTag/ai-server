import { Scenes } from 'telegraf'
import { MyContext } from '@/interfaces'
import { ModeEnum } from '@/interfaces/modes'
import {
  getUserBalanceStats,
  getUserDetailsSubscription,
} from '@/core/supabase'
import { supabase } from '@/core/supabase'
import { logger } from '@/utils/logger'

/**
 * –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Å—Ü–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback_query –æ—Ç –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
export const statsScene = new Scenes.BaseScene<MyContext>(ModeEnum.Stats)

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É
statsScene.enter(async ctx => {
  try {
    const telegram_id = ctx.from?.id?.toString()
    if (!telegram_id) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      return
    }

    const is_ru = ctx.session?.language === 'ru' || true // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
    const bot_name = ctx.botInfo?.username || 'unknown_bot'

    logger.info('üìä –í—Ö–æ–¥ –≤ —Å—Ü–µ–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', {
      description: 'Entering stats scene',
      telegram_id,
      bot_name,
    })

    await sendMainStatsMenu(ctx, telegram_id, is_ru, bot_name)
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å—Ü–µ–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', {
      description: 'Error entering stats scene',
      error: error instanceof Error ? error.message : String(error),
    })
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
  }
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query –¥–ª—è –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
statsScene.action(/^stats_(.+)_(\d+)$/, async ctx => {
  try {
    const match = ctx.match
    const action = match[1] // balance, services, payments, bots, refresh
    const telegram_id = match[2]

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –Ω–∞ —ç—Ç—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if (telegram_id !== ctx.from?.id?.toString()) {
      await ctx.answerCbQuery('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ')
      return
    }

    const is_ru = ctx.session?.language === 'ru' || true
    const bot_name = ctx.botInfo?.username || 'unknown_bot'

    logger.info('üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', {
      description: 'Processing stats action',
      action,
      telegram_id,
      bot_name,
    })

    await ctx.answerCbQuery() // –£–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏

    switch (action) {
      case 'balance':
        await showBalanceDetails(ctx, telegram_id, is_ru, bot_name)
        break
      case 'services':
        await showServiceUsage(ctx, telegram_id, is_ru, bot_name)
        break
      case 'payments':
        await showPaymentHistory(ctx, telegram_id, is_ru, bot_name)
        break
      case 'bots':
        await showUserBots(ctx, telegram_id, is_ru, bot_name)
        break
      case 'refresh':
        await sendMainStatsMenu(ctx, telegram_id, is_ru, bot_name)
        break
      default:
        await ctx.reply('‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ')
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', {
      description: 'Error processing stats action',
      error: error instanceof Error ? error.message : String(error),
    })
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞')
  }
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
statsScene.action(/^main_menu_(\d+)$/, async ctx => {
  try {
    await ctx.answerCbQuery()
    await ctx.scene.leave()
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await ctx.reply(
      ctx.session?.language === 'ru' || true
        ? 'üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
        : 'üè† Back to main menu'
    )
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', {
      description: 'Error returning to main menu',
      error: error instanceof Error ? error.message : String(error),
    })
  }
})

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function sendMainStatsMenu(
  ctx: MyContext,
  telegram_id: string,
  is_ru: boolean,
  bot_name: string
) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const balanceStats = await getUserBalanceStats(telegram_id, bot_name)
    const subscriptionDetails = await getUserDetailsSubscription(telegram_id)

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –º–µ–Ω—é
    const menuText = is_ru
      ? `üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n` +
        `üí∞ *–ë–∞–ª–∞–Ω—Å:* ${balanceStats.stars.toFixed(2)} ‚≠êÔ∏è\n` +
        `üìà *–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:* ${balanceStats.total_spent.toFixed(2)} ‚≠êÔ∏è\n` +
        `üìä *–í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ:* ${balanceStats.total_added.toFixed(2)} ‚≠êÔ∏è\n` +
        `üéÅ *–ë–æ–Ω—É—Å—ã:* ${balanceStats.bonus_stars.toFixed(2)} ‚≠êÔ∏è\n\n` +
        `${
          subscriptionDetails.isSubscriptionActive
            ? `‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞:* ${
                subscriptionDetails.subscriptionType || '–ê–∫—Ç–∏–≤–Ω–∞'
              }`
            : '‚ùå *–ü–æ–¥–ø–∏—Å–∫–∞:* –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'
        }\n\n` +
        `–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:`
      : `üìä *Your Statistics*\n\n` +
        `üí∞ *Balance:* ${balanceStats.stars.toFixed(2)} ‚≠êÔ∏è\n` +
        `üìà *Total Spent:* ${balanceStats.total_spent.toFixed(2)} ‚≠êÔ∏è\n` +
        `üìä *Total Added:* ${balanceStats.total_added.toFixed(2)} ‚≠êÔ∏è\n` +
        `üéÅ *Bonuses:* ${balanceStats.bonus_stars.toFixed(2)} ‚≠êÔ∏è\n\n` +
        `${
          subscriptionDetails.isSubscriptionActive
            ? `‚úÖ *Subscription:* ${
                subscriptionDetails.subscriptionType || 'Active'
              }`
            : '‚ùå *Subscription:* Inactive'
        }\n\n` +
        `Choose a section for detailed information:`

    // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    const keyboard = {
      inline_keyboard: [
        [
          {
            text: is_ru ? 'üí∞ –î–µ—Ç–∞–ª–∏ –±–∞–ª–∞–Ω—Å–∞' : 'üí∞ Balance Details',
            callback_data: `stats_balance_${telegram_id}`,
          },
          {
            text: is_ru ? 'üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤' : 'üìä Service Usage',
            callback_data: `stats_services_${telegram_id}`,
          },
        ],
        [
          {
            text: is_ru ? 'üí≥ –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π' : 'üí≥ Payment History',
            callback_data: `stats_payments_${telegram_id}`,
          },
          {
            text: is_ru ? 'ü§ñ –ú–æ–∏ –±–æ—Ç—ã' : 'ü§ñ My Bots',
            callback_data: `stats_bots_${telegram_id}`,
          },
        ],
        [
          {
            text: is_ru ? 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å' : 'üîÑ Refresh',
            callback_data: `stats_refresh_${telegram_id}`,
          },
          {
            text: is_ru ? 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' : 'üè† Main Menu',
            callback_data: `main_menu_${telegram_id}`,
          },
        ],
      ],
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (ctx.callbackQuery) {
      await ctx.editMessageText(menuText, {
        parse_mode: 'Markdown',
        reply_markup: keyboard,
      })
    } else {
      await ctx.reply(menuText, {
        parse_mode: 'Markdown',
        reply_markup: keyboard,
      })
    }
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏', {
      description: 'Error sending main stats menu',
      error: error instanceof Error ? error.message : String(error),
    })
    throw error
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –±–∞–ª–∞–Ω—Å–∞
async function showBalanceDetails(
  ctx: MyContext,
  telegram_id: string,
  is_ru: boolean,
  bot_name: string
) {
  try {
    const balanceStats = await getUserBalanceStats(telegram_id, bot_name)

    const detailsText = is_ru
      ? `üí∞ *–î–µ—Ç–∞–ª–∏ –±–∞–ª–∞–Ω—Å–∞*\n\n` +
          `üíé *–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:* ${balanceStats.stars.toFixed(2)} ‚≠êÔ∏è\n` +
          `üìà *–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:* ${balanceStats.total_spent.toFixed(2)} ‚≠êÔ∏è\n` +
          `üìä *–í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ:* ${balanceStats.total_added.toFixed(2)} ‚≠êÔ∏è\n` +
          `üéÅ *–ë–æ–Ω—É—Å–Ω—ã–µ –∑–≤–µ–∑–¥—ã:* ${balanceStats.bonus_stars.toFixed(2)} ‚≠êÔ∏è\n` +
          `‚≠êÔ∏è *–ö—É–ø–ª–µ–Ω–Ω—ã–µ –∑–≤–µ–∑–¥—ã:* ${balanceStats.added_stars.toFixed(
            2
          )} ‚≠êÔ∏è\n` +
          `üí∏ *–ü–æ–ø–æ–ª–Ω–µ–Ω–æ —Ä—É–±–ª—è–º–∏:* ${balanceStats.added_rub.toFixed(2)} ‚ÇΩ\n\n` +
          `üìä *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º:*\n` +
          Object.entries(balanceStats.services)
            .map(
              ([service, amount]) => `‚Ä¢ ${service}: ${amount.toFixed(2)} ‚≠êÔ∏è`
            )
            .join('\n') || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
      : `üí∞ *Balance Details*\n\n` +
          `üíé *Current Balance:* ${balanceStats.stars.toFixed(2)} ‚≠êÔ∏è\n` +
          `üìà *Total Spent:* ${balanceStats.total_spent.toFixed(2)} ‚≠êÔ∏è\n` +
          `üìä *Total Added:* ${balanceStats.total_added.toFixed(2)} ‚≠êÔ∏è\n` +
          `üéÅ *Bonus Stars:* ${balanceStats.bonus_stars.toFixed(2)} ‚≠êÔ∏è\n` +
          `‚≠êÔ∏è *Purchased Stars:* ${balanceStats.added_stars.toFixed(
            2
          )} ‚≠êÔ∏è\n` +
          `üí∏ *Added in Rubles:* ${balanceStats.added_rub.toFixed(2)} ‚ÇΩ\n\n` +
          `üìä *Usage by Services:*\n` +
          Object.entries(balanceStats.services)
            .map(
              ([service, amount]) => `‚Ä¢ ${service}: ${amount.toFixed(2)} ‚≠êÔ∏è`
            )
            .join('\n') || 'No data'

    const backKeyboard = {
      inline_keyboard: [
        [
          {
            text: is_ru ? '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' : '‚¨ÖÔ∏è Back',
            callback_data: `stats_refresh_${telegram_id}`,
          },
        ],
      ],
    }

    await ctx.editMessageText(detailsText, {
      parse_mode: 'Markdown',
      reply_markup: backKeyboard,
    })
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π –±–∞–ª–∞–Ω—Å–∞', {
      description: 'Error showing balance details',
      error: error instanceof Error ? error.message : String(error),
    })
    throw error
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
async function showServiceUsage(
  ctx: MyContext,
  telegram_id: string,
  is_ru: boolean,
  bot_name: string
) {
  try {
    const { data: servicesData } = await supabase
      .from('payments_v2')
      .select('service_type, stars, created_at')
      .eq('telegram_id', telegram_id)
      .eq('type', 'MONEY_OUTCOME')
      .eq('status', 'COMPLETED')
      .not('service_type', 'is', null)
      .order('created_at', { ascending: false })
      .limit(10)

    const serviceCount: Record<string, { count: number; total: number }> = {}
    servicesData?.forEach(payment => {
      if (payment.service_type) {
        if (!serviceCount[payment.service_type]) {
          serviceCount[payment.service_type] = { count: 0, total: 0 }
        }
        serviceCount[payment.service_type].count++
        serviceCount[payment.service_type].total += payment.stars || 0
      }
    })

    const servicesText = is_ru
      ? `üìä *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤*\n\n` +
          `üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º:*\n` +
          Object.entries(serviceCount)
            .sort(([, a], [, b]) => b.count - a.count)
            .map(
              ([service, data]) =>
                `‚Ä¢ *${service}*: ${data.count} —Ä–∞–∑ (${data.total.toFixed(
                  2
                )} ‚≠êÔ∏è)`
            )
            .join('\n') ||
        '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n' +
          `üìÖ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:*\n` +
          (servicesData
            ?.slice(0, 5)
            .map(
              payment =>
                `‚Ä¢ ${payment.service_type}: ${payment.stars?.toFixed(
                  2
                )} ‚≠êÔ∏è (${new Date(payment.created_at).toLocaleDateString(
                  'ru'
                )})`
            )
            .join('\n') || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
      : `üìä *Service Usage*\n\n` +
          `üìà *Statistics by Services:*\n` +
          Object.entries(serviceCount)
            .sort(([, a], [, b]) => b.count - a.count)
            .map(
              ([service, data]) =>
                `‚Ä¢ *${service}*: ${data.count} times (${data.total.toFixed(
                  2
                )} ‚≠êÔ∏è)`
            )
            .join('\n') ||
        'No data\n\n' +
          `üìÖ *Recent Operations:*\n` +
          (servicesData
            ?.slice(0, 5)
            .map(
              payment =>
                `‚Ä¢ ${payment.service_type}: ${payment.stars?.toFixed(
                  2
                )} ‚≠êÔ∏è (${new Date(payment.created_at).toLocaleDateString(
                  'en'
                )})`
            )
            .join('\n') || 'No data')

    const backKeyboard = {
      inline_keyboard: [
        [
          {
            text: is_ru ? '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' : '‚¨ÖÔ∏è Back',
            callback_data: `stats_refresh_${telegram_id}`,
          },
        ],
      ],
    }

    await ctx.editMessageText(servicesText, {
      parse_mode: 'Markdown',
      reply_markup: backKeyboard,
    })
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤', {
      description: 'Error showing service usage',
      error: error instanceof Error ? error.message : String(error),
    })
    throw error
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
async function showPaymentHistory(
  ctx: MyContext,
  telegram_id: string,
  is_ru: boolean,
  bot_name: string
) {
  try {
    const { data: paymentsData } = await supabase
      .from('payments_v2')
      .select('type, stars, description, created_at, payment_method')
      .eq('telegram_id', telegram_id)
      .eq('status', 'COMPLETED')
      .order('created_at', { ascending: false })
      .limit(10)

    const paymentsText = is_ru
      ? `üí≥ *–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π*\n\n` +
        `üìÖ *–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –æ–ø–µ—Ä–∞—Ü–∏–π:*\n\n` +
        (paymentsData
          ?.map((payment, index) => {
            const typeIcon = payment.type === 'MONEY_INCOME' ? 'üí∞' : 'üí∏'
            const sign = payment.type === 'MONEY_INCOME' ? '+' : '-'
            return (
              `${index + 1}. ${typeIcon} ${sign}${payment.stars?.toFixed(
                2
              )} ‚≠êÔ∏è\n` +
              `   üìù ${payment.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}\n` +
              `   üí≥ ${payment.payment_method || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n` +
              `   üìÖ ${new Date(payment.created_at).toLocaleDateString('ru')}`
            )
          })
          .join('\n\n') || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö')
      : `üí≥ *Payment History*\n\n` +
        `üìÖ *Last 10 Operations:*\n\n` +
        (paymentsData
          ?.map((payment, index) => {
            const typeIcon = payment.type === 'MONEY_INCOME' ? 'üí∞' : 'üí∏'
            const sign = payment.type === 'MONEY_INCOME' ? '+' : '-'
            return (
              `${index + 1}. ${typeIcon} ${sign}${payment.stars?.toFixed(
                2
              )} ‚≠êÔ∏è\n` +
              `   üìù ${payment.description || 'No description'}\n` +
              `   üí≥ ${payment.payment_method || 'Unknown'}\n` +
              `   üìÖ ${new Date(payment.created_at).toLocaleDateString('en')}`
            )
          })
          .join('\n\n') || 'No data')

    const backKeyboard = {
      inline_keyboard: [
        [
          {
            text: is_ru ? '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' : '‚¨ÖÔ∏è Back',
            callback_data: `stats_refresh_${telegram_id}`,
          },
        ],
      ],
    }

    await ctx.editMessageText(paymentsText, {
      parse_mode: 'Markdown',
      reply_markup: backKeyboard,
    })
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π', {
      description: 'Error showing payment history',
      error: error instanceof Error ? error.message : String(error),
    })
    throw error
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ –±–æ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function showUserBots(
  ctx: MyContext,
  telegram_id: string,
  is_ru: boolean,
  bot_name: string
) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: userBots } = await supabase
      .from('payments_v2')
      .select('bot_name, created_at')
      .eq('telegram_id', telegram_id)
      .eq('status', 'COMPLETED')

    const botStats: Record<string, { first_use: string; operations: number }> =
      {}
    userBots?.forEach(payment => {
      if (payment.bot_name) {
        if (!botStats[payment.bot_name]) {
          botStats[payment.bot_name] = {
            first_use: payment.created_at,
            operations: 0,
          }
        }
        botStats[payment.bot_name].operations++
        if (payment.created_at < botStats[payment.bot_name].first_use) {
          botStats[payment.bot_name].first_use = payment.created_at
        }
      }
    })

    const botsText = is_ru
      ? `ü§ñ *–ú–æ–∏ –±–æ—Ç—ã*\n\n` +
          `üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*\n\n` +
          Object.entries(botStats)
            .sort(([, a], [, b]) => b.operations - a.operations)
            .map(
              ([bot, data], index) =>
                `${index + 1}. *@${bot}*\n` +
                `   üìà –û–ø–µ—Ä–∞—Ü–∏–π: ${data.operations}\n` +
                `   üìÖ –ü–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ${new Date(
                  data.first_use
                ).toLocaleDateString('ru')}\n` +
                `   ${bot === bot_name ? 'üëà *–¢–µ–∫—É—â–∏–π –±–æ—Ç*' : ''}`
            )
            .join('\n') ||
        '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n\n' +
          `‚ÑπÔ∏è *–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:* –í—ã –≤–∏–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ –±–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å`
      : `ü§ñ *My Bots*\n\n` +
          `üìä *Usage Statistics:*\n\n` +
          Object.entries(botStats)
            .sort(([, a], [, b]) => b.operations - a.operations)
            .map(
              ([bot, data], index) =>
                `${index + 1}. *@${bot}*\n` +
                `   üìà Operations: ${data.operations}\n` +
                `   üìÖ First use: ${new Date(data.first_use).toLocaleDateString(
                  'en'
                )}\n` +
                `   ${bot === bot_name ? 'üëà *Current bot*' : ''}`
            )
            .join('\n') ||
        'No data\n\n' + `‚ÑπÔ∏è *Note:* You only see bots you have used`

    const backKeyboard = {
      inline_keyboard: [
        [
          {
            text: is_ru ? '‚¨ÖÔ∏è –ù–∞–∑–∞–¥' : '‚¨ÖÔ∏è Back',
            callback_data: `stats_refresh_${telegram_id}`,
          },
        ],
      ],
    }

    await ctx.editMessageText(botsText, {
      parse_mode: 'Markdown',
      reply_markup: backKeyboard,
    })
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –±–æ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', {
      description: 'Error showing user bots',
      error: error instanceof Error ? error.message : String(error),
    })
    throw error
  }
}
