import { logger } from '@/utils/logger'

export enum CircuitState {
  CLOSED = 'CLOSED', // –ù–æ—Ä–º–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞
  OPEN = 'OPEN', // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
  HALF_OPEN = 'HALF_OPEN', // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
}

interface CircuitBreakerConfig {
  failureThreshold: number // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—à–∏–±–æ–∫ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è
  recoveryTimeout: number // –í—Ä–µ–º—è –¥–æ –ø–æ–ø—ã—Ç–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–º—Å)
  monitoringPeriod: number // –ü–µ—Ä–∏–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–º—Å)
  successThreshold: number // –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è
}

interface CircuitBreakerStats {
  state: CircuitState
  failures: number
  successes: number
  lastFailureTime: number
  lastSuccessTime: number
  totalRequests: number
  totalFailures: number
  totalSuccesses: number
}

export class CircuitBreaker {
  private state: CircuitState = CircuitState.CLOSED
  private failures = 0
  private successes = 0
  private lastFailureTime = 0
  private lastSuccessTime = 0
  private totalRequests = 0
  private totalFailures = 0
  private totalSuccesses = 0

  constructor(
    private serviceName: string,
    private config: CircuitBreakerConfig
  ) {}

  async execute<T>(operation: () => Promise<T>): Promise<T> {
    this.totalRequests++

    if (this.state === CircuitState.OPEN) {
      if (Date.now() - this.lastFailureTime < this.config.recoveryTimeout) {
        logger.warn(`üö´ Circuit breaker OPEN: ${this.serviceName}`, {
          state: this.state,
          failures: this.failures,
          lastFailureTime: this.lastFailureTime,
          recoveryTimeout: this.config.recoveryTimeout,
        })
        throw new Error(`Circuit breaker is OPEN for ${this.serviceName}`)
      } else {
        this.state = CircuitState.HALF_OPEN
        this.successes = 0
        logger.info(
          `üîÑ Circuit breaker testing recovery: ${this.serviceName}`,
          {
            state: this.state,
          }
        )
      }
    }

    try {
      const result = await operation()
      this.onSuccess()
      return result
    } catch (error) {
      this.onFailure()
      throw error
    }
  }

  private onSuccess(): void {
    this.successes++
    this.totalSuccesses++
    this.lastSuccessTime = Date.now()

    if (this.state === CircuitState.HALF_OPEN) {
      if (this.successes >= this.config.successThreshold) {
        this.state = CircuitState.CLOSED
        this.failures = 0
        logger.info(`‚úÖ Circuit breaker CLOSED: ${this.serviceName}`, {
          state: this.state,
          successes: this.successes,
        })
      }
    } else if (this.state === CircuitState.CLOSED) {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ –≤ CLOSED —Å–æ—Å—Ç–æ—è–Ω–∏–∏
      this.failures = 0
    }
  }

  private onFailure(): void {
    this.failures++
    this.totalFailures++
    this.lastFailureTime = Date.now()

    if (
      this.state === CircuitState.CLOSED ||
      this.state === CircuitState.HALF_OPEN
    ) {
      if (this.failures >= this.config.failureThreshold) {
        this.state = CircuitState.OPEN
        logger.error(`‚ùå Circuit breaker OPEN: ${this.serviceName}`, {
          state: this.state,
          failures: this.failures,
          threshold: this.config.failureThreshold,
        })
      }
    }
  }

  getStats(): CircuitBreakerStats {
    return {
      state: this.state,
      failures: this.failures,
      successes: this.successes,
      lastFailureTime: this.lastFailureTime,
      lastSuccessTime: this.lastSuccessTime,
      totalRequests: this.totalRequests,
      totalFailures: this.totalFailures,
      totalSuccesses: this.totalSuccesses,
    }
  }

  reset(): void {
    this.state = CircuitState.CLOSED
    this.failures = 0
    this.successes = 0
    this.lastFailureTime = 0
    this.lastSuccessTime = 0
    logger.info(`üîÑ Circuit breaker reset: ${this.serviceName}`)
  }
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
const defaultConfig: CircuitBreakerConfig = {
  failureThreshold: 5,
  recoveryTimeout: 60000, // 1 –º–∏–Ω—É—Ç–∞
  monitoringPeriod: 300000, // 5 –º–∏–Ω—É—Ç
  successThreshold: 3,
}

const replicateConfig: CircuitBreakerConfig = {
  failureThreshold: 3, // Replicate –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–º
  recoveryTimeout: 120000, // 2 –º–∏–Ω—É—Ç—ã
  monitoringPeriod: 600000, // 10 –º–∏–Ω—É—Ç
  successThreshold: 2,
}

const supabaseConfig: CircuitBreakerConfig = {
  failureThreshold: 5, // –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω–æ–π
  recoveryTimeout: 30000, // 30 —Å–µ–∫—É–Ω–¥
  monitoringPeriod: 300000, // 5 –º–∏–Ω—É—Ç
  successThreshold: 3,
}

const elevenLabsConfig: CircuitBreakerConfig = {
  failureThreshold: 4,
  recoveryTimeout: 90000, // 1.5 –º–∏–Ω—É—Ç—ã
  monitoringPeriod: 300000, // 5 –º–∏–Ω—É—Ç
  successThreshold: 2,
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä Circuit Breakers
export const circuitBreakers = {
  // –û—Å–Ω–æ–≤–Ω—ã–µ –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã
  replicate: new CircuitBreaker('replicate', {
    failureThreshold: 5,
    recoveryTimeout: 30000,
    monitoringPeriod: 60000,
    successThreshold: 3,
  }),

  supabase: new CircuitBreaker('supabase', {
    failureThreshold: 3,
    recoveryTimeout: 10000,
    monitoringPeriod: 30000,
    successThreshold: 2,
  }),

  elevenlabs: new CircuitBreaker('elevenlabs', {
    failureThreshold: 4,
    recoveryTimeout: 20000,
    monitoringPeriod: 45000,
    successThreshold: 2,
  }),

  // –ù–æ–≤—ã–µ —Å–µ—Ä–≤–∏—Å—ã
  synclabs: new CircuitBreaker('synclabs', {
    failureThreshold: 4,
    recoveryTimeout: 25000,
    monitoringPeriod: 50000,
    successThreshold: 2,
  }),

  huggingface: new CircuitBreaker('huggingface', {
    failureThreshold: 6, // HuggingFace –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–º
    recoveryTimeout: 45000,
    monitoringPeriod: 90000,
    successThreshold: 3,
  }),

  bfl: new CircuitBreaker('bfl', {
    failureThreshold: 5,
    recoveryTimeout: 30000,
    monitoringPeriod: 60000,
    successThreshold: 2,
  }),

  // –§–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ —É—Ç–∏–ª–∏—Ç—ã
  fileDownload: new CircuitBreaker('file-download', {
    failureThreshold: 3,
    recoveryTimeout: 5000,
    monitoringPeriod: 15000,
    successThreshold: 2,
  }),
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö circuit breakers
export function getAllCircuitBreakerStats(): Record<
  string,
  CircuitBreakerStats
> {
  const stats: Record<string, CircuitBreakerStats> = {}

  Object.entries(circuitBreakers).forEach(([name, breaker]) => {
    stats[name] = breaker.getStats()
  })

  return stats
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –≤—Å–µ—Ö circuit breakers
export function resetAllCircuitBreakers(): void {
  Object.values(circuitBreakers).forEach(breaker => breaker.reset())
  logger.info('üîÑ All circuit breakers reset')
}
