/**
 * –°–∏—Å—Ç–µ–º–∞ —Ä–µ–ø–æ—Ä—Ç–∏–Ω–≥–∞ –¥–µ–ø–ª–æ—è –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å network monitoring
 */

import { inngest } from '@/core/inngest/clients'
import { logger } from '@/utils/logger'
import { getBotByName } from '@/core/bot'

interface DeploymentEvent {
  version?: string
  commit?: string
  branch?: string
  deployedBy?: string
  deploymentUrl?: string
  startedAt: Date
  status: 'started' | 'completed' | 'failed'
  environment?: 'production' | 'staging' | 'development'
}

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –¥–µ–ø–ª–æ—è –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º –≤ Railway/Docker
 */
export async function detectDeployment(): Promise<DeploymentEvent | null> {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
    if (process.env.RAILWAY_DEPLOYMENT_ID && process.env.RAILWAY_GIT_COMMIT_SHA) {
      return {
        version: process.env.RAILWAY_DEPLOYMENT_ID,
        commit: process.env.RAILWAY_GIT_COMMIT_SHA,
        branch: process.env.RAILWAY_GIT_BRANCH,
        deploymentUrl: process.env.RAILWAY_DEPLOYMENT_URL,
        startedAt: new Date(),
        status: 'completed',
        environment: 'production'
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    if (process.env.DOCKER_IMAGE_TAG) {
      return {
        version: process.env.DOCKER_IMAGE_TAG,
        startedAt: new Date(),
        status: 'completed',
        environment: 'production'
      }
    }

    return null
  } catch (error) {
    logger.error('Failed to detect deployment:', error)
    return null
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –¥–µ–ø–ª–æ—è
 */
export async function notifyDeploymentStart(deployment: DeploymentEvent): Promise<void> {
  try {
    const { bot } = getBotByName('neuro_blogger_bot')

    let message = 'üöÄ –î–ï–ü–õ–û–ô –ù–ê–ß–ê–õ–°–Ø\n\n'
    
    if (deployment.version) {
      message += `üì¶ –í–µ—Ä—Å–∏—è: ${deployment.version}\n`
    }
    if (deployment.commit) {
      message += `üîó –ö–æ–º–º–∏—Ç: ${deployment.commit.substring(0, 8)}\n`
    }
    if (deployment.branch) {
      message += `üåø –í–µ—Ç–∫–∞: ${deployment.branch}\n`
    }
    if (deployment.deployedBy) {
      message += `üë§ –ê–≤—Ç–æ—Ä: ${deployment.deployedBy}\n`
    }
    
    message += `üïê –í—Ä–µ–º—è: ${deployment.startedAt.toLocaleString('ru-RU')}\n`
    message += `üåç –°—Ä–µ–¥–∞: ${deployment.environment || 'unknown'}\n\n`
    
    message += '‚è≥ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ network check –Ω–∞—á–Ω—É—Ç—Å—è —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è\n'
    message += '\n#deployment #started'

    await bot.api.sendMessage(process.env.ADMIN_CHAT_ID!, message)
    
    logger.info('Deployment start notification sent', { version: deployment.version })
  } catch (error) {
    logger.error('Failed to send deployment start notification:', error)
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–µ–ø–ª–æ—è
 */
export async function notifyDeploymentComplete(deployment: DeploymentEvent): Promise<void> {
  try {
    const { bot } = getBotByName('neuro_blogger_bot')

    let message = ''
    
    if (deployment.status === 'completed') {
      message = '‚úÖ –î–ï–ü–õ–û–ô –ó–ê–í–ï–†–®–ï–ù\n\n'
    } else if (deployment.status === 'failed') {
      message = '‚ùå –î–ï–ü–õ–û–ô –ù–ï–£–î–ê–ß–ï–ù\n\n'
    }
    
    if (deployment.version) {
      message += `üì¶ –í–µ—Ä—Å–∏—è: ${deployment.version}\n`
    }
    if (deployment.commit) {
      message += `üîó –ö–æ–º–º–∏—Ç: ${deployment.commit.substring(0, 8)}\n`
    }
    if (deployment.branch) {
      message += `üåø –í–µ—Ç–∫–∞: ${deployment.branch}\n`
    }
    
    message += `üïê –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n`
    
    if (deployment.deploymentUrl) {
      message += `üîó URL: ${deployment.deploymentUrl}\n`
    }

    if (deployment.status === 'completed') {
      message += '\nüîç Network check –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏...\n'
      message += '#deployment #completed #success'
    } else {
      message += '\n‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤ –¥–µ–ø–ª–æ—è\n'
      message += '#deployment #failed #error'
    }

    await bot.api.sendMessage(process.env.ADMIN_CHAT_ID!, message)

    // –ó–∞–ø—É—Å–∫–∞–µ–º post-deploy network check –µ—Å–ª–∏ –¥–µ–ø–ª–æ–π —É—Å–ø–µ—à–µ–Ω
    if (deployment.status === 'completed') {
      await inngest.send({
        name: 'deployment/completed',
        data: {
          version: deployment.version,
          commit: deployment.commit,
          branch: deployment.branch,
          deployedAt: deployment.startedAt.toISOString(),
          environment: deployment.environment
        }
      })
    }
    
    logger.info('Deployment complete notification sent', { 
      version: deployment.version, 
      status: deployment.status 
    })
  } catch (error) {
    logger.error('Failed to send deployment complete notification:', error)
  }
}

/**
 * Middleware –¥–ª—è Express –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–µ—Ä—Å–∏–∏
 */
export function deploymentDetectionMiddleware(req: any, res: any, next: any) {
  // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≤–µ—Ä—Å–∏–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –æ—Ç–≤–µ—Ç
  const version = process.env.RAILWAY_DEPLOYMENT_ID || 
                 process.env.DOCKER_IMAGE_TAG || 
                 process.env.npm_package_version || 
                 'unknown'
  
  res.setHeader('X-App-Version', version)
  next()
}

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–ø–ª–æ–µ
 */
export async function manualDeploymentNotification(
  version: string, 
  environment: string = 'production'
): Promise<void> {
  const deployment: DeploymentEvent = {
    version,
    startedAt: new Date(),
    status: 'completed',
    environment: environment as any
  }

  await notifyDeploymentComplete(deployment)
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã –ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
 */
export async function waitForHealthySystem(
  maxWaitMinutes: number = 10
): Promise<{ healthy: boolean; message: string }> {
  const startTime = Date.now()
  const maxWaitMs = maxWaitMinutes * 60 * 1000

  while (Date.now() - startTime < maxWaitMs) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
      const healthResponse = await fetch(`${process.env.APP_URL}/health`, {
        timeout: 10000
      })

      if (healthResponse.ok) {
        return {
          healthy: true,
          message: `–°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ ${Math.round((Date.now() - startTime) / 1000)} —Å–µ–∫—É–Ω–¥`
        }
      }

      // –ñ–¥–µ–º 30 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
      await new Promise(resolve => setTimeout(resolve, 30000))
    } catch (error) {
      // –ñ–¥–µ–º –∏ –ø—ã—Ç–∞–µ–º—Å—è —Å–Ω–æ–≤–∞
      await new Promise(resolve => setTimeout(resolve, 30000))
    }
  }

  return {
    healthy: false,
    message: `–°–∏—Å—Ç–µ–º–∞ –Ω–µ —Å—Ç–∞–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ ${maxWaitMinutes} –º–∏–Ω—É—Ç`
  }
}