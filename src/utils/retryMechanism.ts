import { logger } from '@/utils/logger'

export interface RetryConfig {
  maxAttempts: number
  baseDelay: number // –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –º—Å
  maxDelay: number // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ –º—Å
  exponentialBase: number // –û—Å–Ω–æ–≤–∞–Ω–∏–µ –¥–ª—è —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞
  jitter: boolean // –î–æ–±–∞–≤–ª—è—Ç—å —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –∫ –∑–∞–¥–µ—Ä–∂–∫–µ
  retryCondition?: (error: any) => boolean // –£—Å–ª–æ–≤–∏–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–∞
}

export interface RetryResult<T> {
  success: boolean
  result?: T
  error?: Error
  attempts: number
  totalTime: number
  lastAttemptTime: number
}

export class RetryMechanism {
  private static defaultConfig: RetryConfig = {
    maxAttempts: 3,
    baseDelay: 1000,
    maxDelay: 30000,
    exponentialBase: 2,
    jitter: true,
    retryCondition: (error: any) => {
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–≤—Ç–æ—Ä—è–µ–º –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–±–æ–µ–≤
      if (error?.code === 'ECONNRESET' || error?.code === 'ENOTFOUND')
        return true
      if (error?.response?.status >= 500) return true // –°–µ—Ä–≤–µ—Ä–Ω—ã–µ –æ—à–∏–±–∫–∏
      if (error?.response?.status === 429) return true // Rate limiting
      if (error?.response?.status === 408) return true // Request timeout
      return false
    },
  }

  static async execute<T>(
    operation: () => Promise<T>,
    config: Partial<RetryConfig> = {}
  ): Promise<RetryResult<T>> {
    const finalConfig = { ...this.defaultConfig, ...config }
    const startTime = Date.now()
    let lastError: Error | undefined

    for (let attempt = 1; attempt <= finalConfig.maxAttempts; attempt++) {
      try {
        logger.debug('üîÑ Retry attempt', {
          attempt,
          maxAttempts: finalConfig.maxAttempts,
          operation: operation.name || 'anonymous',
        })

        const result = await operation()

        const totalTime = Date.now() - startTime
        logger.debug('‚úÖ Retry success', {
          attempt,
          totalTime,
          operation: operation.name || 'anonymous',
        })

        return {
          success: true,
          result,
          attempts: attempt,
          totalTime,
          lastAttemptTime: Date.now(),
        }
      } catch (error) {
        lastError = error instanceof Error ? error : new Error(String(error))

        logger.warn('‚ö†Ô∏è Retry attempt failed', {
          attempt,
          maxAttempts: finalConfig.maxAttempts,
          error: lastError.message,
          operation: operation.name || 'anonymous',
        })

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å
        if (
          attempt === finalConfig.maxAttempts ||
          !finalConfig.retryCondition?.(error)
        ) {
          break
        }

        // –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
        const delay = this.calculateDelay(attempt, finalConfig)
        logger.debug('‚è≥ Retry delay', {
          attempt,
          delay,
          operation: operation.name || 'anonymous',
        })

        await this.sleep(delay)
      }
    }

    const totalTime = Date.now() - startTime
    logger.error('‚ùå Retry failed after all attempts', {
      attempts: finalConfig.maxAttempts,
      totalTime,
      lastError: lastError?.message,
      operation: operation.name || 'anonymous',
    })

    return {
      success: false,
      error: lastError,
      attempts: finalConfig.maxAttempts,
      totalTime,
      lastAttemptTime: Date.now(),
    }
  }

  private static calculateDelay(attempt: number, config: RetryConfig): number {
    // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    let delay = config.baseDelay * Math.pow(config.exponentialBase, attempt - 1)

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
    delay = Math.min(delay, config.maxDelay)

    // –î–æ–±–∞–≤–ª—è–µ–º jitter –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è thundering herd
    if (config.jitter) {
      delay = delay * (0.5 + Math.random() * 0.5)
    }

    return Math.floor(delay)
  }

  private static sleep(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms))
  }
}

// –ü—Ä–µ–¥–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ retry –º–µ—Ö–∞–Ω–∏–∑–º—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π
export const retryConfigs = {
  // –î–ª—è –≤–Ω–µ—à–Ω–∏—Ö API (–±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –ø–æ–≤—Ç–æ—Ä—ã)
  externalAPI: {
    maxAttempts: 3,
    baseDelay: 1000,
    maxDelay: 10000,
    exponentialBase: 2,
    jitter: true,
    retryCondition: (error: any) => {
      // –ü–æ–≤—Ç–æ—Ä—è–µ–º –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫ –∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
      if (error?.code === 'ECONNRESET') return true
      if (error?.code === 'ENOTFOUND') return true
      if (error?.code === 'ETIMEDOUT') return true
      if (error?.response?.status >= 500) return true
      if (error?.response?.status === 429) return true
      if (error?.response?.status === 408) return true
      if (error?.response?.status === 502) return true
      if (error?.response?.status === 503) return true
      if (error?.response?.status === 504) return true
      return false
    },
  },

  // –î–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–±—ã—Å—Ç—Ä—ã–µ –ø–æ–≤—Ç–æ—Ä—ã)
  database: {
    maxAttempts: 5,
    baseDelay: 500,
    maxDelay: 5000,
    exponentialBase: 1.5,
    jitter: true,
    retryCondition: (error: any) => {
      // –ü–æ–≤—Ç–æ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –ë–î
      if (error?.code === 'PGRST301') return true // Connection lost
      if (error?.code === 'PGRST302') return true // Connection timeout
      if (error?.message?.includes('timeout')) return true
      if (error?.message?.includes('connection')) return true
      return false
    },
  },

  // –î–ª—è —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  fileSystem: {
    maxAttempts: 3,
    baseDelay: 200,
    maxDelay: 2000,
    exponentialBase: 2,
    jitter: false,
    retryCondition: (error: any) => {
      if (error?.code === 'EBUSY') return true
      if (error?.code === 'EMFILE') return true
      if (error?.code === 'ENFILE') return true
      return false
    },
  },
}

// –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö API
export async function retryExternalAPI<T>(
  operation: () => Promise<T>,
  operationName?: string
): Promise<T> {
  const result = await RetryMechanism.execute(
    operation,
    retryConfigs.externalAPI
  )

  if (!result.success) {
    const error =
      result.error ||
      new Error(`Operation failed after ${result.attempts} attempts`)
    if (operationName) {
      error.message = `${operationName}: ${error.message}`
    }
    throw error
  }

  return result.result!
}

// –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
export async function retryDatabase<T>(
  operation: () => Promise<T>,
  operationName?: string
): Promise<T> {
  const result = await RetryMechanism.execute(operation, retryConfigs.database)

  if (!result.success) {
    const error =
      result.error ||
      new Error(`Database operation failed after ${result.attempts} attempts`)
    if (operationName) {
      error.message = `${operationName}: ${error.message}`
    }
    throw error
  }

  return result.result!
}

// –£–¥–æ–±–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∞–π–ª–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
export async function retryFileSystem<T>(
  operation: () => Promise<T>,
  operationName?: string
): Promise<T> {
  const result = await RetryMechanism.execute(
    operation,
    retryConfigs.fileSystem
  )

  if (!result.success) {
    const error =
      result.error ||
      new Error(
        `File system operation failed after ${result.attempts} attempts`
      )
    if (operationName) {
      error.message = `${operationName}: ${error.message}`
    }
    throw error
  }

  return result.result!
}
