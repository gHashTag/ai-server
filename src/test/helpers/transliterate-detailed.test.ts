import { jest, describe, it, expect } from '@jest/globals'
import { transliterate } from '@/helpers/transliterate'

describe('transliterate helper - Detailed Tests', () => {
  describe('Individual character mapping', () => {
    describe('Uppercase letters', () => {
      it('should transliterate uppercase vowels correctly', () => {
        expect(transliterate('–ê')).toBe('A')
        expect(transliterate('–ï')).toBe('E')
        expect(transliterate('–ò')).toBe('I')
        expect(transliterate('–û')).toBe('O')
        expect(transliterate('–£')).toBe('U')
        expect(transliterate('–´')).toBe('I')
        expect(transliterate('–≠')).toBe('E')
        expect(transliterate('–Æ')).toBe('YU')
        expect(transliterate('–Ø')).toBe('YA')
      })

      it('should transliterate uppercase consonants correctly', () => {
        expect(transliterate('–ë')).toBe('B')
        expect(transliterate('–í')).toBe('V')
        expect(transliterate('–ì')).toBe('G')
        expect(transliterate('–î')).toBe('D')
        expect(transliterate('–ñ')).toBe('ZH')
        expect(transliterate('–ó')).toBe('Z')
        expect(transliterate('–ö')).toBe('K')
        expect(transliterate('–õ')).toBe('L')
        expect(transliterate('–ú')).toBe('M')
        expect(transliterate('–ù')).toBe('N')
      })

      it('should transliterate complex uppercase consonants', () => {
        expect(transliterate('–ü')).toBe('P')
        expect(transliterate('–†')).toBe('R')
        expect(transliterate('–°')).toBe('S')
        expect(transliterate('–¢')).toBe('T')
        expect(transliterate('–§')).toBe('F')
        expect(transliterate('–•')).toBe('H')
        expect(transliterate('–¶')).toBe('TS')
        expect(transliterate('–ß')).toBe('CH')
        expect(transliterate('–®')).toBe('SH')
        expect(transliterate('–©')).toBe('SCH')
      })

      it('should transliterate special uppercase characters', () => {
        expect(transliterate('–Å')).toBe('YO')
        expect(transliterate('–ô')).toBe('I')
        expect(transliterate('–™')).toBe('Y')
        expect(transliterate('–¨')).toBe('Y')
      })
    })

    describe('Lowercase letters', () => {
      it('should transliterate lowercase vowels correctly', () => {
        expect(transliterate('–∞')).toBe('a')
        expect(transliterate('–µ')).toBe('e')
        expect(transliterate('–∏')).toBe('i')
        expect(transliterate('–æ')).toBe('o')
        expect(transliterate('—É')).toBe('u')
        expect(transliterate('—ã')).toBe('i')
        expect(transliterate('—ç')).toBe('e')
        expect(transliterate('—é')).toBe('yu')
        expect(transliterate('—è')).toBe('ya')
      })

      it('should transliterate lowercase consonants correctly', () => {
        expect(transliterate('–±')).toBe('b')
        expect(transliterate('–≤')).toBe('v')
        expect(transliterate('–≥')).toBe('g')
        expect(transliterate('–¥')).toBe('d')
        expect(transliterate('–∂')).toBe('zh')
        expect(transliterate('–∑')).toBe('z')
        expect(transliterate('–∫')).toBe('k')
        expect(transliterate('–ª')).toBe('l')
        expect(transliterate('–º')).toBe('m')
        expect(transliterate('–Ω')).toBe('n')
      })

      it('should transliterate complex lowercase consonants', () => {
        expect(transliterate('–ø')).toBe('p')
        expect(transliterate('—Ä')).toBe('r')
        expect(transliterate('—Å')).toBe('s')
        expect(transliterate('—Ç')).toBe('t')
        expect(transliterate('—Ñ')).toBe('f')
        expect(transliterate('—Ö')).toBe('h')
        expect(transliterate('—Ü')).toBe('ts')
        expect(transliterate('—á')).toBe('ch')
        expect(transliterate('—à')).toBe('sh')
        expect(transliterate('—â')).toBe('sch')
      })

      it('should transliterate special lowercase characters', () => {
        expect(transliterate('—ë')).toBe('yo')
        expect(transliterate('–π')).toBe('i')
        expect(transliterate('—ä')).toBe('y')
        expect(transliterate('—å')).toBe('y')
      })
    })
  })

  describe('Word transliteration', () => {
    it('should transliterate common Russian words', () => {
      expect(transliterate('–ü—Ä–∏–≤–µ—Ç')).toBe('Privet')
      expect(transliterate('–†–æ—Å—Å–∏—è')).toBe('Rossiya')
      expect(transliterate('–ú–æ—Å–∫–≤–∞')).toBe('Moskva')
      expect(transliterate('–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥')).toBe('Sankt-Peterburg')
      expect(transliterate('–Å–ª–∫–∞')).toBe('YOlka')
    })

    it('should transliterate names correctly', () => {
      expect(transliterate('–ò–≤–∞–Ω')).toBe('Ivan')
      expect(transliterate('–ú–∞—Ä–∏—è')).toBe('Mariya')
      expect(transliterate('–ê–ª–µ–∫—Å–∞–Ω–¥—Ä')).toBe('Aleksandr')
      expect(transliterate('–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞')).toBe('Ekaterina')
      expect(transliterate('–î–º–∏—Ç—Ä–∏–π')).toBe('Dmitrii')
    })

    it('should transliterate complex words with multiple character mappings', () => {
      expect(transliterate('–©–µ–¥—Ä–æ—Å—Ç—å')).toBe('SCHedrosty')
      expect(transliterate('–°—ä—ë–º–∫–∞')).toBe('Syyomka')
      expect(transliterate('–ü–æ–¥—ä–µ–∑–¥')).toBe('Podyezd')
      expect(transliterate('–û–±—ä—è–≤–ª–µ–Ω–∏–µ')).toBe('Obyyavlenie')
    })

    it('should handle mixed case correctly', () => {
      expect(transliterate('–ü—Ä–ò–≤–ï—Ç')).toBe('PrIvEt')
      expect(transliterate('–ú–æ–°–∫–í–∞')).toBe('MoSkVa')
      expect(transliterate('–†–æ–°—Å–ò—è')).toBe('RoSsIya')
    })
  })

  describe('Mixed content', () => {
    it('should preserve Latin characters', () => {
      expect(transliterate('Hello –º–∏—Ä')).toBe('Hello mir')
      expect(transliterate('–ü—Ä–∏–≤–µ—Ç world')).toBe('Privet world')
      expect(transliterate('Test —Ç–µ—Å—Ç')).toBe('Test test')
      expect(transliterate('API –∑–∞–ø—Ä–æ—Å')).toBe('API zapros')
    })

    it('should preserve numbers', () => {
      expect(transliterate('–î–æ–º 123')).toBe('Dom 123')
      expect(transliterate('2023 –≥–æ–¥')).toBe('2023 god')
      expect(transliterate('–í–µ—Ä—Å–∏—è 1.0')).toBe('Versiya 1.0')
    })

    it('should preserve special symbols', () => {
      expect(transliterate('–ü—Ä–∏–≤–µ—Ç!')).toBe('Privet!')
      expect(transliterate('–ß—Ç–æ?')).toBe('CHto?')
      expect(transliterate('Email: test@mail.ru')).toBe('Email: test@mail.ru')
      expect(transliterate('–¶–µ–Ω–∞: $100')).toBe('TSena: $100')
    })

    it('should preserve punctuation', () => {
      expect(transliterate('–ü—Ä–∏–≤–µ—Ç, –º–∏—Ä!')).toBe('Privet, mir!')
      expect(transliterate('–≠—Ç–æ - —Ç–µ—Å—Ç.')).toBe('Eto - test.')
      expect(transliterate('–í–æ–ø—Ä–æ—Å: –∫—Ç–æ?')).toBe('Vopros: kto?')
      expect(transliterate('(–°–∫–æ–±–∫–∏)')).toBe('(Skobki)')
    })
  })

  describe('Edge cases', () => {
    it('should handle empty string', () => {
      expect(transliterate('')).toBe('')
    })

    it('should handle single characters', () => {
      expect(transliterate('–∞')).toBe('a')
      expect(transliterate('–Ø')).toBe('YA')
      expect(transliterate('x')).toBe('x')
      expect(transliterate('5')).toBe('5')
    })

    it('should handle strings with only spaces', () => {
      expect(transliterate(' ')).toBe(' ')
      expect(transliterate('   ')).toBe('   ')
      expect(transliterate('\t')).toBe('\t')
      expect(transliterate('\n')).toBe('\n')
    })

    it('should handle strings with only punctuation', () => {
      expect(transliterate('!@#$%^&*()')).toBe('!@#$%^&*()')
      expect(transliterate('.,;:')).toBe('.,;:')
      expect(transliterate('[]{}()')).toBe('[]{}()')
    })

    it('should handle very long strings', () => {
      const longRussian = '–∞'.repeat(1000)
      const expectedLatin = 'a'.repeat(1000)
      expect(transliterate(longRussian)).toBe(expectedLatin)
    })

    it('should handle strings with repeated characters', () => {
      expect(transliterate('–∞–∞–∞')).toBe('aaa')
      expect(transliterate('–©–©–©')).toBe('SCHSCHSCH')
      expect(transliterate('–π–π–π–π')).toBe('iiii')
    })
  })

  describe('Unicode and special characters', () => {
    it('should handle whitespace characters', () => {
      expect(transliterate('–ü—Ä–∏–≤–µ—Ç\n–º–∏—Ä')).toBe('Privet\nmir')
      expect(transliterate('–¢–µ—Å—Ç\t—Ç–µ—Å—Ç')).toBe('Test\ttest')
      expect(transliterate('–°—Ç—Ä–æ–∫–∞\r\n—Å—Ç—Ä–æ–∫–∞')).toBe('Stroka\r\nstroka')
    })

    it('should handle emoji (left unchanged)', () => {
      expect(transliterate('–ü—Ä–∏–≤–µ—Ç üöÄ')).toBe('Privet üöÄ')
      expect(transliterate('–¢–µ—Å—Ç üòä —ç–º–æ–¥–∑–∏')).toBe('Test üòä emodzi')
      expect(transliterate('üá∑üá∫ –†–æ—Å—Å–∏—è')).toBe('üá∑üá∫ Rossiya')
    })

    it('should handle other Cyrillic characters (non-Russian)', () => {
      // These should remain unchanged as they're not in the mapping
      expect(transliterate('–á')).toBe('–á') // Ukrainian
      expect(transliterate('“ê')).toBe('“ê') // Ukrainian
      expect(transliterate('–ã')).toBe('–ã') // Serbian
    })
  })

  describe('Real-world examples', () => {
    it('should transliterate file names', () => {
      expect(transliterate('–¥–æ–∫—É–º–µ–Ω—Ç.pdf')).toBe('dokument.pdf')
      expect(transliterate('—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è.jpg')).toBe('fotografiya.jpg')
      expect(transliterate('–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è.pptx')).toBe('prezentatsiya.pptx')
    })

    it('should transliterate URLs and paths', () => {
      expect(transliterate('—Å–∞–π—Ç.—Ä—Ñ')).toBe('sait.rf')
      expect(transliterate('/–ø–∞–ø–∫–∞/—Ñ–∞–π–ª')).toBe('/papka/fail')
      expect(transliterate('https://–ø—Ä–∏–º–µ—Ä.—Ä—Ñ/—Å—Ç—Ä–∞–Ω–∏—Ü–∞')).toBe('https://primer.rf/stranitsa')
    })

    it('should transliterate user input', () => {
      expect(transliterate('–ü–æ–∏—Å–∫ –ø–æ —Å–∞–π—Ç—É')).toBe('Poisk po saitu')
      expect(transliterate('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è')).toBe('Vvedite vashe imya')
      expect(transliterate('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è?')).toBe('Sohranity izmeneniya?')
    })

    it('should transliterate technical terms', () => {
      expect(transliterate('–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è')).toBe('Peremennaya')
      expect(transliterate('–§—É–Ω–∫—Ü–∏—è')).toBe('Funktsiya')
      expect(transliterate('–û–±—ä–µ–∫—Ç')).toBe('Obyekt')
      expect(transliterate('–ú–∞—Å—Å–∏–≤')).toBe('Massiv')
    })
  })

  describe('Performance and consistency', () => {
    it('should be consistent with repeated calls', () => {
      const input = '–¢–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞'
      const expected = 'Testovaya stroka'
      
      expect(transliterate(input)).toBe(expected)
      expect(transliterate(input)).toBe(expected)
      expect(transliterate(input)).toBe(expected)
    })

    it('should handle concatenated results correctly', () => {
      const part1 = transliterate('–ü–µ—Ä–≤–∞—è')
      const part2 = transliterate('—á–∞—Å—Ç—å')
      const full = transliterate('–ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å')
      
      expect(part1 + ' ' + part2).toBe(full)
      expect(part1).toBe('Pervaya')
      expect(part2).toBe('chasty')
      expect(full).toBe('Pervaya chasty')
    })
  })
})