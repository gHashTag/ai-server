import { CallToolResult } from '@modelcontextprotocol/sdk/types.js'
import { mcpConfig } from '../config.js'
import { supabase } from '../../core/supabase/index.js'

interface CreateNeuroPhotoArgs {
  prompt: string
  gender: 'male' | 'female'
  telegram_id: string
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é —É—Å–ø–µ—à–Ω—É—é –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¢–û–õ–¨–ö–û Replicate)
 */
async function getLatestUserModel(telegramId: string): Promise<string | null> {
  try {
    const { data, error } = await supabase
      .from('model_trainings')
      .select('model_url')
      .eq('telegram_id', telegramId.toString())
      .eq('status', 'SUCCESS')
      .or('api.is.null,api.eq.replicate')
      .order('created_at', { ascending: false })
      .limit(1)
      .single()

    if (error || !data) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
      return null
    }

    return data.model_url
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error)
    return null
  }
}

/**
 * –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
 */
const toolLogger = {
  info: (message: string, data?: any) => {
    console.error(
      `[MCP TOOL] ${message}`,
      data ? JSON.stringify(data, null, 2) : ''
    )
  },
  error: (message: string, data?: any) => {
    console.error(
      `[MCP TOOL ERROR] ${message}`,
      data ? JSON.stringify(data, null, 2) : ''
    )
  },
}

/**
 * –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ MCP
 * –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å —Ä–µ–∞–ª—å–Ω—ã–º API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–º /api/generate/neuro-photo
 */
export async function createNeuroPhoto(
  args: CreateNeuroPhotoArgs
): Promise<CallToolResult> {
  try {
    toolLogger.info('üé® MCP: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ:', {
      description: 'MCP tool: creating neurophoto',
      prompt: args.prompt,
      gender: args.gender,
      telegram_id: args.telegram_id,
    })

    // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π model_url –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–¢–û–õ–¨–ö–û Replicate)
    const model_url = await getLatestUserModel(args.telegram_id)

    if (!model_url) {
      const errorResponse = {
        success: false,
        error: '–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π Replicate',
        message:
          '–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ Replicate',
        parameters: {
          prompt: args.prompt,
          gender: args.gender,
          telegram_id: args.telegram_id,
        },
        troubleshooting: {
          solution: '–û–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /train –≤ Telegram –±–æ—Ç–µ',
          check_status: '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ',
          note: 'MCP –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å Replicate –º–æ–¥–µ–ª—è–º–∏ (–Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ 1)',
        },
      }

      return {
        content: [
          {
            type: 'text',
            text: JSON.stringify(errorResponse, null, 2),
          },
        ],
      }
    }

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Replicate API (–Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ 1)
    const requestBody = {
      prompt: args.prompt,
      model_url: model_url,
      num_images: mcpConfig.defaultNumImages,
      telegram_id: args.telegram_id,
      username: `mcp_user_${args.telegram_id}`,
      is_ru: mcpConfig.defaultLanguage,
      bot_name: mcpConfig.defaultBotName,
    }

    const apiEndpoint = `${mcpConfig.serverUrl}/generate/neuro-photo`

    toolLogger.info('üåê MCP: –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Replicate API:', {
      description: 'MCP tool: sending API request to Replicate',
      url: apiEndpoint,
      body: requestBody,
    })

    // –í—ã–ø–æ–ª–Ω—è–µ–º HTTP –∑–∞–ø—Ä–æ—Å –∫ Replicate API
    const response = await fetch(apiEndpoint, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(requestBody),
    })

    if (!response.ok) {
      const errorText = await response.text()
      throw new Error(
        `API request failed: ${response.status} ${response.statusText} - ${errorText}`
      )
    }

    const apiResponse = await response.json()

    toolLogger.info('‚úÖ MCP: API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', {
      description: 'MCP tool: API response received',
      telegram_id: args.telegram_id,
      response: apiResponse,
    })

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è Replicate API
    const successResponse = {
      success: apiResponse.success || true,
      message:
        apiResponse.message || '–ù–µ–π—Ä–æ—Ñ–æ—Ç–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é',
      api_type: 'replicate',
      images: apiResponse.images || [],
      count: apiResponse.count || 0,
      estimated_time: apiResponse.images?.length > 0 ? '–ì–æ—Ç–æ–≤–æ!' : '2-3 –º–∏–Ω—É—Ç—ã',
      note:
        apiResponse.images?.length > 0
          ? '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–æ—Ç–æ–≤—ã! –°—Å—ã–ª–∫–∏ –≤—ã—à–µ.'
          : '–†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram –±–æ—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.',
      parameters: {
        prompt: args.prompt,
        gender: args.gender,
        telegram_id: args.telegram_id,
        num_images: mcpConfig.defaultNumImages,
        is_ru: mcpConfig.defaultLanguage,
        bot_name: mcpConfig.defaultBotName,
      },
    }

    return {
      content: [
        {
          type: 'text',
          text: JSON.stringify(successResponse, null, 2),
        },
      ],
    }
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error)

    toolLogger.error('‚ùå MCP: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ:', {
      description: 'MCP tool: neurophoto creation error',
      telegram_id: args.telegram_id,
      error: errorMessage,
      error_details: error,
    })

    // –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ
    const errorResponse = {
      success: false,
      error: errorMessage,
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ',
      parameters: {
        prompt: args.prompt,
        gender: args.gender,
        telegram_id: args.telegram_id,
      },
      troubleshooting: {
        check_server:
          '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ai-server –∑–∞–ø—É—â–µ–Ω –Ω–∞ ' + mcpConfig.serverUrl,
        check_balance: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram –±–æ—Ç–µ',
        check_telegram_id:
          '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ telegram_id –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç',
      },
    }

    return {
      content: [
        {
          type: 'text',
          text: JSON.stringify(errorResponse, null, 2),
        },
      ],
    }
  }
}
