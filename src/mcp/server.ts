#!/usr/bin/env node

import { McpServer } from '@modelcontextprotocol/sdk/server/mcp.js'
import { StdioServerTransport } from '@modelcontextprotocol/sdk/server/stdio.js'
import { z } from 'zod'
import { mcpConfig, validateMcpConfig } from './config.js'
import { createNeuroPhoto } from './tools/neurophoto.js'

/**
 * –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è MCP —Å–µ—Ä–≤–µ—Ä–∞
 */
const mcpLogger = {
  info: (message: string, data?: any) => {
    console.log(
      `[MCP INFO] ${message}`,
      data ? JSON.stringify(data, null, 2) : ''
    )
  },
  error: (message: string, data?: any) => {
    console.error(
      `[MCP ERROR] ${message}`,
      data ? JSON.stringify(data, null, 2) : ''
    )
  },
  warn: (message: string, data?: any) => {
    console.warn(
      `[MCP WARN] ${message}`,
      data ? JSON.stringify(data, null, 2) : ''
    )
  },
}

/**
 * MCP Server –¥–ª—è AI-–∞–≥–µ–Ω—Ç–æ–≤
 * –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–π—Ä–æ—Å–µ—Ä–≤–∏—Å–∞–º–∏
 */
class AIServerMCP {
  private server: McpServer

  constructor() {
    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    validateMcpConfig()

    this.server = new McpServer({
      name: mcpConfig.mcpServerName,
      version: mcpConfig.mcpServerVersion,
    })

    this.setupTools()
  }

  private setupTools() {
    // –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
    this.server.tool(
      'create_neurophoto',
      {
        prompt: z.string().describe('–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ'),
        gender: z.enum(['male', 'female']).describe('–ü–æ–ª –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏'),
        telegram_id: z.string().describe('Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'),
      },
      createNeuroPhoto
    )

    mcpLogger.info('üîß MCP Tools –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:', {
      description: 'MCP server tools configured',
      tools: ['create_neurophoto'],
    })
  }

  async start() {
    try {
      const transport = new StdioServerTransport()
      await this.server.connect(transport)

      mcpLogger.info('üöÄ MCP Server –∑–∞–ø—É—â–µ–Ω:', {
        description: 'MCP server started successfully',
        transport: 'stdio',
        server_name: mcpConfig.mcpServerName,
        version: mcpConfig.mcpServerVersion,
      })
    } catch (error) {
      mcpLogger.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ MCP Server:', {
        description: 'Failed to start MCP server',
        error: error instanceof Error ? error.message : String(error),
        error_details: error,
      })
      process.exit(1)
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
if (require.main === module) {
  const mcpServer = new AIServerMCP()
  mcpServer.start().catch(error => {
    mcpLogger.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ MCP Server:', {
      description: 'Critical MCP server error',
      error: error instanceof Error ? error.message : String(error),
    })
    process.exit(1)
  })
}

export { AIServerMCP }
