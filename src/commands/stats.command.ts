import { MyContext } from '@/interfaces'
import { ModeEnum } from '@/interfaces/modes'
import { logger } from '@/utils/logger'

/**
 * –ö–æ–º–∞–Ω–¥–∞ /stats –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 * –î–æ—Å—Ç—É–ø–Ω–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∏—Ö –¥–∞–Ω–Ω—ã–µ
 */
export const statsCommand = async (ctx: MyContext) => {
  try {
    const telegram_id = ctx.from?.id?.toString()
    if (!telegram_id) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      return
    }

    const is_ru = ctx.session?.language === 'ru' || true // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä—É—Å—Å–∫–∏–π
    const bot_name = ctx.botInfo?.username || 'unknown_bot'

    logger.info('üìä –ö–æ–º–∞–Ω–¥–∞ /stats –≤—ã–∑–≤–∞–Ω–∞', {
      description: 'Stats command called',
      telegram_id,
      bot_name,
      is_ru,
    })

    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å—Ü–µ–Ω—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    await ctx.scene.enter(ModeEnum.Stats)
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /stats', {
      description: 'Error in stats command',
      error: error instanceof Error ? error.message : String(error),
      telegram_id: ctx.from?.id?.toString(),
    })

    const is_ru = ctx.session?.language === 'ru' || true
    await ctx.reply(
      is_ru
        ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        : '‚ùå An error occurred while loading statistics. Please try again later.'
    )
  }
}

/**
 * –ö–æ–º–∞–Ω–¥–∞ /balance –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–ª–∞–Ω—Å—É
 * –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –ø–æ–ª–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
export const balanceCommand = async (ctx: MyContext) => {
  try {
    const telegram_id = ctx.from?.id?.toString()
    if (!telegram_id) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
      return
    }

    const is_ru = ctx.session?.language === 'ru' || true
    const bot_name = ctx.botInfo?.username || 'unknown_bot'

    logger.info('üí∞ –ö–æ–º–∞–Ω–¥–∞ /balance –≤—ã–∑–≤–∞–Ω–∞', {
      description: 'Balance command called',
      telegram_id,
      bot_name,
    })

    // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    const { getUserBalanceStats, getUserDetailsSubscription } = await import(
      '@/core/supabase'
    )

    // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–ª–∞–Ω—Å–∞
    const balanceStats = await getUserBalanceStats(telegram_id, bot_name)
    const subscriptionDetails = await getUserDetailsSubscription(telegram_id)

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –±–∞–ª–∞–Ω—Å–µ
    const balanceText = is_ru
      ? `üí∞ *–í–∞—à –±–∞–ª–∞–Ω—Å*\n\n` +
        `üíé *–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:* ${balanceStats.stars.toFixed(2)} ‚≠êÔ∏è\n` +
        `üìà *–í—Å–µ–≥–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ:* ${balanceStats.total_spent.toFixed(2)} ‚≠êÔ∏è\n` +
        `üìä *–í—Å–µ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–æ:* ${balanceStats.total_added.toFixed(2)} ‚≠êÔ∏è\n` +
        `üéÅ *–ë–æ–Ω—É—Å—ã:* ${balanceStats.bonus_stars.toFixed(2)} ‚≠êÔ∏è\n\n` +
        `${
          subscriptionDetails.isSubscriptionActive
            ? `‚úÖ *–ü–æ–¥–ø–∏—Å–∫–∞:* ${
                subscriptionDetails.subscriptionType || '–ê–∫—Ç–∏–≤–Ω–∞'
              }`
            : '‚ùå *–ü–æ–¥–ø–∏—Å–∫–∞:* –ù–µ–∞–∫—Ç–∏–≤–Ω–∞'
        }\n\n` +
        `–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats`
      : `üí∞ *Your Balance*\n\n` +
        `üíé *Current Balance:* ${balanceStats.stars.toFixed(2)} ‚≠êÔ∏è\n` +
        `üìà *Total Spent:* ${balanceStats.total_spent.toFixed(2)} ‚≠êÔ∏è\n` +
        `üìä *Total Added:* ${balanceStats.total_added.toFixed(2)} ‚≠êÔ∏è\n` +
        `üéÅ *Bonuses:* ${balanceStats.bonus_stars.toFixed(2)} ‚≠êÔ∏è\n\n` +
        `${
          subscriptionDetails.isSubscriptionActive
            ? `‚úÖ *Subscription:* ${
                subscriptionDetails.subscriptionType || 'Active'
              }`
            : '‚ùå *Subscription:* Inactive'
        }\n\n` +
        `For detailed statistics use /stats`

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    const keyboard = {
      inline_keyboard: [
        [
          {
            text: is_ru ? 'üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' : 'üìä Detailed Statistics',
            callback_data: `stats_refresh_${telegram_id}`,
          },
        ],
        [
          {
            text: is_ru ? 'üíé –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å' : 'üíé Top Up Balance',
            callback_data: `topup_${telegram_id}`,
          },
        ],
      ],
    }

    await ctx.reply(balanceText, {
      parse_mode: 'Markdown',
      reply_markup: keyboard,
    })

    logger.info('‚úÖ –ë–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é', {
      description: 'Balance sent to user',
      telegram_id,
      balance: balanceStats.stars,
      subscription_active: subscriptionDetails.isSubscriptionActive,
    })
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /balance', {
      description: 'Error in balance command',
      error: error instanceof Error ? error.message : String(error),
      telegram_id: ctx.from?.id?.toString(),
    })

    const is_ru = ctx.session?.language === 'ru' || true
    await ctx.reply(
      is_ru
        ? '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        : '‚ùå An error occurred while loading balance. Please try again later.'
    )
  }
}
