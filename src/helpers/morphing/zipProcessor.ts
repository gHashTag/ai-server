/**
 * üß¨ ZIP Processor –¥–ª—è –ú–æ—Ä—Ñ–∏–Ω–≥ API
 * –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ ZIP –∞—Ä—Ö–∏–≤–æ–≤
 */

import * as fs from 'fs'
import * as path from 'path'
import AdmZip from 'adm-zip'
import {
  ExtractedImage,
  ZipExtractionResult,
  DEFAULT_MORPHING_CONFIG,
} from '@/interfaces/morphing.interface'
import { logger } from '@/utils/logger'

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
 */
function isValidImageFile(filename: string): boolean {
  const ext = path.extname(filename).toLowerCase()
  return DEFAULT_MORPHING_CONFIG.allowed_image_formats.includes(ext)
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–æ–º–µ—Ä –ø–æ—Ä—è–¥–∫–∞ –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:
 * - morphing_frame_1.jpg
 * - image_001.png
 * - 01.jpeg
 * - frame1.webp
 */
function extractOrderFromFilename(filename: string): number {
  // –£–¥–∞–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
  const nameWithoutExt = path.basename(filename, path.extname(filename))

  // –ò—â–µ–º —á–∏—Å–ª–∞ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
  const numberMatch = nameWithoutExt.match(/(\d+)/)

  if (numberMatch) {
    return parseInt(numberMatch[1], 10)
  }

  // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —á–∏—Å–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0 (–±—É–¥–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º)
  return 0
}

/**
 * –°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
 */
async function ensureExtractionDirectory(telegramId: string): Promise<string> {
  const extractionPath = path.join(
    DEFAULT_MORPHING_CONFIG.temp_dir,
    telegramId,
    `extraction_${Date.now()}`
  )

  try {
    await fs.promises.mkdir(extractionPath, { recursive: true })
    return extractionPath
  } catch (error) {
    logger.error('üß¨ –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è:', {
      path: extractionPath,
      error: error instanceof Error ? error.message : String(error),
    })
    throw new Error(`Failed to create extraction directory: ${error}`)
  }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ ZIP –∞—Ä—Ö–∏–≤–∞
 */
export async function extractImagesFromZip(
  zipFilePath: string,
  telegramId: string,
  expectedCount?: number
): Promise<ZipExtractionResult> {
  logger.info('üß¨ –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ ZIP:', {
    zipFilePath,
    telegramId,
    expectedCount,
  })

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ ZIP —Ñ–∞–π–ª–∞
    if (!fs.existsSync(zipFilePath)) {
      throw new Error(`ZIP file not found: ${zipFilePath}`)
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    const stats = await fs.promises.stat(zipFilePath)
    const fileSizeMB = stats.size / (1024 * 1024)

    if (fileSizeMB > DEFAULT_MORPHING_CONFIG.max_file_size_mb) {
      throw new Error(
        `ZIP file too large: ${fileSizeMB.toFixed(2)}MB > ${
          DEFAULT_MORPHING_CONFIG.max_file_size_mb
        }MB`
      )
    }

    logger.info('üß¨ ZIP —Ñ–∞–π–ª –ø—Ä–æ–≤–µ—Ä–µ–Ω:', {
      size_mb: fileSizeMB.toFixed(2),
      size_bytes: stats.size,
    })

    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
    const extractionPath = await ensureExtractionDirectory(telegramId)

    // –û—Ç–∫—Ä—ã–≤–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
    const zip = new AdmZip(zipFilePath)
    const zipEntries = zip.getEntries()

    logger.info('üß¨ –ó–∞–ø–∏—Å–∏ –≤ ZIP –∞—Ä—Ö–∏–≤–µ:', {
      total_entries: zipEntries.length,
      entries: zipEntries.map(entry => ({
        name: entry.entryName,
        size: entry.header.size,
        is_directory: entry.isDirectory,
      })),
    })

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    const extractedImages: ExtractedImage[] = []

    for (const entry of zipEntries) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
      if (
        entry.isDirectory ||
        entry.entryName.startsWith('__MACOSX/') ||
        entry.entryName.startsWith('.')
      ) {
        logger.info('üß¨ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å:', entry.entryName)
        continue
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
      if (!isValidImageFile(entry.entryName)) {
        logger.warn('üß¨ –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:', entry.entryName)
        continue
      }

      try {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª–∞
        const fileBuffer = entry.getData()

        if (fileBuffer.length === 0) {
          logger.warn('üß¨ –ü—É—Å—Ç–æ–π —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', entry.entryName)
          continue
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const order = extractOrderFromFilename(entry.entryName)

        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        const filename = `${order.toString().padStart(3, '0')}_${path.basename(
          entry.entryName
        )}`
        const filePath = path.join(extractionPath, filename)

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        await fs.promises.writeFile(filePath, fileBuffer)

        const extractedImage: ExtractedImage = {
          filename,
          originalName: entry.entryName,
          path: filePath,
          // –£–±–∏—Ä–∞–µ–º buffer - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
          order,
        }

        extractedImages.push(extractedImage)

        logger.info('üß¨ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–æ:', {
          original_name: entry.entryName,
          filename,
          order,
          size_bytes: fileBuffer.length,
        })
      } catch (error) {
        logger.error('üß¨ –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', {
          entry_name: entry.entryName,
          error: error instanceof Error ? error.message : String(error),
        })
        continue
      }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –ø–æ—Ä—è–¥–∫—É
    extractedImages.sort((a, b) => a.order - b.order)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    if (extractedImages.length < DEFAULT_MORPHING_CONFIG.min_images) {
      throw new Error(
        `Too few images extracted: ${extractedImages.length} < ${DEFAULT_MORPHING_CONFIG.min_images}`
      )
    }

    if (extractedImages.length > DEFAULT_MORPHING_CONFIG.max_images) {
      throw new Error(
        `Too many images extracted: ${extractedImages.length} > ${DEFAULT_MORPHING_CONFIG.max_images}`
      )
    }

    if (expectedCount && extractedImages.length !== expectedCount) {
      logger.warn('üß¨ –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:', {
        expected: expectedCount,
        actual: extractedImages.length,
      })
    }

    const result: ZipExtractionResult = {
      success: true,
      images: extractedImages,
      totalCount: extractedImages.length,
      extractionPath,
    }

    logger.info('üß¨ ZIP –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ:', {
      total_images: extractedImages.length,
      extraction_path: extractionPath,
      first_image: extractedImages[0]?.filename,
      last_image: extractedImages[extractedImages.length - 1]?.filename,
    })

    return result
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error)

    logger.error('üß¨ –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ZIP –∞—Ä—Ö–∏–≤–∞:', {
      zipFilePath,
      telegramId,
      error: errorMessage,
    })

    return {
      success: false,
      images: [],
      totalCount: 0,
      extractionPath: '',
      error: errorMessage,
    }
  }
}

/**
 * –û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
 */
export async function cleanupExtractionFiles(
  extractionPath: string
): Promise<void> {
  if (!extractionPath || !fs.existsSync(extractionPath)) {
    return
  }

  try {
    await fs.promises.rm(extractionPath, { recursive: true, force: true })
    logger.info('üß¨ –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã:', { extractionPath })
  } catch (error) {
    logger.error('üß¨ –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤:', {
      extractionPath,
      error: error instanceof Error ? error.message : String(error),
    })
  }
}

/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
 */
export function validateImageSequence(images: ExtractedImage[]): {
  isValid: boolean
  errors: string[]
} {
  const errors: string[] = []

  if (images.length === 0) {
    errors.push('No images provided for validation')
    return { isValid: false, errors }
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ—Ä—è–¥–∫–∞
  const orders = images.map(img => img.order)
  const uniqueOrders = new Set(orders)

  if (uniqueOrders.size !== orders.length) {
    errors.push('Duplicate image order numbers detected')
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –∏ –∏–º–µ—é—Ç –≤–∞–ª–∏–¥–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –Ω–∞ –¥–∏—Å–∫–µ
  const minFileSize = 1024 // 1KB

  for (const image of images) {
    try {
      const fs = require('fs')
      const stats = fs.statSync(image.path)

      if (stats.size === 0) {
        errors.push(`Empty image file: ${image.filename}`)
        continue
      }

      if (stats.size < minFileSize) {
        errors.push(`Image too small: ${image.filename} (${stats.size} bytes)`)
      }
    } catch (error) {
      errors.push(`Cannot access image file: ${image.filename}`)
    }
  }

  return {
    isValid: errors.length === 0,
    errors,
  }
}
