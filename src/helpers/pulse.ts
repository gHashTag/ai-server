import { pulseBot } from '@/core/bot'
import fs from 'fs'
import { logger } from '@/utils/logger'

// –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
export const pulse = async (
  imageOrOptions: string | PulseOptions,
  prompt?: string,
  command?: string,
  telegram_id?: string,
  username?: string,
  is_ru?: boolean,
  bot_name?: string
) => {
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç (–æ–±—ä–µ–∫—Ç)
    if (typeof imageOrOptions === 'object') {
      const options = imageOrOptions as PulseOptions

      logger.info({
        message: 'üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ pulse (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)',
        description: 'Sending data to pulse (new format)',
        action: options.action,
      })

      // –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—É—é –ª–æ–≥–∏–∫—É
      if (options.action === 'NeurophotoV2') {
        const { imageUrl, prompt, service, user } = options.result
        const { telegramId, username, language } = user
        const isRussian = language === 'ru'

        const truncatedPrompt =
          prompt.length > 800 ? prompt.slice(0, 800) : prompt
        const caption = isRussian
          ? `@${
              username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ username'
            } Telegram ID: ${telegramId} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–æ–º–ø—Ç–æ–º: ${truncatedPrompt} \n\n –°–µ—Ä–≤–∏—Å: ${service}`
          : `@${
              username || 'User without username'
            } Telegram ID: ${telegramId} generated an image with a prompt: ${truncatedPrompt} \n\n Service: ${service}`

        const chatId = '@neuro_blogger_pulse'

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ URL –≤–º–µ—Å—Ç–æ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        await pulseBot.telegram.sendPhoto(
          chatId,
          { url: imageUrl },
          { caption }
        )

        return
      }

      // –î–ª—è –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
      logger.warn({
        message: '‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è –≤ pulse',
        description: 'Unknown action type in pulse',
        action: options.action,
      })

      return
    }

    // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏)
    logger.info({
      message: 'üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ pulse (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç)',
      description: 'Sending data to pulse (old format)',
      telegram_id,
      command,
    })
    if (!telegram_id || !prompt || !command || !bot_name) {
      throw new Error('Invalid data received in pulse')
    }

    const image = imageOrOptions // –í —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ø–µ—Ä–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä - —ç—Ç–æ –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    const truncatedPrompt =
      prompt?.length > 800 ? prompt?.slice(0, 800) : prompt
    const caption = is_ru
      ? `@${
          username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ username'
        } Telegram ID: ${telegram_id} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–æ–º–ø—Ç–æ–º: ${truncatedPrompt} \n\n –ö–æ–º–∞–Ω–¥–∞: ${command} \n\n Bot: @${bot_name}`
      : `@${
          username || 'User without username'
        } Telegram ID: ${telegram_id} generated an image with a prompt: ${truncatedPrompt} \n\n Command: ${command} \n\n Bot: @${bot_name}`

    const chatId = '@neuro_blogger_pulse'

    // send image as buffer
    await pulseBot.telegram.sendPhoto(
      chatId,
      { source: fs.createReadStream(image) },
      { caption }
    )
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ pulse',
      description: 'Error sending to pulse',
      error: (error as Error).message,
      stack: (error as Error).stack,
    })
  }
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
interface PulseOptions {
  action: string
  result: any
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è MarkdownV2.
 * @param text - –¢–µ–∫—Å—Ç –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
 * @returns –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç.
 */
function escapeMarkdownV2(text: string): string {
  // –°–∏–º–≤–æ–ª—ã –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ MarkdownV2 (–¥–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫)
  const charsToEscape = '\\_*[]()~`>#+-=|{}.!' // –î–æ–±–∞–≤–∏–ª \ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∞–º–æ–≥–æ —Å–µ–±—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ —Ç–µ–∫—Å—Ç–µ
  let escapedText = ''
  for (const char of text) {
    if (charsToEscape.includes(char)) {
      escapedText += '\\' + char // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—ã–π —Å–ª–µ—à –ø–µ—Ä–µ–¥ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–º
    } else {
      escapedText += char
    }
  }
  return escapedText
}

// --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø HTML –≠–ö–†–ê–ù–ò–†–û–í–ê–ù–ò–Ø ---
/**
 * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ HTML —Å–∏–º–≤–æ–ª—ã: <, >, &
 * @param text - –¢–µ–∫—Å—Ç –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
 * @returns –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–ª—è HTML —Ç–µ–∫—Å—Ç.
 */
function escapeHTML(text: string): string {
  return text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;')
}
// --- –ö–û–ù–ï–¶ –§–£–ù–ö–¶–ò–ò HTML –≠–ö–†–ê–ù–ò–†–û–í–ê–ù–ò–Ø ---

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–∞ –≤ –∫–∞–Ω–∞–ª @neuro_blogger_pulse
 *
 * @param options –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞
 * @returns Promise<void>
 */
export const sendMediaToPulse = async (
  options: MediaPulseOptions
): Promise<void> => {
  try {
    const chatId = '@neuro_blogger_pulse'

    // –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–µ
    const {
      mediaType,
      mediaSource,
      telegramId: rawTelegramId,
      username: rawUsername = '',
      language = 'ru',
      serviceType: rawServiceType,
      prompt = '',
      botName: rawBotName = '',
      additionalInfo: rawAdditionalInfo = {},
    } = options

    // --- –≠–ö–†–ê–ù–ò–†–£–ï–ú –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–ï –ß–ê–°–¢–ò –¥–ª—è HTML (–¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏) ---
    const telegramId = String(rawTelegramId) // ID –æ–±—ã—á–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω—ã, –Ω–æ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è
    const username = escapeHTML(rawUsername || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ username')
    const botName = escapeHTML(rawBotName)
    const serviceType = rawServiceType ? escapeHTML(rawServiceType) : undefined
    const additionalInfo: Record<string, string> = {}
    for (const [key, value] of Object.entries(rawAdditionalInfo)) {
      additionalInfo[escapeHTML(key)] = escapeHTML(String(value))
    }
    // --- –ö–û–ù–ï–¶ –≠–ö–†–ê–ù–ò–†–û–í–ê–ù–ò–Ø ---

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–æ–¥–ø–∏—Å–∏
    const isRussian = language === 'ru'
    const truncatedPrompt = prompt.length > 800 ? prompt.slice(0, 800) : prompt

    // –ë–∞–∑–æ–≤–∞—è –ø–æ–¥–ø–∏—Å—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
    let caption = isRussian
      ? `@${username} Telegram ID: ${telegramId} `
      : `@${username} Telegram ID: ${telegramId} `

    // –î–æ–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if (mediaType === 'photo') {
      caption += isRussian ? `—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ` : `generated an image`
    } else if (mediaType === 'video') {
      caption += isRussian ? `—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –≤–∏–¥–µ–æ` : `generated a video`
    } else if (mediaType === 'audio') {
      caption += isRussian ? `—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∞—É–¥–∏–æ` : `generated audio`
    } else if (mediaType === 'document') {
      caption += isRussian ? `—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –¥–æ–∫—É–º–µ–Ω—Ç` : `generated a document`
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–ø—Ç, –µ—Å–ª–∏ –æ–Ω –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
    if (prompt) {
      caption += isRussian
        ? ` —Å –ø—Ä–æ–º–ø—Ç–æ–º: ${truncatedPrompt}`
        : ` with a prompt: ${truncatedPrompt}`
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ
    if (serviceType) {
      caption += isRussian
        ? `\n\n –°–µ—Ä–≤–∏—Å: ${serviceType}`
        : `\n\n Service: ${serviceType}`
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    if (botName) {
      caption += isRussian ? `\n\n Bot: @${botName}` : `\n\n Bot: @${botName}`
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    for (const [key, value] of Object.entries(additionalInfo)) {
      caption += `\n${key}: ${value}`
    }

    // –ò—Å—Ç–æ—á–Ω–∏–∫ –º–µ–¥–∏–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å URL –∏–ª–∏ –ø—É—Ç–µ–º –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É
    const isUrl =
      typeof mediaSource === 'string' &&
      (mediaSource.startsWith('http://') || mediaSource.startsWith('https://'))

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–µ–¥–∏–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const mediaParams = isUrl
      ? { url: mediaSource }
      : { source: fs.createReadStream(mediaSource as string) }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –º–µ–¥–∏–∞
    logger.info({
      message: `üì° –û—Ç–ø—Ä–∞–≤–∫–∞ ${mediaType} –≤ pulse`,
      description: `Sending ${mediaType} to pulse channel`,
      telegramId: rawTelegramId,
      serviceType: rawServiceType,
      mediaType,
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–∏–ø –º–µ–¥–∏–∞
    switch (mediaType) {
      case 'photo':
        logger.info({
          message: 'üì¨ [pulse] –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ',
          description: 'Received photo sending request in pulse',
          telegramId: rawTelegramId,
          promptLength: prompt?.length ?? 0,
          promptReceived: !!prompt,
        })
        try {
          // 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –±–µ–∑ –ø–æ–¥–ø–∏—Å–∏
          await pulseBot.telegram.sendPhoto(chatId, mediaParams)
          logger.info({
            message: 'üì∏ [pulse] –§–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –≥–æ—Ç–æ–≤–∏–º —Ç–µ–∫—Å—Ç',
            description: 'Photo sent, preparing text message',
            telegramId: rawTelegramId,
            promptAvailable: !!prompt,
          })
        } catch (photoError) {
          logger.error({
            message: '‚ùå [pulse] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –§–û–¢–û',
            description: 'Error sending PHOTO in pulse',
            error:
              photoError instanceof Error
                ? photoError.message
                : String(photoError),
            stack: photoError instanceof Error ? photoError.stack : undefined,
            telegramId: rawTelegramId,
          })
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ —É—à–ª–æ
        }

        // 2. –§–æ—Ä–º–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º –∏ –¥–æ–ø. –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        if (prompt) {
          let textMessage = isRussian
            ? `@${username} Telegram ID: ${telegramId} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.`
            : `@${username} Telegram ID: ${telegramId} generated an image.`

          textMessage += isRussian
            ? `\n\nüìù <b>–ü—Ä–æ–º–ø—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:</b>` // –ò—Å–ø–æ–ª—å–∑—É–µ–º <b> –¥–ª—è –∂–∏—Ä–Ω–æ–≥–æ
            : `\n\nüìù <b>Prompt for copying:</b>`

          // ---> –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∞–º –ø—Ä–æ–º–ø—Ç –¥–ª—è HTML –∏ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ —Ç–µ–≥–∏
          const escapedPromptForHTML = escapeHTML(prompt)
          textMessage += `\n<pre><code>${escapedPromptForHTML}</code></pre>`

          // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
          if (serviceType) {
            textMessage += isRussian
              ? `\n\n‚öôÔ∏è –°–µ—Ä–≤–∏—Å: ${serviceType}`
              : `\n\n‚öôÔ∏è Service: ${serviceType}`
          }
          if (botName) {
            textMessage += isRussian
              ? `\nü§ñ –ë–æ—Ç: @${botName}`
              : `\nü§ñ Bot: @${botName}`
          }
          for (const [key, value] of Object.entries(additionalInfo)) {
            textMessage += `\n‚ÑπÔ∏è ${key}: ${value}`
          }

          logger.info({
            message: 'üìù [pulse] –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–æ–º–ø—Ç–æ–º (HTML)',
            description: 'Attempting to send text message with prompt (HTML)',
            telegramId: rawTelegramId,
            textMessageLength: textMessage.length,
          })
          try {
            await pulseBot.telegram.sendMessage(chatId, textMessage, {
              parse_mode: 'HTML', // <--- –ú–ï–ù–Ø–ï–ú –ù–ê HTML
              link_preview_options: { is_disabled: true },
            })
            logger.info({
              message: '‚úÖ [pulse] –¢–µ–∫—Å—Ç —Å –ø—Ä–æ–º–ø—Ç–æ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (HTML)',
              description: 'Text message with prompt sent successfully (HTML)',
              telegramId: rawTelegramId,
              parseMode: 'HTML', // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥
            })
          } catch (textError) {
            logger.error({
              message:
                '‚ùå [pulse] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¢–ï–ö–°–¢–ê —Å –ø—Ä–æ–º–ø—Ç–æ–º (HTML)',
              description:
                'Error sending TEXT message with prompt in pulse (HTML)',
              error:
                textError instanceof Error
                  ? textError.message
                  : String(textError),
              stack: textError instanceof Error ? textError.stack : undefined,
              telegramId: rawTelegramId,
              textMessageAttempted: textMessage.substring(0, 500) + '...',
              parseMode: 'HTML', // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–≥
            })
            // ---> –£–ü–†–û–©–ï–ù–ù–´–ô FALLBACK: –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±–µ–∑ parse_mode
            try {
              logger.warn({
                message:
                  '‚ö†Ô∏è [pulse] –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è' /* ... */,
              })
              await pulseBot.telegram.sendMessage(chatId, textMessage, {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ—Ç –∂–µ —Ç–µ–∫—Å—Ç, –Ω–æ –±–µ–∑ parse_mode
                link_preview_options: { is_disabled: true },
              })
              logger.info({
                message:
                  '‚úÖ [pulse] –¢–µ–∫—Å—Ç —Å –ø—Ä–æ–º–ø—Ç–æ–º —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω (–±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)' /* ... */,
              })
            } catch (retryError) {
              logger.error({
                message:
                  '‚ùå [pulse] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ –¢–ï–ö–°–¢–ê (–±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)' /* ... */,
              })
            }
          }
        } else {
          // –ï—Å–ª–∏ –ø—Ä–æ–º–ø—Ç–∞ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
          let textMessage = isRussian
            ? `@${username} Telegram ID: ${telegramId} —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.`
            : `@${username} Telegram ID: ${telegramId} generated an image.`
          if (serviceType) {
            textMessage += isRussian
              ? `\n\n‚öôÔ∏è –°–µ—Ä–≤–∏—Å: ${serviceType}`
              : `\n\n‚öôÔ∏è Service: ${serviceType}`
          }
          if (botName) {
            textMessage += isRussian
              ? `\nü§ñ –ë–æ—Ç: @${botName}`
              : `\nü§ñ Bot: @${botName}`
          }
          for (const [key, value] of Object.entries(additionalInfo)) {
            textMessage += `\n‚ÑπÔ∏è ${key}: ${value}`
          }
          logger.info({
            message: 'üìù [pulse] –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –±–µ–∑ –ø—Ä–æ–º–ø—Ç–∞',
            description: 'Attempting to send text message without prompt',
            telegramId: rawTelegramId,
            textMessageLength: textMessage.length,
          })
          try {
            await pulseBot.telegram.sendMessage(chatId, textMessage, {
              parse_mode: 'HTML',
              link_preview_options: { is_disabled: true },
            })
            logger.info({
              message: '‚úÖ [pulse] –¢–µ–∫—Å—Ç –±–µ–∑ –ø—Ä–æ–º–ø—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω',
              description: 'Text message without prompt sent successfully',
              telegramId: rawTelegramId,
            })
          } catch (textError) {
            logger.error({
              message: '‚ùå [pulse] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¢–ï–ö–°–¢–ê –±–µ–∑ –ø—Ä–æ–º–ø—Ç–∞',
              description: 'Error sending TEXT message without prompt in pulse',
              error:
                textError instanceof Error
                  ? textError.message
                  : String(textError),
              stack: textError instanceof Error ? textError.stack : undefined,
              telegramId: rawTelegramId,
            })
          }
        }
        break
      case 'video':
        // –û—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤–∏–¥–µ–æ —Å caption –∫–∞–∫ –µ—Å—Ç—å (–∏–ª–∏ –º–æ–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ –∞–Ω–∞–ª–æ–≥–∏–∏)
        await pulseBot.telegram.sendVideo(chatId, mediaParams, { caption })
        break
      case 'audio':
        await pulseBot.telegram.sendAudio(chatId, mediaParams, { caption })
        break
      case 'document':
        await pulseBot.telegram.sendDocument(chatId, mediaParams, { caption })
        break
      default:
        throw new Error(`–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø –º–µ–¥–∏–∞: ${mediaType}`)
    }

    logger.info({
      message: '‚úÖ –ú–µ–¥–∏–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ pulse',
      description: 'Media successfully sent to pulse channel',
      mediaType,
      telegramId: rawTelegramId,
    })
  } catch (error) {
    logger.error({
      message: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞ –≤ pulse',
      description: 'Error sending media to pulse channel',
      error: (error as Error).message,
      stack: (error as Error).stack,
      options,
    })
  }
}

// –¢–∏–ø—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞
export interface MediaPulseOptions {
  mediaType: 'photo' | 'video' | 'audio' | 'document'
  mediaSource: string | Buffer // URL –∏–ª–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
  telegramId: string | number
  username?: string
  language?: 'ru' | 'en'
  serviceType?: string
  prompt?: string
  botName?: string
  additionalInfo?: Record<string, string>
}
