import { inngest } from '../client'
import { getUserByTelegramId, updateUserLevelPlusOne } from '@/core/supabase'
import { modeCosts, ModeEnum } from '@/price/helpers/modelsCost'
import { processBalanceOperation } from '@/price/helpers'
import elevenLabsClient from '@/core/elevenlabs'
import { logger } from '@/utils/logger'
import { getBotByName } from '@/core/bot'
import { createWriteStream } from 'fs'
import path from 'path'
import os from 'os'
import { InputFile } from 'telegraf/typings/core/types/typegram'

interface SpeechGenerationData {
  text: string
  voice_id: string
  telegram_id: string
  is_ru: boolean
  bot_name: string
}

interface VoiceAvatarData {
  fileUrl: string
  telegram_id: string
  username: string
  is_ru: boolean
  bot_name: string
}

// Text-to-Speech Inngest —Ñ—É–Ω–∫—Ü–∏—è
export const generateSpeechInngest = inngest.createFunction(
  {
    id: 'generate-speech',
    concurrency: 5,
    idempotency: 'event.data.telegram_id + "-speech-" + event.data.text.slice(0, 20)',
  },
  { event: 'speech/text-to-speech.start' },
  async ({ event, step }) => {
    const eventData = event.data as SpeechGenerationData

    logger.info({
      message: '–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ text-to-speech',
      eventId: event.id,
      telegram_id: eventData.telegram_id,
      voice_id: eventData.voice_id,
    })

    try {
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await step.run('validate-user', async () => {
        const userExists = await getUserByTelegramId(eventData.telegram_id)
        if (!userExists) {
          throw new Error(`User with ID ${eventData.telegram_id} does not exist.`)
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (userExists.level === 7) {
          await updateUserLevelPlusOne(eventData.telegram_id, userExists.level)
        }

        return userExists
      })

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ—Ç–∞
      const { bot } = getBotByName(eventData.bot_name)
      if (!bot) {
        throw new Error(`–ë–æ—Ç ${eventData.bot_name} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∏ —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
      const balanceCheck = await step.run('check-balance', async () => {
        const result = await processBalanceOperation({
          telegram_id: eventData.telegram_id,
          paymentAmount: modeCosts[ModeEnum.TextToSpeech] as number,
          is_ru: eventData.is_ru,
          bot,
        })

        if (!result.success) {
          throw new Error(result.error)
        }

        return result
      })

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—á–∏ —á–µ—Ä–µ–∑ ElevenLabs
      const audioFile = await step.run('generate-audio', async () => {
        if (!process.env.ELEVENLABS_API_KEY) {
          throw new Error('ELEVENLABS_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
        }

        logger.info({
          message: '–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏ —á–µ—Ä–µ–∑ ElevenLabs',
          telegram_id: eventData.telegram_id,
          voice_id: eventData.voice_id,
          textLength: eventData.text.length,
        })

        const audio = await elevenLabsClient.generate({
          voice: eventData.voice_id,
          text: eventData.text,
          model_id: 'eleven_multilingual_v2',
        })

        // –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        const tempDir = os.tmpdir()
        const audioPath = path.join(tempDir, `${eventData.telegram_id}_speech_${Date.now()}.mp3`)
        
        const audioStream = createWriteStream(audioPath)
        
        return new Promise<string>((resolve, reject) => {
          audio.pipe(audioStream)
          
          audioStream.on('finish', () => {
            logger.info({
              message: '–ê—É–¥–∏–æ—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
              audioPath,
              telegram_id: eventData.telegram_id,
            })
            resolve(audioPath)
          })
          
          audioStream.on('error', (error) => {
            logger.error({
              message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞',
              error: error.message,
              telegram_id: eventData.telegram_id,
            })
            reject(error)
          })
        })
      })

      // –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      await step.run('send-audio', async () => {
        const audio = new InputFile(audioFile)
        
        await bot.telegram.sendAudio(eventData.telegram_id, audio, {
          caption: eventData.is_ru 
            ? `üéµ –í–∞—à –∞—É–¥–∏–æ—Ñ–∞–π–ª –≥–æ—Ç–æ–≤!\n\nüìù –¢–µ–∫—Å—Ç: ${eventData.text}`
            : `üéµ Your audio is ready!\n\nüìù Text: ${eventData.text}`,
        })

        logger.info({
          message: '–ê—É–¥–∏–æ—Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é',
          telegram_id: eventData.telegram_id,
        })
      })

      logger.info({
        message: 'Text-to-speech –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
        telegram_id: eventData.telegram_id,
        audioFile,
      })

      return {
        success: true,
        audioUrl: audioFile,
        message: '–†–µ—á—å —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞',
      }

    } catch (error) {
      logger.error({
        message: '–û—à–∏–±–∫–∞ text-to-speech –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
        error: error.message,
        telegram_id: eventData.telegram_id,
      })

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      const { bot } = getBotByName(eventData.bot_name)
      if (bot) {
        try {
          const errorMsg = eventData.is_ru 
            ? `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ—á–∏: ${error.message}`
            : `‚ùå Error during speech generation: ${error.message}`
          
          await bot.telegram.sendMessage(eventData.telegram_id, errorMsg)
        } catch (sendError) {
          logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ', sendError)
        }
      }

      throw error
    }
  }
)

// Voice Avatar Creation Inngest —Ñ—É–Ω–∫—Ü–∏—è
export const createVoiceAvatarInngest = inngest.createFunction(
  {
    id: 'create-voice-avatar',
    concurrency: 3,
    idempotency: 'event.data.telegram_id + "-avatar-" + event.data.fileUrl.slice(-10)',
  },
  { event: 'speech/voice-avatar.start' },
  async ({ event, step }) => {
    const eventData = event.data as VoiceAvatarData

    logger.info({
      message: '–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞',
      eventId: event.id,
      telegram_id: eventData.telegram_id,
      fileUrl: eventData.fileUrl,
    })

    try {
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await step.run('validate-user', async () => {
        const userExists = await getUserByTelegramId(eventData.telegram_id)
        if (!userExists) {
          throw new Error(`User with ID ${eventData.telegram_id} does not exist.`)
        }

        return userExists
      })

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ—Ç–∞
      const { bot } = getBotByName(eventData.bot_name)
      if (!bot) {
        throw new Error(`–ë–æ—Ç ${eventData.bot_name} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
      const balanceCheck = await step.run('check-balance', async () => {
        const result = await processBalanceOperation({
          telegram_id: eventData.telegram_id,
          paymentAmount: modeCosts[ModeEnum.CreateVoiceAvatar] as number,
          is_ru: eventData.is_ru,
          bot,
        })

        if (!result.success) {
          throw new Error(result.error)
        }

        return result
      })

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
      await step.run('send-start-message', async () => {
        await bot.telegram.sendMessage(
          eventData.telegram_id,
          eventData.is_ru 
            ? '‚è≥ –°–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞...' 
            : '‚è≥ Creating voice avatar...'
        )
      })

      // –°–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ —á–µ—Ä–µ–∑ ElevenLabs
      const voiceResult = await step.run('create-voice', async () => {
        if (!process.env.ELEVENLABS_API_KEY) {
          throw new Error('ELEVENLABS_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
        }

        logger.info({
          message: '–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ —á–µ—Ä–µ–∑ ElevenLabs',
          telegram_id: eventData.telegram_id,
          fileUrl: eventData.fileUrl,
        })

        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ —á–µ—Ä–µ–∑ ElevenLabs API
        // –í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–º–µ—Ä–µ –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
        const voiceId = `voice_${eventData.telegram_id}_${Date.now()}`
        
        // TODO: –†–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å ElevenLabs API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞
        // const voice = await elevenLabsClient.voices.add({
        //   name: `Voice_${eventData.username}`,
        //   files: [eventData.fileUrl]
        // })

        return {
          voiceId,
          name: `Voice_${eventData.username}`,
        }
      })

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
      await step.run('send-success-message', async () => {
        await bot.telegram.sendMessage(
          eventData.telegram_id,
          eventData.is_ru 
            ? `‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–π –∞–≤–∞—Ç–∞—Ä —Å–æ–∑–¥–∞–Ω!\n\nüé≠ ID –≥–æ–ª–æ—Å–∞: ${voiceResult.voiceId}\nüìù –ò–º—è: ${voiceResult.name}`
            : `‚úÖ Voice avatar created!\n\nüé≠ Voice ID: ${voiceResult.voiceId}\nüìù Name: ${voiceResult.name}`
        )
      })

      logger.info({
        message: '–°–æ–∑–¥–∞–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ',
        telegram_id: eventData.telegram_id,
        voiceId: voiceResult.voiceId,
      })

      return {
        success: true,
        voiceId: voiceResult.voiceId,
        voiceName: voiceResult.name,
        message: '–ì–æ–ª–æ—Å–æ–≤–æ–π –∞–≤–∞—Ç–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω',
      }

    } catch (error) {
      logger.error({
        message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞',
        error: error.message,
        telegram_id: eventData.telegram_id,
      })

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      const { bot } = getBotByName(eventData.bot_name)
      if (bot) {
        try {
          const errorMsg = eventData.is_ru 
            ? `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∞–≤–∞—Ç–∞—Ä–∞: ${error.message}`
            : `‚ùå Error during voice avatar creation: ${error.message}`
          
          await bot.telegram.sendMessage(eventData.telegram_id, errorMsg)
        } catch (sendError) {
          logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ', sendError)
        }
      }

      throw error
    }
  }
)