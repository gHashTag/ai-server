import { inngest } from '../client'
import { replicate } from '@/core/replicate'
import { getUserByTelegramId, updateUserLevelPlusOne } from '@/core/supabase'
import { VIDEO_MODELS_CONFIG } from '@/helpers/VIDEO_MODELS'
import { processBalanceVideoOperation } from '@/price/helpers'
import { downloadFile } from '@/helpers/downloadFile'
import { saveVideoUrlToSupabase } from '@/core/supabase/saveVideoUrlToSupabase'
import { pulse } from '@/helpers/pulse'
import { logger } from '@/utils/logger'
import { getBotByName } from '@/core/bot'
import { mkdir, writeFile } from 'fs/promises'
import path from 'path'
import { InputFile } from 'telegraf/typings/core/types/typegram'

interface TextToVideoData {
  prompt: string
  videoModel: string
  telegram_id: string
  username: string
  is_ru: boolean
  bot_name: string
}

interface ImageToVideoData {
  imageUrl: string
  prompt: string
  videoModel: string
  telegram_id: string
  username: string
  is_ru: boolean
  bot_name: string
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
const processVideoGeneration = async (
  videoModel: string,
  prompt: string,
  imageUrl?: string
) => {
  const modelConfig = VIDEO_MODELS_CONFIG[videoModel]

  if (!modelConfig) {
    throw new Error('Invalid video model')
  }

  const input: any = {
    prompt,
    ...modelConfig.api.input,
  }

  // –ï—Å–ª–∏ —ç—Ç–æ image-to-video, –¥–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
  if (imageUrl) {
    input.image = imageUrl
  }

  const output = await replicate.run(
    modelConfig.api.model as `${string}/${string}`,
    { input }
  )

  return output
}

// Text-to-Video Inngest —Ñ—É–Ω–∫—Ü–∏—è
export const generateTextToVideoInngest = inngest.createFunction(
  {
    id: 'generate-text-to-video',
    concurrency: 3,
    idempotency: 'event.data.telegram_id + "-video-" + event.data.prompt.slice(0, 15)',
  },
  { event: 'video/text-to-video.start' },
  async ({ event, step }) => {
    const eventData = event.data as TextToVideoData

    logger.info({
      message: '–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ text-to-video',
      eventId: event.id,
      telegram_id: eventData.telegram_id,
      videoModel: eventData.videoModel,
    })

    try {
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await step.run('validate-user', async () => {
        const userExists = await getUserByTelegramId(eventData.telegram_id)
        if (!userExists) {
          throw new Error(`User with ID ${eventData.telegram_id} does not exist.`)
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (userExists.level === 9) {
          await updateUserLevelPlusOne(eventData.telegram_id, userExists.level)
        }

        return userExists
      })

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ—Ç–∞
      const { bot } = getBotByName(eventData.bot_name)
      if (!bot) {
        throw new Error(`–ë–æ—Ç ${eventData.bot_name} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∏ —Å–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤
      await step.run('check-balance', async () => {
        const result = await processBalanceVideoOperation({
          videoModel: eventData.videoModel,
          telegram_id: eventData.telegram_id,
          is_ru: eventData.is_ru,
          bot,
        })

        return result
      })

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      await step.run('send-start-message', async () => {
        await bot.telegram.sendMessage(
          eventData.telegram_id,
          eventData.is_ru ? '‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ...' : '‚è≥ Generating video...',
          {
            reply_markup: {
              remove_keyboard: true,
            },
          }
        )
      })

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ
      const videoOutput = await step.run('generate-video', async () => {
        logger.info({
          message: '–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ text-to-video',
          telegram_id: eventData.telegram_id,
          model: eventData.videoModel,
        })

        const output = await processVideoGeneration(
          eventData.videoModel,
          eventData.prompt
        )

        return output
      })

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      const videoResult = await step.run('process-video-result', async () => {
        const videoUrl = Array.isArray(videoOutput) ? videoOutput[0] : videoOutput

        if (!videoUrl) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –≤–∏–¥–µ–æ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏')
        }

        // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ
        const videoLocalPath = await downloadFile(
          videoUrl,
          eventData.telegram_id,
          'video'
        )

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const video = new InputFile(videoLocalPath)
        await bot.telegram.sendVideo(eventData.telegram_id, video, {
          caption: eventData.is_ru
            ? `‚úÖ –í–∞—à–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!\n\nüìù –ü—Ä–æ–º—Ç: ${eventData.prompt}`
            : `‚úÖ Your video is ready!\n\nüìù Prompt: ${eventData.prompt}`,
        })

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Supabase
        await saveVideoUrlToSupabase(
          eventData.telegram_id,
          eventData.username,
          videoUrl,
          eventData.prompt,
          'text_to_video'
        )

        // –û—Ç–ø—Ä–∞–≤–∫–∞ pulse —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        await pulse(eventData.telegram_id, eventData.username, eventData.prompt)

        return { videoUrl, videoLocalPath }
      })

      logger.info({
        message: 'Text-to-video –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
        telegram_id: eventData.telegram_id,
        videoUrl: videoResult.videoUrl,
      })

      return {
        success: true,
        videoUrl: videoResult.videoUrl,
        message: '–í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ',
      }

    } catch (error) {
      logger.error({
        message: '–û—à–∏–±–∫–∞ text-to-video –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
        error: error.message,
        telegram_id: eventData.telegram_id,
      })

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      const { bot } = getBotByName(eventData.bot_name)
      if (bot) {
        try {
          const errorMsg = eventData.is_ru 
            ? `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: ${error.message}`
            : `‚ùå Error during video generation: ${error.message}`
          
          await bot.telegram.sendMessage(eventData.telegram_id, errorMsg)
        } catch (sendError) {
          logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ', sendError)
        }
      }

      throw error
    }
  }
)

// Image-to-Video Inngest —Ñ—É–Ω–∫—Ü–∏—è
export const generateImageToVideoInngest = inngest.createFunction(
  {
    id: 'generate-image-to-video',
    concurrency: 3,
    idempotency: 'event.data.telegram_id + "-img2vid-" + event.data.imageUrl.slice(-10)',
  },
  { event: 'video/image-to-video.start' },
  async ({ event, step }) => {
    const eventData = event.data as ImageToVideoData

    logger.info({
      message: '–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ image-to-video',
      eventId: event.id,
      telegram_id: eventData.telegram_id,
      videoModel: eventData.videoModel,
    })

    try {
      // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await step.run('validate-user', async () => {
        const userExists = await getUserByTelegramId(eventData.telegram_id)
        if (!userExists) {
          throw new Error(`User with ID ${eventData.telegram_id} does not exist.`)
        }

        if (userExists.level === 9) {
          await updateUserLevelPlusOne(eventData.telegram_id, userExists.level)
        }

        return userExists
      })

      // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ—Ç–∞
      const { bot } = getBotByName(eventData.bot_name)
      if (!bot) {
        throw new Error(`–ë–æ—Ç ${eventData.bot_name} –Ω–µ –Ω–∞–π–¥–µ–Ω`)
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞
      await step.run('check-balance', async () => {
        const result = await processBalanceVideoOperation({
          videoModel: eventData.videoModel,
          telegram_id: eventData.telegram_id,
          is_ru: eventData.is_ru,
          bot,
        })

        return result
      })

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      await step.run('send-start-message', async () => {
        await bot.telegram.sendMessage(
          eventData.telegram_id,
          eventData.is_ru ? '‚è≥ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...' : '‚è≥ Generating video from image...',
          {
            reply_markup: {
              remove_keyboard: true,
            },
          }
        )
      })

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const videoOutput = await step.run('generate-video', async () => {
        logger.info({
          message: '–ù–∞—á–∞–ª–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ image-to-video',
          telegram_id: eventData.telegram_id,
          model: eventData.videoModel,
        })

        const output = await processVideoGeneration(
          eventData.videoModel,
          eventData.prompt,
          eventData.imageUrl
        )

        return output
      })

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      const videoResult = await step.run('process-video-result', async () => {
        const videoUrl = Array.isArray(videoOutput) ? videoOutput[0] : videoOutput

        if (!videoUrl) {
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –≤–∏–¥–µ–æ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏')
        }

        // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
        const videoLocalPath = await downloadFile(
          videoUrl,
          eventData.telegram_id,
          'video'
        )

        const video = new InputFile(videoLocalPath)
        await bot.telegram.sendVideo(eventData.telegram_id, video, {
          caption: eventData.is_ru
            ? `‚úÖ –í–∞—à–µ –≤–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–æ—Ç–æ–≤–æ!\n\nüìù –ü—Ä–æ–º—Ç: ${eventData.prompt}`
            : `‚úÖ Your video from image is ready!\n\nüìù Prompt: ${eventData.prompt}`,
        })

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Supabase
        await saveVideoUrlToSupabase(
          eventData.telegram_id,
          eventData.username,
          videoUrl,
          eventData.prompt,
          'image_to_video'
        )

        // Pulse —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await pulse(eventData.telegram_id, eventData.username, eventData.prompt)

        return { videoUrl, videoLocalPath }
      })

      logger.info({
        message: 'Image-to-video –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ',
        telegram_id: eventData.telegram_id,
        videoUrl: videoResult.videoUrl,
      })

      return {
        success: true,
        videoUrl: videoResult.videoUrl,
        message: '–í–∏–¥–µ–æ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ',
      }

    } catch (error) {
      logger.error({
        message: '–û—à–∏–±–∫–∞ image-to-video –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
        error: error.message,
        telegram_id: eventData.telegram_id,
      })

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      const { bot } = getBotByName(eventData.bot_name)
      if (bot) {
        try {
          const errorMsg = eventData.is_ru 
            ? `‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ: ${error.message}`
            : `‚ùå Error during video generation: ${error.message}`
          
          await bot.telegram.sendMessage(eventData.telegram_id, errorMsg)
        } catch (sendError) {
          logger.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ', sendError)
        }
      }

      throw error
    }
  }
)