/**
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –æ–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Dart AI ‚Üí GitHub Issues
 * –°–æ–∑–¥–∞–µ—Ç GitHub Issues –∏–∑ –∑–∞–¥–∞—á Dart AI
 */

const axios = require('axios');
require('dotenv').config();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const DART_AI_API_URL = process.env.DART_AI_API_URL || 'https://app.dartai.com/api/v0';
const DART_AI_API_KEY = process.env.DART_AI_API_KEY;
const GITHUB_TOKEN = process.env.GITHUB_TOKEN;
const GITHUB_REPO = process.env.DEFAULT_GITHUB_REPO || 'gHashTag/ai-server';

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ Dart AI
 */
async function getDartAITasks() {
  try {
    log('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á –∏–∑ Dart AI...', colors.blue);
    
    const response = await axios.get(`${DART_AI_API_URL}/tasks`, {
      headers: {
        'Authorization': `Bearer ${DART_AI_API_KEY}`,
        'Content-Type': 'application/json',
        'User-Agent': 'Dart-GitHub-Sync/1.0.0'
      },
      timeout: 10000
    });

    const tasks = response.data.results || [];
    const count = response.data.count || tasks.length;

    log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–¥–∞—á: ${count}`, colors.green);
    return { tasks, count, success: true };
    
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á: ${error.message}`, colors.red);
    return { tasks: [], count: 0, success: false, error: error.message };
  }
}

/**
 * –ò–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ rich-text –æ–ø–∏—Å–∞–Ω–∏—è Dart AI
 */
function extractDescriptionText(description) {
  if (typeof description === 'string') return description;
  if (!description || !description.root) return '';
  
  try {
    function extractText(node) {
      if (node.text) return node.text;
      if (node.children) {
        return node.children.map(extractText).join('');
      }
      return '';
    }
    
    return extractText(description.root);
  } catch (error) {
    return JSON.stringify(description);
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è GitHub Issue
 */
function formatTaskDescription(task) {
  const description = extractDescriptionText(task.description) || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è';

  let formattedDescription = description;
  
  formattedDescription += `\n\n---\n## üéØ Dart AI Task Info\n`;
  formattedDescription += `**Task ID:** \`${task.duid}\`\n`;
  formattedDescription += `**Space:** ${task.spaceDuid}\n`;
  
  if (task.kind) {
    formattedDescription += `**Type:** ${task.kind}\n`;
  }
  
  if (task.statusDuid) {
    formattedDescription += `**Status DUID:** ${task.statusDuid}\n`;
  }

  formattedDescription += `**–°–æ–∑–¥–∞–Ω–æ:** ${task.createdAt}\n`;
  formattedDescription += `**–û–±–Ω–æ–≤–ª–µ–Ω–æ:** ${task.updatedAt}\n`;

  formattedDescription += `\n> üîó *–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ Dart AI: ${new Date().toLocaleString('ru-RU')}*`;

  return formattedDescription;
}

/**
 * –°–æ–∑–¥–∞—Ç—å GitHub Issue –∏–∑ –∑–∞–¥–∞—á–∏ Dart AI
 */
async function createGitHubIssueFromTask(task, repository) {
  if (!GITHUB_TOKEN) {
    log('‚ùå GitHub —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω', colors.red);
    return null;
  }

  try {
    log(`üìù –°–æ–∑–¥–∞–Ω–∏–µ GitHub Issue –∏–∑ –∑–∞–¥–∞—á–∏: "${task.title}"`, colors.yellow);

    const issueData = {
      title: `[Dart AI] ${task.title}`,
      body: formatTaskDescription(task),
      labels: ['dart-ai-sync', 'automated']
    };

    const response = await axios.post(
      `https://api.github.com/repos/${repository}/issues`,
      issueData,
      {
        headers: {
          'Authorization': `Bearer ${GITHUB_TOKEN}`,
          'Content-Type': 'application/json',
          'User-Agent': 'Dart-GitHub-Sync/1.0.0'
        }
      }
    );

    const issue = {
      number: response.data.number,
      title: response.data.title,
      body: response.data.body,
      state: response.data.state,
      repository,
      assignees: response.data.assignees?.map(a => a.login) || [],
      labels: response.data.labels?.map(l => l.name) || [],
      created_at: response.data.created_at,
      updated_at: response.data.updated_at,
      html_url: response.data.html_url
    };

    log(`‚úÖ GitHub Issue —Å–æ–∑–¥–∞–Ω: #${issue.number}`, colors.green);
    log(`üîó URL: ${issue.html_url}`, colors.green);

    return issue;
    
  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è GitHub Issue: ${error.message}`, colors.red);
    if (error.response?.data) {
      log(`üìã –î–µ—Ç–∞–ª–∏: ${JSON.stringify(error.response.data, null, 2)}`, colors.yellow);
    }
    return null;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 */
async function syncDartAIToGitHub() {
  log('\nüöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Dart AI ‚Üí GitHub Issues\n', colors.bold);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
  if (!DART_AI_API_KEY) {
    log('‚ùå DART_AI_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω', colors.red);
    return;
  }

  if (!GITHUB_TOKEN) {
    log('‚ùå GITHUB_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω', colors.red);
    return;
  }

  log(`üîó Dart AI API: ${DART_AI_API_URL}`, colors.blue);
  log(`üìÇ GitHub Repo: ${GITHUB_REPO}`, colors.blue);

  // –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ Dart AI
  const tasksResult = await getDartAITasks();
  
  if (!tasksResult.success) {
    log('üí• –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏ –∏–∑ Dart AI', colors.red);
    return;
  }

  if (tasksResult.tasks.length === 0) {
    log('‚ÑπÔ∏è  –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', colors.yellow);
    return;
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 –∑–∞–¥–∞—á–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  log(`\nüìã –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–µ—Ä–≤—ã—Ö 3 –∑–∞–¥–∞—á –∏–∑ ${tasksResult.count}...`, colors.blue);
  
  const tasksToSync = tasksResult.tasks.slice(0, 3);
  let successCount = 0;
  const results = [];

  for (let i = 0; i < tasksToSync.length; i++) {
    const task = tasksToSync[i];
    log(`\n${i + 1}/${tasksToSync.length}. –û–±—Ä–∞–±–æ—Ç–∫–∞: "${task.title}"`, colors.yellow);
    
    const issue = await createGitHubIssueFromTask(task, GITHUB_REPO);
    
    if (issue) {
      successCount++;
      results.push({
        task_duid: task.duid,
        task_title: task.title,
        issue_number: issue.number,
        issue_url: issue.html_url
      });
    }

    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    if (i < tasksToSync.length - 1) {
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  }

  // –ò—Ç–æ–≥–∏
  log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', colors.bold);
  log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ${successCount}/${tasksToSync.length}`, colors.green);
  
  if (results.length > 0) {
    log('\nüéØ –°–æ–∑–¥–∞–Ω–Ω—ã–µ GitHub Issues:', colors.blue);
    results.forEach((result, index) => {
      log(`   ${index + 1}. Issue #${result.issue_number}: "${result.task_title}"`, colors.green);
      log(`      üîó ${result.issue_url}`, colors.reset);
      log(`      üì¶ Dart AI Task: ${result.task_duid}`, colors.reset);
    });
  }

  log('\n‚ú® –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!', colors.bold + colors.green);
  
  return {
    success: true,
    total_tasks: tasksResult.count,
    processed: tasksToSync.length,
    successful: successCount,
    results
  };
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  syncDartAIToGitHub()
    .then(result => {
      if (result && result.success) {
        log('\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!', colors.bold + colors.green);
      } else {
        log('\nüí• –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏', colors.bold + colors.red);
      }
    })
    .catch(error => {
      log(`\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, colors.bold + colors.red);
      console.error(error);
    });
}

module.exports = { 
  syncDartAIToGitHub, 
  getDartAITasks, 
  createGitHubIssueFromTask,
  extractDescriptionText,
  formatTaskDescription
};