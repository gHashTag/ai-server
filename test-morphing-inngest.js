/**
 * üß¨ –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è Inngest —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ—Ä—Ñ–∏–Ω–≥–∞
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ 'morph/images.requested' –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Inngest —Ñ—É–Ω–∫—Ü–∏–∏
 */

const axios = require('axios')
const FormData = require('form-data')
const fs = require('fs')
const path = require('path')

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
  SERVER_URL: process.env.SERVER_URL || 'http://localhost:4000',
  SECRET_KEY: process.env.SECRET_API_KEY || 'your-secret-key',
  INNGEST_DEV_URL: process.env.INNGEST_DEV_URL || 'http://localhost:8288',
}

// –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const TEST_DATA = {
  telegram_id: '144022504',
  image_count: 3,
  morphing_type: 'seamless', // –∏–ª–∏ 'loop'
  model: 'kling-v1.6-pro',
  is_ru: true,
  bot_name: 'ai_koshey_bot',
  zip_file_path: '/tmp/test_morphing_images.zip',
  job_id: `morph_test_${Date.now()}`,
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π ZIP —Ñ–∞–π–ª —Å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 */
function createTestZipFile() {
  const zipPath = TEST_DATA.zip_file_path
  const zipDir = path.dirname(zipPath)

  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!fs.existsSync(zipDir)) {
    fs.mkdirSync(zipDir, { recursive: true })
  }

  // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π ZIP —Ñ–∞–π–ª (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–µ–Ω adm-zip, –Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—É—Å—Ç–æ–≥–æ —Ñ–∞–π–ª–∞)
  fs.writeFileSync(zipPath, 'PK\x03\x04') // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è ZIP –ø–æ–¥–ø–∏—Å—å

  console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π ZIP —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω:', zipPath)
  return zipPath
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç Inngest —Å–æ–±—ã—Ç–∏–µ –Ω–∞–ø—Ä—è–º—É—é
 */
async function sendInngestEvent() {
  try {
    console.log('üì° –û—Ç–ø—Ä–∞–≤–∫–∞ Inngest —Å–æ–±—ã—Ç–∏—è...')

    const eventData = {
      name: 'morph/images.requested',
      data: TEST_DATA,
    }

    const response = await axios.post(
      `${CONFIG.INNGEST_DEV_URL}/dev/events`,
      {
        events: [eventData],
      },
      {
        headers: {
          'Content-Type': 'application/json',
        },
      }
    )

    console.log('‚úÖ Inngest —Å–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ')
    console.log('üìä –û—Ç–≤–µ—Ç Inngest:', response.data)

    return response.data
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Inngest —Å–æ–±—ã—Ç–∏—è:')
    if (error.response) {
      console.error('Status:', error.response.status)
      console.error('Data:', error.response.data)
    } else {
      console.error('Error:', error.message)
    }
    throw error
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç REST API —ç–Ω–¥–ø–æ–∏–Ω—Ç (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±)
 */
async function testRestEndpoint() {
  try {
    console.log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ REST —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞...')

    // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π ZIP —Ñ–∞–π–ª
    const testZipContent = Buffer.from('PK test zip content')
    const testZipPath = './test_images.zip'
    fs.writeFileSync(testZipPath, testZipContent)

    const form = new FormData()
    form.append('type', 'morphing')
    form.append('telegram_id', TEST_DATA.telegram_id)
    form.append('images_zip', fs.createReadStream(testZipPath))
    form.append('image_count', TEST_DATA.image_count.toString())
    form.append('morphing_type', TEST_DATA.morphing_type)
    form.append('model', TEST_DATA.model)
    form.append('is_ru', TEST_DATA.is_ru.toString())
    form.append('bot_name', TEST_DATA.bot_name)
    form.append('username', 'test_user')

    const response = await axios.post(
      `${CONFIG.SERVER_URL}/generate/morph-images`,
      form,
      {
        headers: {
          ...form.getHeaders(),
          'x-secret-key': CONFIG.SECRET_KEY,
        },
      }
    )

    console.log('‚úÖ REST API –≤—ã–∑–æ–≤ —É—Å–ø–µ—à–µ–Ω')
    console.log('üìä –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data)

    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    fs.unlinkSync(testZipPath)

    return response.data
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ REST API –≤—ã–∑–æ–≤–∞:')
    if (error.response) {
      console.error('Status:', error.response.status)
      console.error('Data:', error.response.data)
    } else {
      console.error('Error:', error.message)
    }
    throw error
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞
 */
async function checkServerStatus() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞...')

    const response = await axios.get(`${CONFIG.SERVER_URL}/health`, {
      timeout: 5000,
    })

    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω')
    return true
  } catch (error) {
    console.error('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message)
    return false
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Inngest Dev Server
 */
async function checkInngestStatus() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Inngest Dev Server...')

    const response = await axios.get(`${CONFIG.INNGEST_DEV_URL}/dev`, {
      timeout: 5000,
    })

    console.log('‚úÖ Inngest Dev Server –¥–æ—Å—Ç—É–ø–µ–Ω')
    return true
  } catch (error) {
    console.error('‚ùå Inngest Dev Server –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message)
    console.error('   –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞–ø—É—â–µ–Ω: npx inngest-cli@latest dev')
    return false
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  console.log('üß¨ –¢–ï–°–¢ INNGEST –§–£–ù–ö–¶–ò–ò –ú–û–†–§–ò–ù–ì–ê')
  console.log('='.repeat(50))

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
  console.log('üìã –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:')
  console.log('  Server URL:', CONFIG.SERVER_URL)
  console.log('  Inngest URL:', CONFIG.INNGEST_DEV_URL)
  console.log('  Secret Key:', CONFIG.SECRET_KEY.substring(0, 10) + '...')
  console.log('')

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  console.log('üìä –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:')
  console.log('  Telegram ID:', TEST_DATA.telegram_id)
  console.log('  Image Count:', TEST_DATA.image_count)
  console.log('  Morphing Type:', TEST_DATA.morphing_type)
  console.log('  Model:', TEST_DATA.model)
  console.log('  Job ID:', TEST_DATA.job_id)
  console.log('')

  const args = process.argv.slice(2)
  const testType = args[0] || 'inngest'

  if (testType === 'rest') {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ REST API
    console.log('üîß –†–µ–∂–∏–º: REST API —Ç–µ—Å—Ç')
    console.log('')

    const serverOk = await checkServerStatus()
    if (!serverOk) {
      console.error('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm run dev')
      process.exit(1)
    }

    await testRestEndpoint()
  } else if (testType === 'inngest') {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º Inngest —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
    console.log('üîß –†–µ–∂–∏–º: Inngest —Å–æ–±—ã—Ç–∏–µ')
    console.log('')

    const inngestOk = await checkInngestStatus()
    if (!inngestOk) {
      console.error(
        '‚ùå Inngest Dev Server –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npx inngest-cli@latest dev'
      )
      process.exit(1)
    }

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π ZIP —Ñ–∞–π–ª
    createTestZipFile()

    await sendInngestEvent()
  } else {
    console.error(
      '‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç–µ—Å—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: node test-morphing-inngest.js [rest|inngest]'
    )
    process.exit(1)
  }

  console.log('')
  console.log('üéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
  console.log('üì± –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤')
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main().catch(error => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message)
    process.exit(1)
  })
}

module.exports = {
  sendInngestEvent,
  testRestEndpoint,
  TEST_DATA,
}
