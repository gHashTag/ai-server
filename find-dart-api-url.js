/**
 * –ü–æ–∏—Å–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ URL –¥–ª—è Dart AI API
 * –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã URL
 */

const axios = require('axios');
require('dotenv').config();

const API_KEY = process.env.DART_AI_API_KEY;

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

async function findDartAIAPIURL() {
  log('\nüîç –ü–æ–∏—Å–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ URL –¥–ª—è Dart AI API\n', colors.bold);

  // –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã URL API
  const possibleURLs = [
    'https://api.dartai.com',
    'https://api.dart.ai', 
    'https://dartai.com/api',
    'https://app.dartai.com/api',
    'https://api.app.dartai.com',
    'https://www.dartai.com/api',
    'https://dartai.ai/api',
    'https://api.dartai.ai',
    'https://dashboard.dartai.com/api',
    'https://backend.dartai.com',
    'https://server.dartai.com/api',
    'https://prod.dartai.com/api'
  ];

  // –í–æ–∑–º–æ–∂–Ω—ã–µ endpoints –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
  const testEndpoints = [
    '/health',
    '/status', 
    '/ping',
    '/api/health',
    '/v1/health',
    '/',
    ''
  ];

  let workingURLs = [];

  log(`üîë –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å API –∫–ª—é—á–æ–º: ${API_KEY.slice(0, 20)}...`, colors.blue);
  
  for (const baseURL of possibleURLs) {
    log(`\nüì° –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${baseURL}`, colors.blue);
    
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
    try {
      const response = await axios.head(baseURL, { 
        timeout: 5000,
        validateStatus: () => true // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Å—Ç–∞—Ç—É—Å
      });
      
      log(`‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω (${response.status})`, colors.green);
      
      // –ï—Å–ª–∏ –±–∞–∑–æ–≤—ã–π URL –¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–µ—Å—Ç–∏—Ä—É–µ–º endpoints
      for (const endpoint of testEndpoints) {
        const fullURL = `${baseURL}${endpoint}`;
        
        try {
          // –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
          const noAuthResponse = await axios.get(fullURL, {
            timeout: 5000,
            validateStatus: () => true,
            headers: {
              'User-Agent': 'AI-Server-DartAI-Integration/1.0.0'
            }
          });
          
          log(`   üìç ${endpoint || '/'}: ${noAuthResponse.status} (–±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)`, colors.yellow);
          
          if (noAuthResponse.data && typeof noAuthResponse.data === 'object') {
            log(`      üì¶ ${JSON.stringify(noAuthResponse.data).slice(0, 100)}...`, colors.reset);
          }
          
          // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
          const authMethods = [
            { 'Authorization': `Bearer ${API_KEY}` },
            { 'Authorization': `Token ${API_KEY}` },
            { 'X-API-Key': API_KEY },
            { 'Dart-API-Key': API_KEY }
          ];
          
          for (const authHeader of authMethods) {
            try {
              const authResponse = await axios.get(fullURL, {
                timeout: 5000,
                validateStatus: () => true,
                headers: {
                  'User-Agent': 'AI-Server-DartAI-Integration/1.0.0',
                  ...authHeader
                }
              });
              
              if (authResponse.status !== noAuthResponse.status || 
                  JSON.stringify(authResponse.data) !== JSON.stringify(noAuthResponse.data)) {
                
                log(`      üîë ${endpoint || '/'}: ${authResponse.status} (—Å ${Object.keys(authHeader)[0]})`, colors.green);
                
                if (authResponse.data && typeof authResponse.data === 'object') {
                  log(`         üì¶ ${JSON.stringify(authResponse.data).slice(0, 200)}...`, colors.green);
                }
                
                workingURLs.push({
                  baseURL,
                  endpoint,
                  authMethod: authHeader,
                  status: authResponse.status,
                  data: authResponse.data
                });
              }
              
            } catch (authError) {
              // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–∫–∞
            }
          }
          
        } catch (error) {
          if (error.code !== 'ENOTFOUND' && error.code !== 'ECONNREFUSED') {
            log(`   ‚ö†Ô∏è  ${endpoint || '/'}: ${error.message}`, colors.yellow);
          }
        }
      }
      
    } catch (error) {
      if (error.code === 'ENOTFOUND') {
        log(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω`, colors.red);
      } else if (error.code === 'ECONNREFUSED') {
        log(`‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ –≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏`, colors.red);
      } else {
        log(`‚ö†Ô∏è  ${error.message}`, colors.yellow);
      }
    }
  }

  // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
  log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:', colors.blue);
  
  if (workingURLs.length === 0) {
    log('‚ùå –†–∞–±–æ—á–∏–µ API endpoints –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', colors.red);
    log('\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:', colors.yellow);
    log('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ API –∫–ª—é—á –∞–∫—Ç–∏–≤–µ–Ω –≤ –ø–∞–Ω–µ–ª–∏ Dart AI', colors.yellow);
    log('   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –∫–ª—é—á–∞ –µ—Å—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ API', colors.yellow);
    log('   3. API –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–æ–º–µ–Ω –∏–ª–∏ –ø–æ–¥–¥–æ–º–µ–Ω', colors.yellow);
    log('   4. API –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤', colors.yellow);
    log('   5. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É Dart AI –∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π –∫ API', colors.yellow);
    
    return { success: false, workingURLs: [] };
  }

  log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${workingURLs.length} —Ä–∞–±–æ—á–∏—Ö endpoint(s):`, colors.green);
  workingURLs.forEach((url, index) => {
    log(`\n${index + 1}. ${url.baseURL}${url.endpoint}`, colors.bold);
    log(`   üîë –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: ${JSON.stringify(url.authMethod)}`, colors.blue);
    log(`   üìä Status: ${url.status}`, colors.green);
    if (url.data) {
      log(`   üì¶ Data: ${JSON.stringify(url.data, null, 2)}`, colors.reset);
    }
  });

  // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–±–Ω–æ–≤–∏—Ç—å .env
  if (workingURLs.length > 0) {
    const bestURL = workingURLs[0];
    log(`\nüîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è .env:`, colors.blue);
    log(`DART_AI_API_URL=${bestURL.baseURL}`, colors.green);
    log(`DART_AI_ENDPOINT_PREFIX=${bestURL.endpoint}`, colors.green);
    log(`# –ú–µ—Ç–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${JSON.stringify(bestURL.authMethod)}`, colors.yellow);
  }

  return { success: true, workingURLs };
}

// –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function checkWebInterface() {
  log('\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Dart AI...', colors.blue);
  
  const webURLs = [
    'https://app.dartai.com',
    'https://dartai.com',
    'https://www.dartai.com'
  ];
  
  for (const url of webURLs) {
    try {
      const response = await axios.get(url, {
        timeout: 5000,
        headers: {
          'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
        }
      });
      
      log(`‚úÖ ${url}: ${response.status}`, colors.green);
      
      // –ò—â–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏—è API –≤ HTML
      if (response.data && typeof response.data === 'string') {
        const apiMatches = response.data.match(/api\.[^"'\s]+/gi) || [];
        const uniqueAPIs = [...new Set(apiMatches)];
        
        if (uniqueAPIs.length > 0) {
          log(`   üîç –ù–∞–π–¥–µ–Ω–Ω—ã–µ API URLs –≤ –∫–æ–¥–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã:`, colors.yellow);
          uniqueAPIs.forEach(api => {
            log(`      ‚Ä¢ ${api}`, colors.reset);
          });
        }
      }
      
    } catch (error) {
      log(`‚ùå ${url}: ${error.message}`, colors.red);
    }
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  Promise.all([
    findDartAIAPIURL(),
    checkWebInterface()
  ]).then(([apiResult]) => {
    if (apiResult.success) {
      log('\nüéâ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!', colors.bold + colors.green);
    } else {
      log('\nüí• API endpoints –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', colors.bold + colors.red);
      log('üìû –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É Dart AI', colors.yellow);
    }
  }).catch(error => {
    log(`\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, colors.bold + colors.red);
  });
}

module.exports = { findDartAIAPIURL };