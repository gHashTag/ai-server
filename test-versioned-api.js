/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö API endpoints Dart AI
 */

const axios = require('axios');
require('dotenv').config();

const API_KEY = process.env.DART_AI_API_KEY;

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

async function testVersionedAPI() {
  log('\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Ä—Å–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö API endpoints\n', colors.bold);

  // –ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤ JavaScript endpoints
  const apiVersions = [
    'https://app.dartai.com/api/v0',
    'https://app.dartai.com/api/v1', 
    'https://app.dartai.com/api/v2'
  ];

  const testEndpoints = [
    '',
    '/health',
    '/status',
    '/tasks', 
    '/projects',
    '/spaces',
    '/me',
    '/user',
    '/workspaces'
  ];

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const authMethods = [
    { 'Authorization': `Bearer ${API_KEY}` },
    { 'Authorization': `Token ${API_KEY}` },
    { 'X-API-Key': API_KEY },
    { 'Authorization': API_KEY }
  ];

  let workingEndpoints = [];

  for (const baseAPI of apiVersions) {
    log(`\nüì° –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π URL: ${baseAPI}`, colors.blue);
    
    for (const authHeaders of authMethods) {
      const authType = Object.keys(authHeaders)[0];
      log(`   üîë –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é: ${authType}`, colors.yellow);
      
      for (const endpoint of testEndpoints) {
        const fullURL = `${baseAPI}${endpoint}`;
        
        try {
          const response = await axios.get(fullURL, {
            headers: {
              'Content-Type': 'application/json',
              'User-Agent': 'AI-Server-DartAI-Integration/1.0.0',
              ...authHeaders
            },
            timeout: 5000,
            validateStatus: () => true // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Å—Ç–∞—Ç—É—Å
          });

          const isJSON = response.headers['content-type']?.includes('application/json');
          
          if (isJSON && response.status < 500) {
            const statusColor = response.status === 200 ? colors.green : 
                              response.status < 400 ? colors.yellow : colors.red;
            
            log(`   ‚úÖ ${endpoint || '/'}: ${response.status} (JSON!)`, statusColor);
            log(`      üì¶ ${JSON.stringify(response.data).slice(0, 300)}...`, colors.reset);
            
            workingEndpoints.push({
              url: fullURL,
              status: response.status,
              auth: authHeaders,
              data: response.data,
              isJSON: true
            });
            
            // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ä–∞–±–æ—á–∏–π endpoint, –ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
            if (response.status === 200 && endpoint === '/tasks') {
              log(`\nüéØ –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π tasks endpoint! –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É...`, colors.green);
              
              const taskData = {
                title: '[GitHub Integration] –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —á–µ—Ä–µ–∑ API',
                description: `# –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ GitHub ‚Üí Dart AI\n\n‚úÖ –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π API endpoint: ${fullURL}\n‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç: ${authType}\n\n**–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:** ${new Date().toLocaleString('ru-RU')}`,
                status: 'open',
                priority: 'medium',
                labels: ['github-integration', 'api-test']
              };

              try {
                const createResponse = await axios.post(fullURL, taskData, {
                  headers: {
                    'Content-Type': 'application/json',
                    'User-Agent': 'AI-Server-DartAI-Integration/1.0.0',
                    ...authHeaders
                  },
                  timeout: 10000
                });

                log(`üéâ –ó–ê–î–ê–ß–ê –°–û–ó–î–ê–ù–ê! Status: ${createResponse.status}`, colors.green);
                log(`üì¶ Response: ${JSON.stringify(createResponse.data, null, 2)}`, colors.green);
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                return {
                  success: true,
                  api_url: baseAPI,
                  endpoint: endpoint,
                  auth: authHeaders,
                  task_created: true,
                  task_id: createResponse.data.id || createResponse.data._id || 'unknown',
                  task_data: createResponse.data
                };

              } catch (createError) {
                log(`‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏: ${createError.response?.status} ${createError.message}`, colors.yellow);
                if (createError.response?.data) {
                  log(`üìã Error details: ${JSON.stringify(createError.response.data, null, 2)}`, colors.yellow);
                }
              }
            }
            
          } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ HTML –æ—Ç–≤–µ—Ç–µ
            if (!isJSON && response.data && typeof response.data === 'string' && response.data.includes('api')) {
              log(`   üìÑ ${endpoint || '/'}: ${response.status} (HTML, –Ω–æ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å API info)`, colors.yellow);
            }
          }

        } catch (error) {
          if (error.code !== 'ECONNREFUSED' && error.code !== 'ENOTFOUND') {
            const status = error.response?.status;
            if (status === 401) {
              log(`   üîí ${endpoint || '/'}: 401 Unauthorized (–º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π endpoint!)`, colors.yellow);
            } else if (status === 403) {
              log(`   üö´ ${endpoint || '/'}: 403 Forbidden (endpoint —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!)`, colors.yellow);  
            } else if (status && status < 500) {
              log(`   ‚ö†Ô∏è  ${endpoint || '/'}: ${status} ${error.response?.statusText}`, colors.yellow);
            }
          }
        }
      }
      
      // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–±–æ—á–∏–π endpoint —Å —ç—Ç–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π, –ø—Ä–µ—Ä—ã–≤–∞–µ–º
      if (workingEndpoints.length > 0) {
        log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ä–∞–±–æ—á–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: ${authType}`, colors.green);
        break;
      }
    }
    
    // –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Ä–∞–±–æ—á–∏–µ endpoints, –Ω–µ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –¥—Ä—É–≥–∏–µ –≤–µ—Ä—Å–∏–∏ API
    if (workingEndpoints.length > 0) {
      break;
    }
  }

  // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
  log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', colors.blue);
  
  if (workingEndpoints.length === 0) {
    log('‚ùå JSON API endpoints –Ω–µ –Ω–∞–π–¥–µ–Ω—ã', colors.red);
    
    // –ü—Ä–æ–±—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ endpoints –∏–∑ JavaScript –∫–æ–¥–∞
    log('\nüîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ endpoints –∏–∑ JS –∫–æ–¥–∞...', colors.blue);
    
    const specificEndpoints = [
      'https://app.dartai.com/api/v0/transactions/create',
      'https://app.dartai.com/api/v0/tracking/sentry',
      'https://app.dartai.com/api/v2/'
    ];
    
    for (const url of specificEndpoints) {
      try {
        const response = await axios.get(url, {
          headers: {
            'Authorization': `Bearer ${API_KEY}`,
            'Content-Type': 'application/json'
          },
          timeout: 3000,
          validateStatus: () => true
        });
        
        const isJSON = response.headers['content-type']?.includes('application/json');
        if (isJSON) {
          log(`‚úÖ ${url}: ${response.status} (JSON!)`, colors.green);
          log(`   üì¶ ${JSON.stringify(response.data)}`, colors.reset);
        }
      } catch (e) {
        // ignore
      }
    }
    
    return { success: false, workingEndpoints: [] };
  }

  log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${workingEndpoints.length} —Ä–∞–±–æ—á–∏—Ö JSON endpoints:`, colors.green);
  workingEndpoints.forEach((ep, index) => {
    log(`\n${index + 1}. ${ep.url}`, colors.bold);
    log(`   üìä Status: ${ep.status}`, colors.green);
    log(`   üîë Auth: ${JSON.stringify(ep.auth)}`, colors.blue);
    if (ep.data) {
      log(`   üì¶ Sample data: ${JSON.stringify(ep.data).slice(0, 200)}...`, colors.reset);
    }
  });

  return {
    success: true,
    workingEndpoints,
    recommended_api_url: workingEndpoints[0]?.url.split('/tasks')[0] || workingEndpoints[0]?.url,
    recommended_auth: workingEndpoints[0]?.auth
  };
}

if (require.main === module) {
  testVersionedAPI()
    .then(result => {
      if (result && result.success) {
        log('\nüéâ –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π API! –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é!', colors.bold + colors.green);
        
        if (result.recommended_api_url) {
          log(`\nüîß –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è .env:`, colors.blue);
          log(`DART_AI_API_URL=${result.recommended_api_url}`, colors.green);
          if (result.recommended_auth) {
            log(`# Auth method: ${JSON.stringify(result.recommended_auth)}`, colors.yellow);
          }
        }
      } else {
        log('\nüí• –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–π JSON API', colors.bold + colors.red);
        log('üìû –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É Dart AI –∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π', colors.yellow);
      }
    })
    .catch(error => {
      log(`\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, colors.bold + colors.red);
      console.error(error);
    });
}

module.exports = { testVersionedAPI };