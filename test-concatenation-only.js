/**
 * üîß –¢–µ—Å—Ç —Ç–æ–ª—å–∫–æ —ç—Ç–∞–ø–∞ —Å–∫–ª–µ–π–∫–∏ –≤–∏–¥–µ–æ (concatenation)
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ assets –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è Replicate API
 */

const FormData = require('form-data')
const fs = require('fs')
const axios = require('axios')
const path = require('path')

const API_BASE_URL =
  process.env.NODE_ENV === 'production'
    ? 'https://ai-server-u14194.vm.elestio.app'
    : 'http://localhost:4000'

async function testConcatenationStage() {
  console.log('üîß === –¢–ï–°–¢ –≠–¢–ê–ü–ê –°–ö–õ–ï–ô–ö–ò –í–ò–î–ï–û ===')

  try {
    // 1. –°–æ–∑–¥–∞–µ–º ZIP —Å 3 —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    console.log('üì¶ –°–æ–∑–¥–∞–µ–º ZIP —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ PNG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...')
    const testZipPath = './test-concatenation.zip'

    const AdmZip = require('adm-zip')
    const zip = new AdmZip()

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ assets
    const realImages = [
      'assets/bible_vibecoder/01.png',
      'assets/bible_vibecoder/02.png',
      'assets/bible_vibecoder/03.png',
    ]

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    for (let i = 0; i < realImages.length; i++) {
      const imagePath = realImages[i]
      if (!fs.existsSync(imagePath)) {
        throw new Error(`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: ${imagePath}`)
      }

      const imageBuffer = fs.readFileSync(imagePath)
      const imageName = `morphing_image_${String(i + 1).padStart(3, '0')}.png`

      zip.addFile(imageName, imageBuffer)
      console.log(
        `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ ${imageName}: ${(imageBuffer.length / 1024).toFixed(
          1
        )} KB`
      )
    }

    zip.writeZip(testZipPath)
    console.log(`‚úÖ ZIP —Å–æ–∑–¥–∞–Ω —Å ${realImages.length} —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏`)

    // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∞ —Å–∫–ª–µ–π–∫–∏...')

    const form = new FormData()
    form.append('type', 'morphing')
    form.append('telegram_id', '144022504')
    form.append('image_count', realImages.length.toString())
    form.append('morphing_type', 'seamless')
    form.append('model', 'kling-v1.6-pro')
    form.append('is_ru', 'true')
    form.append('bot_name', 'neuro_blogger_bot')
    form.append('username', 'telegram_bot')
    form.append('images_zip', fs.createReadStream(testZipPath))

    const response = await axios.post(
      `${API_BASE_URL}/generate/morph-images`,
      form,
      {
        headers: {
          ...form.getHeaders(),
          'User-Agent': 'concatenation-test/1.0',
        },
        timeout: 30000,
      }
    )

    console.log('‚úÖ API Response:', response.status, response.statusText)
    console.log('üìã Response Data:', JSON.stringify(response.data, null, 2))

    if (response.data.job_id) {
      const jobId = response.data.job_id

      console.log(`\nüîç === –ú–û–ù–ò–¢–û–†–ò–ù–ì –≠–¢–ê–ü–ê –°–ö–õ–ï–ô–ö–ò ${jobId} ===`)

      // 3. –û—Å–æ–±—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ - –∂–¥–µ–º –∏–º–µ–Ω–Ω–æ —ç—Ç–∞–ø–∞ —Å–∫–ª–µ–π–∫–∏
      await monitorConcatenationStage(jobId)
    }

    // –û—á–∏—Å—Ç–∫–∞
    if (fs.existsSync(testZipPath)) {
      fs.unlinkSync(testZipPath)
      console.log('üßπ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω')
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∫–ª–µ–π–∫–∏:', {
      message: error.message,
      status: error.response?.status,
      statusText: error.response?.statusText,
      data: error.response?.data,
    })
  }
}

async function monitorConcatenationStage(jobId) {
  console.log(`üîß –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ò–ú–ï–ù–ù–û —ç—Ç–∞–ø —Å–∫–ª–µ–π–∫–∏ –¥–ª—è: ${jobId}`)

  const maxChecks = 30 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–æ 30 –ø—Ä–æ–≤–µ—Ä–æ–∫ (15 –º–∏–Ω—É—Ç)
  const checkInterval = 30000 // 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏

  let lastStatus = null
  let concatenationStarted = false

  for (let i = 0; i < maxChecks; i++) {
    try {
      const statusResponse = await axios.get(
        `${API_BASE_URL}/generate/morph-jobs/${jobId}/status`,
        {
          timeout: 10000,
        }
      )

      const job = statusResponse.data

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç—É—Å–µ
      if (job.status !== lastStatus) {
        console.log(`\nüîÑ –ò–ó–ú–ï–ù–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê: ${lastStatus} ‚Üí ${job.status}`)
        lastStatus = job.status
      }

      console.log(`\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ ${i + 1}/${maxChecks}:`)
      console.log(`   Status: ${job.status}`)
      console.log(
        `   Progress: ${job.progress.completed_pairs}/${job.progress.total_pairs} (${job.progress.percentage}%)`
      )

      if (job.progress.current_pair) {
        console.log(`   Current: ${job.progress.current_pair}`)
      }

      // üéØ –û–ü–†–ï–î–ï–õ–Ø–ï–ú –ö–û–ì–î–ê –ù–ê–ß–ò–ù–ê–ï–¢–°–Ø –°–ö–õ–ï–ô–ö–ê
      if (
        job.progress.completed_pairs === job.progress.total_pairs &&
        job.status === 'processing'
      ) {
        if (!concatenationStarted) {
          console.log(`\nüîß === –≠–¢–ê–ü –°–ö–õ–ï–ô–ö–ò –ù–ê–ß–ê–õ–°–Ø! ===`)
          console.log(
            `‚úÖ –í—Å–µ –ø–∞—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã (${job.progress.completed_pairs}/${job.progress.total_pairs})`
          )
          console.log(`üé¨ –ù–∞—á–∞–ª–∞—Å—å —Å–∫–ª–µ–π–∫–∞ –≤–∏–¥–µ–æ –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ...`)
          concatenationStarted = true
        } else {
          console.log(`üîß –°–∫–ª–µ–π–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è...`)
        }
      }

      if (job.error_message) {
        console.log(`   ‚ùå Error: ${job.error_message}`)

        // üîç –ê–ù–ê–õ–ò–ó–ò–†–£–ï–ú –û–®–ò–ë–ö–ò –°–ö–õ–ï–ô–ö–ò
        if (job.error_message.includes('ffmpeg')) {
          console.log(`\nüîß === –û–ë–ù–ê–†–£–ñ–ï–ù–ê –û–®–ò–ë–ö–ê FFMPEG ===`)
          console.log(`‚ùå FFmpeg Error: ${job.error_message}`)
          console.log(`üîÑ –î–æ–ª–∂–Ω–∞ —Å—Ä–∞–±–æ—Ç–∞—Ç—å fallback —Å–∏—Å—Ç–µ–º–∞...`)
        }
      }

      // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      if (job.status === 'completed') {
        console.log(`\nüéâ === –°–ö–õ–ï–ô–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û! ===`)
        if (job.result) {
          console.log(
            `   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${Math.round(
              job.result.processing_time_minutes
            )} –º–∏–Ω—É—Ç`
          )
          console.log(`   –ü–∞—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: ${job.result.pairs_processed}`)
          console.log(`   ‚úÖ FFmpeg —Å–∫–ª–µ–π–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`)
        }
        break
      }

      if (job.status === 'failed') {
        console.log(`\n‚ùå === –°–ö–õ–ï–ô–ö–ê –ü–†–û–í–ê–õ–ï–ù–ê ===`)
        console.log(`Error: ${job.error_message}`)

        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏—á–∏–Ω—É –ø—Ä–æ–≤–∞–ª–∞
        if (job.error_message.includes('ffmpeg')) {
          console.log(`\nüîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê FFMPEG:`)
          console.log(`- –ü—Ä–æ–±–ª–µ–º–∞ —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π FFmpeg –≤ Docker`)
          console.log(`- Fallback —Å–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã–ª–∞ —Å—Ä–∞–±–æ—Ç–∞—Ç—å`)
          console.log(
            `- –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs ai-server | grep ffmpeg`
          )
        }
        break
      }

      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
      if (job.status === 'processing' || job.status === 'pending') {
        if (i < maxChecks - 1) {
          console.log(
            `‚è≥ –ñ–¥–µ–º ${checkInterval / 1000} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...`
          )
          await new Promise(resolve => setTimeout(resolve, checkInterval))
        }
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${i + 1}):`, error.message)
      break
    }
  }

  console.log(`\nüîß === –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï –ü–û –°–ö–õ–ï–ô–ö–ï ===`)
  if (concatenationStarted) {
    console.log(`‚úÖ –≠—Ç–∞–ø —Å–∫–ª–µ–π–∫–∏ –±—ã–ª –¥–æ—Å—Ç–∏–≥–Ω—É—Ç`)
    console.log(`üìä –ú–æ–∂–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É FFmpeg`)
  } else {
    console.log(`‚ùå –≠—Ç–∞–ø —Å–∫–ª–µ–π–∫–∏ –Ω–µ –±—ã–ª –¥–æ—Å—Ç–∏–≥–Ω—É—Ç`)
    console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–∞ –±–æ–ª–µ–µ —Ä–∞–Ω–Ω–µ–º —ç—Ç–∞–ø–µ (Replicate API)`)
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testConcatenationStage()
    .then(() => console.log('\nüéâ –¢–µ—Å—Ç —ç—Ç–∞–ø–∞ —Å–∫–ª–µ–π–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω!'))
    .catch(console.error)
}
