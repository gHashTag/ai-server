#!/usr/bin/env node

/**
 * üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ Veo3 –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—Ü–µ—Å—Å–∞, –ª–æ–≥–∏ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
 */

const fs = require('fs')
const path = require('path')
const { exec } = require('child_process')

const UPLOAD_PATH = './src/uploads'
const API_URL = 'http://localhost:4000'

console.log('üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Veo3 –≤–∏–¥–µ–æ')
console.log('='.repeat(50))

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
function checkForNewFiles() {
  try {
    if (!fs.existsSync(UPLOAD_PATH)) {
      console.log('üìÅ –ü–∞–ø–∫–∞ uploads –Ω–µ –Ω–∞–π–¥–µ–Ω–∞')
      return
    }

    const stats = fs.readdirSync(UPLOAD_PATH, { withFileTypes: true })
    const directories = stats.filter(dirent => dirent.isDirectory())

    if (directories.length === 0) {
      console.log('üìÅ –ü–∞–ø–∫–∞ uploads –ø—É—Å—Ç–∞ - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
      return
    }

    console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ –ø–∞–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${directories.length}`)

    directories.forEach(dir => {
      const userPath = path.join(UPLOAD_PATH, dir.name)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∞–ø–∫–∏
      const subDirs = fs
        .readdirSync(userPath, { withFileTypes: true })
        .filter(dirent => dirent.isDirectory())
        .map(dirent => dirent.name)

      console.log(`   üë§ ${dir.name}: ${subDirs.join(', ')}`)

      // –ò—â–µ–º MP4 —Ñ–∞–π–ª—ã
      subDirs.forEach(subDir => {
        const subPath = path.join(userPath, subDir)
        try {
          const files = fs.readdirSync(subPath)
          const mp4Files = files.filter(file => file.endsWith('.mp4'))

          if (mp4Files.length > 0) {
            console.log(`      üé¨ ${subDir}: ${mp4Files.length} –≤–∏–¥–µ–æ`)
            mp4Files.forEach(file => {
              const filePath = path.join(subPath, file)
              const stats = fs.statSync(filePath)
              const sizeMB = (stats.size / (1024 * 1024)).toFixed(2)
              console.log(
                `         üìπ ${file} (${sizeMB} MB, ${stats.mtime.toLocaleString()})`
              )
            })
          }
        } catch (err) {
          console.log(`      ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è ${subDir}: ${err.message}`)
        }
      })
    })
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∞–π–ª–æ–≤: ${error.message}`)
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ API
async function checkAPIStatus() {
  return new Promise(resolve => {
    exec(`curl -s ${API_URL}/health`, (error, stdout, stderr) => {
      if (error) {
        console.log(`‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`)
        resolve(false)
      } else {
        try {
          const response = JSON.parse(stdout)
          console.log(`‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç: ${response.status}`)
          resolve(true)
        } catch (e) {
          console.log(`‚ö†Ô∏è API –æ—Ç–≤–µ—Ç–∏–ª, –Ω–æ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π: ${stdout}`)
          resolve(false)
        }
      }
    })
  })
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
function checkProcesses() {
  exec(
    'ps aux | grep "node.*server" | grep -v grep',
    (error, stdout, stderr) => {
      if (error) {
        console.log(`‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã —Å–µ—Ä–≤–µ—Ä–∞`)
        return
      }

      const lines = stdout
        .trim()
        .split('\n')
        .filter(line => line.length > 0)
      console.log(`üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞: ${lines.length}`)

      lines.forEach(line => {
        const parts = line.split(/\s+/)
        const pid = parts[1]
        const cpu = parts[2]
        const mem = parts[3]
        const command = parts.slice(10).join(' ')
        console.log(`   PID ${pid}: CPU ${cpu}%, MEM ${mem}% - ${command}`)
      })
    }
  )
}

// –§—É–Ω–∫—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
async function startMonitoring() {
  console.log(`‚è∞ ${new Date().toLocaleTimeString()}: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...`)
  console.log('-'.repeat(50))

  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ API
  const apiOnline = await checkAPIStatus()

  // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
  checkProcesses()

  // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
  console.log('\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:')
  checkForNewFiles()

  console.log('\n' + '='.repeat(50))
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...\n')

  // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
  await startMonitoring()

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
  console.log('‚è±Ô∏è  –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥. Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.\n')

  setInterval(async () => {
    await startMonitoring()
  }, 10000)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞
process.on('SIGINT', () => {
  console.log('\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
  process.exit(0)
})

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main()
}

module.exports = { checkForNewFiles, checkAPIStatus, checkProcesses }
