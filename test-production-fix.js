#!/usr/bin/env node

/**
 * üß™ –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 144022504
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞—é—Ç
 */

const https = require('https')

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å callback endpoint
async function testCallbackEndpoint() {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'ai-server-production-production-8e2d.up.railway.app',
      port: 443,
      path: '/api/kie-ai/callback/health',
      method: 'GET',
      headers: {
        'User-Agent': 'Production-Fix-Test/1.0'
      }
    }

    const req = https.request(options, (res) => {
      let data = ''
      res.on('data', (chunk) => data += chunk)
      res.on('end', () => {
        if (res.statusCode === 200) {
          resolve({ success: true, status: res.statusCode, data })
        } else {
          resolve({ success: false, status: res.statusCode, data })
        }
      })
    })

    req.on('error', (error) => {
      resolve({ success: false, error: error.message })
    })
    
    req.setTimeout(5000, () => {
      req.destroy()
      resolve({ success: false, error: 'Timeout' })
    })

    req.end()
  })
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ API endpoints –¥–æ—Å—Ç—É–ø–Ω—ã
async function testApiEndpoints() {
  const endpoints = [
    '/health',
    '/api/kie-ai/callback/health'
  ]

  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å endpoint\'–æ–≤...')
  
  for (const endpoint of endpoints) {
    const result = await testEndpoint(endpoint)
    console.log(`${result.success ? '‚úÖ' : '‚ùå'} ${endpoint}: ${result.status || result.error}`)
  }
}

async function testEndpoint(path) {
  return new Promise((resolve) => {
    const options = {
      hostname: 'ai-server-production-production-8e2d.up.railway.app',
      port: 443,
      path: path,
      method: 'GET',
      timeout: 5000
    }

    const req = https.request(options, (res) => {
      resolve({ success: res.statusCode === 200, status: res.statusCode })
    })

    req.on('error', (error) => {
      resolve({ success: false, error: error.message })
    })

    req.setTimeout(5000, () => {
      req.destroy()
      resolve({ success: false, error: 'Timeout' })
    })

    req.end()
  })
}

async function main() {
  console.log('üéØ –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ì–ï–ù–ï–†–ê–¶–ò–ò –í–ò–î–ï–û')
  console.log('=====================================')
  console.log(`üïí –í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${new Date().toISOString()}`)
  console.log(`üåê Production URL: https://ai-server-production-production-8e2d.up.railway.app`)
  console.log()

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º callback endpoint
  console.log('1. üîó –ü—Ä–æ–≤–µ—Ä—è–µ–º callback endpoint...')
  const callbackResult = await testCallbackEndpoint()
  
  if (callbackResult.success) {
    console.log('‚úÖ Callback endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç!')
    try {
      const responseData = JSON.parse(callbackResult.data)
      console.log(`   üìä –°—Ç–∞—Ç—É—Å: ${responseData.status}`)
      console.log(`   üïí Timestamp: ${responseData.timestamp}`)
    } catch (e) {
      console.log('   üìÑ Response:', callbackResult.data.substring(0, 100))
    }
  } else {
    console.log(`‚ùå Callback endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${callbackResult.error || callbackResult.status}`)
  }
  
  console.log()

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ endpoints
  console.log('2. üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ endpoints...')
  await testApiEndpoints()
  console.log()

  // –í—ã–≤–æ–¥–∏–º –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
  console.log('üìã –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:')
  console.log('=====================================')
  
  if (callbackResult.success) {
    console.log('‚úÖ –ü–†–û–ë–õ–ï–ú–ê –†–ï–®–ï–ù–ê!')
    console.log('   üîó Callback —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç')
    console.log('   üì± Async –¥–æ—Å—Ç–∞–≤–∫–∞ –≤–∏–¥–µ–æ –¥–æ—Å—Ç—É–ø–Ω–∞')
    console.log('   üõ°Ô∏è –ó–∞—â–∏—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç –ø–æ—Ç–µ—Ä–∏ –¥–µ–Ω–µ–≥ –∞–∫—Ç–∏–≤–Ω–∞')
    console.log()
    console.log('üì¨ –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 144022504:')
    console.log('   ‚úÖ –í–∏–¥–µ–æ —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω—ã –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤ @neuro_blogger_bot')
    console.log('   ‚úÖ –û–ø–ª–∞—Ç–∞ —Ç–æ–ª—å–∫–æ –∑–∞ –≥–æ—Ç–æ–≤—ã–µ –≤–∏–¥–µ–æ')
    console.log('   ‚úÖ –ù–µ—Ç timeout –Ω–∞ 300 —Å–µ–∫—É–Ω–¥')
    console.log('   ‚úÖ –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π')
  } else {
    console.log('‚ùå –ü–†–û–ë–õ–ï–ú–´ –í–°–ï –ï–©–ï –ï–°–¢–¨')
    console.log('   üö´ Callback endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω')
    console.log('   ‚ö†Ô∏è  –í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –≤–∏–¥–µ–æ')
  }
  
  console.log()
  console.log('üîó –°—Å—ã–ª–∫–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:')
  console.log('   üìä Production: https://ai-server-production-production-8e2d.up.railway.app/health')
  console.log('   üîó Callback: https://ai-server-production-production-8e2d.up.railway.app/api/kie-ai/callback/health')
  console.log('   üìã PR #78: https://github.com/gHashTag/ai-server/pull/78')
}

main().catch(console.error)