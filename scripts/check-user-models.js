require('dotenv').config()
const { supabase } = require('../dist/core/supabase/index.js')

async function checkUserModels(telegramId) {
  try {
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegramId}...`)

    const { data, error } = await supabase
      .from('model_trainings')
      .select('model_url, status, created_at, model_name')
      .eq('telegram_id', telegramId.toString())
      .order('created_at', { ascending: false })
      .limit(5)

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error)
      return
    }

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: ${data.length}`)

    if (data.length === 0) {
      console.log('‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ model_trainings')
      return
    }

    console.log('üìã –í—Å–µ –º–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
    data.forEach((model, index) => {
      console.log(
        `${index + 1}. ${model.model_name} - ${model.status} (${
          model.created_at
        })`
      )
      if (model.model_url) {
        console.log(`   URL: ${model.model_url}`)
      }
    })

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—ã–µ –º–æ–¥–µ–ª–∏
    const successModels = data.filter(m => m.status === 'SUCCESS')
    console.log(`\n‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π: ${successModels.length}`)

    if (successModels.length > 0) {
      const latest = successModels[0]
      console.log(`üéØ –ü–æ—Å–ª–µ–¥–Ω—è—è —É—Å–ø–µ—à–Ω–∞—è –º–æ–¥–µ–ª—å: ${latest.model_name}`)
      console.log(`üîó URL: ${latest.model_url}`)
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error)
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 144022504
checkUserModels('144022504')
