#!/usr/bin/env node

const fs = require('fs')
const path = require('path')

console.log('üîç –ü–æ–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º —Å updateUserBalance')
console.log('===================================')

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
function findFiles(dir, extension) {
  const files = []

  function searchDir(currentDir) {
    const items = fs.readdirSync(currentDir)

    for (const item of items) {
      const fullPath = path.join(currentDir, item)
      const stat = fs.statSync(fullPath)

      if (
        stat.isDirectory() &&
        !item.startsWith('.') &&
        item !== 'node_modules'
      ) {
        searchDir(fullPath)
      } else if (stat.isFile() && item.endsWith(extension)) {
        files.push(fullPath)
      }
    }
  }

  searchDir(dir)
  return files
}

// –ò—â–µ–º –≤—Å–µ TypeScript —Ñ–∞–π–ª—ã
const tsFiles = findFiles('./src', '.ts')

let issuesFound = 0

console.log(`üìÅ –ù–∞–π–¥–µ–Ω–æ ${tsFiles.length} TypeScript —Ñ–∞–π–ª–æ–≤`)

for (const file of tsFiles) {
  try {
    const content = fs.readFileSync(file, 'utf8')

    // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã updateUserBalance —Å –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const lines = content.split('\n')

    for (let i = 0; i < lines.length; i++) {
      const line = lines[i]
      const lineNum = i + 1

      // –ò—â–µ–º –≤—ã–∑–æ–≤—ã updateUserBalance
      if (
        line.includes('updateUserBalance(') ||
        line.includes('updateUserBalance ')
      ) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        let context = ''
        for (
          let j = Math.max(0, i - 2);
          j < Math.min(lines.length, i + 10);
          j++
        ) {
          context += `${j + 1}: ${lines[j]}\n`
        }

        // –ò—â–µ–º –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        const suspicious = [
          'newBalance',
          'balance -',
          'balance+',
          'currentBalance -',
          'currentBalance+',
        ]

        const hasSuspiciousPattern = suspicious.some(pattern =>
          context.toLowerCase().includes(pattern.toLowerCase())
        )

        if (hasSuspiciousPattern && context.includes('MONEY_OUTCOME')) {
          console.log(`\n‚ö†Ô∏è  –ü–û–î–û–ó–†–ò–¢–ï–õ–¨–ù–´–ô –í–´–ó–û–í –≤ ${file}:${lineNum}`)
          console.log('–ö–æ–Ω—Ç–µ–∫—Å—Ç:')
          console.log(context)
          console.log('---')
          issuesFound++
        }
      }
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ${file}:`, error.message)
  }
}

console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: –Ω–∞–π–¥–µ–Ω–æ ${issuesFound} –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤`)

if (issuesFound === 0) {
  console.log('‚úÖ –ü—Ä–æ–±–ª–µ–º –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!')
} else {
  console.log('‚ö†Ô∏è  –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤')
}
