#!/usr/bin/env node

/**
 * üîç –ü–†–û–°–¢–ê–Ø –ü–†–û–í–ï–†–ö–ê —Ç–∞–±–ª–∏—Ü—ã projects
 */

require('dotenv').config({ path: '.env' })
const { Pool } = require('pg')

console.log('üîç –ü–†–û–°–¢–ê–Ø –ü–†–û–í–ï–†–ö–ê –¢–ê–ë–õ–ò–¶–´ PROJECTS')
console.log('====================================')
console.log('')

const dbPool = new Pool({
  connectionString: process.env.SUPABASE_URL,
  ssl: { rejectUnauthorized: false },
})

async function checkProjectsSimple() {
  let client

  try {
    client = await dbPool.connect()
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!')
    console.log('')

    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã
    console.log('üîç –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã projects:')
    const columnsResult = await client.query(`
      SELECT column_name, data_type 
      FROM information_schema.columns 
      WHERE table_name = 'projects' 
      ORDER BY ordinal_position
    `)

    columnsResult.rows.forEach(row => {
      console.log(`   ‚Ä¢ ${row.column_name}: ${row.data_type}`)
    })
    console.log('')

    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π
    console.log('üìä –ó–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ projects:')
    const projectsResult = await client.query(`SELECT * FROM projects LIMIT 10`)

    if (projectsResult.rows.length === 0) {
      console.log('‚ùå –¢–ê–ë–õ–ò–¶–ê –ü–£–°–¢–ê–Ø!')
      console.log('')
      console.log('üö® –ù–ê–ô–î–ï–ù–ê –ü–†–ò–ß–ò–ù–ê –ü–†–û–ë–õ–ï–ú–´!')
      console.log('   ‚Ä¢ –¢–∞–±–ª–∏—Ü–∞ projects —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ –ø—É—Å—Ç–∞—è')
      console.log('   ‚Ä¢ –§—É–Ω–∫—Ü–∏—è –ø–∞–¥–∞–µ—Ç –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ project_id')
      console.log('   ‚Ä¢ –ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç')
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${projectsResult.rows.length} –ø—Ä–æ–µ–∫—Ç–æ–≤:`)
      projectsResult.rows.forEach((row, index) => {
        console.log(
          `   ${index + 1}. ID: ${row.id}, Name: ${row.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}`
        )
      })

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ ID
      console.log('')
      console.log('üéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö project_id:')

      for (const testId of [1, 37]) {
        const idResult = await client.query(
          'SELECT * FROM projects WHERE id = $1',
          [testId]
        )

        if (idResult.rows.length > 0) {
          console.log(`‚úÖ Project ID ${testId} –ù–ê–ô–î–ï–ù!`)
          console.log(`   üìã ${JSON.stringify(idResult.rows[0])}`)
        } else {
          console.log(`‚ùå Project ID ${testId} –ù–ï –ù–ê–ô–î–ï–ù`)
        }
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message)
  } finally {
    if (client) client.release()
    await dbPool.end()
  }
}

checkProjectsSimple()
