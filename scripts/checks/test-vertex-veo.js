#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ Vertex AI Veo API
 * –û—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Google
 */

const axios = require('axios');
const { exec } = require('child_process');
const { promisify } = require('util');
const dotenv = require('dotenv');
const path = require('path');

const execAsync = promisify(exec);

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.resolve(__dirname, '../../.env') });

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const PROJECT_ID = process.env.GOOGLE_CLOUD_PROJECT || 'neuroblogger';
const LOCATION = 'us-central1';
const MODEL_ID = 'veo-3.0-generate-preview'; // –∏–ª–∏ veo-2.0-generate-001

console.log('üé¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Vertex AI Veo API\n');
console.log(`Project: ${PROJECT_ID}`);
console.log(`Model: ${MODEL_ID}`);
console.log(`Location: ${LOCATION}\n`);

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  cyan: '\x1b[36m'
};

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ —á–µ—Ä–µ–∑ gcloud
 */
async function getAccessToken() {
  try {
    const { stdout } = await execAsync('gcloud auth print-access-token');
    return stdout.trim();
  } catch (error) {
    console.error(`${colors.red}‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞${colors.reset}`);
    console.error('–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã: gcloud auth login');
    throw error;
  }
}

/**
 * –ù–∞—á–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ
 */
async function startVideoGeneration(prompt, aspectRatio = '16:9') {
  const endpoint = `https://${LOCATION}-aiplatform.googleapis.com/v1/projects/${PROJECT_ID}/locations/${LOCATION}/publishers/google/models/${MODEL_ID}:predictLongRunning`;

  const requestBody = {
    instances: [
      {
        prompt: prompt
      }
    ],
    parameters: {
      aspectRatio: aspectRatio,
      sampleCount: 1
    }
  };

  // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º Veo 3, –º–æ–∂–µ–º –¥–æ–±–∞–≤–∏—Ç—å resolution
  if (MODEL_ID.includes('veo-3')) {
    requestBody.parameters.resolution = '720p';
  }

  try {
    const accessToken = await getAccessToken();
    
    console.log(`${colors.cyan}üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ...${colors.reset}`);
    console.log(`–ü—Ä–æ–º–ø—Ç: "${prompt}"`);
    console.log(`Aspect ratio: ${aspectRatio}`);
    
    const response = await axios.post(endpoint, requestBody, {
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json'
      }
    });

    const operationName = response.data.name;
    console.log(`${colors.green}‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!${colors.reset}`);
    console.log(`Operation ID: ${operationName}\n`);
    
    return operationName;
  } catch (error) {
    console.error(`${colors.red}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:${colors.reset}`);
    if (error.response) {
      console.error('Status:', error.response.status);
      console.error('Data:', JSON.stringify(error.response.data, null, 2));
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏
      if (error.response.status === 403) {
        console.log(`\n${colors.yellow}‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏ 403:${colors.reset}`);
        console.log('1. Vertex AI API –Ω–µ –≤–∫–ª—é—á–µ–Ω –≤ –ø—Ä–æ–µ–∫—Ç–µ');
        console.log('2. –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ API');
        console.log('3. –ö–≤–æ—Ç—ã –∏—Å—á–µ—Ä–ø–∞–Ω—ã');
        console.log('\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å:');
        console.log(`${colors.cyan}gcloud services enable aiplatform.googleapis.com${colors.reset}`);
      } else if (error.response.status === 404) {
        console.log(`\n${colors.yellow}‚ö†Ô∏è –ú–æ–¥–µ–ª—å ${MODEL_ID} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞${colors.reset}`);
        console.log('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ');
      }
    } else {
      console.error(error.message);
    }
    throw error;
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
async function checkOperationStatus(operationName) {
  const endpoint = `https://${LOCATION}-aiplatform.googleapis.com/v1/projects/${PROJECT_ID}/locations/${LOCATION}/publishers/google/models/${MODEL_ID}:fetchPredictOperation`;

  const requestBody = {
    operationName: operationName
  };

  try {
    const accessToken = await getAccessToken();
    
    const response = await axios.post(endpoint, requestBody, {
      headers: {
        'Authorization': `Bearer ${accessToken}`,
        'Content-Type': 'application/json'
      }
    });

    return response.data;
  } catch (error) {
    console.error(`${colors.red}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:${colors.reset}`);
    if (error.response) {
      console.error('Data:', error.response.data);
    }
    throw error;
  }
}

/**
 * –ñ–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏
 */
async function waitForCompletion(operationName, maxWaitTime = 300000) {
  const startTime = Date.now();
  const checkInterval = 5000; // –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
  let attempts = 0;

  console.log(`${colors.cyan}‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...${colors.reset}\n`);

  while (Date.now() - startTime < maxWaitTime) {
    attempts++;
    
    try {
      const status = await checkOperationStatus(operationName);
      
      if (status.done) {
        if (status.response) {
          console.log(`\n${colors.green}‚úÖ –í–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!${colors.reset}`);
          return status.response;
        } else if (status.error) {
          console.log(`\n${colors.red}‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:${colors.reset}`);
          console.error(status.error);
          throw new Error(`Video generation failed: ${status.error.message}`);
        }
      }
      
      process.stdout.write(`\r‚è≥ –ü–æ–ø—ã—Ç–∫–∞ ${attempts}: –≤—Å—ë –µ—â—ë –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...`);
      await new Promise(resolve => setTimeout(resolve, checkInterval));
    } catch (error) {
      console.error(`\n${colors.red}–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞:${colors.reset}`, error.message);
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å, –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞
      await new Promise(resolve => setTimeout(resolve, checkInterval));
    }
  }
  
  throw new Error('Timeout: –≤–∏–¥–µ–æ –Ω–µ –±—ã–ª–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ –æ—Ç–≤–µ–¥—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è');
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function testVeoGeneration() {
  console.log(`${colors.blue}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${colors.reset}`);
  console.log(`${colors.blue}   Vertex AI Veo - –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ   ${colors.reset}`);
  console.log(`${colors.blue}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${colors.reset}\n`);

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ gcloud
  try {
    const { stdout } = await execAsync('gcloud --version');
    console.log(`${colors.green}‚úÖ gcloud —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${colors.reset}`);
    console.log(stdout.split('\n')[0] + '\n');
  } catch (error) {
    console.error(`${colors.red}‚ùå gcloud –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!${colors.reset}`);
    console.log('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Google Cloud SDK: https://cloud.google.com/sdk/docs/install');
    return;
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
  try {
    const { stdout } = await execAsync('gcloud auth list --filter=status:ACTIVE --format="value(account)"');
    if (stdout.trim()) {
      console.log(`${colors.green}‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫: ${stdout.trim()}${colors.reset}\n`);
    } else {
      console.log(`${colors.yellow}‚ö†Ô∏è –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –≤ gcloud${colors.reset}`);
      console.log('–í—ã–ø–æ–ª–Ω–∏—Ç–µ: gcloud auth login\n');
      return;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error.message);
  }

  // –ü—Ä–æ–º–ø—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const testPrompts = [
    "A serene beach at sunset with gentle waves",
    "A futuristic city with flying cars and neon lights",
    "A cat playing piano in a jazz club"
  ];

  console.log(`${colors.cyan}üéØ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç: "${testPrompts[0]}"${colors.reset}\n`);

  try {
    // 1. –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    const operationName = await startVideoGeneration(testPrompts[0]);
    
    // 2. –ñ–¥—ë–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const result = await waitForCompletion(operationName);
    
    // 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log(`\n${colors.cyan}üìπ –†–µ–∑—É–ª—å—Ç–∞—Ç:${colors.reset}`);
    console.log('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ:', result.videos?.length || 0);
    console.log('–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ (RAI):', result.raiMediaFilteredCount || 0);
    
    if (result.videos && result.videos.length > 0) {
      console.log('\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ:');
      result.videos.forEach((video, index) => {
        console.log(`\n${colors.green}–í–∏–¥–µ–æ ${index + 1}:${colors.reset}`);
        if (video.gcsUri) {
          console.log(`  GCS URI: ${video.gcsUri}`);
          console.log(`  –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è:`);
          console.log(`  ${colors.cyan}gsutil cp "${video.gcsUri}" ./video_${index}.mp4${colors.reset}`);
        }
        if (video.bytesBase64Encoded) {
          console.log(`  Base64 –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ (${video.bytesBase64Encoded.length} —Å–∏–º–≤–æ–ª–æ–≤)`);
        }
        console.log(`  MIME —Ç–∏–ø: ${video.mimeType}`);
      });
    }
    
  } catch (error) {
    console.error(`\n${colors.red}–¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω:${colors.reset}`, error.message);
  }
}

/**
 * –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
 */
function showInfo() {
  console.log(`\n${colors.cyan}üìö –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:${colors.reset}\n`);
  
  console.log(`${colors.yellow}–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:${colors.reset}`);
  console.log('1. –í–∫–ª—é—á–∏—Ç–µ Vertex AI API:');
  console.log(`   ${colors.cyan}gcloud services enable aiplatform.googleapis.com${colors.reset}`);
  console.log('\n2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:');
  console.log(`   ${colors.cyan}gcloud config set project ${PROJECT_ID}${colors.reset}`);
  console.log('\n3. –°–æ–∑–¥–∞–π—Ç–µ Cloud Storage bucket –¥–ª—è –≤–∏–¥–µ–æ:');
  console.log(`   ${colors.cyan}gsutil mb gs://veo-videos-${PROJECT_ID}${colors.reset}`);
  
  console.log(`\n${colors.yellow}–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:${colors.reset}`);
  console.log('‚Ä¢ veo-3.0-generate-preview - –ü–æ—Å–ª–µ–¥–Ω—è—è –≤–µ—Ä—Å–∏—è Veo 3 (preview)');
  console.log('‚Ä¢ veo-2.0-generate-001 - –°—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è Veo 2');
  
  console.log(`\n${colors.yellow}–¶–µ–Ω—ã:${colors.reset}`);
  console.log('‚Ä¢ Veo 3: $0.40 –∑–∞ —Å–µ–∫—É–Ω–¥—É –≤–∏–¥–µ–æ');
  console.log('‚Ä¢ Veo 2: $0.30 –∑–∞ —Å–µ–∫—É–Ω–¥—É –≤–∏–¥–µ–æ');
  
  console.log(`\n${colors.yellow}–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:${colors.reset}`);
  console.log('‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 8 —Å–µ–∫—É–Ω–¥ –≤–∏–¥–µ–æ –∑–∞ —Ä–∞–∑');
  console.log('‚Ä¢ –î–æ 4 –≤–∏–¥–µ–æ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å (sampleCount)');
  console.log('‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: 16:9, 9:16, 1:1');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
async function main() {
  await testVeoGeneration();
  showInfo();
  
  console.log(`\n${colors.blue}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${colors.reset}`);
  console.log(`${colors.green}–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!${colors.reset}`);
  console.log(`${colors.blue}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${colors.reset}\n`);
}

main().catch(console.error);
