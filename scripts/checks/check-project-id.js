#!/usr/bin/env node

/**
 * üîç –ü–†–û–í–ï–†–ö–ê PROJECT_ID –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 *
 * –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ - —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ project_id –≤ –ë–î
 */

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config({ path: '.env' })

const { Pool } = require('pg')

console.log('üîç –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê PROJECT_ID')
console.log('===================================')
console.log('')

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const dbPool = new Pool({
  connectionString: process.env.NEON_DATABASE_URL,
  ssl: { rejectUnauthorized: false },
})

async function checkProjectIds() {
  let client

  try {
    console.log('üì° –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...')
    client = await dbPool.connect()

    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!')
    console.log('')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ projects
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É projects...')
    const tablesResult = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_name LIKE '%project%'
    `)

    console.log('üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã —Å project:')
    tablesResult.rows.forEach(row => {
      console.log(`   ‚Ä¢ ${row.table_name}`)
    })
    console.log('')

    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø—Ä–æ–µ–∫—Ç—ã
    const possibleTables = ['projects', 'instagram_projects', 'project']

    for (const tableName of possibleTables) {
      try {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É "${tableName}"...`)

        const existsResult = await client.query(
          `
          SELECT EXISTS (
            SELECT FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name = $1
          )
        `,
          [tableName]
        )

        if (existsResult.rows[0].exists) {
          console.log(`‚úÖ –¢–∞–±–ª–∏—Ü–∞ "${tableName}" —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`)

          // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π
          const projectsResult = await client.query(`
            SELECT * FROM "${tableName}" 
            ORDER BY CASE 
              WHEN ${tableName} ~ '.*id.*' THEN (${tableName})::text::int 
              ELSE 1 
            END
            LIMIT 5
          `)

          console.log(`üìä –ó–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ "${tableName}":`)
          if (projectsResult.rows.length === 0) {
            console.log('   ‚ö†Ô∏è –¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞—è!')
          } else {
            projectsResult.rows.forEach((row, index) => {
              console.log(`   ${index + 1}. ${JSON.stringify(row)}`)
            })
          }
          console.log('')

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ ID
          for (const testId of [1, 37]) {
            try {
              const idCheckQuery = `SELECT * FROM "${tableName}" WHERE id = $1`
              const idResult = await client.query(idCheckQuery, [testId])

              if (idResult.rows.length > 0) {
                console.log(
                  `‚úÖ Project ID ${testId} –ù–ê–ô–î–ï–ù –≤ —Ç–∞–±–ª–∏—Ü–µ "${tableName}"!`
                )
                console.log(`   üìã –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(idResult.rows[0])}`)
              } else {
                console.log(
                  `‚ùå Project ID ${testId} –ù–ï –ù–ê–ô–î–ï–ù –≤ —Ç–∞–±–ª–∏—Ü–µ "${tableName}"`
                )
              }
            } catch (idError) {
              console.log(
                `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ID ${testId} –≤ —Ç–∞–±–ª–∏—Ü–µ "${tableName}": ${idError.message}`
              )
            }
          }
          console.log('')
        } else {
          console.log(`‚ùå –¢–∞–±–ª–∏—Ü–∞ "${tableName}" –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
        }
      } catch (tableError) {
        console.log(
          `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–±–ª–∏—Ü—ã "${tableName}": ${tableError.message}`
        )
      }
    }

    console.log('')
    console.log('üéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò:')
    console.log('   ‚Ä¢ –ï—Å–ª–∏ project_id –ù–ê–ô–î–ï–ù - —Ñ—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å')
    console.log('   ‚Ä¢ –ï—Å–ª–∏ project_id –ù–ï –ù–ê–ô–î–ï–ù - –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç')
    console.log('   ‚Ä¢ –ï—Å–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –ù–ï–¢ - –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å —Å—Ö–µ–º—É –ë–î')
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:', error.message)
    console.error('')
    console.error('üö® –≠—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç –ø–æ—á–µ–º—É —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!')
    console.error('   –§—É–Ω–∫—Ü–∏—è –ø–∞–¥–∞–µ—Ç –Ω–∞ —ç—Ç–∞–ø–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ project_id')
  } finally {
    if (client) {
      client.release()
    }
    await dbPool.end()
  }
}

checkProjectIds()
