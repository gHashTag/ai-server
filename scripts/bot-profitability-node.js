#!/usr/bin/env node

/**
 * Node.js —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–æ–≤ –∑–∞ –º–∞–π, –∏—é–Ω—å, –∏—é–ª—å 2025
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/bot-profitability-node.js
 */

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
require('dotenv').config({ path: '.env' })
require('dotenv').config({
  path: `.env.${process.env.NODE_ENV || 'development'}.local`,
})

const { createClient } = require('@supabase/supabase-js')

// –ù–∞–∑–≤–∞–Ω–∏—è –º–µ—Å—è—Ü–µ–≤
const monthNames = {
  5: '–ú–∞–π',
  6: '–ò—é–Ω—å',
  7: '–ò—é–ª—å',
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase –∫–ª–∏–µ–Ω—Ç
let supabase
try {
  const supabaseUrl = process.env.SUPABASE_URL
  const supabaseKey =
    process.env.SUPABASE_SERVICE_ROLE_KEY || process.env.SUPABASE_SERVICE_KEY

  if (!supabaseUrl || !supabaseKey) {
    throw new Error('Missing Supabase credentials')
  }

  supabase = createClient(supabaseUrl, supabaseKey)
  console.log('‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω')
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase:', error.message)
  process.exit(1)
}

async function testConnection() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase...')

  try {
    const { data, error } = await supabase
      .from('payments_v2')
      .select('id')
      .limit(1)

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error.message)
      return false
    }

    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —Ä–∞–±–æ—Ç–∞–µ—Ç!')
    return true
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:', error)
    return false
  }
}

async function analyzeBotProfitability() {
  console.log('üìä –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–æ–≤...')

  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –º–∞–π-–∏—é–ª—å 2025
    const { data, error } = await supabase
      .from('payments_v2')
      .select(
        `
        bot_name,
        amount,
        stars,
        currency,
        payment_date,
        type,
        status,
        subscription_type,
        payment_method
      `
      )
      .eq('status', 'COMPLETED')
      .eq('type', 'MONEY_INCOME')
      .gte('payment_date', '2025-05-01T00:00:00.000Z')
      .lt('payment_date', '2025-08-01T00:00:00.000Z')
      .not('bot_name', 'is', null)
      .order('payment_date', { ascending: true })

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞:', error.message)
      throw error
    }

    console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ ${data?.length || 0} –∑–∞–ø–∏—Å–µ–π`)

    if (!data || data.length === 0) {
      console.log('‚ùå –î–∞–Ω–Ω—ã–µ –æ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–æ–≤ –∑–∞ –º–∞–π-–∏—é–ª—å 2025 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
      return
    }

    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    const botStats = new Map()

    data.forEach(payment => {
      if (!payment.payment_date || !payment.bot_name) return

      const date = new Date(payment.payment_date)
      const month = date.getMonth() + 1
      const year = date.getFullYear()

      // –†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –º–∞–π, –∏—é–Ω—å, –∏—é–ª—å 2025
      if (year !== 2025 || ![5, 6, 7].includes(month)) return

      const botName = payment.bot_name

      if (!botStats.has(botName)) {
        botStats.set(botName, {
          bot_name: botName,
          total_rub_income: 0,
          total_stars_income: 0,
          rub_transactions: 0,
          stars_transactions: 0,
          months: {},
        })
      }

      const stats = botStats.get(botName)
      const monthKey = month.toString().padStart(2, '0')

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –º–µ—Å—è—Ü–∞ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
      if (!stats.months[monthKey]) {
        stats.months[monthKey] = {
          month_name: monthNames[month],
          rub_income: 0,
          stars_income: 0,
          rub_transactions: 0,
          stars_transactions: 0,
        }
      }

      const monthStats = stats.months[monthKey]

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞–ª—é—Ç—ã
      if (payment.currency === 'RUB' && payment.amount > 0) {
        const amount = Number(payment.amount)
        stats.total_rub_income += amount
        stats.rub_transactions += 1
        monthStats.rub_income += amount
        monthStats.rub_transactions += 1
      } else if (payment.currency === 'STARS' && payment.stars > 0) {
        const stars = Number(payment.stars)
        stats.total_stars_income += stars
        stats.stars_transactions += 1
        monthStats.stars_income += stars
        monthStats.stars_transactions += 1
      }
    })

    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    displayResults(Array.from(botStats.values()))
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö:', error)
    throw error
  }
}

function displayResults(stats) {
  console.log('\nüìà –ê–ù–ê–õ–ò–ó –ü–†–ò–ë–´–õ–¨–ù–û–°–¢–ò –ë–û–¢–û–í (–ú–ê–ô - –ò–Æ–õ–¨ 2025)')
  console.log('='.repeat(80))

  if (stats.length === 0) {
    console.log('‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã')
    return
  }

  let totalRubIncome = 0
  let totalStarsIncome = 0

  // –°–æ—Ä—Ç–∏—Ä—É–µ–º –±–æ—Ç–æ–≤ –ø–æ –∏–º–µ–Ω–∏
  stats.sort((a, b) => a.bot_name.localeCompare(b.bot_name))

  stats.forEach(botStats => {
    console.log(`\nü§ñ –ë–û–¢: ${botStats.bot_name}`)
    console.log('-'.repeat(50))

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ—Å—è—Ü—ã –ø–æ –ø–æ—Ä—è–¥–∫—É
    const sortedMonths = Object.entries(botStats.months).sort(([a], [b]) =>
      a.localeCompare(b)
    )

    sortedMonths.forEach(([monthKey, monthData]) => {
      console.log(`  üìÖ ${monthData.month_name} (${monthKey}):`)

      if (monthData.rub_income > 0) {
        console.log(
          `    üí∞ –†—É–±–ª–∏: ${monthData.rub_income.toFixed(2)} RUB (${
            monthData.rub_transactions
          } —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)`
        )
      }

      if (monthData.stars_income > 0) {
        console.log(
          `    ‚≠ê –ó–≤–µ–∑–¥—ã: ${monthData.stars_income} STARS (${monthData.stars_transactions} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)`
        )
      }

      if (monthData.rub_income === 0 && monthData.stars_income === 0) {
        console.log(`    üö´ –ù–µ—Ç –¥–æ—Ö–æ–¥–æ–≤`)
      }
    })

    console.log(
      `  üìä –ò–¢–û–ì–û –ø–æ –±–æ—Ç—É: ${botStats.total_rub_income.toFixed(2)} RUB | ${
        botStats.total_stars_income
      } STARS`
    )

    totalRubIncome += botStats.total_rub_income
    totalStarsIncome += botStats.total_stars_income
  })

  console.log('\n' + '='.repeat(80))
  console.log('üìä –û–ë–©–ò–ô –ò–¢–û–ì –ó–ê –¢–†–ò –ú–ï–°–Ø–¶–ê:')
  console.log(`üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥ –≤ —Ä—É–±–ª—è—Ö: ${totalRubIncome.toFixed(2)} RUB`)
  console.log(`‚≠ê –û–±—â–∏–π –¥–æ—Ö–æ–¥ –≤ –∑–≤–µ–∑–¥–∞—Ö: ${totalStarsIncome} STARS`)
  console.log(`ü§ñ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤: ${stats.length}`)
  console.log('='.repeat(80))

  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - —Ç–æ–ø –±–æ—Ç–æ–≤
  console.log('\nüèÜ –¢–û–ü-5 –ë–û–¢–û–í –ü–û –î–û–•–û–î–ù–û–°–¢–ò:')
  console.log('-'.repeat(50))

  const sortedByIncome = stats
    .map(bot => ({
      ...bot,
      totalValue: bot.total_rub_income + bot.total_stars_income * 0.5, // 1 –∑–≤–µ–∑–¥–∞ ‚âà 0.5 —Ä—É–±–ª—è —É—Å–ª–æ–≤–Ω–æ
    }))
    .sort((a, b) => b.totalValue - a.totalValue)
    .slice(0, 5)

  sortedByIncome.forEach((bot, index) => {
    console.log(
      `${index + 1}. ü§ñ ${bot.bot_name}: ${bot.total_rub_income.toFixed(
        2
      )} RUB + ${bot.total_stars_income} STARS (‚âà${bot.totalValue.toFixed(
        2
      )} RUB)`
    )
  })
}

async function main() {
  console.log(
    'üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏–±—ã–ª—å–Ω–æ—Å—Ç–∏ –±–æ—Ç–æ–≤ –∑–∞ –º–∞–π, –∏—é–Ω—å, –∏—é–ª—å 2025...'
  )

  try {
    // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    const connectionOk = await testConnection()
    if (!connectionOk) {
      console.error('üí• –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Supabase. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.')
      process.exit(1)
    }

    // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
    await analyzeBotProfitability()

    console.log('\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main()
