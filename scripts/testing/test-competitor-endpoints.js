/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ competitor-subscriptions
 */

const axios = require('axios')

const API_BASE = 'http://localhost:4000/api/competitor-subscriptions'

async function testEndpoints() {
  console.log('üß™ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï COMPETITOR-SUBSCRIPTIONS API ===\n')

  try {
    // 1. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    console.log('üìä –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...')
    try {
      const statsResponse = await axios.get(`${API_BASE}/stats`)
      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞:', {
        status: statsResponse.status,
        total_users: statsResponse.data.stats?.total_users,
        total_subscriptions: statsResponse.data.stats?.total_subscriptions,
      })
    } catch (error) {
      console.log(
        '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:',
        error.response?.status,
        error.message
      )
    }

    // 2. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
    console.log('\n‚úâÔ∏è –¢–µ—Å—Ç 2: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏...')
    try {
      const createResponse = await axios.post(API_BASE, {
        user_telegram_id: '12345678',
        user_chat_id: '12345678',
        bot_name: 'test_bot',
        competitor_username: 'garyvee',
        competitor_display_name: 'Gary Vaynerchuk',
        max_reels: 5,
        min_views: 1000,
        max_age_days: 7,
        delivery_format: 'digest',
      })

      console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', {
        status: createResponse.status,
        subscription_id: createResponse.data.subscription?.id,
        competitor: createResponse.data.subscription?.competitor_username,
      })

      const subscriptionId = createResponse.data.subscription?.id

      // 3. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('\nüìã –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
      try {
        const getResponse = await axios.get(
          `${API_BASE}?user_telegram_id=12345678&bot_name=test_bot`
        )
        console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—É—á–µ–Ω—ã:', {
          status: getResponse.status,
          subscriptions_count: getResponse.data.subscriptions?.length,
          first_subscription:
            getResponse.data.subscriptions?.[0]?.competitor_username,
        })
      } catch (error) {
        console.log(
          '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫:',
          error.response?.status,
          error.message
        )
      }

      // 4. –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
      if (subscriptionId) {
        console.log('\nüîÑ –¢–µ—Å—Ç 4: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏...')
        try {
          const updateResponse = await axios.put(
            `${API_BASE}/${subscriptionId}`,
            {
              max_reels: 8,
              delivery_format: 'individual',
            }
          )
          console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', {
            status: updateResponse.status,
            max_reels: updateResponse.data.subscription?.max_reels,
            delivery_format: updateResponse.data.subscription?.delivery_format,
          })
        } catch (error) {
          console.log(
            '‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:',
            error.response?.status,
            error.message
          )
        }

        // 5. –¢–µ—Å—Ç —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
        console.log('\nüöÄ –¢–µ—Å—Ç 5: –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞...')
        try {
          const triggerResponse = await axios.post(
            `${API_BASE}/${subscriptionId}/trigger-parsing`
          )
          console.log('‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω:', {
            status: triggerResponse.status,
            message: triggerResponse.data.message,
            event_id: triggerResponse.data.event_id,
          })
        } catch (error) {
          console.log(
            '‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞:',
            error.response?.status,
            error.message
          )
        }

        // 6. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏
        console.log('\nüìà –¢–µ—Å—Ç 6: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ—Å—Ç–∞–≤–æ–∫...')
        try {
          const historyResponse = await axios.get(
            `${API_BASE}/${subscriptionId}/history`
          )
          console.log('‚úÖ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ª—É—á–µ–Ω–∞:', {
            status: historyResponse.status,
            history_count: historyResponse.data.history?.length,
          })
        } catch (error) {
          console.log(
            '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏:',
            error.response?.status,
            error.message
          )
        }

        // 7. –¢–µ—Å—Ç —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
        console.log('\nüóëÔ∏è –¢–µ—Å—Ç 7: –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏...')
        try {
          const deleteResponse = await axios.delete(
            `${API_BASE}/${subscriptionId}`
          )
          console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞:', {
            status: deleteResponse.status,
            message: deleteResponse.data.message,
          })
        } catch (error) {
          console.log(
            '‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:',
            error.response?.status,
            error.message
          )
        }
      }

      // 8. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
      console.log('\nüìä –¢–µ—Å—Ç 8: –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞...')
      try {
        const finalStatsResponse = await axios.get(`${API_BASE}/stats`)
        console.log('‚úÖ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', {
          total_users: finalStatsResponse.data.stats?.total_users,
          total_subscriptions:
            finalStatsResponse.data.stats?.total_subscriptions,
          active_subscriptions:
            finalStatsResponse.data.stats?.active_subscriptions,
          unique_competitors: finalStatsResponse.data.stats?.unique_competitors,
        })
      } catch (error) {
        console.log(
          '‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:',
          error.response?.status,
          error.message
        )
      }
    } catch (error) {
      console.log(
        '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:',
        error.response?.status,
        error.response?.data || error.message
      )
    }
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message)
  }

  console.log('\nüéØ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===')
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testEndpoints().catch(console.error)
