/**
 * –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ competitor subscriptions –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 */

const { Pool } = require('pg')

async function testCompetitorService() {
  console.log('üß™ === –ü–†–Ø–ú–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï COMPETITOR SERVICE ===\n')

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const dbPool = new Pool({
    connectionString:
      process.env.NEON_DATABASE_URL ||
      'postgresql://neondb_owner:npg_5RWzh7CwrXxE@ep-delicate-block-a1l1lt0p-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require',
    ssl: { rejectUnauthorized: false },
    max: 20,
    connectionTimeoutMillis: 30000,
    idleTimeoutMillis: 30000,
  })

  try {
    console.log('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...')
    const client = await dbPool.connect()

    try {
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
      console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü...')
      const tablesResult = await client.query(`
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name LIKE 'competitor%'
        ORDER BY table_name
      `)

      console.log('‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã competitor:')
      tablesResult.rows.forEach(row => {
        console.log(`   üìä ${row.table_name}`)
      })

      // 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
      console.log('\n‚úâÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏...')
      const createResult = await client.query(
        `
        INSERT INTO competitor_subscriptions 
        (user_telegram_id, user_chat_id, bot_name, competitor_username, 
         competitor_display_name, max_reels, min_views, max_age_days, delivery_format)
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
        RETURNING *
      `,
        [
          'test_user_123',
          'test_chat_123',
          'test_bot',
          'garyvee',
          'Gary Vaynerchuk',
          5,
          1000,
          7,
          'digest',
        ]
      )

      const subscription = createResult.rows[0]
      console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:', {
        id: subscription.id,
        competitor: subscription.competitor_username,
        max_reels: subscription.max_reels,
      })

      // 3. –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('\nüìã –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...')
      const getResult = await client.query(
        `
        SELECT 
          cs.*,
          cp.display_name,
          cp.followers_count,
          cp.is_verified
        FROM competitor_subscriptions cs
        LEFT JOIN competitor_profiles cp ON cs.competitor_username = cp.username
        WHERE cs.user_telegram_id = $1 AND cs.bot_name = $2
        ORDER BY cs.created_at DESC
      `,
        ['test_user_123', 'test_bot']
      )

      console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–π–¥–µ–Ω—ã:', getResult.rows.length)
      getResult.rows.forEach((sub, index) => {
        console.log(
          `   ${index + 1}. @${sub.competitor_username} (${
            sub.max_reels
          } —Ä–∏–ª–∑, ${sub.delivery_format})`
        )
      })

      // 4. –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
      console.log('\nüîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏...')
      const updateResult = await client.query(
        `
        UPDATE competitor_subscriptions 
        SET max_reels = $1, delivery_format = $2, updated_at = NOW()
        WHERE id = $3
        RETURNING *
      `,
        [8, 'individual', subscription.id]
      )

      if (updateResult.rows.length > 0) {
        console.log('‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', {
          max_reels: updateResult.rows[0].max_reels,
          delivery_format: updateResult.rows[0].delivery_format,
        })
      }

      // 5. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
      console.log('\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫...')
      const statsResult = await client.query(`
        SELECT 
          COUNT(DISTINCT cs.user_telegram_id) as total_users,
          COUNT(cs.id) as total_subscriptions,
          COUNT(CASE WHEN cs.is_active THEN 1 END) as active_subscriptions,
          COUNT(DISTINCT cs.competitor_username) as unique_competitors,
          AVG(cs.max_reels) as avg_reels_per_subscription
        FROM competitor_subscriptions cs
      `)

      const stats = statsResult.rows[0]
      console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', {
        total_users: stats.total_users,
        total_subscriptions: stats.total_subscriptions,
        active_subscriptions: stats.active_subscriptions,
        unique_competitors: stats.unique_competitors,
        avg_reels: Math.round(stats.avg_reels_per_subscription * 100) / 100,
      })

      // 6. –¢–æ–ø –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã
      console.log('\nüèÜ –¢–æ–ø –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã...')
      const topResult = await client.query(`
        SELECT 
          competitor_username,
          COUNT(*) as subscribers_count,
          MAX(created_at) as latest_subscription
        FROM competitor_subscriptions
        WHERE is_active = true
        GROUP BY competitor_username
        ORDER BY subscribers_count DESC
        LIMIT 5
      `)

      console.log('‚úÖ –¢–æ–ø –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã:')
      topResult.rows.forEach((comp, index) => {
        console.log(
          `   ${index + 1}. @${comp.competitor_username} (${
            comp.subscribers_count
          } –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)`
        )
      })

      // 7. –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
      console.log('\nüóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏...')
      const deleteResult = await client.query(
        `
        DELETE FROM competitor_subscriptions 
        WHERE id = $1 
        RETURNING competitor_username
      `,
        [subscription.id]
      )

      if (deleteResult.rows.length > 0) {
        console.log(
          '‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞:',
          deleteResult.rows[0].competitor_username
        )
      }

      console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!')
    } finally {
      client.release()
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message)
    console.error('–î–µ—Ç–∞–ª–∏:', error)
  } finally {
    await dbPool.end()
  }

  console.log('\nüéØ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===')
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testCompetitorService().catch(console.error)
