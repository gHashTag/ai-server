const axios = require('axios')

const PRODUCTION_URL =
  'https://ai-server-production-production-8e2d.up.railway.app'

async function testInstagramParsing() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Instagram –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ...\n')
  console.log(`üìç URL –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞: ${PRODUCTION_URL}\n`)

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞...')
    const healthCheck = await axios
      .get(`${PRODUCTION_URL}/health`)
      .catch(err => ({
        status: err.response?.status,
        data: err.response?.data,
      }))
    console.log(
      `   ‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç: ${
        healthCheck.status || healthCheck.data?.status || 'OK'
      }\n`
    )

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Inngest —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
    console.log('2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ Inngest —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞...')
    const inngestCheck = await axios
      .get(`${PRODUCTION_URL}/api/inngest`)
      .catch(err => ({
        status: err.response?.status,
        statusText: err.response?.statusText,
      }))
    console.log(
      `   ${inngestCheck.status === 200 ? '‚úÖ' : '‚ö†Ô∏è'} Inngest —ç–Ω–¥–ø–æ–∏–Ω—Ç: ${
        inngestCheck.status
      } ${inngestCheck.statusText || ''}\n`
    )

    // 3. –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π API (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    console.log('3Ô∏è‚É£ –¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ Instagram —á–µ—Ä–µ–∑ API...')
    const testUsername = 'cristiano' // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∞

    const parseRequest = {
      username_or_id: testUsername,
      project_id: 999, // –¢–µ—Å—Ç–æ–≤—ã–π ID –ø—Ä–æ–µ–∫—Ç–∞
      max_users: 1,
      scrape_reels: true,
      max_reels_per_user: 2,
    }

    console.log(`   –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è: @${testUsername}`)
    console.log(`   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:`, JSON.stringify(parseRequest, null, 2))

    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
    const endpoints = [
      '/api/instagram/scrape',
      '/api/scraper/instagram',
      '/api/inngest/instagram-scraper-v2',
    ]

    let parseResult = null
    for (const endpoint of endpoints) {
      console.log(`\n   –ü—Ä–æ–±—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç: ${endpoint}`)
      try {
        const response = await axios.post(
          `${PRODUCTION_URL}${endpoint}`,
          parseRequest,
          {
            headers: {
              'Content-Type': 'application/json',
            },
            timeout: 10000,
          }
        )
        parseResult = response.data
        console.log(`   ‚úÖ –£—Å–ø–µ—à–Ω–æ! –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç ${endpoint}`)
        break
      } catch (err) {
        console.log(`   ‚ùå ${endpoint}: ${err.response?.status || err.message}`)
      }
    }

    if (parseResult) {
      console.log('\n‚úÖ –ü–ê–†–°–ò–ù–ì –†–ê–ë–û–¢–ê–ï–¢ –í –ü–†–û–î–ê–ö–®–ï–ù–ï!')
      console.log(
        '–†–µ–∑—É–ª—å—Ç–∞—Ç:',
        JSON.stringify(parseResult, null, 2).substring(0, 500) + '...'
      )
    } else {
      console.log('\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–∑–≤–∞—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã')
      console.log('–í–æ–∑–º–æ–∂–Ω–æ, –ø–∞—Ä—Å–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ Inngest —Å–æ–±—ã—Ç–∏—è')
    }

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π Inngest
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π Inngest...')
    try {
      const functionsResponse = await axios.get(`${PRODUCTION_URL}/api/inngest`)
      if (functionsResponse.data) {
        const text = JSON.stringify(functionsResponse.data)
        const hasInstagramScraper =
          text.includes('instagram') || text.includes('scraper')
        console.log(
          `   ${hasInstagramScraper ? '‚úÖ' : '‚ùå'} Instagram Scraper —Ñ—É–Ω–∫—Ü–∏—è ${
            hasInstagramScraper ? '–Ω–∞–π–¥–µ–Ω–∞' : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'
          }`
        )
      }
    } catch (err) {
      console.log(`   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ—É–Ω–∫—Ü–∏–π`)
    }

    // 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    console.log('\n5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...')
    const systemEndpoints = ['/api/status', '/api/health', '/status']

    for (const endpoint of systemEndpoints) {
      try {
        const response = await axios.get(`${PRODUCTION_URL}${endpoint}`, {
          timeout: 5000,
        })
        console.log(`   ‚úÖ ${endpoint}: ${response.status}`)
      } catch (err) {
        console.log(`   ‚ùå ${endpoint}: ${err.response?.status || err.message}`)
      }
    }

    console.log('\n' + '='.repeat(60))
    console.log('üìä –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–°:')
    console.log('='.repeat(60))
    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ')
    console.log('‚úÖ Inngest —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω')
    console.log(
      parseResult
        ? '‚úÖ Instagram –ø–∞—Ä—Å–∏–Ω–≥ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç'
        : '‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ Inngest Dev Server'
    )
    console.log('='.repeat(60))
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error.message)
    if (error.response) {
      console.error('–î–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞:', {
        status: error.response.status,
        statusText: error.response.statusText,
        data: error.response.data,
      })
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testInstagramParsing()
  .then(() => {
    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
  })
  .catch(err => {
    console.error('\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', err)
    process.exit(1)
  })
