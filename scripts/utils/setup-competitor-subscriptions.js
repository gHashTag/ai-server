/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
 */

require('dotenv').config()
const { Pool } = require('pg')
const fs = require('fs')
const path = require('path')

async function setupCompetitorSubscriptions() {
  console.log('üèóÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤...')
  
  const pool = new Pool({
    connectionString: process.env.SUPABASE_URL,
    ssl: process.env.SUPABASE_URL ? { rejectUnauthorized: false } : false
  })

  try {
    const client = await pool.connect()

    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')

    // –ß–∏—Ç–∞–µ–º SQL —Å–∫—Ä–∏–ø—Ç
    const sqlScript = fs.readFileSync(
      path.join(__dirname, 'src/db/migrations/create_competitor_subscriptions.sql'),
      'utf8'
    )

    // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç
    await client.query(sqlScript)
    
    console.log('‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ:')
    console.log('   ‚Ä¢ competitor_subscriptions')
    console.log('   ‚Ä¢ competitor_delivery_history')  
    console.log('   ‚Ä¢ competitor_profiles')

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    const tables = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_name IN ('competitor_subscriptions', 'competitor_delivery_history', 'competitor_profiles')
      ORDER BY table_name
    `)
    
    console.log('\nüìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü:')
    tables.rows.forEach(row => {
      console.log(`   ‚úì ${row.table_name}`)
    })

    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const testSubscription = await client.query(`
      INSERT INTO competitor_subscriptions 
      (user_telegram_id, bot_name, competitor_username, competitor_display_name, max_reels, min_views, max_age_days, delivery_format)
      VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
      ON CONFLICT (user_telegram_id, competitor_username, bot_name) DO NOTHING
      RETURNING id, competitor_username
    `, [
      '144022504', // –í–∞—à Telegram ID
      'neuro_blogger_bot',
      'yacheslav_nekludov',
      '–Ø—á–µ—Å–ª–∞–≤ –ù–µ–∫–ª—é–¥–æ–≤',
      10,
      1000,
      7,
      'digest'
    ])

    if (testSubscription.rows.length > 0) {
      console.log('\nüéØ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞:')
      console.log(`   ‚Ä¢ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç: @${testSubscription.rows[0].competitor_username}`)
      console.log(`   ‚Ä¢ ID –ø–æ–¥–ø–∏—Å–∫–∏: ${testSubscription.rows[0].id}`)
    } else {
      console.log('\nüìå –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const stats = await client.query(`
      SELECT 
        COUNT(*) as total_subscriptions,
        COUNT(CASE WHEN is_active THEN 1 END) as active_subscriptions,
        COUNT(DISTINCT competitor_username) as unique_competitors,
        COUNT(DISTINCT user_telegram_id) as total_users
      FROM competitor_subscriptions
    `)

    console.log('\nüìä –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:')
    const stat = stats.rows[0]
    console.log(`   ‚Ä¢ –í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å–æ–∫: ${stat.total_subscriptions}`)
    console.log(`   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: ${stat.active_subscriptions}`)
    console.log(`   ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: ${stat.unique_competitors}`)
    console.log(`   ‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stat.total_users}`)

    client.release()

    console.log('\nüéâ –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≥–æ—Ç–æ–≤–∞!')
    console.log('\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:')
    console.log('   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: bun dev')
    console.log('   2. Cron –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞ –≤ 08:00 UTC')
    console.log('   3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ API /api/competitor-subscriptions –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è')
    console.log('   4. –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: POST /trigger-competitor-auto-parse')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error.message)
    throw error
  } finally {
    await pool.end()
  }
}

// –ó–∞–ø—É—Å–∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
setupCompetitorSubscriptions()
  .then(() => {
    console.log('\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!')
    process.exit(0)
  })
  .catch((error) => {
    console.error('\n‚ùå –û—à–∏–±–∫–∞:', error.message)
    process.exit(1)
  })