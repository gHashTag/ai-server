/**
 * üîç –ü–û–ö–ê–ó–ê–¢–¨ –°–¢–†–£–ö–¢–£–†–£ –¢–ê–ë–õ–ò–¶
 * –ò—Å—Å–ª–µ–¥—É–µ–º —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */

import pkg from 'pg'
const { Pool } = pkg

async function showTableStructure() {
  console.log('üîç === –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –°–¢–†–£–ö–¢–£–†–´ –ë–ê–ó–´ –î–ê–ù–ù–´–• ===\n')

  const connectionString = process.env.NEON_DATABASE_URL || process.env.DATABASE_URL
  
  if (!connectionString) {
    console.error('‚ùå Database connection string is required')
    console.error('Please set NEON_DATABASE_URL or DATABASE_URL in your .env file')
    process.exit(1)
  }
  
  const pool = new Pool({
    connectionString,
    ssl: { rejectUnauthorized: false },
    max: 20,
    connectionTimeoutMillis: 30000,
    idleTimeoutMillis: 30000,
  })

  try {
    const client = await pool.connect()
    
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
      console.log('üìã –®–∞–≥ 1: –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü...')
      const tables = await client.query(`
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public' 
        ORDER BY table_name
      `)

      console.log('‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:')
      tables.rows.forEach((table, index) => {
        console.log(`   ${index + 1}. ${table.table_name}`)
      })

      // –ò—Å—Å–ª–µ–¥—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∂–¥–æ–π —Ç–∞–±–ª–∏—Ü—ã —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å Instagram
      const instagramTables = tables.rows.filter(table => 
        table.table_name.includes('instagram') || 
        table.table_name.includes('competitors') ||
        table.table_name.includes('reels')
      )

      console.log('\nüîç –®–∞–≥ 2: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ Instagram-—Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...')
      
      for (const table of instagramTables) {
        console.log(`\nüìä –¢–∞–±–ª–∏—Ü–∞: ${table.table_name}`)
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–ª–æ–Ω–æ–∫
        const columns = await client.query(`
          SELECT column_name, data_type, is_nullable, column_default
          FROM information_schema.columns 
          WHERE table_name = $1 AND table_schema = 'public'
          ORDER BY ordinal_position
        `, [table.table_name])

        console.log('üìã –ö–æ–ª–æ–Ω–∫–∏:')
        columns.rows.forEach(col => {
          console.log(`   ‚Ä¢ ${col.column_name} (${col.data_type}) ${col.is_nullable === 'YES' ? 'NULL' : 'NOT NULL'}`)
        })

        // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        const count = await client.query(`SELECT COUNT(*) FROM ${table.table_name}`)
        console.log(`üìä –ó–∞–ø–∏—Å–µ–π: ${count.rows[0].count}`)

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö (–ø–µ—Ä–≤—ã–µ 2 –∑–∞–ø–∏—Å–∏)
        if (parseInt(count.rows[0].count) > 0) {
          const sample = await client.query(`SELECT * FROM ${table.table_name} LIMIT 2`)
          console.log('üß™ –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:')
          sample.rows.forEach((row, index) => {
            console.log(`   –ó–∞–ø–∏—Å—å ${index + 1}:`, Object.keys(row).slice(0, 5).map(key => `${key}: ${row[key]}`).join(', ') + '...')
          })
        }
      }

      // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã —Å —Ä–∏–ª–∑–∞–º–∏
      const reelsTable = instagramTables.find(t => t.table_name.includes('reels'))
      if (reelsTable) {
        console.log(`\nüé¨ –®–∞–≥ 3: –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Ä–∏–ª–∑: ${reelsTable.table_name}`)
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –∑–∞–ø–∏—Å–∏ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏ (–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø–æ–ª—è)
        const columns = await client.query(`
          SELECT column_name 
          FROM information_schema.columns 
          WHERE table_name = $1 AND table_schema = 'public'
        `, [reelsTable.table_name])

        const columnNames = columns.rows.map(col => col.column_name)
        console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏:', columnNames.join(', '))

        // –ò—â–µ–º –ø–æ–ª—è —Å –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const userFields = columnNames.filter(col => 
          col.includes('user') || col.includes('name') || col.includes('account')
        )
        console.log('üë§ –ü–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', userFields.join(', '))

        // –ò—â–µ–º –ø–æ–ª—è —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
        const metricFields = columnNames.filter(col => 
          col.includes('like') || col.includes('view') || col.includes('comment') || 
          col.includes('count') || col.includes('play')
        )
        console.log('üìä –ü–æ–ª—è –º–µ—Ç—Ä–∏–∫:', metricFields.join(', '))

        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (userFields.length > 0 && metricFields.length > 0) {
          const userField = userFields[0]
          const metricField = metricFields[0]
          
          const topData = await client.query(`
            SELECT ${userField}, ${metricField}, COUNT(*) as record_count
            FROM ${reelsTable.table_name} 
            GROUP BY ${userField}, ${metricField}
            ORDER BY ${metricField} DESC NULLS LAST
            LIMIT 5
          `)

          console.log(`\nüèÜ –¢–æ–ø –ø–æ ${metricField}:`)
          topData.rows.forEach((row, index) => {
            console.log(`   ${index + 1}. ${row[userField]}: ${row[metricField]} (${row.record_count} –∑–∞–ø–∏—Å–µ–π)`)
          })
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
      const competitorsTable = instagramTables.find(t => t.table_name.includes('competitors'))
      if (competitorsTable) {
        console.log(`\nüë• –®–∞–≥ 4: –ê–Ω–∞–ª–∏–∑ —Ç–∞–±–ª–∏—Ü—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: ${competitorsTable.table_name}`)
        
        const competitorsSample = await client.query(`SELECT * FROM ${competitorsTable.table_name} LIMIT 3`)
        console.log('üß™ –ü—Ä–∏–º–µ—Ä—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤:')
        competitorsSample.rows.forEach((row, index) => {
          console.log(`   ${index + 1}.`, JSON.stringify(row, null, 2))
        })
      }

    } finally {
      client.release()
    }

    console.log('\nüéâ === –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û ===')
    console.log('‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑—É—á–µ–Ω–∞!')
    console.log('üìä –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:', error)
    throw error
  } finally {
    await pool.end()
  }
}

showTableStructure()
  .then(() => {
    console.log('\nüéØ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
    process.exit(0)
  })
  .catch(error => {
    console.error('\nüí• –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ:', error.message)
    process.exit(1)
  })