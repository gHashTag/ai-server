#!/bin/bash

# ====================================
# üöÄ AI Server Production Deploy Script
# ====================================

set -e  # Exit on error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
SERVER_HOST="your-server.com"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Å–µ—Ä–≤–µ—Ä
SERVER_USER="root"              # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
SERVER_PATH="/var/www/ai-server"
BRANCH="main"
REMOTE_REPO="origin"

# Function to print colored messages
print_message() {
    local color=$1
    local message=$2
    echo -e "${color}${message}${NC}"
}

# Function to check prerequisites
check_prerequisites() {
    print_message "$BLUE" "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π..."
    
    # Check if git is clean
    if [[ -n $(git status -s) ]]; then
        print_message "$YELLOW" "‚ö†Ô∏è  –ï—Å—Ç—å –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–æ–º–º–∏—Ç–∞? (y/n): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
    
    # Check if on correct branch
    CURRENT_BRANCH=$(git branch --show-current)
    if [[ "$CURRENT_BRANCH" != "$BRANCH" ]]; then
        print_message "$YELLOW" "‚ö†Ô∏è  –í—ã –Ω–µ –Ω–∞ –≤–µ—Ç–∫–µ $BRANCH (—Ç–µ–∫—É—â–∞—è: $CURRENT_BRANCH)"
        read -p "–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ $BRANCH? (y/n): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            git checkout $BRANCH
        fi
    fi
    
    print_message "$GREEN" "‚úÖ –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã"
}

# Function to build project locally
build_local() {
    print_message "$BLUE" "üî® –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ..."
    
    # Install dependencies
    npm ci --production=false
    
    # Build the project
    npm run build
    
    # Run tests
    print_message "$BLUE" "üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤..."
    npm test || {
        print_message "$YELLOW" "‚ö†Ô∏è  –¢–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏"
        read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–µ–ø–ª–æ–π? (y/n): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    }
    
    print_message "$GREEN" "‚úÖ –õ–æ–∫–∞–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# Function to push to repository
push_to_repo() {
    print_message "$BLUE" "üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π..."
    
    git push $REMOTE_REPO $BRANCH
    
    # Tag the release
    VERSION=$(node -p "require('./package.json').version")
    TAG="v$VERSION-$(date +%Y%m%d-%H%M%S)"
    git tag -a $TAG -m "Deploy to production: $TAG"
    git push $REMOTE_REPO $TAG
    
    print_message "$GREEN" "‚úÖ –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å —Ç–µ–≥–æ–º: $TAG"
}

# Function to deploy to server
deploy_to_server() {
    print_message "$BLUE" "üåê –î–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä $SERVER_HOST..."
    
    ssh $SERVER_USER@$SERVER_HOST << 'ENDSSH'
        set -e
        
        # Navigate to project directory
        cd $SERVER_PATH || {
            echo "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $SERVER_PATH –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ö–ª–æ–Ω–∏—Ä—É—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π..."
            git clone $REPO_URL $SERVER_PATH
            cd $SERVER_PATH
        }
        
        # Pull latest changes
        echo "üì• –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π..."
        git fetch --all
        git checkout $BRANCH
        git pull origin $BRANCH
        
        # Install dependencies
        echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
        npm ci --production
        
        # Build the project
        echo "üî® –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..."
        npm run build
        
        # Stop current services
        echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
        pm2 stop ecosystem.config.js || true
        
        # Copy production environment file
        if [ -f .env.production ]; then
            cp .env.production .env
        fi
        
        # Start services with PM2
        echo "üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
        pm2 start ecosystem.config.js --only prod
        pm2 save
        
        # Setup Inngest in production (if needed)
        if [ "$ENABLE_INNGEST" = "true" ]; then
            echo "üéõÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Inngest..."
            # For production, you might want to use a managed Inngest instance
            # or run it as a separate service
        fi
        
        # Run database migrations (if any)
        # npm run migrate:prod || true
        
        # Health check
        echo "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞..."
        sleep 5
        curl -f http://localhost:3000/health || {
            echo "‚ùå Health check failed!"
            pm2 logs --lines 50
            exit 1
        }
        
        echo "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!"
ENDSSH
    
    print_message "$GREEN" "‚úÖ –î–µ–ø–ª–æ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω"
}

# Function to setup monitoring
setup_monitoring() {
    print_message "$BLUE" "üìä –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞..."
    
    ssh $SERVER_USER@$SERVER_HOST << 'ENDSSH'
        cd $SERVER_PATH
        
        # Ensure log directory exists
        mkdir -p logs
        
        # Setup log rotation
        cat > /etc/logrotate.d/ai-server << EOF
$SERVER_PATH/logs/*.log {
    daily
    rotate 14
    compress
    delaycompress
    notifempty
    create 0640 www-data www-data
    sharedscripts
    postrotate
        pm2 reloadLogs
    endscript
}
EOF
        
        # Setup PM2 monitoring
        pm2 install pm2-logrotate
        pm2 set pm2-logrotate:max_size 100M
        pm2 set pm2-logrotate:retain 7
        
        echo "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω"
ENDSSH
}

# Function to send deployment notification
send_notification() {
    local status=$1
    local message=$2
    
    print_message "$BLUE" "üì± –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è..."
    
    # Send Telegram notification about deployment
    curl -X POST "http://$SERVER_HOST:3000/api/deploy-notification" \
        -H "Content-Type: application/json" \
        -d "{\"status\":\"$status\",\"message\":\"$message\",\"timestamp\":\"$(date -Iseconds)\"}" \
        || print_message "$YELLOW" "‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
}

# Main deployment flow
main() {
    print_message "$GREEN" "
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë   üöÄ AI Server Production Deploy     ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    "
    
    # Check environment
    if [ -z "$SERVER_HOST" ] || [ "$SERVER_HOST" = "your-server.com" ]; then
        print_message "$RED" "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ SERVER_HOST –≤ —Å–∫—Ä–∏–ø—Ç–µ"
        exit 1
    fi
    
    # Deployment steps
    check_prerequisites
    build_local
    push_to_repo
    deploy_to_server
    setup_monitoring
    
    # Send success notification
    send_notification "success" "Deployment completed successfully"
    
    print_message "$GREEN" "
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë   ‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!       ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    
    üìä –î–∞—à–±–æ—Ä–¥—ã:
    - PM2: http://$SERVER_HOST:9615
    - API: http://$SERVER_HOST:3000
    - Inngest: http://$SERVER_HOST:8288
    
    üìù –õ–æ–≥–∏:
    ssh $SERVER_USER@$SERVER_HOST 'pm2 logs'
    "
}

# Handle errors
trap 'error_handler' ERR

error_handler() {
    print_message "$RED" "‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–µ–ø–ª–æ—è!"
    send_notification "error" "Deployment failed at $(date)"
    exit 1
}

# Run main function
main "$@"
