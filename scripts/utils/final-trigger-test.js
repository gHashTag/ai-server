const { triggerApifyInstagramScraping } = require('./dist/inngest-functions/instagramApifyScraper')

async function finalTriggerTest() {
  console.log('üéØ –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢: –¢—Ä–∏–≥–≥–µ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º')
  
  try {
    const parseResult = await triggerApifyInstagramScraping({
      username_or_hashtag: 'theaisurfer',
      project_id: 999,
      source_type: 'competitor',
      max_reels: 2, // –ú–∏–Ω–∏–º—É–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
      requester_telegram_id: 'auto-system', // –ò–ú–ï–ù–ù–û –≠–¢–û –î–û–õ–ñ–ù–û –ê–ö–¢–ò–í–ò–†–û–í–ê–¢–¨ –¢–†–ò–ì–ì–ï–†
      bot_name: 'neuro_blogger_bot'
    })
    
    console.log('‚úÖ Event ID:', parseResult.eventId)
    console.log('‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏...')
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
    setTimeout(async () => {
      try {
        const fetch = (await import('node-fetch')).default
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Ñ—É–Ω–∫—Ü–∏–∏
        const statusResponse = await fetch(`http://localhost:8288/v1/events/${parseResult.eventId}/runs`)
        const statusData = await statusResponse.json()
        
        if (statusData.data && statusData.data[0]) {
          const run = statusData.data[0]
          console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏:')
          console.log(`‚Ä¢ Status: ${run.status}`)
          console.log(`‚Ä¢ Output:`, JSON.stringify(run.output, null, 2))
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–±—ã—Ç–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏
          const deliveryResponse = await fetch('http://localhost:8288/v1/events?name=competitor%2Fdelivery-reels')
          const deliveryData = await deliveryResponse.json()
          
          console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–±—ã—Ç–∏–π –¥–æ—Å—Ç–∞–≤–∫–∏:')
          console.log(`üì¨ –ù–∞–π–¥–µ–Ω–æ delivery —Å–æ–±—ã—Ç–∏–π: ${deliveryData.data ? deliveryData.data.length : 0}`)
          
          if (deliveryData.data && deliveryData.data.length > 0) {
            console.log('\nüéâ –¢–†–ò–ì–ì–ï–† –†–ê–ë–û–¢–ê–ï–¢!')
            deliveryData.data.slice(0, 3).forEach((event, i) => {
              console.log(`${i + 1}. Event: ${event.id}`)
              console.log(`   Competitor: ${event.data.competitor_username}`)
              console.log(`   Triggered by: ${event.data.triggered_by}`)
              console.log(`   Created: ${event.created_at}`)
            })
          } else {
            console.log('\n‚ùå –¢–†–ò–ì–ì–ï–† –ù–ï –†–ê–ë–û–¢–ê–ï–¢!')
            console.log('üîç –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:')
            console.log('1. –£—Å–ª–æ–≤–∏–µ if –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è')
            console.log('2. inngest.send() –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ step.run')
            console.log('3. –û—à–∏–±–∫–∞ –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è')
            console.log('4. –ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–º–ø–æ—Ä—Ç–æ–º inngest')
          }
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:', error.message)
      }
    }, 120000) // 2 –º–∏–Ω—É—Ç—ã
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error.message)
  }
}

finalTriggerTest()