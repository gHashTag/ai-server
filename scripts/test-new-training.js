#!/usr/bin/env node

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 */

import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

dotenv.config()

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY
)

async function testNewTraining() {
  const trainingId = 'qzydad4yz1rme0cq1e8979nj2g' // –ù–æ–≤—ã–π ID –∏–∑ –ª–æ–≥–æ–≤

  console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:', trainingId)

  try {
    // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –∏–∑ model_trainings
    const { data: training, error } = await supabase
      .from('model_trainings')
      .select('*')
      .eq('replicate_training_id', trainingId)
      .single()

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error.message)
      return
    }

    if (!training) {
      console.log('‚è≥ –ó–∞–ø–∏—Å—å –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ –≤ –ë–î, –∂–¥–µ–º...')
      return
    }

    console.log('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –≤ model_trainings:')
    console.log('- ID:', training.id)
    console.log('- telegram_id:', training.telegram_id)
    console.log('- model_name:', training.model_name)
    console.log('- gender:', training.gender || 'null')
    console.log('- bot_name:', training.bot_name || 'null')
    console.log('- status:', training.status)
    console.log('- created_at:', training.created_at)

    // –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞—à—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é getTrainingWithUser
    console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é getTrainingWithUser:')

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('bot_name, telegram_id, language_code')
      .eq('telegram_id', training.telegram_id.toString())
      .single()

    if (userError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError.message)
    } else {
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω—ã:')
      console.log('- user bot_name:', user.bot_name)
      console.log('- user language_code:', user.language_code)
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–∞–∫ –≤ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    const result = {
      id: training.id,
      model_name: training.model_name,
      gender: training.gender,
      bot_name: training.bot_name || user?.bot_name || 'neuro_blogger_bot',
      telegram_id: training.telegram_id.toString(),
      trigger_word: training.trigger_word,
      status: training.status,
      users: user
        ? {
            bot_name: user.bot_name,
            telegram_id: user.telegram_id,
            language_code: user.language_code,
          }
        : null,
    }

    console.log('\nüéØ –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏:')
    console.log('- bot_name (–∏—Ç–æ–≥–æ–≤—ã–π):', result.bot_name)
    console.log('- gender (–∏—Ç–æ–≥–æ–≤—ã–π):', result.gender || 'null')
    console.log('- fallback —Ä–∞–±–æ—Ç–∞–µ—Ç:', result.bot_name !== null ? '‚úÖ' : '‚ùå')
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞:', error)
  }
}

testNewTraining().catch(console.error)
