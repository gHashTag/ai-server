#!/usr/bin/env node

/**
 * Claude Code PR Auto-Fixer
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –≤ PR —á–µ—Ä–µ–∑ Claude Code API
 */

const { execSync } = require('child_process')
const axios = require('axios')

class ClaudePRFixer {
  constructor() {
    this.githubToken = process.env.GITHUB_TOKEN
    this.claudeApiKey = process.env.CLAUDE_API_KEY
    this.repoOwner = 'gHashTag'
    this.repoName = 'ai-server'
  }

  /**
   * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ PR
   */
  async fixPR(prNumber) {
    console.log(`üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é PR #${prNumber}...`)

    try {
      // 1. –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ PR
      const prInfo = await this.getPRInfo(prNumber)
      console.log(`üìã PR: "${prInfo.title}"`)

      // 2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å failed checks
      const failedChecks = await this.getFailedChecks(prNumber)
      if (failedChecks.length === 0) {
        console.log('‚úÖ –ù–µ—Ç –ø—Ä–æ–±–ª–µ–º –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è')
        return
      }

      console.log(
        `‚ùå –ù–∞–π–¥–µ–Ω–æ ${failedChecks.length} –ø—Ä–æ–±–ª–µ–º:`,
        failedChecks.map(c => c.name)
      )

      // 3. –ü–æ–ª—É—á–∏—Ç—å diff –∏ –∫–æ–¥
      const prDiff = await this.getPRDiff(prNumber)
      const affectedFiles = await this.getAffectedFiles(prNumber)

      // 4. –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É Claude
      const fixes = await this.requestClaudeFixes({
        prNumber,
        title: prInfo.title,
        description: prInfo.body,
        failedChecks,
        diff: prDiff,
        files: affectedFiles,
      })

      // 5. –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
      if (fixes && fixes.changes) {
        await this.applyFixes(fixes.changes, prNumber)
        console.log('‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!')
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ PR:', error.message)
      throw error
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ PR
   */
  async getPRInfo(prNumber) {
    const result = execSync(
      `gh pr view ${prNumber} --json title,body,headRefName`,
      { encoding: 'utf8' }
    )
    return JSON.parse(result)
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≤–∞–ª–µ–Ω–Ω—ã–µ checks
   */
  async getFailedChecks(prNumber) {
    try {
      const result = execSync(
        `gh pr checks ${prNumber} --json name,state,conclusion`,
        { encoding: 'utf8' }
      )
      const checks = JSON.parse(result)
      return checks.filter(
        check => check.conclusion === 'failure' || check.state === 'error'
      )
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å checks, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–∏—Ö')
      return []
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å diff PR
   */
  async getPRDiff(prNumber) {
    try {
      return execSync(`gh pr diff ${prNumber}`, { encoding: 'utf8' })
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å diff')
      return ''
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ —Ñ–∞–π–ª—ã
   */
  async getAffectedFiles(prNumber) {
    try {
      const result = execSync(`gh pr view ${prNumber} --json files`, {
        encoding: 'utf8',
      })
      const data = JSON.parse(result)
      return data.files?.map(f => f.path) || []
    } catch (error) {
      return []
    }
  }

  /**
   * –ó–∞–ø—Ä–æ—Å–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É Claude Code
   */
  async requestClaudeFixes(context) {
    const prompt = `
üîß AUTO-FIX REQUEST –¥–ª—è PR #${context.prNumber}

**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** ${context.title}

**–û–ø–∏—Å–∞–Ω–∏–µ:** 
${context.description || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'}

**–ü—Ä–æ–±–ª–µ–º—ã (${context.failedChecks.length}):**
${context.failedChecks.map(c => `- ‚ùå ${c.name}`).join('\n')}

**–ó–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ —Ñ–∞–π–ª—ã (${context.files.length}):**
${context.files
  .slice(0, 10)
  .map(f => `- ${f}`)
  .join('\n')}
${
  context.files.length > 10
    ? `... –∏ –µ—â–µ ${context.files.length - 10} —Ñ–∞–π–ª–æ–≤`
    : ''
}

**Diff:**
\`\`\`diff
${context.diff.slice(0, 2000)}${
      context.diff.length > 2000 ? '\n... (truncated)' : ''
    }
\`\`\`

**–ó–ê–î–ê–ß–ê:**
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è. 
–°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞:
1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
2. –†–µ—à–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ merge
3. –§–∏–∫—Å–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π  
4. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ —Ç–∏–ø–æ–≤ TypeScript
5. –†–µ—à–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º —Å —Ç–µ—Å—Ç–∞–º–∏

–û—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "analysis": "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º",
  "changes": [
    {
      "file": "path/to/file.ts",
      "action": "edit|create|delete",
      "content": "–Ω–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∏–ª–∏ null –¥–ª—è delete",
      "reason": "–æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –∑–∞—á–µ–º"
    }
  ]
}
`

    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è —Å Claude API –∏–ª–∏ MCP
    console.log('ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ Claude Code...')

    // –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Claude API
    try {
      const response = await axios.post(
        'https://api.anthropic.com/v1/messages',
        {
          model: 'claude-3-sonnet-20240229',
          max_tokens: 4000,
          messages: [
            {
              role: 'user',
              content: prompt,
            },
          ],
        },
        {
          headers: {
            Authorization: `Bearer ${this.claudeApiKey}`,
            'Content-Type': 'application/json',
            'anthropic-version': '2023-06-01',
          },
        }
      )

      const claudeResponse = response.data.content[0].text

      // –ü–æ–ø—ã—Ç–∫–∞ –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ Claude
      const jsonMatch = claudeResponse.match(/\{[\s\S]*\}/)
      if (jsonMatch) {
        return JSON.parse(jsonMatch[0])
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Claude API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è')
    }

    // Fallback - –±–∞–∑–æ–≤—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    return this.getBasicFixes(context)
  }

  /**
   * –ë–∞–∑–æ–≤—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
   */
  getBasicFixes(context) {
    const changes = []

    // –¢–∏–ø–∏—á–Ω—ã–µ —Ñ–∏–∫—Å—ã –¥–ª—è TypeScript –ø—Ä–æ–µ–∫—Ç–æ–≤
    if (
      context.failedChecks.some(
        c => c.name.includes('typescript') || c.name.includes('build')
      )
    ) {
      changes.push({
        file: 'package.json',
        action: 'edit',
        reason: '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏',
        content: null, // –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ
      })
    }

    return {
      analysis: '–ë–∞–∑–æ–≤—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è',
      changes,
    }
  }

  /**
   * –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
   */
  async applyFixes(changes, prNumber) {
    console.log(`üìù –ü—Ä–∏–º–µ–Ω—è—é ${changes.length} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...`)

    for (const change of changes) {
      try {
        if (change.action === 'edit' && change.content) {
          require('fs').writeFileSync(change.file, change.content)
          console.log(`‚úèÔ∏è –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–ª ${change.file}: ${change.reason}`)
        } else if (change.action === 'delete') {
          require('fs').unlinkSync(change.file)
          console.log(`üóëÔ∏è –£–¥–∞–ª–∏–ª ${change.file}: ${change.reason}`)
        } else if (change.action === 'create' && change.content) {
          require('fs').writeFileSync(change.file, change.content)
          console.log(`‚ûï –°–æ–∑–¥–∞–ª ${change.file}: ${change.reason}`)
        }
      } catch (error) {
        console.log(
          `‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª—è ${change.file}: ${error.message}`
        )
      }
    }

    // –ö–æ–º–º–∏—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π
    try {
      execSync('git add .')
      execSync(`git commit -m "ü§ñ Auto-fix: Resolved issues in PR #${prNumber}

Applied automated fixes:
${changes.map(c => `- ${c.action} ${c.file}: ${c.reason}`).join('\n')}

ü§ñ Generated with Claude Code Auto-fixer
Co-Authored-By: Claude <noreply@anthropic.com>"`)
      execSync('git push')

      console.log('üì§ –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–ø—É—à–µ–Ω—ã –≤ PR')
    } catch (error) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–º–º–∏—Ç–µ:', error.message)
    }
  }
}

// CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
async function main() {
  const args = process.argv.slice(2)
  const prNumber = args[0]

  if (!prNumber) {
    console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node claude-pr-fixer.js <PR_NUMBER>')
    console.log('–ü—Ä–∏–º–µ—Ä: node claude-pr-fixer.js 45')
    process.exit(1)
  }

  const fixer = new ClaudePRFixer()

  try {
    await fixer.fixPR(parseInt(prNumber))
    console.log('üéâ PR –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω!')
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞:', error.message)
    process.exit(1)
  }
}

if (require.main === module) {
  main()
}

module.exports = ClaudePRFixer
