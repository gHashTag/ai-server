#!/usr/bin/env bun

/**
 * ะขะตััะพะฒัะน ัะบัะธะฟั ะดะปั ะฟัะพะฒะตัะบะธ ะฟะพะดะบะปััะตะฝะธั ะบ Supabase
 */

// ะะฐะณััะถะฐะตะผ ะฟะตัะตะผะตะฝะฝัะต ะพะบััะถะตะฝะธั
import { config as dotenvConfig } from 'dotenv'
dotenvConfig({ path: '.env' })
dotenvConfig({ path: `.env.${process.env.NODE_ENV || 'development'}.local` })

import { supabase } from '../src/core/supabase'

async function testConnection() {
  console.log('๐ ะขะตััะธัะพะฒะฐะฝะธะต ะฟะพะดะบะปััะตะฝะธั ะบ Supabase...')
  
  // ะัะพะฒะตััะตะผ ะฟะตัะตะผะตะฝะฝัะต ะพะบััะถะตะฝะธั
  console.log('๐ ะะตัะตะผะตะฝะฝัะต ะพะบััะถะตะฝะธั:')
  console.log('- SUPABASE_URL:', process.env.SUPABASE_URL ? 'โ ะฃััะฐะฝะพะฒะปะตะฝ' : 'โ ะะต ัััะฐะฝะพะฒะปะตะฝ')
  console.log('- SUPABASE_SERVICE_KEY:', process.env.SUPABASE_SERVICE_KEY ? 'โ ะฃััะฐะฝะพะฒะปะตะฝ' : 'โ ะะต ัััะฐะฝะพะฒะปะตะฝ')
  console.log('- SUPABASE_SERVICE_ROLE_KEY:', process.env.SUPABASE_SERVICE_ROLE_KEY ? 'โ ะฃััะฐะฝะพะฒะปะตะฝ' : 'โ ะะต ัััะฐะฝะพะฒะปะตะฝ')
  console.log()

  try {
    // ะขะตััะธััะตะผ ะฟัะพััะพะน ะทะฐะฟัะพั
    console.log('๐งช ะขะตััะธัะพะฒะฐะฝะธะต ะฟัะพััะพะณะพ ะทะฐะฟัะพัะฐ...')
    const { data, error } = await supabase
      .from('payments_v2')
      .select('id')
      .limit(1)

    if (error) {
      console.error('โ ะัะธะฑะบะฐ ะฟัะธ ะฒัะฟะพะปะฝะตะฝะธะธ ะทะฐะฟัะพัะฐ:', error.message)
      console.error('๐ ะะตัะฐะปะธ ะพัะธะฑะบะธ:', error)
      return false
    }

    console.log('โ ะะพะดะบะปััะตะฝะธะต ะบ Supabase ัะฐะฑะพัะฐะตั!')
    console.log('๐ ะะฐะนะดะตะฝะพ ะทะฐะฟะธัะตะน:', data?.length || 0)
    
    // ะัะพะฒะตััะตะผ ัััะตััะฒะพะฒะฐะฝะธะต ะทะฐะฟะธัะตะน ัะธััะตะผั ัะตัะผั ะฑะพัะพะฒ
    console.log('\n๐ค ะัะพะฒะตัะบะฐ ะทะฐะฟะธัะตะน ัะตัะผั ะฑะพัะพะฒ...')
    const { data: farmData, error: farmError } = await supabase
      .from('payments_v2')
      .select('*')
      .eq('telegram_id', 'SYSTEM_BOT_FARM')
      .limit(5)

    if (farmError) {
      console.error('โ ะัะธะฑะบะฐ ะฟัะธ ะฟะพะธัะบะต ะทะฐะฟะธัะตะน ัะตัะผั ะฑะพัะพะฒ:', farmError.message)
    } else {
      console.log(`๐ ะะฐะนะดะตะฝะพ ะทะฐะฟะธัะตะน ัะตัะผั ะฑะพัะพะฒ: ${farmData?.length || 0}`)
      if (farmData && farmData.length > 0) {
        console.log('๐ ะัะธะผะตั ะทะฐะฟะธัะธ:')
        console.log(JSON.stringify(farmData[0], null, 2))
      }
    }

    return true

  } catch (error) {
    console.error('โ ะัะธัะธัะตัะบะฐั ะพัะธะฑะบะฐ:', error)
    return false
  }
}

// ะะฐะฟััะบะฐะตะผ ัะตัั
testConnection()
  .then((success) => {
    if (success) {
      console.log('\n๐ ะขะตัั ะฟะพะดะบะปััะตะฝะธั ะทะฐะฒะตััะตะฝ ััะฟะตัะฝะพ!')
      process.exit(0)
    } else {
      console.log('\n๐ฅ ะขะตัั ะฟะพะดะบะปััะตะฝะธั ะฝะต ะฟัะพัะตะป!')
      process.exit(1)
    }
  })
  .catch((error) => {
    console.error('๐ฅ ะะตะพะถะธะดะฐะฝะฝะฐั ะพัะธะฑะบะฐ:', error)
    process.exit(1)
  })