#!/usr/bin/env bun

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã
 * –û–±—Ö–æ–¥–∏—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å API –∫–ª—é—á–æ–º
 */

import { config as dotenvConfig } from 'dotenv'
dotenvConfig({ path: '.env' })

// –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SQL –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
const mayExpenses = [
  {
    date: '01/05',
    name: 'CLOUDCONVERT',
    amount: 309.13,
    currency: 'THB',
    description: '–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∞–π–ª–æ–≤',
    purpose:
      '–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –≤ –Ω—É–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏.',
    url: 'CloudConvert',
    category: 'INFRASTRUCTURE',
    expenseType: 'CLOUDCONVERT',
  },
  {
    date: '01/05',
    name: 'ELEST.IO',
    amount: 1030.43,
    currency: 'THB',
    description: '–•–æ—Å—Ç–∏–Ω–≥ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã',
    purpose: '–•–æ—Å—Ç–∏–Ω–≥ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.',
    url: 'Elest',
    category: 'HOSTING',
    expenseType: 'HOSTING',
  },
  {
    date: '07/05',
    name: 'OPENAI',
    amount: 17282.83,
    currency: 'THB',
    description: 'AI API / ChatGPT',
    purpose: '–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤ –∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏.',
    url: 'OpenAI',
    category: 'AI_SERVICES',
    expenseType: 'AI_API',
  },
  // –î–æ–±–∞–≤–∏–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–∑–∂–µ, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö
]

function generateInsertSQL(expenses: any[]): string {
  const values = expenses
    .map(expense => {
      const invId = `farm_expense_${Date.now()}_${Math.random()
        .toString(36)
        .substr(2, 9)}`
      const paymentDate = `2024-05-${expense.date
        .split('/')[0]
        .padStart(2, '0')}`

      return `(
      '${invId}',
      'SYSTEM_BOT_FARM',
      'bot_farm_manager',
      ${expense.amount},
      0,
      '${expense.currency}',
      'COMPLETED',
      'MONEY_OUTCOME',
      'System',
      '${expense.name}: ${expense.description.replace(/'/g, "''")}',
      '{"expense_category": "${expense.category}", "expense_type": "${
        expense.expenseType
      }", "purpose": "${expense.purpose.replace(
        /'/g,
        "''"
      )}", "original_name": "${expense.name}", "url": "${
        expense.url
      }", "is_bot_farm_expense": true, "processed_at": "${new Date().toISOString()}"}',
      NULL,
      NULL,
      '${paymentDate}T00:00:00.000Z',
      NOW(),
      NOW()
    )`
    })
    .join(',\n')

  return `
INSERT INTO payments_v2 (
  inv_id,
  telegram_id,
  bot_name,
  amount,
  stars,
  currency,
  status,
  type,
  payment_method,
  description,
  metadata,
  subscription_type,
  service_type,
  payment_date,
  created_at,
  updated_at
) VALUES ${values};
`
}

async function main() {
  console.log('üöÄ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SQL –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ —Ñ–µ—Ä–º—ã –±–æ—Ç–æ–≤...')

  const sql = generateInsertSQL(mayExpenses)

  console.log('üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL:')
  console.log('='.repeat(60))
  console.log(sql)
  console.log('='.repeat(60))

  console.log('\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:')
  console.log('1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ SQL –≤—ã—à–µ')
  console.log('2. –û—Ç–∫—Ä–æ–π—Ç–µ Supabase Dashboard ‚Üí SQL Editor')
  console.log('3. –í—Å—Ç–∞–≤—å—Ç–µ –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ SQL')
  console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–∞–Ω–¥–æ–π:')
  console.log(
    "   SELECT * FROM payments_v2 WHERE telegram_id = 'SYSTEM_BOT_FARM';"
  )
}

main().catch(console.error)
