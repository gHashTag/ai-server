#!/usr/bin/env node

const fs = require('fs')
const path = require('path')

// –§–∞–π–ª—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∏—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç—ã, –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∏ —Å–∫—Ä–∏–ø—Ç—ã)
const filesToFix = [
  'src/inngest-functions/neuroImageGeneration.ts',
  'src/inngest-functions/modelTrainingV2.ts',
  'src/inngest-functions/generateModelTraining.ts',
  'src/services/generateImageToPrompt.ts',
  'src/services/createVoiceAvatar.ts',
  'src/services/generateTextToImage.ts',
  'src/services/generateTextToVideo.ts',
  'src/services/generateNeuroImageV2.ts',
  'src/services/generateNeuroImage.ts',
  'src/services/generateSpeech.ts',
  'src/services/generateImageToVideo.ts',
  'src/db/migration-layer.ts',
  'src/db/schema/payments.ts',
]

console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ payment_method: "Internal" ‚Üí "System"...\n')

let totalFixed = 0

filesToFix.forEach(filePath => {
  const fullPath = path.join(__dirname, '..', filePath)

  if (!fs.existsSync(fullPath)) {
    console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`)
    return
  }

  try {
    let content = fs.readFileSync(fullPath, 'utf8')
    const originalContent = content

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º payment_method: 'Internal' ‚Üí 'System'
    content = content.replace(
      /payment_method:\s*['"]Internal['"]/g,
      "payment_method: 'System'"
    )

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º default('Internal') –≤ —Å—Ö–µ–º–∞—Ö
    content = content.replace(
      /\.default\(['"]Internal['"]\)/g,
      ".default('System')"
    )

    // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º || 'Internal'
    content = content.replace(/\|\|\s*['"]Internal['"]/g, "|| 'System'")

    if (content !== originalContent) {
      fs.writeFileSync(fullPath, content, 'utf8')
      const matches = (originalContent.match(/Internal/g) || []).length
      totalFixed += matches
      console.log(`‚úÖ ${filePath} - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ ${matches} –≤—Ö–æ–∂–¥–µ–Ω–∏–π`)
    } else {
      console.log(`‚ÑπÔ∏è  ${filePath} - –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è`)
    }
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${filePath}:`, error.message)
  }
})

console.log(`\nüéâ –ì–æ—Ç–æ–≤–æ! –í—Å–µ–≥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: ${totalFixed} –≤—Ö–æ–∂–¥–µ–Ω–∏–π`)
console.log('\nüìù –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–∏–ø—ã: bun exec tsc --noEmit')
console.log('üß™ –ò –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã: npm test')
