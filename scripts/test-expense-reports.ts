#!/usr/bin/env bun

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º —Ñ–µ—Ä–º—ã –±–æ—Ç–æ–≤
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * bun run scripts/test-expense-reports.ts
 */

import { 
  getBotFarmExpenses, 
  getBotFarmExpenseStats, 
  getBotFarmExpensesByCategory,
  getMonthlyExpenseStats
} from '../src/core/supabase/getBotFarmExpenseReports'
import { ExpenseCategory } from '../src/core/supabase/addBotFarmExpense'

async function testExpenseReports() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º —Ñ–µ—Ä–º—ã –±–æ—Ç–æ–≤...\n')

  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ –º–∞–π 2024
    console.log('üìä 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –º–∞–π 2024:')
    const mayExpenses = await getBotFarmExpenses('2024-05-01', '2024-05-31')
    console.log(`   –ù–∞–π–¥–µ–Ω–æ —Ä–∞—Å—Ö–æ–¥–æ–≤: ${mayExpenses.length}`)
    
    if (mayExpenses.length > 0) {
      const totalAmount = mayExpenses.reduce((sum, expense) => sum + expense.amount, 0)
      console.log(`   –û–±—â–∞—è —Å—É–º–º–∞: ${totalAmount.toFixed(2)} ${mayExpenses[0].currency}`)
      console.log(`   –ü–µ—Ä–≤—ã–µ 3 —Ä–∞—Å—Ö–æ–¥–∞:`)
      mayExpenses.slice(0, 3).forEach((expense, index) => {
        console.log(`     ${index + 1}. ${expense.name}: ${expense.amount} ${expense.currency} (${expense.category})`)
      })
    }
    console.log()

    // 2. –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –º–∞–π 2024
    console.log('üìà 2. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ –º–∞–π 2024:')
    const mayStats = await getBotFarmExpenseStats('2024-05-01', '2024-05-31')
    console.log(`   –û–±—â–∞—è —Å—É–º–º–∞: ${mayStats.totalAmount.toFixed(2)} ${mayStats.currency}`)
    console.log(`   –í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${mayStats.totalCount}`)
    console.log(`   –ö–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤: ${mayStats.categorySummaries.length}`)
    
    console.log('   –†–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:')
    mayStats.categorySummaries.forEach((summary, index) => {
      const percentage = ((summary.totalAmount / mayStats.totalAmount) * 100).toFixed(1)
      console.log(`     ${index + 1}. ${summary.category}: ${summary.totalAmount.toFixed(2)} ${summary.currency} (${percentage}%) - ${summary.count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`)
    })
    
    console.log('   –¢–æ–ø-5 –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤:')
    mayStats.topExpenses.slice(0, 5).forEach((expense, index) => {
      console.log(`     ${index + 1}. ${expense.name}: ${expense.amount} ${expense.currency}`)
    })
    console.log()

    // 3. –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ AI_SERVICES
    console.log('ü§ñ 3. –†–∞—Å—Ö–æ–¥—ã –Ω–∞ AI —Å–µ—Ä–≤–∏—Å—ã –∑–∞ –º–∞–π 2024:')
    const aiExpenses = await getBotFarmExpensesByCategory(ExpenseCategory.AI_SERVICES, '2024-05-01', '2024-05-31')
    console.log(`   –ù–∞–π–¥–µ–Ω–æ AI —Ä–∞—Å—Ö–æ–¥–æ–≤: ${aiExpenses.length}`)
    
    if (aiExpenses.length > 0) {
      const aiTotalAmount = aiExpenses.reduce((sum, expense) => sum + expense.amount, 0)
      console.log(`   –û–±—â–∞—è —Å—É–º–º–∞ –Ω–∞ AI: ${aiTotalAmount.toFixed(2)} ${aiExpenses[0].currency}`)
      console.log(`   AI —Ä–∞—Å—Ö–æ–¥—ã:`)
      aiExpenses.forEach((expense, index) => {
        console.log(`     ${index + 1}. ${expense.name}: ${expense.amount} ${expense.currency} - ${expense.expenseType}`)
      })
    }
    console.log()

    // 4. –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—è—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ 2024 –≥–æ–¥
    console.log('üìÖ 4. –ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 2024 –≥–æ–¥:')
    const monthlyStats = await getMonthlyExpenseStats(2024)
    console.log(`   –ú–µ—Å—è—Ü–µ–≤ —Å —Ä–∞—Å—Ö–æ–¥–∞–º–∏: ${monthlyStats.length}`)
    
    monthlyStats.forEach((monthStat) => {
      const monthName = new Date(monthStat.month + '-01').toLocaleDateString('ru-RU', { 
        year: 'numeric', 
        month: 'long' 
      })
      console.log(`     ${monthName}: ${monthStat.totalAmount.toFixed(2)} ${monthStat.currency} (${monthStat.count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π)`)
    })
    console.log()

    // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ DEVELOPMENT
    console.log('üíª 5. –†–∞—Å—Ö–æ–¥—ã –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –∑–∞ –º–∞–π 2024:')
    const devExpenses = await getBotFarmExpensesByCategory(ExpenseCategory.DEVELOPMENT, '2024-05-01', '2024-05-31')
    console.log(`   –ù–∞–π–¥–µ–Ω–æ —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É: ${devExpenses.length}`)
    
    if (devExpenses.length > 0) {
      const devTotalAmount = devExpenses.reduce((sum, expense) => sum + expense.amount, 0)
      console.log(`   –û–±—â–∞—è —Å—É–º–º–∞ –Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É: ${devTotalAmount.toFixed(2)} ${devExpenses[0].currency}`)
      devExpenses.forEach((expense, index) => {
        console.log(`     ${index + 1}. ${expense.name}: ${expense.amount} ${expense.currency}`)
      })
    }
    console.log()

    console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!')

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤:', error)
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testExpenseReports().catch(console.error)