/**
 * –ê–ù–ê–õ–ò–ó –§–£–ù–ö–¶–ò–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ö–û–ù–ö–£–†–ï–ù–¢–û–í
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ –∫–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ Supabase
 */

const fs = require('fs')
const path = require('path')

console.log('üß™ –ê–ù–ê–õ–ò–ó –§–£–ù–ö–¶–ò–ô –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ö–û–ù–ö–£–†–ï–ù–¢–û–í')
console.log('=' .repeat(60))

function analyzeFile(filePath, fileName) {
  console.log(`\\nüîç –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞: ${fileName}`)
  
  if (!fs.existsSync(filePath)) {
    console.log('‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω:', filePath)
    return false
  }
  
  const content = fs.readFileSync(filePath, 'utf8')
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
  const checks = [
    {
      name: '–ò–º–ø–æ—Ä—Ç Supabase',
      test: content.includes("from '@/supabase/client'"),
      required: true
    },
    {
      name: '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ PostgreSQL Pool',
      test: !content.includes('new Pool'),
      required: true
    },
    {
      name: '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ supabase.from',
      test: content.includes('supabase.from'),
      required: true
    },
    {
      name: '–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ client.query',
      test: !content.includes('client.query'),
      required: true
    }
  ]
  
  let allPassed = true
  
  checks.forEach(check => {
    const status = check.test ? '‚úÖ' : '‚ùå'
    console.log(`   ${status} ${check.name}`)
    
    if (check.required && !check.test) {
      allPassed = false
    }
  })
  
  return allPassed
}

function analyzeCompetitorMonitoring() {
  const filePath = './src/inngest-functions/competitorMonitoring.ts'
  const content = fs.readFileSync(filePath, 'utf8')
  
  console.log('\\nüìã –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ competitorMonitoring:')
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ —à–∞–≥–∏
  const steps = [
    'validate-input',
    'create-subscription', 
    'parse-competitor-reels',
    'wait-for-parsing-complete',
    'prepare-user-result',
    'send-user-notification',
    'record-delivery-history',
    'setup-monitoring'
  ]
  
  steps.forEach(step => {
    const found = content.includes(step)
    console.log(`   ${found ? '‚úÖ' : '‚ùå'} ${step}`)
  })
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Apify
  const apifyIntegration = content.includes("'instagram/apify-scrape'")
  console.log(`   ${apifyIntegration ? '‚úÖ' : '‚ùå'} –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Apify scraper`)
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
  const telegramIntegration = content.includes('getBotByName')
  console.log(`   ${telegramIntegration ? '‚úÖ' : '‚ùå'} –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram`)
  
  return content
}

function analyzeApifyScraper() {
  const filePath = './src/inngest-functions/instagramApifyScraper.ts'
  const content = fs.readFileSync(filePath, 'utf8')
  
  console.log('\\nüìã –ê–Ω–∞–ª–∏–∑ instagramApifyScraper:')
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è upsert
  const usesUpsert = content.includes('.upsert(')
  console.log(`   ${usesUpsert ? '‚úÖ' : '‚ùå'} –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Supabase upsert`)
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ö–µ–º—É –¥–∞–Ω–Ω—ã—Ö
  const hasReelMapping = content.includes('reel_id') && content.includes('video_url')
  console.log(`   ${hasReelMapping ? '‚úÖ' : '‚ùå'} –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ö–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∏–ª–∑–æ–≤`)
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É Apify –¥–∞–Ω–Ω—ã—Ö
  const processesApifyData = content.includes('ApifyReelItem')
  console.log(`   ${processesApifyData ? '‚úÖ' : '‚ùå'} –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö Apify`)
  
  return content
}

function checkSupabaseIntegration() {
  console.log('\\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Supabase...')
  
  const clientPath = './src/supabase/client.ts'
  
  if (!fs.existsSync(clientPath)) {
    console.log('‚ùå Supabase client –Ω–µ –Ω–∞–π–¥–µ–Ω')
    return false
  }
  
  const clientContent = fs.readFileSync(clientPath, 'utf8')
  
  const hasCreateClient = clientContent.includes('createClient')
  const hasExport = clientContent.includes('export const supabase')
  
  console.log(`   ${hasCreateClient ? '‚úÖ' : '‚ùå'} –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞`)
  console.log(`   ${hasExport ? '‚úÖ' : '‚ùå'} –≠–∫—Å–ø–æ—Ä—Ç supabase –æ–±—ä–µ–∫—Ç–∞`)
  
  return hasCreateClient && hasExport
}

function checkExpectedTables() {
  console.log('\\nüìã –û–∂–∏–¥–∞–µ–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ Supabase:')
  
  const tables = [
    {
      name: 'competitor_subscriptions',
      description: '–ü–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤',
      requiredFields: ['user_telegram_id', 'competitor_username', 'bot_name', 'is_active']
    },
    {
      name: 'competitor_profiles', 
      description: '–ü—Ä–æ—Ñ–∏–ª–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤',
      requiredFields: ['username', 'total_subscribers']
    },
    {
      name: 'competitor_delivery_history',
      description: '–ò—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç–∞–≤–æ–∫',
      requiredFields: ['subscription_id', 'reels_count', 'delivery_status']
    },
    {
      name: 'instagram_apify_reels',
      description: '–°–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ —Ä–∏–ª–∑—ã Instagram',
      requiredFields: ['reel_id', 'url', 'owner_username', 'project_id', 'views_count']
    }
  ]
  
  tables.forEach((table, index) => {
    console.log(`   ${index + 1}. ${table.name} - ${table.description}`)
    console.log(`      –ü–æ–ª—è: ${table.requiredFields.join(', ')}`)
  })
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞
async function runAnalysis() {
  try {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã
    const competitorFile = './src/inngest-functions/competitorMonitoring.ts'
    const apifyFile = './src/inngest-functions/instagramApifyScraper.ts'
    
    const competitorOk = analyzeFile(competitorFile, 'competitorMonitoring.ts')
    const apifyOk = analyzeFile(apifyFile, 'instagramApifyScraper.ts')
    
    // –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    analyzeCompetitorMonitoring()
    analyzeApifyScraper()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º Supabase
    const supabaseOk = checkSupabaseIntegration()
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    checkExpectedTables()
    
    console.log('\\nüéØ –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:')
    console.log('=' .repeat(40))
    console.log(`‚úÖ CompetitorMonitoring –Ω–∞ Supabase: ${competitorOk ? '–î–ê' : '–ù–ï–¢'}`)
    console.log(`‚úÖ InstagramApifyScraper –Ω–∞ Supabase: ${apifyOk ? '–î–ê' : '–ù–ï–¢'}`)
    console.log(`‚úÖ Supabase –∫–ª–∏–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${supabaseOk ? '–î–ê' : '–ù–ï–¢'}`)
    
    const allReady = competitorOk && apifyOk && supabaseOk
    
    if (allReady) {
      console.log('\\nüéâ –í–°–ï –ì–û–¢–û–í–û –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø!')
      console.log('\\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:')
      console.log('   1. üóÑÔ∏è –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –≤ Supabase (–µ—Å–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã)')
      console.log('   2. ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è')
      console.log('   3. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å Inngest —Å–µ—Ä–≤–µ—Ä')
      console.log('   4. üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏')
    } else {
      console.log('\\n‚ö†Ô∏è –¢–†–ï–ë–£–Æ–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø')
      console.log('–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤—ã')
    }
    
  } catch (error) {
    console.error('üí• –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê:', error.message)
  }
}

runAnalysis()