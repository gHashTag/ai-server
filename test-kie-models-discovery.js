#!/usr/bin/env node

/**
 * –ü–û–ò–°–ö –î–û–°–¢–£–ü–ù–´–• –ú–û–î–ï–õ–ï–ô –ò –ü–†–ê–í–ò–õ–¨–ù–û–ì–û –§–û–†–ú–ê–¢–ê
 * –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–µ –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –∏ —Ç–µ—Å—Ç—ã
 */

const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '.env') });

console.log('üîç –ü–û–ò–°–ö –†–ê–ë–û–ß–ò–• –ú–û–î–ï–õ–ï–ô KIE.AI');
console.log('=' .repeat(50));

const apiKey = process.env.KIE_AI_API_KEY;

// –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–æ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å
const modelTests = [
  'veo3',
  'veo-3',
  'veo3-fast', 
  'veo-3-fast',
  'video-veo3',
  'google-veo3',
  'veo',
  'text-to-video',
  'runway',
  'runway-gen3',
  'stable-video',
  'cogvideo'
];

async function testModel(modelName) {
  console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å: ${modelName}`);
  
  const payload = {
    model: modelName,
    prompt: 'A simple test video',
    duration: 2
  };

  try {
    const response = await fetch('https://api.kie.ai/api/v1/veo/generate', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`,
        'Accept': 'application/json'
      },
      body: JSON.stringify(payload)
    });

    const responseText = await response.text();
    console.log(`${modelName}: ${response.status} - ${responseText}`);
    
    try {
      const json = JSON.parse(responseText);
      if (json.request_id) {
        console.log(`üéâ –ú–û–î–ï–õ–¨ ${modelName} –†–ê–ë–û–¢–ê–ï–¢! ID: ${json.request_id}`);
        return { model: modelName, success: true, requestId: json.request_id };
      } else if (json.code === 422 && json.msg === 'Invalid model') {
        console.log(`‚ùå ${modelName} - –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`);
      } else if (json.code === 402) {
        console.log(`üí∞ ${modelName} - –Ω—É–∂–Ω–æ –±–æ–ª—å—à–µ –∫—Ä–µ–¥–∏—Ç–æ–≤`);
      } else {
        console.log(`ü§î ${modelName} - ${json.code}: ${json.msg}`);
      }
    } catch (e) {
      // ignore parse errors
    }
    
    return { model: modelName, success: false };

  } catch (error) {
    console.log(`‚ùå ${modelName} - Network error: ${error.message}`);
    return { model: modelName, success: false };
  }
}

// –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ API docs endpoint
async function findApiDocs() {
  console.log('\nüìö –ü–û–ò–°–ö API –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò:');
  console.log('=' .repeat(40));
  
  const docsEndpoints = [
    'https://api.kie.ai/api/v1/models',
    'https://api.kie.ai/api/v1/models/list', 
    'https://api.kie.ai/docs',
    'https://api.kie.ai/api/v1/veo/models',
    'https://api.kie.ai/api/v1/info',
    'https://api.kie.ai/api/v1/status'
  ];

  for (const endpoint of docsEndpoints) {
    console.log(`üîç –ü—Ä–æ–±—É–µ–º: ${endpoint}`);
    
    try {
      const response = await fetch(endpoint, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Accept': 'application/json'
        }
      });

      if (response.status === 200) {
        const text = await response.text();
        console.log(`‚úÖ –ù–ê–ô–î–ï–ù–û: ${endpoint}`);
        console.log(`Response: ${text.substring(0, 500)}...`);
        
        try {
          const json = JSON.parse(text);
          if (json.models || json.data) {
            console.log(`üìã –ú–æ–¥–µ–ª–∏:`, JSON.stringify(json, null, 2));
          }
        } catch (e) {
          // ignore
        }
      } else {
        console.log(`‚ùå ${response.status}`);
      }
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ credit endpoints
async function checkAllCredits() {
  console.log('\nüí∞ –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–†–ï–î–ò–¢–û–í:');
  console.log('=' .repeat(40));
  
  try {
    // –û–±—ã—á–Ω—ã–π –±–∞–ª–∞–Ω—Å
    const chatResponse = await fetch('https://api.kie.ai/api/v1/chat/credit', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Accept': 'application/json'
      }
    });
    
    const chatText = await chatResponse.text();
    console.log(`Chat Credits: ${chatText}`);
    
    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∞–∫–∫–∞—É–Ω—Ç–∞
    const accountEndpoints = [
      '/api/v1/user/profile',
      '/api/v1/account/info', 
      '/api/v1/billing/balance',
      '/api/v1/veo/balance'
    ];
    
    for (const endpoint of accountEndpoints) {
      try {
        const response = await fetch(`https://api.kie.ai${endpoint}`, {
          headers: {
            'Authorization': `Bearer ${apiKey}`,
            'Accept': 'application/json'
          }
        });
        
        if (response.status === 200) {
          const text = await response.text();
          console.log(`‚úÖ ${endpoint}: ${text}`);
        }
      } catch (e) {
        // ignore
      }
    }
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–µ–¥–∏—Ç–æ–≤: ${error.message}`);
  }
}

async function runDiscovery() {
  console.log('üöÄ –ó–ê–ü–£–°–ö –ê–ù–ê–õ–ò–ó–ê KIE.AI API...\n');
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–µ–¥–∏—Ç—ã
  await checkAllCredits();
  
  // 2. –ò—â–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é 
  await findApiDocs();
  
  // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
  console.log('\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–ï–õ–ï–ô:');
  console.log('=' .repeat(40));
  
  const workingModels = [];
  
  for (const model of modelTests) {
    const result = await testModel(model);
    if (result.success) {
      workingModels.push(result);
    }
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 500));
  }
  
  console.log('\n' + '='.repeat(60));
  console.log('üìä –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢:');
  console.log('='.repeat(60));
  
  if (workingModels.length > 0) {
    console.log(`‚úÖ –ù–ê–ô–î–ï–ù–û ${workingModels.length} –†–ê–ë–û–ß–ò–• –ú–û–î–ï–õ–ï–ô:`);
    workingModels.forEach(model => {
      console.log(`- ${model.model}: ${model.requestId}`);
    });
  } else {
    console.log('‚ùå –ù–ò –û–î–ù–ê –ú–û–î–ï–õ–¨ –ù–ï –†–ê–ë–û–¢–ê–ï–¢');
    console.log('\nüí° –í–û–ó–ú–û–ñ–ù–´–ï –†–ï–®–ï–ù–ò–Ø:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞ –Ω–∞ kie.ai');
    console.log('2. –ü–æ–ø–æ–ª–Ω–∏—Ç—å video credits (–æ—Ç–¥–µ–ª—å–Ω–æ –æ—Ç chat credits)');
    console.log('3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–æ–π endpoint –¥–ª—è video API');
    console.log('4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –Ω–∞ https://docs.kie.ai');
  }
}

runDiscovery().catch(console.error);