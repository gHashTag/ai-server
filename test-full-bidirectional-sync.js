#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –¥–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ GitHub ‚Üî Dart AI
 * –° —Ä–µ–∞–ª—å–Ω—ã–º API POST /api/v0/public/tasks
 */

const axios = require('axios');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏
const DART_AI_API_KEY = process.env.DART_AI_API_KEY;
const GITHUB_TOKEN = process.env.GITHUB_TOKEN;

if (!DART_AI_API_KEY) {
    console.log('‚ùå DART_AI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env');
    process.exit(1);
}

console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–π –¥–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
console.log('üîß API –∫–ª—é—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ Dart AI
 */
async function createDartAITask(issueData) {
    try {
        console.log('\nüìù –°–æ–∑–¥–∞—é –∑–∞–¥–∞—á—É –≤ Dart AI...');
        
        const taskData = {
            item: {
                title: `GitHub Issue #${issueData.number}: ${issueData.title}`,
                description: `${issueData.body || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}

---
## üîó GitHub Issue Info

**Repository:** [${issueData.repository}](https://github.com/${issueData.repository})  
**Issue:** [#${issueData.number}](https://github.com/${issueData.repository}/issues/${issueData.number})  
**State:** ${issueData.state}  
**Labels:** ${issueData.labels?.join(', ') || '–Ω–µ—Ç'}  
**Assignees:** ${issueData.assignees?.join(', ') || '–Ω–µ—Ç'}  

> ü§ñ *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ GitHub: ${new Date().toLocaleString('ru-RU')}*`,
                tags: [...(issueData.labels || []), 'github-sync']
            }
        };

        const response = await axios.post(
            'https://app.dartai.com/api/v0/public/tasks',
            taskData,
            {
                headers: {
                    'Authorization': `Bearer ${DART_AI_API_KEY}`,
                    'Content-Type': 'application/json'
                }
            }
        );

        const createdTask = response.data.item;
        
        console.log('‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –≤ Dart AI!');
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:', {
            id: createdTask.id,
            title: createdTask.title,
            status: createdTask.status,
            dartboard: createdTask.dartboard,
            url: createdTask.htmlUrl,
            tags: createdTask.tags
        });

        return createdTask;

    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ Dart AI:', {
            message: error.message,
            status: error.response?.status,
            data: error.response?.data
        });
        return null;
    }
}

/**
 * –°–æ–∑–¥–∞–Ω–∏–µ GitHub Issue
 */
async function createGitHubIssue(repository, taskData) {
    if (!GITHUB_TOKEN) {
        console.log('‚ö†Ô∏è GITHUB_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ Issue');
        return null;
    }

    try {
        console.log('\nüìù –°–æ–∑–¥–∞—é GitHub Issue...');

        const issueData = {
            title: `Dart AI Task: ${taskData.title}`,
            body: `${taskData.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}

---
## üéØ Dart AI Task Info

**Task ID:** [${taskData.id}](${taskData.htmlUrl})  
**Dartboard:** ${taskData.dartboard}  
**Status:** ${taskData.status}  
**Type:** ${taskData.type}  

> üîó *–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏–∑ Dart AI: ${new Date().toLocaleString('ru-RU')}*`,
            labels: ['dart-ai-sync', ...(taskData.tags || [])]
        };

        const response = await axios.post(
            `https://api.github.com/repos/${repository}/issues`,
            issueData,
            {
                headers: {
                    'Authorization': `Bearer ${GITHUB_TOKEN}`,
                    'Content-Type': 'application/json'
                }
            }
        );

        console.log('‚úÖ GitHub Issue —Å–æ–∑–¥–∞–Ω!');
        console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:', {
            number: response.data.number,
            title: response.data.title,
            state: response.data.state,
            url: response.data.html_url,
            labels: response.data.labels?.map(l => l.name) || []
        });

        return response.data;

    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è GitHub Issue:', {
            message: error.message,
            status: error.response?.status,
            data: error.response?.data
        });
        return null;
    }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runBidirectionalTest() {
    console.log('\n=== –¢–ï–°–¢ 1: GitHub ‚Üí Dart AI ===');
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º GitHub Issue
    const mockGitHubIssue = {
        number: Math.floor(Math.random() * 1000) + 100,
        title: 'üîÑ –¢–µ—Å—Ç –¥–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏',
        body: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π issue –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ GitHub ‚Üí Dart AI —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–π API',
        state: 'open',
        repository: 'gHashTag/ai-server',
        labels: ['test', 'integration', 'api'],
        assignees: [],
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
    };

    console.log('üìÑ Mock GitHub Issue:', {
        number: mockGitHubIssue.number,
        title: mockGitHubIssue.title,
        repository: mockGitHubIssue.repository,
        labels: mockGitHubIssue.labels
    });

    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –≤ Dart AI –∏–∑ GitHub Issue
    const dartTask = await createDartAITask(mockGitHubIssue);
    
    if (!dartTask) {
        console.log('‚ùå –¢–µ—Å—Ç GitHub ‚Üí Dart AI –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è');
        return;
    }

    console.log('\n=== –¢–ï–°–¢ 2: Dart AI ‚Üí GitHub ===');
    
    // –°–æ–∑–¥–∞–µ–º GitHub Issue –∏–∑ –∑–∞–¥–∞—á–∏ Dart AI
    const githubIssue = await createGitHubIssue('gHashTag/ai-server', dartTask);
    
    if (githubIssue) {
        console.log('‚úÖ –ü–æ–ª–Ω–∞—è –¥–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!');
        console.log('\nüéâ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
        console.log('‚úÖ GitHub ‚Üí Dart AI: –£–°–ü–ï–®–ù–û');
        console.log('‚úÖ Dart AI ‚Üí GitHub: –£–°–ü–ï–®–ù–û');
        console.log('\nüîó –°–æ–∑–¥–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã:');
        console.log(`üìã Dart AI Task: ${dartTask.htmlUrl}`);
        console.log(`üêô GitHub Issue: ${githubIssue.html_url}`);
    } else {
        console.log('‚ö†Ô∏è GitHub ‚Üí Dart AI —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ GitHub Issue —Å–æ–∑–¥–∞—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å');
        console.log('(–í–æ–∑–º–æ–∂–Ω–æ –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—é)');
        console.log('\nüìã Dart AI Task —Å–æ–∑–¥–∞–Ω: ' + dartTask.htmlUrl);
    }
}

/**
 * –¢–µ—Å—Ç —Å—Ç–∞—Ç—É—Å–∞ API
 */
async function testAPIStatus() {
    console.log('\n=== –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê API ===');

    try {
        // –¢–µ—Å—Ç Dart AI API
        const dartResponse = await axios.get('https://app.dartai.com/api/v0/tasks', {
            headers: { 'Authorization': `Bearer ${DART_AI_API_KEY}` }
        });

        console.log('‚úÖ Dart AI API –¥–æ—Å—Ç—É–ø–µ–Ω:', {
            tasks_count: dartResponse.data.count,
            status: dartResponse.status
        });

        if (GITHUB_TOKEN) {
            // –¢–µ—Å—Ç GitHub API
            const githubResponse = await axios.get('https://api.github.com/user', {
                headers: { 'Authorization': `Bearer ${GITHUB_TOKEN}` }
            });

            console.log('‚úÖ GitHub API –¥–æ—Å—Ç—É–ø–µ–Ω:', {
                user: githubResponse.data.login,
                status: githubResponse.status
            });
        } else {
            console.log('‚ö†Ô∏è GitHub API –Ω–µ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç—Å—è (–Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞)');
        }

    } catch (error) {
        console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API:', error.message);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
async function main() {
    try {
        await testAPIStatus();
        await runBidirectionalTest();
        
        console.log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    } catch (error) {
        console.error('üí• –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error.message);
    }
}

main();