/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö Railway URL'–æ–≤
 */

const axios = require('axios')

const POSSIBLE_URLS = [
  'https://ai-server-production-d5e9.up.railway.app',
  'https://ai-server-production-production-8e2d.up.railway.app',
  'https://ai-server-express.railway.app',
  'https://web-production-d5e9.up.railway.app',
  'https://ai-server-production.up.railway.app'
]

async function checkAllURLs() {
  console.log('üîç === –ü–û–ò–°–ö –†–ê–ë–û–ß–ï–ì–û RAILWAY URL ===\n')
  
  for (const url of POSSIBLE_URLS) {
    console.log(`üåê –ü—Ä–æ–≤–µ—Ä—è–µ–º: ${url}`)
    
    try {
      const startTime = Date.now()
      const response = await axios.get(`${url}/health`, { 
        timeout: 8000,
        validateStatus: () => true
      })
      const responseTime = Date.now() - startTime
      
      console.log(`   ‚úÖ –°—Ç–∞—Ç—É—Å: ${response.status} (${responseTime}ms)`)
      
      if (response.data) {
        console.log(`   üìä –û—Ç–≤–µ—Ç:`, JSON.stringify(response.data, null, 2).substring(0, 150) + '...')
      }
      
      if (response.status >= 200 && response.status < 300) {
        console.log(`   üü¢ –†–ê–ë–û–ß–ò–ô URL –ù–ê–ô–î–ï–ù! `)
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ endpoint'—ã –Ω–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–º URL
        await testWorkingServer(url)
        return url
        
      } else if (response.status === 404 && !response.data?.message?.includes('Application not found')) {
        console.log(`   üü° –°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ endpoint /health –Ω–µ –Ω–∞–π–¥–µ–Ω`)
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º root endpoint
        try {
          const rootResponse = await axios.get(url, { timeout: 5000, validateStatus: () => true })
          if (rootResponse.status < 300) {
            console.log(`   üü¢ ROOT ENDPOINT –†–ê–ë–û–¢–ê–ï–¢!`)
            await testWorkingServer(url)
            return url
          }
        } catch (e) {
          console.log(`   üî¥ Root endpoint —Ç–æ–∂–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç`)
        }
        
      } else if (response.data?.message?.includes('Application not found')) {
        console.log(`   üî¥ Application not found - –Ω–µ–≤–µ—Ä–Ω—ã–π URL`)
      } else {
        console.log(`   üü° –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç`)
      }
      
    } catch (error) {
      if (error.code === 'ECONNREFUSED') {
        console.log(`   üî¥ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ`)
      } else if (error.code === 'ETIMEDOUT') {
        console.log(`   ‚è∞ –¢–∞–π–º–∞—É—Ç`)
      } else if (error.code === 'ENOTFOUND') {
        console.log(`   üî¥ URL –Ω–µ –Ω–∞–π–¥–µ–Ω`)
      } else {
        console.log(`   üî¥ –û—à–∏–±–∫–∞: ${error.message}`)
      }
    }
    
    console.log('')
  }
  
  console.log('‚ùå –†–∞–±–æ—á–∏–π URL –Ω–µ –Ω–∞–π–¥–µ–Ω!')
  return null
}

async function testWorkingServer(baseUrl) {
  console.log(`\nüß™ === –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ê–ë–û–ß–ï–ì–û –°–ï–†–í–ï–†–ê: ${baseUrl} ===`)
  
  const testEndpoints = [
    { name: 'Health', path: '/health' },
    { name: 'Root', path: '/' },
    { name: 'Competitor Stats', path: '/api/competitor-subscriptions/stats' },
    { name: 'Competitor Base', path: '/api/competitor-subscriptions' },
    { name: 'Video Generation', path: '/generate/text-to-video' },
  ]
  
  for (const endpoint of testEndpoints) {
    try {
      const response = await axios.get(`${baseUrl}${endpoint.path}`, { 
        timeout: 5000,
        validateStatus: () => true 
      })
      
      if (response.status < 300) {
        console.log(`   ‚úÖ ${endpoint.name}: ${response.status} OK`)
      } else if (response.status === 404) {
        console.log(`   üü° ${endpoint.name}: 404 Not Found`)
      } else {
        console.log(`   ‚ö†Ô∏è ${endpoint.name}: ${response.status}`)
      }
      
    } catch (error) {
      console.log(`   üî¥ ${endpoint.name}: ERROR ${error.message}`)
    }
  }
  
  // –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
  console.log('\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º POST —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏...')
  try {
    const createResponse = await axios.post(`${baseUrl}/api/competitor-subscriptions`, {
      user_telegram_id: 'health_test_user',
      user_chat_id: 'health_test_user',
      bot_name: 'health_check_bot',
      competitor_username: 'test_health_check',
      max_reels: 3,
      min_views: 500,
      max_age_days: 5,
      delivery_format: 'digest'
    }, { 
      timeout: 8000,
      validateStatus: () => true 
    })
    
    console.log(`   üìã POST —Å—Ç–∞—Ç—É—Å: ${createResponse.status}`)
    if (createResponse.status < 300) {
      console.log(`   ‚úÖ POST —Ä–∞–±–æ—Ç–∞–µ—Ç! –°–æ–∑–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞`)
      
      // –°—Ä–∞–∑—É —É–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
      if (createResponse.data?.subscription?.id) {
        try {
          await axios.delete(`${baseUrl}/api/competitor-subscriptions/${createResponse.data.subscription.id}`, { timeout: 5000 })
          console.log(`   üóëÔ∏è –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞`)
        } catch (e) {
          console.log(`   ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É`)
        }
      }
    } else {
      console.log(`   ‚ùå POST –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç`)
    }
    
  } catch (error) {
    console.log(`   üî¥ POST –æ—à–∏–±–∫–∞: ${error.message}`)
  }
}

checkAllURLs()
  .then(workingUrl => {
    if (workingUrl) {
      console.log(`\nüéâ === –†–ï–ó–£–õ–¨–¢–ê–¢ ===`)
      console.log(`‚úÖ –†–∞–±–æ—á–∏–π URL: ${workingUrl}`)
      console.log(`üîó –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç–æ—Ç URL –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!`)
    } else {
      console.log(`\nüíÄ === –†–ï–ó–£–õ–¨–¢–ê–¢ ===`)
      console.log(`‚ùå –ù–∏ –æ–¥–∏–Ω URL –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç`)
      console.log(`üö® –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω—É–∂–µ–Ω –Ω–æ–≤—ã–π deployment`)
    }
  })
  .catch(console.error)