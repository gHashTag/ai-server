/**
 * –¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å mock bot
 */

const axios = require('axios')

async function testNeuroImageGeneration() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –Ω–µ–π—Ä–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å mock bot...')

  const testData = {
    prompt: 'Beautiful landscape with mountains',
    num_images: 1,
    model_url: 'test_model',
    telegram_id: 123456789,
    bot_name: 'neuro_blogger_bot',
  }

  try {
    const response = await axios.post(
      'http://localhost:4000/api/inngest',
      {
        name: 'neuro-image/generation',
        data: testData,
      },
      {
        headers: {
          'Content-Type': 'application/json',
        },
        timeout: 5000,
      }
    )

    console.log('‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status)
    console.log('‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response.data)

    if (response.data.success) {
      console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Inngest')
      console.log('üîÑ Job ID:', response.data.jobId)
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞:', response.data)
    }
  } catch (error) {
    if (error.response) {
      console.log('‚ùå HTTP –æ—à–∏–±–∫–∞:', error.response.status, error.response.data)
    } else if (error.request) {
      console.log('‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞')
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message)
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testNeuroImageGeneration().catch(console.error)
