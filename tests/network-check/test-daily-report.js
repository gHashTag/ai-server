/**
 * –¢–µ—Å—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
 */

const { Inngest } = require('inngest')

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Inngest –∫–ª–∏–µ–Ω—Ç–∞
const inngest = new Inngest({
  id: 'test-daily-report',
  eventKey: process.env.INNGEST_EVENT_KEY,
  isDev: true,
})

async function testDailyHealthReport() {
  console.log('üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Daily Health Report...')

  try {
    // –ó–∞–ø—É—Å–∫–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –≤—Ä—É—á–Ω—É—é
    const result = await inngest.send({
      name: 'system/trigger-daily-report',
      data: {
        userId: 'admin',
        source: 'manual_test',
        timestamp: new Date().toISOString(),
      },
    })

    console.log('‚úÖ Daily Health Report –∑–∞–ø—É—â–µ–Ω:', result.ids[0])
    console.log('üìã –û—Ç—á–µ—Ç –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å:')
    console.log('   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ 24 —á–∞—Å–∞')
    console.log('   ‚Ä¢ AI –∞–Ω–∞–ª–∏–∑ –ª–æ–≥–æ–≤')
    console.log('   ‚Ä¢ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏')
    console.log('   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é')

    return true
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ daily report:', error.message)
    return false
  }
}

async function testTelegramCallbacks() {
  console.log('üîò –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram Callbacks...')

  const testCallbacks = [
    'show_detailed_logs',
    'run_network_check',
    'deployment_status',
    'show_errors_only',
    'show_trends',
    'auto_fix',
  ]

  let successCount = 0

  for (const callback of testCallbacks) {
    try {
      const result = await inngest.send({
        name: 'telegram/callback',
        data: {
          callbackData: callback,
          chatId: process.env.ADMIN_CHAT_ID || 'test_chat',
          messageId: 123,
          userId: 'admin',
          source: 'manual_test',
        },
      })

      console.log(`‚úÖ Callback "${callback}" –æ–±—Ä–∞–±–æ—Ç–∞–Ω:`, result.ids[0])
      successCount++
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ callback "${callback}":`, error.message)
    }
  }

  console.log(`üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ ${successCount}/${testCallbacks.length} callbacks`)
  return successCount === testCallbacks.length
}

async function testNetworkCheckWithButtons() {
  console.log('üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Network Check —Å –∫–Ω–æ–ø–∫–∞–º–∏...')

  try {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º network check —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏
    const result = await inngest.send({
      name: 'network/trigger-check',
      data: {
        userId: 'admin',
        source: 'button_test',
        simulateFailure: true, // –§–ª–∞–≥ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –ø—Ä–æ–±–ª–µ–º
        timestamp: new Date().toISOString(),
      },
    })

    console.log('‚úÖ Network Check —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∑–∞–ø—É—â–µ–Ω:', result.ids[0])
    console.log('üîò –û–∂–∏–¥–∞–µ–º—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏:')
    console.log('   ‚Ä¢ üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É')
    console.log('   ‚Ä¢ üìä –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    console.log('   ‚Ä¢ üõ† –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å')
    console.log('   ‚Ä¢ üìû –í—ã–∑–≤–∞—Ç—å –∞–¥–º–∏–Ω–∞')
    console.log('   ‚Ä¢ üìà –ò—Å—Ç–æ—Ä–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫')
    console.log('   ‚Ä¢ üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–æ–∫')

    return true
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ network check —Å –∫–Ω–æ–ø–∫–∞–º–∏:', error.message)
    return false
  }
}

async function testPostDeployWithButtons() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Post-Deploy —Å –∫–Ω–æ–ø–∫–∞–º–∏...')

  try {
    // –°–∏–º—É–ª–∏—Ä—É–µ–º post-deploy –ø—Ä–æ–≤–µ—Ä–∫—É
    const result = await inngest.send({
      name: 'deployment/completed',
      data: {
        version: 'test-buttons-v1.0.0',
        commit: 'btn123def',
        branch: 'feature/buttons',
        deployedAt: new Date().toISOString(),
        environment: 'staging',
        source: 'button_test',
      },
    })

    console.log('‚úÖ Post-Deploy —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∑–∞–ø—É—â–µ–Ω:', result.ids[0])
    console.log('üîò –ö–Ω–æ–ø–∫–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:')
    console.log('   –£—Å–ø–µ—Ö: ‚úÖ –û—Ç–ª–∏—á–Ω–æ! | üìä –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏')
    console.log(
      '   –ü—Ä–æ–±–ª–µ–º—ã: üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å | üöÄ –û—Ç–∫–∞—Ç–∏—Ç—å | üõ† –ò—Å–ø—Ä–∞–≤–∏—Ç—å | üìû –í—ã–∑–≤–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞'
    )

    return true
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ post-deploy —Å –∫–Ω–æ–ø–∫–∞–º–∏:', error.message)
    return false
  }
}

async function runAllTests() {
  console.log('üß™ –¢–ï–°–¢–´ –ï–ñ–ï–î–ù–ï–í–ù–û–ì–û –û–¢–ß–ï–¢–ê –ò –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–°–¢–ò')
  console.log('='.repeat(50))

  const tests = [
    { name: 'Daily Health Report', fn: testDailyHealthReport },
    { name: 'Telegram Callbacks', fn: testTelegramCallbacks },
    { name: 'Network Check —Å –∫–Ω–æ–ø–∫–∞–º–∏', fn: testNetworkCheckWithButtons },
    { name: 'Post-Deploy —Å –∫–Ω–æ–ø–∫–∞–º–∏', fn: testPostDeployWithButtons },
  ]

  let passed = 0
  let failed = 0

  for (const test of tests) {
    console.log(`\nüìã –¢–µ—Å—Ç: ${test.name}`)
    console.log('-'.repeat(30))

    try {
      const success = await test.fn()
      if (success) {
        console.log(`‚úÖ ${test.name} - –ü–†–û–ô–î–ï–ù`)
        passed++
      } else {
        console.log(`‚ùå ${test.name} - –ü–†–û–í–ê–õ–ï–ù`)
        failed++
      }
    } catch (error) {
      console.log(`üí• ${test.name} - –û–®–ò–ë–ö–ê:`, error.message)
      failed++
    }
  }

  console.log('\n' + '='.repeat(50))
  console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í:')
  console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}`)
  console.log(`‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}`)
  console.log(`üìã –í—Å–µ–≥–æ: ${tests.length}`)

  if (failed === 0) {
    console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–°–¢–ò –ü–†–û–ô–î–ï–ù–´!')
    console.log('\nüìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram:')
    console.log('1. –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏')
    console.log('2. Network check —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏')
    console.log('3. Post-deploy –æ—Ç—á–µ—Ç—ã —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é')
    console.log('4. Callback –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫')
  } else {
    console.log('\n‚ö†Ô∏è –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–°–¢–ò –ü–†–û–í–ê–õ–ò–õ–ò–°–¨')
    console.log('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Telegram –±–æ—Ç–∞')
  }

  return { passed, failed, total: tests.length }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  runAllTests().catch(error => {
    console.error(
      'üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:',
      error
    )
    process.exit(1)
  })
}

module.exports = {
  testDailyHealthReport,
  testTelegramCallbacks,
  testNetworkCheckWithButtons,
  testPostDeployWithButtons,
  runAllTests,
}
