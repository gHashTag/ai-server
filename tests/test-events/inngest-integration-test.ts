/**
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è Instagram Scraper
 * –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: Inngest ‚Üí API ‚Üí –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ‚Üí –í–∞–ª–∏–¥–∞—Ü–∏—è
 */

import { spawn, ChildProcess } from 'child_process'
import { Inngest } from 'inngest'
import axios from 'axios'
import { Client } from 'pg'
import { setTimeout as sleep } from 'timers/promises'

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞
const TEST_CONFIG = {
  username: 'vyacheslav_nekludov', // –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô username
  project_id: 38,
  requester_telegram_id: '289259562',
  max_users: 30, // –ü–û–õ–ù–´–ô –ü–ê–†–°–ò–ù–ì: 30 –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
  max_reels_per_user: 5, // –ü–û–õ–ù–´–ô –ü–ê–†–°–ò–ù–ì: 5 —Ä–∏–ª—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
  scrape_reels: true, // –í–ö–õ–Æ–ß–ê–ï–ú —Ä–∏–ª—Å—ã

  // Inngest –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
  inngest_port: 8288,
  inngest_host: 'localhost',

  // –¢–∞–π–º–∞—É—Ç—ã (—É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞)
  server_start_timeout: 30000, // 30 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
  parsing_timeout: 600000, // 10 –º–∏–Ω—É—Ç –Ω–∞ –ø–∞—Ä—Å–∏–Ω–≥ (—É–≤–µ–ª–∏—á–µ–Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞)
  polling_interval: 10000, // 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ (—É–≤–µ–ª–∏—á–µ–Ω–æ)
}

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Inngest
const inngest = new Inngest({
  id: 'integration-test-vyacheslav',
  name: 'Integration Test Vyacheslav',
  isDev: true,
  eventKey: process.env.INNGEST_EVENT_KEY || 'test',
})

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç PostgreSQL
const dbClient = new Client({
  connectionString: process.env.NEON_DATABASE_URL,
  ssl: {
    rejectUnauthorized: false,
  },
})

interface TestResult {
  success: boolean
  message: string
  data?: any
  error?: any
}

class InngestIntegrationTest {
  private inngestProcess: ChildProcess | null = null
  private eventId: string | null = null
  private startTime = 0

  async runFullTest(): Promise<TestResult> {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞...\n')

    try {
      // –®–∞–≥ 1: –ó–∞–ø—É—Å–∫ Inngest —Å–µ—Ä–≤–µ—Ä–∞
      console.log('üì¶ –®–∞–≥ 1: –ó–∞–ø—É—Å–∫ Inngest Dev Server...')
      await this.startInngestServer()

      // –®–∞–≥ 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      console.log('üóÑÔ∏è –®–∞–≥ 2: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...')
      await this.connectToDatabase()

      // –®–∞–≥ 3: –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
      console.log('üßπ –®–∞–≥ 3: –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...')
      await this.cleanupPreviousData()

      // –®–∞–≥ 4: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è
      console.log('üì§ –®–∞–≥ 4: –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞...')
      await this.sendParsingEvent()

      // –®–∞–≥ 5: –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
      console.log('‚è≥ –®–∞–≥ 5: –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞...')
      await this.waitForCompletion()

      // –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      console.log('‚úÖ –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...')
      const dbResults = await this.validateDatabaseResults()

      // –®–∞–≥ 7: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
      console.log('üìä –®–∞–≥ 7: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞...')
      const report = await this.generateReport(dbResults)

      return {
        success: true,
        message: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ',
        data: report,
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞:', error)
      return {
        success: false,
        message: `–¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${error.message}`,
        error: error,
      }
    } finally {
      // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
      await this.cleanup()
    }
  }

  private async startInngestServer(): Promise<void> {
    return new Promise((resolve, reject) => {
      console.log('   üîÑ –ó–∞–ø—É—Å–∫ Inngest —Å–µ—Ä–≤–µ—Ä–∞...')

      // –ó–∞–ø—É—Å–∫–∞–µ–º Inngest dev —Å–µ—Ä–≤–µ—Ä
      this.inngestProcess = spawn('npx', ['inngest-cli', 'dev'], {
        stdio: 'pipe',
        env: { ...process.env, PORT: TEST_CONFIG.inngest_port.toString() },
      })

      let serverReady = false
      const timeout = global.setTimeout(() => {
        if (!serverReady) {
          reject(new Error('Inngest —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞'))
        }
      }, TEST_CONFIG.server_start_timeout)

      this.inngestProcess.stdout?.on('data', data => {
        const output = data.toString()
        console.log(`   üìã Inngest: ${output.trim()}`)

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
        if (
          output.includes('Inngest dev server running') ||
          output.includes('localhost:8288')
        ) {
          serverReady = true
          global.clearTimeout(timeout)
          resolve()
        }
      })

      this.inngestProcess.stderr?.on('data', data => {
        console.log(`   ‚ö†Ô∏è Inngest stderr: ${data.toString().trim()}`)
      })

      this.inngestProcess.on('error', error => {
        global.clearTimeout(timeout)
        reject(new Error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Inngest: ${error.message}`))
      })
    })
  }

  private async connectToDatabase(): Promise<void> {
    try {
      await dbClient.connect()
      console.log('   ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
      const result = await dbClient.query('SELECT NOW()')
      console.log('   üïê –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –ë–î:', result.rows[0].now)
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: ${error.message}`)
    }
  }

  private async cleanupPreviousData(): Promise<void> {
    try {
      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–µ–∫—Ç–∞
      const deleteQuery = `
        DELETE FROM instagram_similar_users 
        WHERE search_username = $1 AND project_id = $2
      `
      const result = await dbClient.query(deleteQuery, [
        TEST_CONFIG.username,
        TEST_CONFIG.project_id,
      ])

      console.log(`   üßπ –£–¥–∞–ª–µ–Ω–æ ${result.rowCount} –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∑–∞–ø–∏—Å–µ–π`)
    } catch (error) {
      console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`)
    }
  }

  private async sendParsingEvent(): Promise<void> {
    const event = {
      name: 'instagram/scraper-v2',
      data: {
        username_or_id: TEST_CONFIG.username,
        requester_telegram_id: TEST_CONFIG.requester_telegram_id,
        project_id: TEST_CONFIG.project_id,
        max_users: TEST_CONFIG.max_users,
        max_reels_per_user: TEST_CONFIG.max_reels_per_user,
        scrape_reels: TEST_CONFIG.scrape_reels,
        metadata: {
          source: 'integration_test',
          timestamp: new Date().toISOString(),
          test_run: true,
        },
      },
    }

    try {
      const result = await inngest.send(event)
      this.eventId = result.ids[0]
      this.startTime = Date.now()

      console.log('   üì§ –°–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:')
      console.log(`      Event ID: ${this.eventId}`)
      console.log(`      Username: ${event.data.username_or_id}`)
      console.log(`      Project ID: ${event.data.project_id}`)
      console.log(`      Max Users: ${event.data.max_users}`)
    } catch (error) {
      throw new Error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è: ${error.message}`)
    }
  }

  private async waitForCompletion(): Promise<void> {
    const startTime = Date.now()
    const maxWaitTime = TEST_CONFIG.parsing_timeout

    console.log(
      `   ‚è±Ô∏è –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (–º–∞–∫—Å. ${maxWaitTime / 1000} —Å–µ–∫)...`
    )

    while (Date.now() - startTime < maxWaitTime) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ Inngest API
      const status = await this.checkInngestStatus()

      if (status.completed) {
        console.log(
          `   ‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${(Date.now() - startTime) / 1000} —Å–µ–∫`
        )
        return
      }

      if (status.failed) {
        throw new Error(`–ü–∞—Ä—Å–∏–Ω–≥ –ø—Ä–æ–≤–∞–ª–µ–Ω: ${status.error}`)
      }

      console.log(
        `   ‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è... (${Math.floor((Date.now() - startTime) / 1000)}s)`
      )
      await sleep(TEST_CONFIG.polling_interval)
    }

    throw new Error('–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞')
  }

  private async checkInngestStatus(): Promise<{
    completed: boolean
    failed: boolean
    error?: string
  }> {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ Inngest dashboard API
      const response = await axios.get(
        `http://${TEST_CONFIG.inngest_host}:${TEST_CONFIG.inngest_port}/api/v1/events/${this.eventId}`,
        { timeout: 5000 }
      )

      const status = response.data?.status || 'unknown'

      return {
        completed: status === 'completed',
        failed: status === 'failed',
        error: response.data?.error,
      }
    } catch (error) {
      // –ï—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ë–î
      return await this.checkDatabaseForResults()
    }
  }

  private async checkDatabaseForResults(): Promise<{
    completed: boolean
    failed: boolean
    error?: string
  }> {
    try {
      const query = `
        SELECT COUNT(*) as count 
        FROM instagram_similar_users 
        WHERE search_username = $1 AND project_id = $2
      `
      const result = await dbClient.query(query, [
        TEST_CONFIG.username,
        TEST_CONFIG.project_id,
      ])
      const count = parseInt(result.rows[0].count)

      return {
        completed: count > 0,
        failed: false,
      }
    } catch (error) {
      return {
        completed: false,
        failed: true,
        error: error.message,
      }
    }
  }

  private async validateDatabaseResults(): Promise<any> {
    const query = `
      SELECT 
        COUNT(*) as total_users,
        search_username,
        project_id,
        MIN(created_at) as first_created,
        MAX(created_at) as last_created
      FROM instagram_similar_users 
      WHERE search_username = $1 AND project_id = $2
      GROUP BY search_username, project_id
    `

    const result = await dbClient.query(query, [
      TEST_CONFIG.username,
      TEST_CONFIG.project_id,
    ])

    if (result.rows.length === 0) {
      throw new Error('–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
    }

    const data = result.rows[0]
    console.log('   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:')
    console.log(`      –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${data.total_users}`)
    console.log(`      Search Username: ${data.search_username}`)
    console.log(`      Project ID: ${data.project_id}`)
    console.log(`      –ü–µ—Ä–≤–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ: ${data.first_created}`)
    console.log(`      –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–∏–µ: ${data.last_created}`)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
    if (data.project_id !== TEST_CONFIG.project_id) {
      throw new Error(
        `–ù–µ–≤–µ—Ä–Ω—ã–π project_id: –æ–∂–∏–¥–∞–ª—Å—è ${TEST_CONFIG.project_id}, –ø–æ–ª—É—á–µ–Ω ${data.project_id}`
      )
    }

    if (data.search_username !== TEST_CONFIG.username) {
      throw new Error(
        `–ù–µ–≤–µ—Ä–Ω—ã–π username: –æ–∂–∏–¥–∞–ª—Å—è ${TEST_CONFIG.username}, –ø–æ–ª—É—á–µ–Ω ${data.search_username}`
      )
    }

    if (parseInt(data.total_users) === 0) {
      throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
    }

    return data
  }

  private async generateReport(dbResults: any): Promise<any> {
    const executionTime = Date.now() - this.startTime

    const report = {
      test_status: 'SUCCESS',
      execution_time_ms: executionTime,
      execution_time_formatted: `${Math.floor(executionTime / 1000)}s ${
        executionTime % 1000
      }ms`,

      // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–∞
      test_config: TEST_CONFIG,

      // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
      results: {
        event_id: this.eventId,
        users_found: parseInt(dbResults.total_users),
        database_verification: 'PASSED',
        project_id_correct: dbResults.project_id === TEST_CONFIG.project_id,
        username_correct: dbResults.search_username === TEST_CONFIG.username,
      },

      // –í—Ä–µ–º–µ–Ω–∞
      timestamps: {
        test_start: new Date(this.startTime).toISOString(),
        test_end: new Date().toISOString(),
        first_db_record: dbResults.first_created,
        last_db_record: dbResults.last_created,
      },
    }

    console.log('\nüìã –û–¢–ß–ï–¢ –û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ò:')
    console.log(JSON.stringify(report, null, 2))

    return report
  }

  private async cleanup(): Promise<void> {
    console.log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...')

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
    try {
      await dbClient.end()
      console.log('   ‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ')
    } catch (error) {
      console.log(`   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ë–î: ${error.message}`)
    }

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Inngest —Å–µ—Ä–≤–µ—Ä
    if (this.inngestProcess) {
      this.inngestProcess.kill('SIGTERM')
      console.log('   ‚úÖ Inngest —Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
async function main() {
  const test = new InngestIntegrationTest()

  try {
    const result = await test.runFullTest()

    if (result.success) {
      console.log('\nüéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù –£–°–ü–ï–®–ù–û!')
      console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ')
      process.exit(0)
    } else {
      console.log('\n‚ùå –ò–ù–¢–ï–ì–†–ê–¶–ò–û–ù–ù–´–ô –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù')
      console.log('–ü—Ä–∏—á–∏–Ω–∞:', result.message)
      process.exit(1)
    }
  } catch (error) {
    console.error('\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error)
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main()
}

export { InngestIntegrationTest, TEST_CONFIG }
