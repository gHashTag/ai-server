#!/usr/bin/env node

/**
 * üß™ –¢–µ—Å—Ç –ø—Ä–æ–¥–∞–∫—à–Ω —Å–µ—Ä–≤–µ—Ä–∞ Instagram –ø–∞—Ä—Å–∏–Ω–≥–∞
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –ø—Ä–æ–¥–∞–∫—à–Ω-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ Railway
 */

const fetch = require('node-fetch')

const PRODUCTION_URL =
  'https://ai-server-production-production-8e2d.up.railway.app'

console.log('üöÄ –¢–ï–°–¢ –ü–†–û–î–ê–ö–®–ù-–°–ï–†–í–ï–†–ê INSTAGRAM –ü–ê–†–°–ò–ù–ì–ê')
console.log('=' * 50)
console.log(`üì° URL: ${PRODUCTION_URL}`)
console.log(`üïí –í—Ä–µ–º—è: ${new Date().toISOString()}`)
console.log('=' * 50)

async function testProductionServer() {
  try {
    console.log('\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint...')

    // –¢–µ—Å—Ç 1: Health check
    const healthResponse = await fetch(`${PRODUCTION_URL}/health`, {
      method: 'GET',
      timeout: 10000,
    })

    if (healthResponse.ok) {
      const healthData = await healthResponse.text()
      console.log('‚úÖ Health endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç')
      console.log(`   –û—Ç–≤–µ—Ç: ${healthData}`)
    } else {
      console.log(`‚ùå Health endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${healthResponse.status}`)
      return false
    }

    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoint...')

    // –¢–µ—Å—Ç 2: API check
    const apiResponse = await fetch(`${PRODUCTION_URL}/api/test`, {
      method: 'GET',
      timeout: 10000,
    })

    if (apiResponse.ok) {
      const apiData = await apiResponse.text()
      console.log('‚úÖ API endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç')
      console.log(`   –û—Ç–≤–µ—Ç: ${apiData}`)
    } else {
      console.log(`‚ùå API endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${apiResponse.status}`)
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ /api/test –º–æ–∂–µ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
    }

    console.log('\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Instagram Inngest —Ñ—É–Ω–∫—Ü–∏–∏...')

    // –¢–µ—Å—Ç 3: Trigger endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Inngest
    console.log('   –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º /trigger endpoint...')

    const triggerResponse = await fetch(`${PRODUCTION_URL}/trigger`, {
      method: 'GET',
      timeout: 10000,
    })

    if (triggerResponse.ok) {
      const triggerData = await triggerResponse.json()
      console.log('   ‚úÖ Trigger endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç')
      console.log(`      –û—Ç–≤–µ—Ç: ${triggerData.status}`)
    } else {
      console.log(
        `   ‚ùå Trigger endpoint –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: ${triggerResponse.status}`
      )
    }

    console.log('   –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–∏–º Instagram —Å–æ–±—ã—Ç–∏–µ —á–µ—Ä–µ–∑ Inngest SDK...')

    // –¢–µ—Å—Ç 3b: Instagram Inngest event —á–µ—Ä–µ–∑ SDK
    const { Inngest } = require('inngest')

    const inngest = new Inngest({
      id: 'production-test-client',
      name: 'Production Test Client',
      eventKey: 'test-key',
    })

    const instagramEvent = {
      name: 'instagram/apify-scrape',
      data: {
        username_or_hashtag: 'cristiano',
        project_id: 999,
        source_type: 'competitor',
        max_reels: 3,
        min_views: 10000,
        max_age_days: 7,
        requester_telegram_id: '144022504',
        bot_name: 'test_bot',
      },
    }

    const inngestResponse = await inngest.send(instagramEvent)

    if (inngestResponse && inngestResponse.ids) {
      console.log('   ‚úÖ Instagram Inngest —Å–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ SDK')
      console.log(`      Event ID: ${inngestResponse.ids[0] || 'unknown'}`)
      console.log('      ‚è±Ô∏è  –û–∂–∏–¥–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏...')

      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
      await new Promise(resolve => setTimeout(resolve, 5000))
    } else {
      console.log(`   ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Inngest —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ SDK`)
      console.log(`      –û—Ç–≤–µ—Ç: ${JSON.stringify(inngestResponse)}`)
    }

    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–µ—Ä–∞...')

    // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ endpoints
    const endpoints = ['/api/inngest', '/trigger', '/health', '/api', '/']

    for (const endpoint of endpoints) {
      try {
        const response = await fetch(`${PRODUCTION_URL}${endpoint}`, {
          method: 'GET',
          timeout: 5000,
        })
        console.log(`   ${endpoint}: ${response.status} ${response.statusText}`)
      } catch (error) {
        console.log(`   ${endpoint}: ‚ùå ${error.message}`)
      }
    }

    console.log('\nüìã –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:')
    console.log('=' * 50)
    console.log('‚úÖ –ü—Ä–æ–¥–∞–∫—à–Ω-—Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω')
    console.log('‚úÖ Instagram –ø–∞—Ä—Å–∏–Ω–≥ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞')
    console.log('‚úÖ Inngest –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç')
    console.log('\nüéØ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:')
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Inngest Dashboard –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏')
    console.log('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏')
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è')
    console.log('\nüöÄ –ü—Ä–æ–¥–∞–∫—à–Ω –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!')

    return true
  } catch (error) {
    console.error('\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:', error.message)
    console.error('üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:')
    console.error('   ‚Ä¢ –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω')
    console.error('   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é')
    console.error('   ‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL')
    console.error(`   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –Ω–∞: ${PRODUCTION_URL}/health`)
    return false
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testProductionServer()
  .then(success => {
    if (success) {
      console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!')
      process.exit(0)
    } else {
      console.log('\nüí• –¢–ï–°–¢–´ –ù–ï –ü–†–û–®–õ–ò')
      process.exit(1)
    }
  })
  .catch(error => {
    console.error('\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error)
    process.exit(1)
  })
