/**
 * –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è Kie.ai API
 * –≠—Ç–æ—Ç —Ñ–∞–π–ª –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ node –±–µ–∑ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏
 */

const axios = require('axios');
const dotenv = require('dotenv');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config({ path: path.join(__dirname, '../.env') });

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –º–æ–¥–µ–ª–µ–π Kie.ai
const KIE_AI_MODELS = {
  'veo3_fast': {
    name: 'Veo 3 Fast',
    pricePerSecond: 0.05,
    maxDuration: 10
  },
  'veo3': {
    name: 'Veo 3 Quality',
    pricePerSecond: 0.25,
    maxDuration: 10
  },
  'runway-aleph': {
    name: 'Runway Aleph',
    pricePerSecond: 0.30,
    maxDuration: 10
  }
};

class SimpleKieAiClient {
  constructor() {
    this.apiKey = process.env.KIE_AI_API_KEY || '';
    this.baseUrl = 'https://api.kie.ai/api/v1';
    
    if (!this.apiKey) {
      console.warn('‚ö†Ô∏è KIE_AI_API_KEY not found in .env file');
    }
  }
  
  async checkHealth() {
    if (!this.apiKey) return false;
    
    try {
      const response = await axios.get(`${this.baseUrl}/chat/credit`, {
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json'
        },
        timeout: 10000
      });
      
      console.log('‚úÖ Kie.ai API –¥–æ—Å—Ç—É–ø–µ–Ω. –ö—Ä–µ–¥–∏—Ç—ã:', response.data.credits);
      return true;
    } catch (error) {
      console.error('‚ùå Kie.ai API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
      return false;
    }
  }
  
  async generateVideo(options) {
    if (!this.apiKey) {
      throw new Error('KIE_AI_API_KEY is required');
    }
    
    const requestBody = {
      model: options.model,
      prompt: options.prompt,
      aspectRatio: options.aspectRatio || '16:9'
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ–ª—è
    if (options.imageUrls) requestBody.imageUrls = options.imageUrls;
    if (options.watermark) requestBody.watermark = options.watermark;
    if (options.callBackUrl) requestBody.callBackUrl = options.callBackUrl;
    if (options.seeds !== undefined) requestBody.seeds = options.seeds;
    if (options.enableFallback !== undefined) requestBody.enableFallback = options.enableFallback;
    
    console.log('\nüì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Kie.ai API:');
    console.log(JSON.stringify(requestBody, null, 2));
    
    try {
      const response = await axios.post(`${this.baseUrl}/veo/generate`, requestBody, {
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json'
        },
        timeout: 30000
      });
      
      console.log('\nüì• –û—Ç–≤–µ—Ç –æ—Ç Kie.ai:');
      console.log(JSON.stringify(response.data, null, 2));
      
      if (response.data.code !== 200) {
        throw new Error(response.data.msg || 'Generation failed');
      }
      
      return {
        success: true,
        taskId: response.data.data?.taskId,
        message: response.data.msg
      };
      
    } catch (error) {
      if (error.response) {
        console.error('\n‚ùå –û—à–∏–±–∫–∞ –æ—Ç API:');
        console.error(`Status: ${error.response.status}`);
        console.error(`Data:`, error.response.data);
        
        if (error.response.status === 401) {
          throw new Error('Invalid API key. Check KIE_AI_API_KEY');
        } else if (error.response.status === 402) {
          throw new Error('Insufficient credits');
        } else if (error.response.status === 429) {
          throw new Error('Rate limit exceeded');
        }
      }
      throw error;
    }
  }
  
  calculateCost(model, duration) {
    const modelConfig = KIE_AI_MODELS[model];
    if (!modelConfig) return 0;
    return duration * modelConfig.pricePerSecond;
  }
}

async function runTests() {
  console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Kie.ai API...\n');
  console.log('=' .repeat(50));
  
  const client = new SimpleKieAiClient();
  
  // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
  console.log('\n1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò API');
  console.log('-' .repeat(30));
  const isHealthy = await client.checkHealth();
  if (!isHealthy) {
    console.error('\n‚ö†Ô∏è API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
    console.error('1. –ù–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞');
    console.error('2. –ù–∞–ª–∏—á–∏–µ KIE_AI_API_KEY –≤ .env');
    console.error('3. –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞');
    return;
  }
  
  // 2. –¢–µ—Å—Ç —Å –±–∞–∑–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  console.log('\n2Ô∏è‚É£ –¢–ï–°–¢ –ë–ê–ó–û–í–û–ô –ì–ï–ù–ï–†–ê–¶–ò–ò');
  console.log('-' .repeat(30));
  try {
    const result = await client.generateVideo({
      model: 'veo3_fast',
      prompt: 'A beautiful sunset over mountains',
      aspectRatio: '16:9'
    });
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ! Task ID:', result.taskId);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
  
  // 3. –¢–µ—Å—Ç —Å –º–∞—Å—Å–∏–≤–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  console.log('\n3Ô∏è‚É£ –¢–ï–°–¢ –° –ú–ê–°–°–ò–í–û–ú –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô');
  console.log('-' .repeat(30));
  try {
    const result = await client.generateVideo({
      model: 'veo3',
      prompt: 'Smooth transition between images',
      imageUrls: [
        'https://example.com/image1.jpg',
        'https://example.com/image2.jpg'
      ],
      aspectRatio: '9:16'
    });
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ! Task ID:', result.taskId);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
  
  // 4. –¢–µ—Å—Ç —Å–æ –≤—Å–µ–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  console.log('\n4Ô∏è‚É£ –¢–ï–°–¢ –°–û –í–°–ï–ú–ò –ü–ê–†–ê–ú–ï–¢–†–ê–ú–ò');
  console.log('-' .repeat(30));
  try {
    const result = await client.generateVideo({
      model: 'veo3',
      prompt: 'Epic cinematic scene with effects',
      imageUrls: ['https://example.com/reference.jpg'],
      watermark: 'TestBrand',
      callBackUrl: 'https://webhook.site/test',
      seeds: 12345,
      enableFallback: true,
      aspectRatio: '16:9'
    });
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ! Task ID:', result.taskId);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
  
  // 5. –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏
  console.log('\n5Ô∏è‚É£ –†–ê–°–ß–ï–¢ –°–¢–û–ò–ú–û–°–¢–ò');
  console.log('-' .repeat(30));
  const duration = 10;
  console.log(`–°—Ç–æ–∏–º–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ ${duration} —Å–µ–∫—É–Ω–¥ –≤–∏–¥–µ–æ:`);
  
  for (const [modelId, modelInfo] of Object.entries(KIE_AI_MODELS)) {
    const cost = client.calculateCost(modelId, duration);
    console.log(`‚Ä¢ ${modelInfo.name}: $${cost.toFixed(3)}`);
  }
  
  console.log('\n' + '=' .repeat(50));
  console.log('‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('\nüìå –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:');
  console.log('‚Ä¢ –í–∏–¥–µ–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ (1-3 –º–∏–Ω—É—Ç—ã)');
  console.log('‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ webhook –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞');
  console.log('‚Ä¢ Task ID –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch(error => {
  console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  process.exit(1);
});
