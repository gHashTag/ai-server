/**
 * –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ N8N —Å AI Server
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å N8N workflow –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏
 */

const axios = require('axios')
const { logger } = require('../../dist/utils/logger')

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const config = {
  aiServerUrl: 'http://localhost:4000', // –û–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Ä—Ç –¥–ª—è dev –æ–∫—Ä—É–∂–µ–Ω–∏—è
  n8nUrl: 'http://localhost:5678',
  testTimeout: 30000, // 30 —Å–µ–∫—É–Ω–¥
}

class N8nIntegrationTester {
  constructor() {
    this.aiServerClient = axios.create({
      baseURL: config.aiServerUrl,
      timeout: config.testTimeout,
    })

    this.n8nClient = axios.create({
      baseURL: config.n8nUrl,
      timeout: config.testTimeout,
      auth: {
        username: 'admin',
        password: 'admin123',
      },
    })
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
   */
  async runTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ N8N —Å AI Server\\n')

    const tests = [
      {
        name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ AI Server',
        test: () => this.testAiServerHealth(),
      },
      { name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ N8N', test: () => this.testN8nHealth() },
      {
        name: '–¢–µ—Å—Ç N8N API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤',
        test: () => this.testN8nApiEndpoints(),
      },
      {
        name: '–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ workflow',
        test: () => this.testWorkflowCreation(),
      },
      {
        name: '–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ workflow —á–µ—Ä–µ–∑ webhook',
        test: () => this.testWorkflowExecution(),
      },
      {
        name: '–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Instagram API',
        test: () => this.testInstagramIntegration(),
      },
      {
        name: '–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Generation API',
        test: () => this.testGenerationIntegration(),
      },
    ]

    const results = []

    for (const { name, test } of tests) {
      console.log(`\\nüìã –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è: ${name}`)

      try {
        const startTime = Date.now()
        const result = await test()
        const duration = Date.now() - startTime

        console.log(`‚úÖ ${name} - –ü–†–û–ô–î–ï–ù (${duration}ms)`)
        results.push({ name, status: 'PASSED', duration, result })
      } catch (error) {
        console.log(`‚ùå ${name} - –ü–†–û–í–ê–õ–ï–ù: ${error.message}`)
        results.push({ name, status: 'FAILED', error: error.message })
      }
    }

    this.printTestSummary(results)
    return results
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è AI Server
   */
  async testAiServerHealth() {
    const response = await this.aiServerClient.get('/api/n8n/health')

    if (response.status !== 200) {
      throw new Error(`AI Server –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: ${response.status}`)
    }

    return {
      status: response.data.success ? 'healthy' : 'unhealthy',
      data: response.data,
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è N8N
   */
  async testN8nHealth() {
    try {
      const response = await this.n8nClient.get('/api/v1/workflows')

      if (response.status !== 200) {
        throw new Error(`N8N –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç: ${response.status}`)
      }

      return {
        status: 'healthy',
        workflowsCount: response.data.data?.length || 0,
      }
    } catch (error) {
      throw new Error(`N8N –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${error.message}`)
    }
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ N8N API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤
   */
  async testN8nApiEndpoints() {
    const endpoints = [
      { method: 'GET', path: '/api/n8n/workflows', expectedStatus: 200 },
      { method: 'GET', path: '/api/n8n/health', expectedStatus: 200 },
    ]

    const results = []

    for (const endpoint of endpoints) {
      const response = await this.aiServerClient.request({
        method: endpoint.method,
        url: endpoint.path,
      })

      if (response.status !== endpoint.expectedStatus) {
        throw new Error(
          `–≠–Ω–¥–ø–æ–∏–Ω—Ç ${endpoint.path} –≤–µ—Ä–Ω—É–ª ${response.status}, –æ–∂–∏–¥–∞–ª—Å—è ${endpoint.expectedStatus}`
        )
      }

      results.push({
        endpoint: endpoint.path,
        status: response.status,
        success: response.data.success,
      })
    }

    return results
  }

  /**
   * –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è workflow'–∞
   */
  async testWorkflowCreation() {
    const testWorkflow = {
      name: 'Test Workflow Created by Integration Test',
      nodes: [
        {
          id: 'start',
          name: 'Start',
          type: 'n8n-nodes-base.start',
          position: [240, 300],
          parameters: {},
        },
        {
          id: 'webhook',
          name: 'Webhook',
          type: 'n8n-nodes-base.webhook',
          position: [460, 300],
          parameters: {
            httpMethod: 'POST',
            path: 'test-integration',
          },
        },
      ],
      connections: {
        Start: {
          main: [
            [
              {
                node: 'Webhook',
                type: 'main',
                index: 0,
              },
            ],
          ],
        },
      },
      active: false,
    }

    const response = await this.aiServerClient.post(
      '/api/n8n/workflows',
      testWorkflow
    )

    if (!response.data.success) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π workflow')
    }

    return {
      workflowId: response.data.data.id,
      workflowName: response.data.data.name,
    }
  }

  /**
   * –¢–µ—Å—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è workflow'–∞
   */
  async testWorkflowExecution() {
    const testData = {
      message: 'Test message from integration test',
      timestamp: new Date().toISOString(),
      testId: Math.random().toString(36).substring(7),
    }

    try {
      const response = await axios.post(
        `${config.n8nUrl}/webhook/test-integration`,
        testData,
        {
          timeout: 10000,
        }
      )

      return {
        webhookResponse: response.status,
        executionSuccess: true,
        responseData: response.data,
      }
    } catch (error) {
      // –≠—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ, –µ—Å–ª–∏ webhook –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
      return {
        webhookResponse: error.response?.status || 'no_response',
        executionSuccess: false,
        note: 'Webhook –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞',
      }
    }
  }

  /**
   * –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Instagram API
   */
  async testInstagramIntegration() {
    const testData = {
      username: 'test_instagram_user',
      source: 'n8n_integration_test',
    }

    try {
      const response = await this.aiServerClient.post(
        '/api/inngest/instagram-scraper',
        testData,
        {
          headers: {
            'Content-Type': 'application/json',
          },
        }
      )

      return {
        apiResponse: response.status,
        success: response.data.success || false,
        message: response.data.message || 'No message',
      }
    } catch (error) {
      // Instagram API –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      return {
        apiResponse: error.response?.status || 'error',
        success: false,
        note: 'Instagram API –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
      }
    }
  }

  /**
   * –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Generation API
   */
  async testGenerationIntegration() {
    const testData = {
      prompt: 'Test image generation from N8N integration',
      model: 'flux-schnell',
      aspect_ratio: '1:1',
      source: 'n8n_integration_test',
    }

    try {
      const response = await this.aiServerClient.post(
        '/api/generation/neuro-image',
        testData,
        {
          headers: {
            'Content-Type': 'application/json',
          },
        }
      )

      return {
        apiResponse: response.status,
        success: response.data.success || false,
        message: response.data.message || 'No message',
      }
    } catch (error) {
      return {
        apiResponse: error.response?.status || 'error',
        success: false,
        error: error.message,
        note: 'Generation API –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–ª–∏ API –∫–ª—é—á–µ–π',
      }
    }
  }

  /**
   * –í—ã–≤–æ–¥ —Å–≤–æ–¥–∫–∏ —Ç–µ—Å—Ç–æ–≤
   */
  printTestSummary(results) {
    console.log('\\n' + '='.repeat(60))
    console.log('üìä –°–í–û–î–ö–ê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø N8N –ò–ù–¢–ï–ì–†–ê–¶–ò–ò')
    console.log('='.repeat(60))

    const passed = results.filter(r => r.status === 'PASSED').length
    const failed = results.filter(r => r.status === 'FAILED').length
    const total = results.length

    console.log(`\\nüìà –û–±—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:`)
    console.log(`   ‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${passed}/${total}`)
    console.log(`   ‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ: ${failed}/${total}`)
    console.log(`   üìä –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${Math.round((passed / total) * 100)}%`)

    console.log('\\nüìã –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:')
    results.forEach((result, index) => {
      const icon = result.status === 'PASSED' ? '‚úÖ' : '‚ùå'
      const duration = result.duration ? ` (${result.duration}ms)` : ''
      console.log(`   ${index + 1}. ${icon} ${result.name}${duration}`)

      if (result.status === 'FAILED' && result.error) {
        console.log(`      ‚îî‚îÄ –û—à–∏–±–∫–∞: ${result.error}`)
      }
    })

    console.log('\\nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ:')
    console.log('   1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ N8N –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5678')
    console.log('   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ AI Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 3000')
    console.log('   3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è API –∫–ª—é—á–µ–π')
    console.log('   4. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker-compose up -d –¥–ª—è –ø–æ–ª–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')

    console.log('\\n='.repeat(60))
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
async function main() {
  const tester = new N8nIntegrationTester()

  try {
    await tester.runTests()
  } catch (error) {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error.message)
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main()
}

module.exports = N8nIntegrationTester
