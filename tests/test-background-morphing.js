/**
 * üöÄ –¢–µ—Å—Ç Background Morphing Processor
 * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Inngest
 */

const FormData = require('form-data')
const fs = require('fs')
const axios = require('axios')
const path = require('path')

const API_BASE_URL =
  process.env.NODE_ENV === 'production'
    ? 'https://ai-server-u14194.vm.elestio.app'
    : 'http://localhost:4000'

async function testBackgroundMorphing() {
  console.log('üöÄ === –¢–ï–°–¢ BACKGROUND MORPHING PROCESSOR ===')

  try {
    // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π ZIP —Å 5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
    console.log('üì¶ –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π ZIP –∞—Ä—Ö–∏–≤...')
    const testZipPath = './test-background-morphing.zip'

    const AdmZip = require('adm-zip')
    const zip = new AdmZip()

    // –î–æ–±–∞–≤–ª—è–µ–º 5 —Ç–µ—Å—Ç–æ–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    for (let i = 1; i <= 5; i++) {
      const paddedIndex = i.toString().padStart(3, '0')
      zip.addFile(
        `morphing_image_${paddedIndex}.jpg`,
        Buffer.from(`Test image ${i} content for background processor`)
      )
    }

    zip.writeZip(testZipPath)
    console.log('‚úÖ ZIP —Å–æ–∑–¥–∞–Ω —Å 5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏')

    // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –Ω–æ–≤–æ–º—É API
    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ background morphing API...')

    const form = new FormData()
    form.append('type', 'morphing')
    form.append('telegram_id', '144022504')
    form.append('image_count', '5')
    form.append('morphing_type', 'seamless')
    form.append('model', 'kling-v1.6-pro')
    form.append('is_ru', 'true')
    form.append('bot_name', 'neuro_blogger_bot')
    form.append('username', 'telegram_bot')
    form.append('images_zip', fs.createReadStream(testZipPath))

    const response = await axios.post(
      `${API_BASE_URL}/generate/morph-images`,
      form,
      {
        headers: {
          ...form.getHeaders(),
          'User-Agent': 'background-morphing-test/1.0',
        },
        timeout: 30000,
      }
    )

    console.log('‚úÖ API Response:', response.status, response.statusText)
    console.log('üìã Response Data:', JSON.stringify(response.data, null, 2))

    if (response.data.job_id) {
      const jobId = response.data.job_id

      console.log(`\nüîç === –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–ê–î–ê–ù–ò–Ø ${jobId} ===`)

      // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º API –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      await testJobMonitoring(jobId)

      // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('\nüìä === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ===')
      const userJobsResponse = await axios.get(
        `${API_BASE_URL}/generate/morph-jobs/user/144022504`,
        {
          timeout: 10000,
        }
      )

      console.log(
        'üìä User Jobs:',
        JSON.stringify(userJobsResponse.data, null, 2)
      )

      // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏
      console.log('\nüìä === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ß–ï–†–ï–î–ò ===')
      const queueStatsResponse = await axios.get(
        `${API_BASE_URL}/generate/morph-queue/stats`,
        {
          timeout: 10000,
        }
      )

      console.log(
        'üìä Queue Stats:',
        JSON.stringify(queueStatsResponse.data, null, 2)
      )
    }

    // –û—á–∏—Å—Ç–∫–∞
    if (fs.existsSync(testZipPath)) {
      fs.unlinkSync(testZipPath)
      console.log('üßπ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω')
    }

    console.log(`\nüéØ === –ö–õ–Æ–ß–ï–í–´–ï –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –ù–û–í–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´ ===`)
    console.log(`‚úÖ –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–±—ã–ª–æ: 2 —á–∞—Å–∞ max)`)
    console.log(`‚úÖ –ù–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–±—ã–ª–æ: 6 max)`)
    console.log(`‚úÖ –ü–æ–ª–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —á–µ—Ä–µ–∑ API`)
    console.log(`‚úÖ –§–æ–Ω–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏`)
    console.log(`‚úÖ –£—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ —Å–±–æ—è–º —Å–µ—Ä–≤–µ—Ä–∞`)
    console.log(`‚úÖ –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å Redis/PostgreSQL)`)
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', {
      message: error.message,
      status: error.response?.status,
      statusText: error.response?.statusText,
      data: error.response?.data,
    })

    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω')
      console.log('–ó–∞–ø—É—Å—Ç–∏: bun run dev')
    }
  }
}

async function testJobMonitoring(jobId) {
  console.log(`üìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–¥–∞–Ω–∏—è: ${jobId}`)

  try {
    const statusResponse = await axios.get(
      `${API_BASE_URL}/generate/morph-jobs/${jobId}/status`,
      {
        timeout: 10000,
      }
    )

    console.log('üìä Job Status:', JSON.stringify(statusResponse.data, null, 2))

    console.log(`\nüí° === –û–ë–™–Ø–°–ù–ï–ù–ò–ï –°–¢–ê–¢–£–°–û–í ===`)
    console.log(`üìù pending: –ó–∞–¥–∞–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥–∏, –æ–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏`)
    console.log(`‚ö° processing: –ê–∫—Ç–∏–≤–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è (—Å–æ–∑–¥–∞—é—Ç—Å—è –ø–∞—Ä—ã –≤–∏–¥–µ–æ)`)
    console.log(`‚úÖ completed: –£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –≤–∏–¥–µ–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ`)
    console.log(`‚ùå failed: –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞`)

    console.log(`\nüìä === –ü–†–û–ì–†–ï–°–° –¢–†–ï–ö–ò–ù–ì ===`)
    console.log(`üé¨ completed_pairs / total_pairs = –ø—Ä–æ—Ü–µ–Ω—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏`)
    console.log(
      `‚è±Ô∏è estimated_remaining_minutes = –ø—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è`
    )
    console.log(`üéØ current_pair = –∫–∞–∫–∞—è –ø–∞—Ä–∞ —Å–µ–π—á–∞—Å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è`)
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error.message)
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testBackgroundMorphing()
    .then(() =>
      console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ background processor –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
    )
    .catch(console.error)
}
