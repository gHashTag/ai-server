#!/usr/bin/env node

/**
 * –¢–ï–°–¢ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–• ENDPOINTS –ò –§–û–†–ú–ê–¢–û–í
 * –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã API, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å —Ä–∞–Ω–µ–µ
 */

const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '.env') });

console.log('üî¨ –¢–ï–°–¢ –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–• ENDPOINTS');
console.log('=' .repeat(50));

const apiKey = process.env.KIE_AI_API_KEY;
console.log(`üîë API Key: ${apiKey}`);

// –†–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã endpoints –∏ —Ñ–æ—Ä–º–∞—Ç–æ–≤
const testCases = [
  {
    name: '1. –¢–µ–∫—É—â–∏–π —Ñ–æ—Ä–º–∞—Ç /veo/generate',
    url: 'https://api.kie.ai/api/v1/veo/generate',
    payload: {
      model: 'veo3',
      prompt: 'A red rose, 2 seconds',
      duration: 2,
      aspect_ratio: '16:9'
    }
  },
  {
    name: '2. –ë–µ–∑ aspect_ratio',
    url: 'https://api.kie.ai/api/v1/veo/generate',
    payload: {
      model: 'veo3',
      prompt: 'A red rose, 2 seconds', 
      duration: 2
    }
  },
  {
    name: '3. –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç —Å resolution',
    url: 'https://api.kie.ai/api/v1/veo/generate',
    payload: {
      model: 'veo3',
      prompt: 'A red rose, 2 seconds',
      duration: 2,
      resolution: '1280x720'
    }
  },
  {
    name: '4. –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤',
    url: 'https://api.kie.ai/api/v1/veo/generate',
    payload: {
      model: 'veo3',
      prompt: 'A red rose blooming',
      duration: 2,
      aspect_ratio: '16:9',
      resolution: '1280x720',
      quality: 'high'
    }
  },
  {
    name: '5. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π endpoint /video/generate',
    url: 'https://api.kie.ai/api/v1/video/generate',
    payload: {
      model: 'veo3',
      prompt: 'A red rose, 2 seconds',
      duration: 2
    }
  },
  {
    name: '6. –î—Ä—É–≥–æ–π model name - veo-3',
    url: 'https://api.kie.ai/api/v1/veo/generate',
    payload: {
      model: 'veo-3',
      prompt: 'A red rose, 2 seconds',
      duration: 2,
      aspect_ratio: '16:9'
    }
  },
  {
    name: '7. Model: veo3-fast',
    url: 'https://api.kie.ai/api/v1/veo/generate',
    payload: {
      model: 'veo3-fast',
      prompt: 'A red rose, 2 seconds',
      duration: 2,
      aspect_ratio: '16:9'
    }
  }
];

async function testEndpoint(testCase) {
  console.log(`\n${testCase.name}:`);
  console.log('-'.repeat(40));
  console.log('URL:', testCase.url);
  console.log('Payload:', JSON.stringify(testCase.payload, null, 2));

  try {
    const response = await fetch(testCase.url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`,
        'Accept': 'application/json'
      },
      body: JSON.stringify(testCase.payload)
    });

    console.log(`Status: ${response.status} ${response.statusText}`);
    
    const responseText = await response.text();
    console.log(`Response: ${responseText}`);
    
    try {
      const jsonResponse = JSON.parse(responseText);
      
      if (jsonResponse.request_id) {
        console.log(`üéâ –£–°–ü–ï–•! Request ID: ${jsonResponse.request_id}`);
        return { success: true, requestId: jsonResponse.request_id };
      } else if (jsonResponse.code !== 402) {
        console.log(`ü§î –î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: ${jsonResponse.code} - ${jsonResponse.msg}`);
      } else {
        console.log(`‚ùå –í—Å–µ —Ç–∞ –∂–µ –æ—à–∏–±–∫–∞ 402`);
      }
    } catch (e) {
      console.log('‚ùå –ù–µ JSON –æ—Ç–≤–µ—Ç');
    }

    return { success: false };

  } catch (error) {
    console.log(`‚ùå Network error: ${error.message}`);
    return { success: false };
  }
}

// –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º –±–∞–ª–∞–Ω—Å —á–µ—Ä–µ–∑ –¥—Ä—É–≥–æ–π endpoint
async function checkBalance() {
  console.log('\nüí∞ –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê –ß–ï–†–ï–ó –†–ê–ó–ù–´–ï ENDPOINTS:');
  console.log('=' .repeat(50));
  
  const balanceEndpoints = [
    'https://api.kie.ai/api/v1/balance',
    'https://api.kie.ai/api/v1/credits',
    'https://api.kie.ai/api/v1/user/balance',
    'https://api.kie.ai/api/v1/account/credits',
    'https://api.kie.ai/api/v1/chat/credit'
  ];

  for (const endpoint of balanceEndpoints) {
    console.log(`\nüîç –ü—Ä–æ–±—É–µ–º: ${endpoint}`);
    
    try {
      const response = await fetch(endpoint, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Accept': 'application/json'
        }
      });

      console.log(`Status: ${response.status}`);
      const text = await response.text();
      console.log(`Response: ${text}`);
      
      if (response.status === 200) {
        try {
          const json = JSON.parse(text);
          console.log(`‚úÖ –ù–ê–ô–î–ï–ù –†–ê–ë–û–ß–ò–ô ENDPOINT!`);
          console.log(`–ë–∞–ª–∞–Ω—Å:`, JSON.stringify(json, null, 2));
        } catch (e) {
          // ignore
        }
      }
      
    } catch (error) {
      console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    }
  }
}

async function runAllTests() {
  console.log('üöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –í–ê–†–ò–ê–ù–¢–û–í...\n');
  
  let successfulTests = [];
  
  for (const testCase of testCases) {
    const result = await testEndpoint(testCase);
    if (result.success) {
      successfulTests.push({ ...testCase, requestId: result.requestId });
    }
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 1000));
  }
  
  await checkBalance();
  
  console.log('\n' + '='.repeat(60));
  console.log('üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:');
  console.log('='.repeat(60));
  
  if (successfulTests.length > 0) {
    console.log(`‚úÖ –ù–ê–ô–î–ï–ù–û ${successfulTests.length} –†–ê–ë–û–ß–ò–• –í–ê–†–ò–ê–ù–¢–û–í:`);
    successfulTests.forEach((test, index) => {
      console.log(`${index + 1}. ${test.name}`);
      console.log(`   Request ID: ${test.requestId}`);
      console.log(`   Payload:`, JSON.stringify(test.payload, null, 1));
    });
  } else {
    console.log('‚ùå –ù–ò –û–î–ò–ù –í–ê–†–ò–ê–ù–¢ –ù–ï –°–†–ê–ë–û–¢–ê–õ');
    console.log('ü§î –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
    console.log('- API –∫–ª—é—á –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –¥—Ä—É–≥–æ–º—É –∞–∫–∫–∞—É–Ω—Ç—É');
    console.log('- –ò–∑–º–µ–Ω–∏–ª—Å—è —Ñ–æ—Ä–º–∞—Ç API');
    console.log('- –ù—É–∂–Ω—ã –¥—Ä—É–≥–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    console.log('- –ö—Ä–µ–¥–∏—Ç—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã');
  }
}

runAllTests().catch(console.error);