#!/usr/bin/env node

/**
 * –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò KIE.AI –° –ù–ê–®–ò–ú–ò –°–ï–†–í–ò–°–ê–ú–ò
 * 
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç:
 * 1. KieAiService –∫–ª–∞—Å—Å
 * 2. processVideoGeneration —Ñ—É–Ω–∫—Ü–∏—é  
 * 3. –í—ã–±–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ø–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
 * 4. –ü–µ—Ä–µ–¥–∞—á—É duration —á–µ—Ä–µ–∑ –≤—Å—é —Ü–µ–ø–æ—á–∫—É
 */

require('dotenv').config();

// –ò–º–ø–æ—Ä—Ç —á–µ—Ä–µ–∑ require —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–æ –±–µ–∑ —Å–±–æ—Ä–∫–∏ TypeScript
const path = require('path');

console.log('üîß –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò KIE.AI –° –°–ï–†–í–ò–°–ê–ú–ò\n');

async function testKieAiServiceClass() {
  console.log('üì¶ 1. –¢–ï–°–¢ –ö–õ–ê–°–°–ê KieAiService');
  console.log('=' * 50);
  
  try {
    // –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ KieAiService
    console.log('‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ KieAiService...');
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const fs = require('fs');
    const servicePath = path.join(__dirname, 'src/services/kieAiService.ts');
    
    if (fs.existsSync(servicePath)) {
      console.log('‚úÖ –§–∞–π–ª kieAiService.ts –Ω–∞–π–¥–µ–Ω');
      
      // –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤
      const content = fs.readFileSync(servicePath, 'utf8');
      
      const methods = [
        'checkHealth',
        'getAccountBalance', 
        'generateVideo',
        'calculateCost',
        'KIE_AI_MODELS'
      ];
      
      methods.forEach(method => {
        if (content.includes(method)) {
          console.log(`   ‚úÖ –ú–µ—Ç–æ–¥ ${method} –Ω–∞–π–¥–µ–Ω`);
        } else {
          console.log(`   ‚ùå –ú–µ—Ç–æ–¥ ${method} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
        }
      });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –º–æ–¥–µ–ª–µ–π –≤ —Ñ–∞–π–ª–µ
      if (content.includes('veo-3-fast') && content.includes('0.05')) {
        console.log('   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Veo-3 Fast –Ω–∞–π–¥–µ–Ω–∞ ($0.05/—Å–µ–∫)');
      }
      
      if (content.includes('veo-3') && content.includes('0.25')) {
        console.log('   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Veo-3 –Ω–∞–π–¥–µ–Ω–∞ ($0.25/—Å–µ–∫)');
      }
      
    } else {
      console.log('‚ùå –§–∞–π–ª kieAiService.ts –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return false;
    }
    
    return true;
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ KieAiService:', error.message);
    return false;
  }
}

async function testProcessVideoGenerationIntegration() {
  console.log('\n‚öôÔ∏è 2. –¢–ï–°–¢ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò processVideoGeneration');
  console.log('=' * 50);
  
  try {
    const fs = require('fs');
    const servicePath = path.join(__dirname, 'src/services/generateTextToVideo.ts');
    
    if (!fs.existsSync(servicePath)) {
      console.log('‚ùå –§–∞–π–ª generateTextToVideo.ts –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return false;
    }
    
    const content = fs.readFileSync(servicePath, 'utf8');
    
    console.log('‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ processVideoGeneration...');
    
    // –ö–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    const checks = [
      { item: 'KieAiService', text: 'import { KieAiService }', description: '–ò–º–ø–æ—Ä—Ç KieAiService' },
      { item: 'type check', text: "providerType === 'kie-ai'", description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞' },
      { item: 'fallback', text: 'processVertexAI', description: 'Fallback —Ñ—É–Ω–∫—Ü–∏—è' },
      { item: 'duration param', text: 'duration:', description: '–ü–µ—Ä–µ–¥–∞—á–∞ duration' },
      { item: 'health check', text: 'checkHealth', description: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API' },
    ];
    
    checks.forEach(check => {
      if (content.includes(check.text)) {
        console.log(`   ‚úÖ ${check.description} –Ω–∞–π–¥–µ–Ω–∞`);
      } else {
        console.log(`   ‚ùå ${check.description} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç`);
      }
    });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    if (content.includes('Using Kie.ai for') && content.includes('cheaper than Vertex AI')) {
      console.log('   ‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–∫–æ–Ω–æ–º–∏–∏ –Ω–∞–π–¥–µ–Ω–æ');
    }
    
    return true;
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:', error.message);
    return false;
  }
}

async function testModelsConfiguration() {
  console.log('\nüìã 3. –¢–ï–°–¢ –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò –ú–û–î–ï–õ–ï–ô');
  console.log('=' * 50);
  
  try {
    const fs = require('fs');
    const configPath = path.join(__dirname, 'src/config/models.config.ts');
    
    if (!fs.existsSync(configPath)) {
      console.log('‚ùå –§–∞–π–ª models.config.ts –Ω–µ –Ω–∞–π–¥–µ–Ω');
      return false;
    }
    
    const content = fs.readFileSync(configPath, 'utf8');
    
    console.log('‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –º–æ–¥–µ–ª–µ–π...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Veo –º–æ–¥–µ–ª–µ–π
    const veoModels = ['veo-3-fast', 'veo-3'];
    
    veoModels.forEach(model => {
      console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏ ${model}:`);
      
      if (content.includes(`'${model}':`)) {
        console.log(`   ‚úÖ –ú–æ–¥–µ–ª—å ${model} –Ω–∞–π–¥–µ–Ω–∞`);
        
        // –ò—â–µ–º —Å–µ–∫—Ü–∏—é —Å —ç—Ç–æ–π –º–æ–¥–µ–ª—å—é
        const modelStart = content.indexOf(`'${model}': {`);
        const modelEnd = content.indexOf('},', modelStart);
        const modelSection = content.substring(modelStart, modelEnd + 2);
        
        if (modelSection.includes("type: 'kie-ai'")) {
          console.log('   ‚úÖ –¢–∏–ø kie-ai —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
        } else {
          console.log('   ‚ùå –¢–∏–ø kie-ai –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
        
        if (modelSection.includes('pricePerSecond')) {
          console.log('   ‚úÖ –¶–µ–Ω–∞ –∑–∞ —Å–µ–∫—É–Ω–¥—É —É–∫–∞–∑–∞–Ω–∞');
        }
        
        if (modelSection.includes('supportedDurations')) {
          console.log('   ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É–∫–∞–∑–∞–Ω—ã');  
        }
        
      } else {
        console.log(`   ‚ùå –ú–æ–¥–µ–ª—å ${model} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      }
    });
    
    return true;
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:', error.message);
    return false;
  }
}

async function testDurationParameterFlow() {
  console.log('\n‚è±Ô∏è  4. –¢–ï–°–¢ –ü–ï–†–ï–î–ê–ß–ò DURATION –ü–ê–†–ê–ú–ï–¢–†–ê');
  console.log('=' * 50);
  
  try {
    const fs = require('fs');
    
    // –§–∞–π–ª—ã –≤ —Ü–µ–ø–æ—á–∫–µ –ø–µ—Ä–µ–¥–∞—á–∏ duration
    const files = [
      { 
        path: 'src/controllers/generation.controller.ts',
        checks: ['duration', 'generateTextToVideo'],
        description: 'Controller –ø–æ–ª—É—á–∞–µ—Ç –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç duration'
      },
      {
        path: 'src/services/generateTextToVideo.ts', 
        checks: ['duration: number', 'processVideoGeneration'],
        description: 'Service –ø—Ä–∏–Ω–∏–º–∞–µ—Ç duration –ø–∞—Ä–∞–º–µ—Ç—Ä'
      },
      {
        path: 'src/services/vertexVeoService.ts',
        checks: ['duration?:', 'VeoGenerationOptions'],
        description: 'VertexVeo –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç duration'
      }
    ];
    
    files.forEach(file => {
      console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ${file.description}:`);
      
      const filePath = path.join(__dirname, file.path);
      
      if (fs.existsSync(filePath)) {
        console.log(`   ‚úÖ –§–∞–π–ª –Ω–∞–π–¥–µ–Ω: ${file.path}`);
        
        const content = fs.readFileSync(filePath, 'utf8');
        
        file.checks.forEach(check => {
          if (content.includes(check)) {
            console.log(`   ‚úÖ –ù–∞–π–¥–µ–Ω–æ: ${check}`);
          } else {
            console.log(`   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: ${check}`);
          }
        });
        
      } else {
        console.log(`   ‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${file.path}`);
      }
    });
    
    return true;
    
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ flow:', error.message);
    return false;
  }
}

async function testEnvironmentSetup() {
  console.log('\nüåç 5. –¢–ï–°–¢ –ù–ê–°–¢–†–û–ô–ö–ò –û–ö–†–£–ñ–ï–ù–ò–Ø');
  console.log('=' * 50);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º environment variables
  const envVars = [
    { name: 'KIE_AI_API_KEY', required: true, description: '–ö–ª—é—á Kie.ai API' },
    { name: 'GOOGLE_CLOUD_PROJECT', required: false, description: '–ü—Ä–æ–µ–∫—Ç Google Cloud (–¥–ª—è fallback)' }
  ];
  
  console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ environment variables:');
  
  envVars.forEach(envVar => {
    const value = process.env[envVar.name];
    
    if (value) {
      console.log(`   ‚úÖ ${envVar.name}: –Ω–∞—Å—Ç—Ä–æ–µ–Ω`);
      
      if (envVar.name === 'KIE_AI_API_KEY') {
        console.log(`      üîë –ö–ª—é—á: ${value.substring(0, 20)}...`);
      }
    } else {
      console.log(`   ${envVar.required ? '‚ùå' : '‚ö†Ô∏è'} ${envVar.name}: ${envVar.required ? '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '–Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);
      console.log(`      üí° ${envVar.description}`);
    }
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º production template
  const fs = require('fs');
  const templatePath = path.join(__dirname, 'production-env-template.txt');
  
  console.log('\nüìÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ production template:');
  
  if (fs.existsSync(templatePath)) {
    console.log('   ‚úÖ production-env-template.txt –Ω–∞–π–¥–µ–Ω');
    
    const content = fs.readFileSync(templatePath, 'utf8');
    
    if (content.includes('KIE_AI_API_KEY')) {
      console.log('   ‚úÖ KIE_AI_API_KEY –¥–æ–±–∞–≤–ª–µ–Ω –≤ template');
    } else {
      console.log('   ‚ùå KIE_AI_API_KEY –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ template');
    }
    
    if (content.includes('—ç–∫–æ–Ω–æ–º–∏—è') || content.includes('–¥–µ—à–µ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è')) {
      console.log('   ‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–± —ç–∫–æ–Ω–æ–º–∏–∏ –Ω–∞–π–¥–µ–Ω');
    }
    
  } else {
    console.log('   ‚ùå production-env-template.txt –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }
}

async function main() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Kie.ai...\n');
  
  try {
    const results = {
      serviceClass: await testKieAiServiceClass(),
      integration: await testProcessVideoGenerationIntegration(), 
      config: await testModelsConfiguration(),
      durationFlow: await testDurationParameterFlow(),
      environment: await testEnvironmentSetup()
    };
    
    console.log('\nüéØ –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:');
    console.log('=' * 50);
    
    Object.entries(results).forEach(([test, result]) => {
      const status = result === true ? '‚úÖ' : result === false ? '‚ùå' : '‚ö†Ô∏è';
      const testNames = {
        serviceClass: 'KieAiService –∫–ª–∞—Å—Å',
        integration: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å processVideoGeneration', 
        config: '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π',
        durationFlow: '–ü–µ—Ä–µ–¥–∞—á–∞ Duration –ø–∞—Ä–∞–º–µ—Ç—Ä–∞',
        environment: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è'
      };
      
      console.log(`${status} ${testNames[test]}: ${typeof result === 'boolean' ? (result ? '–ü–†–û–ô–î–ï–ù' : '–ü–†–û–í–ê–õ–ï–ù') : '–í–´–ü–û–õ–ù–ï–ù'}`);
    });
    
    const passedTests = Object.values(results).filter(r => r === true).length;
    const totalTests = Object.keys(results).length;
    
    console.log(`\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç: ${passedTests}/${totalTests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ`);
    
    if (passedTests === totalTests) {
      console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –ü–†–û–ô–î–ï–ù–´!');
      console.log('‚úÖ Kie.ai –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
    } else {
      console.log('‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π');
      console.log('üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—ã–≤–æ–¥ —Ç–µ—Å—Ç–æ–≤ –≤—ã—à–µ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è');
    }
    
    console.log('\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
    console.log('1. –î–æ–±–∞–≤—å—Ç–µ KIE_AI_API_KEY –≤ .env —Ñ–∞–π–ª');
    console.log('2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ test-real-kie-ai-api.js –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API');
    console.log('3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ä–µ–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ');
    console.log('4. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ "2 —Å–µ–∫—É–Ω–¥—ã" ‚Üí –∏–º–µ–Ω–Ω–æ 2 —Å–µ–∫—É–Ω–¥—ã');
    
  } catch (error) {
    console.error('\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:', error.message);
    console.error(error.stack);
  }
}

if (require.main === module) {
  main();
}