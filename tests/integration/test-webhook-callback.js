#!/usr/bin/env node
/**
 * üîó –¢–µ—Å—Ç Webhook Callback —Å–∏—Å—Ç–µ–º—ã –¥–ª—è Kie.ai
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ callback endpoint –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ
 */

const axios = require('axios')

const TEST_CONFIG = {
  API_URL: 'https://ai-server-production-production-8e2d.up.railway.app',
  CALLBACK_ENDPOINT: '/api/kie-ai/callback',
  
  // Mock –¥–∞–Ω–Ω—ã–µ –æ—Ç Kie.ai callback
  MOCK_CALLBACK_PAYLOAD: {
    taskId: 'test_callback_' + Date.now(),
    status: 'completed',
    videoUrl: 'https://test-video-url.com/video.mp4',
    duration: 5,
    cost: 0.25,
    model: 'veo3_fast',
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ—Ç Kie.ai
    createdAt: new Date().toISOString(),
    completedAt: new Date().toISOString(),
    processingTime: 45000,
    quality: 'high',
    aspectRatio: '9:16'
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å callback endpoint
 */
async function testCallbackEndpointHealth() {
  console.log('üè• –ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å callback endpoint...')
  
  try {
    const response = await axios.get(
      `${TEST_CONFIG.API_URL}${TEST_CONFIG.CALLBACK_ENDPOINT}/health`,
      { timeout: 10000 }
    )
    
    console.log('‚úÖ Callback endpoint –¥–æ—Å—Ç—É–ø–µ–Ω')
    console.log('üìä Health Response:', response.data)
    return true
    
  } catch (error) {
    console.error('‚ùå Callback endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message)
    console.error('üîç URL:', `${TEST_CONFIG.API_URL}${TEST_CONFIG.CALLBACK_ENDPOINT}/health`)
    
    if (error.response) {
      console.error('üìä Status:', error.response.status)
      console.error('üìã Data:', error.response.data)
    }
    
    return false
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π callback –æ—Ç –∏–º–µ–Ω–∏ Kie.ai
 */
async function testCallbackProcessing() {
  console.log('\nüìû –¢–µ—Å—Ç–∏—Ä—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É callback –æ—Ç Kie.ai...')
  
  const payload = TEST_CONFIG.MOCK_CALLBACK_PAYLOAD
  
  console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é mock callback payload:')
  console.log(JSON.stringify(payload, null, 2))
  
  try {
    const startTime = Date.now()
    
    const response = await axios.post(
      `${TEST_CONFIG.API_URL}${TEST_CONFIG.CALLBACK_ENDPOINT}`,
      payload,
      {
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': 'Kie.ai-Webhook/1.0'
        },
        timeout: 15000
      }
    )
    
    const responseTime = Date.now() - startTime
    
    console.log(`‚úÖ Callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞ ${responseTime}ms`)
    console.log('üìä Status:', response.status)
    console.log('üìã Response:', response.data)
    
    return {
      success: true,
      status: response.status,
      data: response.data,
      responseTime
    }
    
  } catch (error) {
    const responseTime = Date.now() - startTime
    
    console.error(`‚ùå –û—à–∏–±–∫–∞ callback –∑–∞ ${responseTime}ms:`)
    console.error('üîç URL:', `${TEST_CONFIG.API_URL}${TEST_CONFIG.CALLBACK_ENDPOINT}`)
    
    if (error.response) {
      console.error('üìä Status:', error.response.status)
      console.error('üìã Response:', error.response.data)
    } else {
      console.error('üîå Error:', error.message)
    }
    
    return {
      success: false,
      error: error.message,
      status: error.response?.status,
      responseTime
    }
  }
}

/**
 * –¢–µ—Å—Ç —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏ callback
 */
async function testCallbackScenarios() {
  console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É—é —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ callback...')
  
  const scenarios = [
    {
      name: '–£—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è',
      payload: {
        ...TEST_CONFIG.MOCK_CALLBACK_PAYLOAD,
        status: 'completed'
      }
    },
    {
      name: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
      payload: {
        ...TEST_CONFIG.MOCK_CALLBACK_PAYLOAD,
        taskId: 'error_task_' + Date.now(),
        status: 'failed',
        error: 'Insufficient credits',
        videoUrl: null
      }
    },
    {
      name: 'Callback —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏',
      payload: {
        ...TEST_CONFIG.MOCK_CALLBACK_PAYLOAD,
        taskId: 'extra_data_task_' + Date.now(),
        telegram_id: '144022504',
        bot_name: 'neuro_blogger_bot',
        customMetadata: {
          originalPrompt: 'Test video generation',
          userAgent: 'Integration-Test'
        }
      }
    }
  ]
  
  const results = []
  
  for (let i = 0; i < scenarios.length; i++) {
    const scenario = scenarios[i]
    
    console.log(`\n${i + 1}. ${scenario.name}:`)
    console.log('üì§ Payload:', JSON.stringify(scenario.payload, null, 2))
    
    try {
      const response = await axios.post(
        `${TEST_CONFIG.API_URL}${TEST_CONFIG.CALLBACK_ENDPOINT}`,
        scenario.payload,
        {
          headers: {
            'Content-Type': 'application/json',
            'User-Agent': 'Kie.ai-Webhook-Test/1.0'
          },
          timeout: 10000
        }
      )
      
      console.log(`‚úÖ Scenario "${scenario.name}" - SUCCESS`)
      console.log('üìä Response:', response.data)
      
      results.push({
        name: scenario.name,
        success: true,
        status: response.status,
        data: response.data
      })
      
    } catch (error) {
      console.log(`‚ùå Scenario "${scenario.name}" - FAILED`)
      console.log('üìã Error:', error.response?.data || error.message)
      
      results.push({
        name: scenario.name,
        success: false,
        error: error.response?.data || error.message,
        status: error.response?.status
      })
    }
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏
    if (i < scenarios.length - 1) {
      console.log('‚è∏Ô∏è –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã...')
      await new Promise(resolve => setTimeout(resolve, 2000))
    }
  }
  
  return results
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∏—Ç—å callback URL –∫–æ—Ç–æ—Ä—ã–π –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è —Å–µ—Ä–≤–∏—Å–æ–º
 */
async function testCallbackUrlGeneration() {
  console.log('\nüîó –ü—Ä–æ–≤–µ—Ä—è—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é callback URL...')
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π endpoint –µ—Å–ª–∏ –µ—Å—Ç—å
  try {
    const response = await axios.get(
      `${TEST_CONFIG.API_URL}/api/kie-ai/callback/config`,
      { timeout: 5000 }
    )
    
    console.log('‚úÖ Callback URL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:')
    console.log(JSON.stringify(response.data, null, 2))
    
    return response.data
    
  } catch (error) {
    console.log('‚ÑπÔ∏è Config endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)')
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–∂–∏–¥–∞–µ–º—ã–π URL –≤—Ä—É—á–Ω—É—é
    const expectedCallbackUrl = `${TEST_CONFIG.API_URL}/api/kie-ai/callback`
    console.log('üìã –û–∂–∏–¥–∞–µ–º—ã–π callback URL:', expectedCallbackUrl)
    
    return {
      expectedUrl: expectedCallbackUrl,
      note: 'Generated from base URL'
    }
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
async function runCallbackTests() {
  console.log('üîó –¢–ï–°–¢ WEBHOOK CALLBACK –°–ò–°–¢–ï–ú–´ KIE.AI')
  console.log('=' .repeat(60))
  console.log(`üåê Base URL: ${TEST_CONFIG.API_URL}`)
  console.log(`üìû Callback Endpoint: ${TEST_CONFIG.CALLBACK_ENDPOINT}`)
  console.log('=' .repeat(60))
  
  const results = {
    healthCheck: false,
    basicCallback: false,
    scenarios: [],
    callbackConfig: null
  }
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ endpoint
    results.healthCheck = await testCallbackEndpointHealth()
    
    if (!results.healthCheck) {
      console.error('\n‚ùå Callback endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–µ–∫—Ä–∞—â–∞—é —Ç–µ—Å—Ç—ã')
      return results
    }
    
    // 2. –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback
    const basicResult = await testCallbackProcessing()
    results.basicCallback = basicResult.success
    
    // 3. –¢–µ—Å—Ç —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
    results.scenarios = await testCallbackScenarios()
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ callback URL
    results.callbackConfig = await testCallbackUrlGeneration()
    
    // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    console.log('\n' + '=' .repeat(60))
    console.log('üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø CALLBACK')
    console.log('=' .repeat(60))
    
    console.log(`üè• Health Check: ${results.healthCheck ? '‚úÖ OK' : '‚ùå FAILED'}`)
    console.log(`üìû Basic Callback: ${results.basicCallback ? '‚úÖ OK' : '‚ùå FAILED'}`)
    
    const successfulScenarios = results.scenarios.filter(s => s.success).length
    console.log(`üß™ Scenarios: ${successfulScenarios}/${results.scenarios.length} —É—Å–ø–µ—à–Ω–æ`)
    
    if (results.callbackConfig) {
      console.log('üîó Callback URL –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: ‚úÖ OK')
    }
    
    const overallSuccess = results.healthCheck && 
                          results.basicCallback && 
                          successfulScenarios >= results.scenarios.length * 0.8
    
    console.log(`\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: ${overallSuccess ? '‚úÖ –£–°–ü–ï–®–ù–û' : '‚ùå –¢–†–ï–ë–£–ï–¢–°–Ø –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï'}`)
    
    if (overallSuccess) {
      console.log('\nüéâ Callback —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!')
      console.log('üìã –ß—Ç–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–ª—å—à–µ:')
      console.log('   1. –£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ Kie.ai –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç —ç—Ç–æ—Ç URL')
      console.log('   2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–µ–∞–ª—å–Ω—ã—Ö callback –æ—Ç Kie.ai')
      console.log('   3. –£–±—Ä–∞—Ç—å timeout –∏–∑ kieAiService –¥–ª—è async —Ä–µ–∂–∏–º–∞')
    } else {
      console.log('\nüîß –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:')
      if (!results.healthCheck) console.log('   - –ü–æ—á–∏–Ω–∏—Ç—å callback endpoint')
      if (!results.basicCallback) console.log('   - –ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É callback')
      console.log('   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –æ—à–∏–±–∫–∏')
    }
    
    return results
    
  } catch (error) {
    console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message)
    return results
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  runCallbackTests()
    .then((results) => {
      const success = results.healthCheck && results.basicCallback
      console.log('\n' + (success ? '‚úÖ –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ' : '‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å callback —Å–∏—Å—Ç–µ–º–æ–π'))
      process.exit(success ? 0 : 1)
    })
    .catch(error => {
      console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
      process.exit(1)
    })
}

module.exports = {
  testCallbackEndpointHealth,
  testCallbackProcessing,
  testCallbackScenarios,
  TEST_CONFIG
}