/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
 */

const { inngest } = require('./dist/core/inngest/clients')

async function testCompetitorAutomation() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤...')

  try {
    // –¢–µ—Å—Ç 1: –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥–∞
    console.log('\n1Ô∏è‚É£ –¢–µ—Å—Ç —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∞–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥–∞...')

    const triggerResult = await inngest.send({
      name: 'competitor/trigger-auto-parse',
      data: {
        triggered_by: 'test',
        test_mode: true,
      },
    })

    console.log('‚úÖ –ê–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω:', triggerResult.ids[0])

    // –ñ–¥–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
    await new Promise(resolve => setTimeout(resolve, 5000))

    // –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –±–∞–∑–µ
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...')

    const { Pool } = require('pg')
    const dbPool = new Pool({
      connectionString: process.env.NEON_DATABASE_URL,
      ssl: { rejectUnauthorized: false },
    })

    const client = await dbPool.connect()

    try {
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
      const subscriptions = await client.query(`
        SELECT 
          cs.*,
          cp.display_name,
          cp.total_subscribers
        FROM competitor_subscriptions cs
        LEFT JOIN competitor_profiles cp ON cs.competitor_username = cp.username
        WHERE cs.is_active = true
        ORDER BY cs.created_at DESC
      `)

      console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫: ${subscriptions.rows.length}`)

      subscriptions.rows.forEach((sub, index) => {
        console.log(
          `   ${index + 1}. @${sub.competitor_username} -> User ${
            sub.user_telegram_id
          }`
        )
        console.log(`      ‚Ä¢ –§–æ—Ä–º–∞—Ç: ${sub.delivery_format}`)
        console.log(`      ‚Ä¢ –†–∏–ª—Å–æ–≤: –¥–æ ${sub.max_reels}`)
        console.log(`      ‚Ä¢ –ú–∏–Ω. –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${sub.min_views}`)
        console.log(
          `      ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥: ${sub.last_parsed_at || '–Ω–∏–∫–æ–≥–¥–∞'}`
        )
        console.log(
          `      ‚Ä¢ –°–ª–µ–¥—É—é—â–∏–π –ø–∞—Ä—Å–∏–Ω–≥: ${sub.next_parse_at || '–Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω'}`
        )
        console.log('')
      })

      // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
      const profiles = await client.query(`
        SELECT 
          username,
          display_name,
          total_subscribers,
          last_updated
        FROM competitor_profiles
        ORDER BY total_subscribers DESC
      `)

      console.log(`üë• –ü—Ä–æ—Ñ–∏–ª–µ–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤: ${profiles.rows.length}`)
      profiles.rows.forEach(profile => {
        console.log(
          `   ‚Ä¢ @${profile.username}: ${profile.total_subscribers} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤`
        )
      })

      // –ò—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç–∞–≤–æ–∫
      const deliveryHistory = await client.query(`
        SELECT 
          cdh.*,
          cs.competitor_username,
          cs.user_telegram_id
        FROM competitor_delivery_history cdh
        JOIN competitor_subscriptions cs ON cdh.subscription_id = cs.id
        ORDER BY cdh.delivered_at DESC
        LIMIT 5
      `)

      console.log(
        `\nüì¨ –ò—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç–∞–≤–æ–∫ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ ${deliveryHistory.rows.length}):`
      )
      if (deliveryHistory.rows.length === 0) {
        console.log('   –î–æ—Å—Ç–∞–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç')
      } else {
        deliveryHistory.rows.forEach((delivery, index) => {
          console.log(
            `   ${index + 1}. @${delivery.competitor_username} -> ${
              delivery.user_telegram_id
            }`
          )
          console.log(`      ‚Ä¢ –†–∏–ª—Å–æ–≤ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${delivery.reels_count}`)
          console.log(`      ‚Ä¢ –°—Ç–∞—Ç—É—Å: ${delivery.delivery_status}`)
          console.log(
            `      ‚Ä¢ –í—Ä–µ–º—è: ${new Date(delivery.delivered_at).toLocaleString(
              'ru-RU'
            )}`
          )
          if (delivery.error_message) {
            console.log(`      ‚Ä¢ –û—à–∏–±–∫–∞: ${delivery.error_message}`)
          }
          console.log('')
        })
      }
    } finally {
      client.release()
      await dbPool.end()
    }

    // –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã cron —Ñ—É–Ω–∫—Ü–∏–∏
    console.log('\n3Ô∏è‚É£ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ cron —Ñ—É–Ω–∫—Ü–∏–∏...')
    console.log('   ‚Ä¢ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 08:00 UTC (11:00 MSK)')
    console.log('   ‚Ä¢ –§—É–Ω–∫—Ü–∏—è: competitor-auto-parser')
    console.log('   ‚Ä¢ ID —Å–æ–±—ã—Ç–∏—è: competitor/trigger-auto-parse')
    console.log('   ‚Ä¢ –°–ª–µ–¥—É—é—â–∏–π –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫ –±—É–¥–µ—Ç —á–µ—Ä–µ–∑ Inngest cron')

    // –¢–µ—Å—Ç 4: API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã (–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ)
    console.log('\n4Ô∏è‚É£ –î–æ—Å—Ç—É–ø–Ω—ã–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:')
    console.log('   ‚Ä¢ GET    /api/competitor-subscriptions - —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫')
    console.log('   ‚Ä¢ POST   /api/competitor-subscriptions - —Å–æ–∑–¥–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
    console.log(
      '   ‚Ä¢ PUT    /api/competitor-subscriptions/:id - –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'
    )
    console.log(
      '   ‚Ä¢ DELETE /api/competitor-subscriptions/:id - —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'
    )
    console.log('   ‚Ä¢ GET    /api/competitor-subscriptions/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    console.log(
      '   ‚Ä¢ GET    /api/competitor-subscriptions/:id/history - –∏—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç–∞–≤–æ–∫'
    )

    console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')

    console.log('\nüéØ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ:')
    console.log('   1. Cron –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–µ 24 —á–∞—Å–∞')
    console.log('   2. –ü–∞—Ä—Å–∏—Ç –≤—Å–µ—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫')
    console.log('   3. –î–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º')
    console.log('   4. –í–µ–¥–µ—Ç –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π')
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message)
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
testCompetitorAutomation()
