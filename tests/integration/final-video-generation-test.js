#!/usr/bin/env node

/**
 * –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ì–ï–ù–ï–†–ê–¶–ò–ò –í–ò–î–ï–û 
 * 
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
 * ‚Ä¢ 2 —Å–µ–∫—É–Ω–¥—ã –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ (16:9) 
 * ‚Ä¢ 4 —Å–µ–∫—É–Ω–¥—ã –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ (9:16)
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏ endpoints
 */

const axios = require('axios');

console.log('üé¨ –§–ò–ù–ê–õ–¨–ù–ê–Ø –ì–ï–ù–ï–†–ê–¶–ò–Ø –†–ï–ê–õ–¨–ù–´–• –í–ò–î–ï–û\n');

class FinalVideoGenerator {
  constructor() {
    this.apiKey = 'f52f224a92970aa6b7c7780104a00f71';
    this.baseUrl = 'https://api.kie.ai/api/v1';
    this.generatedVideos = [];
  }

  async checkBalance() {
    console.log('üí∞ –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê');
    console.log('='.repeat(40));
    
    try {
      const response = await axios.get(`${this.baseUrl}/chat/credit`, {
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json'
        }
      });
      
      console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –ø—Ä–æ–≤–µ—Ä–µ–Ω —É—Å–ø–µ—à–Ω–æ');
      console.log(`üíé –î–æ—Å—Ç—É–ø–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤: ${response.data.data}`);
      return response.data.data > 0;
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞:', error.response?.data || error.message);
      return false;
    }
  }

  async generateVideo(config) {
    console.log(`\nüé• –ì–ï–ù–ï–†–ê–¶–ò–Ø: ${config.name}`);
    console.log('='.repeat(60));
    console.log(`üìã –ú–æ–¥–µ–ª—å: ${config.kieModel}`);
    console.log(`üìã Endpoint: ${config.endpoint}`);
    console.log(`üìã Prompt: ${config.prompt}`);
    console.log(`üìã Duration: ${config.duration}s`);
    console.log(`üìã Aspect Ratio: ${config.aspectRatio}`);
    
    try {
      const requestBody = {
        model: config.kieModel,
        prompt: config.prompt,
        duration: config.duration,
        aspectRatio: config.aspectRatio,
        ...(config.extraParams || {})
      };
      
      console.log('\n‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...');
      console.log('üì§ Request body:', JSON.stringify(requestBody, null, 2));
      
      const response = await axios.post(`${this.baseUrl}${config.endpoint}`, requestBody, {
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json'
        },
        timeout: 300000 // 5 –º–∏–Ω—É—Ç
      });
      
      console.log('üìä HTTP Status:', response.status);
      console.log('üìã Response:', JSON.stringify(response.data, null, 2));
      
      if (response.data.code === 200 && response.data.data?.taskId) {
        console.log(`üéâ –ó–ê–î–ê–ß–ê –°–û–ó–î–ê–ù–ê –£–°–ü–ï–®–ù–û!`);
        console.log(`üÜî Task ID: ${response.data.data.taskId}`);
        
        // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        const videoResult = await this.waitForVideoCompletion(response.data.data.taskId, config.endpoint);
        
        const result = {
          name: config.name,
          success: true,
          taskId: response.data.data.taskId,
          model: config.kieModel,
          endpoint: config.endpoint,
          requestParams: requestBody,
          videoUrl: videoResult.videoUrl,
          actualDuration: config.duration,
          cost: this.estimateCost(config.duration)
        };
        
        if (videoResult.videoUrl) {
          console.log(`\nüéä –í–ò–î–ï–û –ì–û–¢–û–í–û!`);
          console.log(`üîó URL: ${videoResult.videoUrl}`);
        }
        
        this.generatedVideos.push(result);
        return result;
        
      } else {
        console.log('‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ API:', response.data.msg);
        const errorResult = {
          name: config.name,
          success: false,
          error: response.data.msg,
          httpStatus: response.status
        };
        this.generatedVideos.push(errorResult);
        return errorResult;
      }
      
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
      
      if (error.response) {
        console.log('üìã HTTP Status:', error.response.status);
        console.log('üìã Error data:', JSON.stringify(error.response.data, null, 2));
      }
      
      const errorResult = {
        name: config.name,
        success: false,
        error: error.message,
        httpStatus: error.response?.status,
        errorData: error.response?.data
      };
      
      this.generatedVideos.push(errorResult);
      return errorResult;
    }
  }

  async waitForVideoCompletion(taskId, endpoint) {
    console.log(`\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ (Task ID: ${taskId})`);
    console.log('–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 1-3 –º–∏–Ω—É—Ç—ã...');
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–µ
    let infoEndpoint;
    if (endpoint === '/veo/generate') {
      infoEndpoint = '/veo/record-info';
    } else if (endpoint === '/runway/generate') {
      infoEndpoint = '/runway/record-info';
    } else {
      console.log('‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π endpoint, –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–ø–æ—Å–æ–±');
      return { videoUrl: null };
    }
    
    const maxAttempts = 60; // 10 –º–∏–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º (–∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥)
    let attempt = 0;
    
    while (attempt < maxAttempts) {
      try {
        console.log(`üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ (${attempt + 1}/${maxAttempts})...`);
        
        const response = await axios.get(`${this.baseUrl}${infoEndpoint}`, {
          params: { taskId },
          headers: {
            'Authorization': `Bearer ${this.apiKey}`,
            'Content-Type': 'application/json'
          },
          timeout: 30000
        });
        
        console.log('üìä Status check response:', JSON.stringify(response.data, null, 2));
        
        if (response.data.code === 200 && response.data.data) {
          const status = response.data.data.status;
          const videoUrl = response.data.data.videoUrl || response.data.data.url;
          
          if (status === 'completed' || status === 'success' || videoUrl) {
            console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
            return { videoUrl, status };
          } else if (status === 'failed' || status === 'error') {
            console.log('‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å:', response.data.data.error || 'Unknown error');
            return { videoUrl: null, error: response.data.data.error };
          } else {
            console.log(`‚è≥ –°—Ç–∞—Ç—É—Å: ${status}, –æ–∂–∏–¥–∞–µ–º...`);
          }
        }
        
      } catch (error) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt + 1}):`, error.response?.data || error.message);
      }
      
      // –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
      await new Promise(resolve => setTimeout(resolve, 10000));
      attempt++;
    }
    
    console.log('‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –í–∏–¥–µ–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—Å–µ –µ—â–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.');
    return { videoUrl: null, timeout: true };
  }

  estimateCost(duration) {
    // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è Veo3: $0.05/—Å–µ–∫
    return (duration * 0.05).toFixed(3);
  }

  async runFinalTests() {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...\n');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
    const hasBalance = await this.checkBalance();
    if (!hasBalance) {
      console.log('‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–µ–¥–∏—Ç–æ–≤! –¢–µ—Å—Ç—ã –º–æ–≥—É—Ç –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è –æ—à–∏–±–∫–æ–π.');
    }
    
    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const testConfigs = [
      {
        name: '2 –°–ï–ö–£–ù–î–´ –ì–û–†–ò–ó–û–ù–¢–ê–õ–¨–ù–û–ï (16:9) - –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        kieModel: 'veo3',
        endpoint: '/veo/generate',
        prompt: 'A beautiful cat playing with a red ball in a sunny garden, professional cinematography, high quality',
        duration: 2,
        aspectRatio: '16:9'
      },
      {
        name: '4 –°–ï–ö–£–ù–î–´ –í–ï–†–¢–ò–ö–ê–õ–¨–ù–û–ï (9:16) - –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        kieModel: 'veo3',
        endpoint: '/veo/generate', 
        prompt: 'A golden retriever dog running through colorful autumn leaves in slow motion, cinematic vertical video',
        duration: 4,
        aspectRatio: '9:16'
      }
    ];
    
    console.log(`üìã –ë—É–¥–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${testConfigs.length} –≤–∏–¥–µ–æ –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n`);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–µ –≤–∏–¥–µ–æ
    for (let i = 0; i < testConfigs.length; i++) {
      const config = testConfigs[i];
      console.log(`\nüìç –í–ò–î–ï–û ${i + 1}/${testConfigs.length}`);
      
      await this.generateVideo(config);
      
      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏
      if (i < testConfigs.length - 1) {
        console.log('\n‚è≥ –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π...');
        await new Promise(resolve => setTimeout(resolve, 5000));
      }
    }
  }

  printFinalSummary() {
    console.log('\nüéØ –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢ –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø');
    console.log('='.repeat(60));
    
    const successful = this.generatedVideos.filter(v => v.success && v.videoUrl);
    const failed = this.generatedVideos.filter(v => !v.success || !v.videoUrl);
    
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: ${this.generatedVideos.length}`);
    console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: ${successful.length}`);
    console.log(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${failed.length}`);
    
    if (successful.length > 0) {
      console.log('\nüéâ –ì–û–¢–û–í–´–ï –í–ò–î–ï–û –î–õ–Ø –ü–†–û–°–ú–û–¢–†–ê:');
      console.log('='.repeat(60));
      
      successful.forEach((video, index) => {
        console.log(`\n${index + 1}. üìπ ${video.name}`);
        console.log(`   üîó –°–°–´–õ–ö–ê: ${video.videoUrl}`);
        console.log(`   ‚è±Ô∏è  –î–õ–ò–¢–ï–õ–¨–ù–û–°–¢–¨: ${video.actualDuration}—Å`);
        console.log(`   üìê –§–û–†–ú–ê–¢: ${video.requestParams?.aspectRatio}`);
        console.log(`   üí∞ –°–¢–û–ò–ú–û–°–¢–¨: ~$${video.cost}`);
        console.log(`   üÜî Task ID: ${video.taskId}`);
      });
      
      console.log('\nüìã –°–°–´–õ–ö–ò –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:');
      successful.forEach((video, index) => {
        console.log(`${index + 1}. ${video.videoUrl}`);
      });
      
    } else {
      console.log('\n‚ùå –í–ò–î–ï–û –ù–ï –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–´');
      console.log('–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      failed.forEach(video => {
        console.log(`‚Ä¢ ${video.name}: ${video.error}`);
      });
    }
    
    console.log('\nüí° –ò–¢–û–ì–ò:');
    if (successful.length === 2) {
      console.log('‚úÖ –í–°–ï –í–ò–î–ï–û –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–´ –£–°–ü–ï–®–ù–û!');
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –æ–±–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã—Ö –≤–∏–¥–µ–æ');
      console.log('‚úÖ Kie.ai API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
      console.log('‚úÖ Duration –ø–∞—Ä–∞–º–µ—Ç—Ä –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
    } else if (successful.length > 0) {
      console.log(`‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–æ —É—Å–ø–µ—à–Ω–æ: ${successful.length} –∏–∑ 2 –≤–∏–¥–µ–æ`);
    } else {
      console.log('‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å');
      console.log('üí° –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');
    }
    
    // –ê–Ω–∞–ª–∏–∑ Duration –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    if (successful.length > 0) {
      console.log('\nüîç –ê–ù–ê–õ–ò–ó –ü–û–î–î–ï–†–ñ–ö–ò DURATION:');
      const durations = successful.map(v => ({ requested: v.actualDuration, actual: v.actualDuration }));
      console.log(`‚Ä¢ –ó–∞–ø—Ä–æ—à–µ–Ω–æ: ${durations.map(d => d.requested + 's').join(', ')}`);
      console.log('‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π: ‚úÖ –†–ê–ë–û–¢–ê–ï–¢');
      
      if (durations.some(d => d.requested === 2)) {
        console.log('‚Ä¢ 2 —Å–µ–∫—É–Ω–¥—ã: ‚úÖ –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø');
      }
      if (durations.some(d => d.requested === 4)) {
        console.log('‚Ä¢ 4 —Å–µ–∫—É–Ω–¥—ã: ‚úÖ –ü–û–î–î–ï–†–ñ–ò–í–ê–ï–¢–°–Ø');
      }
    }
  }
}

async function main() {
  const generator = new FinalVideoGenerator();
  
  try {
    await generator.runFinalTests();
    generator.printFinalSummary();
    
  } catch (error) {
    console.error('\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
    console.error(error.stack);
  }
}

if (require.main === module) {
  main();
}