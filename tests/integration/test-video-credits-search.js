#!/usr/bin/env node

/**
 * –ü–û–ò–°–ö VIDEO CREDITS –í KIE.AI
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ endpoints –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è video –±–∞–ª–∞–Ω—Å–∞
 */

const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '.env') });

console.log('üé¨ –ü–û–ò–°–ö VIDEO CREDITS');
console.log('=' .repeat(50));

const apiKey = process.env.KIE_AI_API_KEY;

// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö endpoints
const creditEndpoints = [
  // –û—Å–Ω–æ–≤–Ω—ã–µ endpoints
  { name: 'Chat Credits', url: '/api/v1/chat/credit', method: 'GET' },
  { name: 'Video Credits', url: '/api/v1/veo/credit', method: 'GET' },
  { name: 'Video Credits Alt', url: '/api/v1/video/credit', method: 'GET' },
  { name: 'All Credits', url: '/api/v1/credit', method: 'GET' },
  { name: 'Credits Balance', url: '/api/v1/credits/balance', method: 'GET' },
  
  // User/Account endpoints
  { name: 'User Info', url: '/api/v1/user', method: 'GET' },
  { name: 'User Profile', url: '/api/v1/user/profile', method: 'GET' },
  { name: 'User Balance', url: '/api/v1/user/balance', method: 'GET' },
  { name: 'User Credits', url: '/api/v1/user/credits', method: 'GET' },
  { name: 'Account Info', url: '/api/v1/account', method: 'GET' },
  { name: 'Account Balance', url: '/api/v1/account/balance', method: 'GET' },
  
  // Billing endpoints
  { name: 'Billing Info', url: '/api/v1/billing', method: 'GET' },
  { name: 'Billing Balance', url: '/api/v1/billing/balance', method: 'GET' },
  { name: 'Billing Credits', url: '/api/v1/billing/credits', method: 'GET' },
  
  // Balance endpoints
  { name: 'Balance', url: '/api/v1/balance', method: 'GET' },
  { name: 'Balance Detail', url: '/api/v1/balance/detail', method: 'GET' },
  
  // Service-specific
  { name: 'Veo Balance', url: '/api/v1/veo/balance', method: 'GET' },
  { name: 'Video Balance', url: '/api/v1/video/balance', method: 'GET' },
  { name: 'Generation Credits', url: '/api/v1/generation/credits', method: 'GET' },
  
  // API Info endpoints  
  { name: 'API Info', url: '/api/v1/info', method: 'GET' },
  { name: 'API Status', url: '/api/v1/status', method: 'GET' },
  { name: 'API Limits', url: '/api/v1/limits', method: 'GET' },
  
  // Wallet/Payment endpoints
  { name: 'Wallet', url: '/api/v1/wallet', method: 'GET' },
  { name: 'Wallet Balance', url: '/api/v1/wallet/balance', method: 'GET' },
  { name: 'Payment Info', url: '/api/v1/payment/info', method: 'GET' },
  
  // Alternative paths
  { name: 'Me', url: '/api/v1/me', method: 'GET' },
  { name: 'Profile', url: '/api/v1/profile', method: 'GET' },
  { name: 'Dashboard', url: '/api/v1/dashboard', method: 'GET' }
];

async function testEndpoint(endpoint) {
  try {
    const response = await fetch(`https://api.kie.ai${endpoint.url}`, {
      method: endpoint.method,
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Accept': 'application/json'
      }
    });

    const text = await response.text();
    
    if (response.status === 200) {
      console.log(`‚úÖ ${endpoint.name}: ${text}`);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ video credits –≤ –æ—Ç–≤–µ—Ç–µ
      if (text.includes('video') || text.includes('veo') || text.includes('100000') || text.includes('credits')) {
        console.log(`üéØ –í–û–ó–ú–û–ñ–ù–û –°–û–î–ï–†–ñ–ò–¢ VIDEO CREDITS!`);
        try {
          const json = JSON.parse(text);
          console.log(`   Parsed:`, JSON.stringify(json, null, 2));
        } catch (e) {
          console.log(`   Raw response: ${text}`);
        }
      }
      
      return { name: endpoint.name, success: true, data: text };
    } else if (response.status === 404) {
      console.log(`‚ùå ${endpoint.name}: Not Found`);
    } else {
      console.log(`‚ö†Ô∏è ${endpoint.name}: ${response.status} - ${text}`);
    }
    
    return { name: endpoint.name, success: false };
    
  } catch (error) {
    console.log(`üí• ${endpoint.name}: ${error.message}`);
    return { name: endpoint.name, success: false };
  }
}

// –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º POST –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
async function testPostEndpoints() {
  console.log('\nüì§ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï POST ENDPOINTS:');
  console.log('=' .repeat(40));
  
  const postEndpoints = [
    { name: 'User Info POST', url: '/api/v1/user/info', body: {} },
    { name: 'Credits Info POST', url: '/api/v1/credits/info', body: {} },
    { name: 'Balance Info POST', url: '/api/v1/balance/info', body: {} },
    { name: 'Account Info POST', url: '/api/v1/account/info', body: {} }
  ];
  
  for (const endpoint of postEndpoints) {
    try {
      const response = await fetch(`https://api.kie.ai${endpoint.url}`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${apiKey}`,
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(endpoint.body)
      });

      const text = await response.text();
      
      if (response.status === 200) {
        console.log(`‚úÖ ${endpoint.name}: ${text}`);
        if (text.includes('video') || text.includes('veo')) {
          console.log(`üéØ CONTAINS VIDEO INFO!`);
        }
      } else {
        console.log(`‚ùå ${endpoint.name}: ${response.status}`);
      }
      
    } catch (error) {
      console.log(`üí• ${endpoint.name}: ${error.message}`);
    }
  }
}

async function searchForVideoCredits() {
  console.log('üîç –ü–û–ò–°–ö VIDEO CREDITS –í–û –í–°–ï–• ENDPOINTS...\n');
  
  const successfulEndpoints = [];
  const potentialVideoEndpoints = [];
  
  for (const endpoint of creditEndpoints) {
    const result = await testEndpoint(endpoint);
    
    if (result.success) {
      successfulEndpoints.push(result);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ video-related keywords
      const data = result.data.toLowerCase();
      if (data.includes('video') || data.includes('veo') || data.includes('generation')) {
        potentialVideoEndpoints.push(result);
      }
    }
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 100));
  }
  
  await testPostEndpoints();
  
  console.log('\n' + '='.repeat(60));
  console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê:');
  console.log('='.repeat(60));
  
  console.log(`\n‚úÖ –†–ê–ë–û–ß–ò–ï ENDPOINTS (${successfulEndpoints.length}):`);
  successfulEndpoints.forEach(ep => {
    console.log(`- ${ep.name}`);
  });
  
  if (potentialVideoEndpoints.length > 0) {
    console.log(`\nüéØ –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï VIDEO ENDPOINTS (${potentialVideoEndpoints.length}):`);
    potentialVideoEndpoints.forEach(ep => {
      console.log(`- ${ep.name}: ${ep.data}`);
    });
  } else {
    console.log('\n‚ùå VIDEO CREDITS –ù–ï –ù–ê–ô–î–ï–ù–´');
    console.log('\nüí° –í–û–ó–ú–û–ñ–ù–´–ï –ü–†–ò–ß–ò–ù–´:');
    console.log('1. Video credits –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º API endpoint');
    console.log('2. API –∫–ª—é—á –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ video —Å–µ—Ä–≤–∏—Å—É');
    console.log('3. –ù—É–∂–Ω–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏—è video API –æ—Ç–¥–µ–ª—å–Ω–æ');
    console.log('4. Video credits –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤ web –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ');
  }
  
  console.log('\nüéØ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
  console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ https://kie.ai dashboard –¥–ª—è video credits');
  console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ API key –∏–º–µ–µ—Ç video permissions');
  console.log('3. –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–µ–Ω –¥—Ä—É–≥–æ–π API key –¥–ª—è video —Å–µ—Ä–≤–∏—Å–∞');
}

searchForVideoCredits().catch(console.error);