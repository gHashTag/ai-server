#!/usr/bin/env node

/**
 * –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ù–ê–ó–í–ê–ù–ò–ô –ú–û–î–ï–õ–ï–ô KIE.AI
 * 
 * –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π –º–æ–¥–µ–ª–µ–π –¥–ª—è –≤—ã—è—Å–Ω–µ–Ω–∏—è
 * –∫–∞–∫–∏–µ –º–æ–¥–µ–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è –≤ Kie.ai API
 */

const axios = require('axios');

console.log('üî¨ –≠–ö–°–ü–ï–†–ò–ú–ï–ù–¢–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ù–ê–ó–í–ê–ù–ò–ô –ú–û–î–ï–õ–ï–ô\n');

class ModelNameTester {
  constructor() {
    this.apiKey = 'f52f224a92970aa6b7c7780104a00f71';
    this.baseUrl = 'https://api.kie.ai/api/v1';
    this.results = [];
  }

  async testModel(modelName, endpoint = '/veo/generate') {
    console.log(`üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å: ${modelName} –Ω–∞ ${endpoint}`);
    
    try {
      const requestBody = {
        model: modelName,
        prompt: "A simple test video",
        duration: 2,
        aspectRatio: "16:9"
      };
      
      const response = await axios.post(`${this.baseUrl}${endpoint}`, requestBody, {
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json'
        },
        timeout: 30000
      });
      
      // –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –ø—Ä–æ—à–µ–ª –±–µ–∑ –æ—à–∏–±–æ–∫
      console.log(`‚úÖ ${modelName} - –£–°–ü–ï–•! Status: ${response.status}`);
      console.log(`   Response: ${JSON.stringify(response.data, null, 2)}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç –æ—à–∏–±–æ–∫
      if (response.data.code && response.data.code !== 200) {
        console.log(`   ‚ö†Ô∏è –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫—É: ${response.data.msg}`);
        return { modelName, success: false, error: response.data.msg, httpStatus: response.status };
      }
      
      return { modelName, success: true, httpStatus: response.status, data: response.data };
      
    } catch (error) {
      if (error.response) {
        console.log(`‚ùå ${modelName} - –û—à–∏–±–∫–∞: ${error.response.status} ${error.response.data?.msg || error.response.data?.message || ''}`);
        return { 
          modelName, 
          success: false, 
          error: error.response.data?.msg || error.message, 
          httpStatus: error.response.status,
          errorData: error.response.data
        };
      } else {
        console.log(`‚ùå ${modelName} - –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
        return { modelName, success: false, error: error.message };
      }
    }
  }

  async runAllModelTests() {
    console.log('üöÄ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–µ–π...\n');
    
    // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏–π –º–æ–¥–µ–ª–µ–π –¥–ª—è –≤–∏–¥–µ–æ
    const modelNamesVeo = [
      // Google Veo –≤–∞—Ä–∏–∞–Ω—Ç—ã
      'google-veo-3',
      'veo3',
      'veo-3.0',
      'veo_3',
      'google-veo-3-fast',
      'veo3-fast',
      'veo-3.0-fast',
      'veo_3_fast',
      
      // –û–±—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
      'veo',
      'google-veo',
      'veo-fast',
      'veo-quality',
      
      // –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è
      'google/veo-3',
      'google/veo-3-fast',
      'veo-3-preview',
      'veo-3-generate',
      'veo-3-turbo'
    ];
    
    console.log(`üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º ${modelNamesVeo.length} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–ª—è Veo endpoint`);
    
    for (const modelName of modelNamesVeo) {
      const result = await this.testModel(modelName, '/veo/generate');
      this.results.push({ ...result, endpoint: '/veo/generate' });
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    // –¢–∞–∫–∂–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–µ–º runway –º–æ–¥–µ–ª–∏
    console.log('\nüìã –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è Runway endpoint');
    const modelNamesRunway = [
      'runway-gen3',
      'gen3',
      'runway-gen-3',
      'gen-3-alpha',
      'gen3-turbo',
      'runway-turbo',
      'runway',
      'gen3-alpha-turbo'
    ];
    
    for (const modelName of modelNamesRunway) {
      const result = await this.testModel(modelName, '/runway/generate');
      this.results.push({ ...result, endpoint: '/runway/generate' });
      
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
  }

  printResults() {
    console.log('\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ú–û–î–ï–õ–ï–ô');
    console.log('='.repeat(60));
    
    const successful = this.results.filter(r => r.success);
    const failed = this.results.filter(r => !r.success);
    
    console.log(`üìä –í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${this.results.length} –º–æ–¥–µ–ª–µ–π`);
    console.log(`‚úÖ –†–∞–±–æ—á–∏–µ: ${successful.length}`);
    console.log(`‚ùå –ù–µ—Ä–∞–±–æ—á–∏–µ: ${failed.length}`);
    
    if (successful.length > 0) {
      console.log('\nüéâ –ù–ê–ô–î–ï–ù–ù–´–ï –†–ê–ë–û–ß–ò–ï –ú–û–î–ï–õ–ò:');
      successful.forEach((result, index) => {
        console.log(`\n${index + 1}. ‚úÖ ${result.modelName}`);
        console.log(`   üéØ Endpoint: ${result.endpoint}`);
        console.log(`   üìä HTTP Status: ${result.httpStatus}`);
        if (result.data) {
          console.log(`   üìã Response: ${JSON.stringify(result.data, null, 2)}`);
        }
      });
    }
    
    console.log('\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–®–ò–ë–û–ö:');
    const errorStats = {};
    failed.forEach(result => {
      const errorKey = `${result.error} (HTTP ${result.httpStatus || '?'})`;
      if (!errorStats[errorKey]) {
        errorStats[errorKey] = [];
      }
      errorStats[errorKey].push(result.modelName);
    });
    
    Object.keys(errorStats).forEach(errorKey => {
      const models = errorStats[errorKey];
      console.log(`\n‚ùå ${errorKey}:`);
      console.log(`   –ú–æ–¥–µ–ª–∏ (${models.length}): ${models.slice(0, 5).join(', ')}${models.length > 5 ? '...' : ''}`);
    });
    
    console.log('\nüí° –í–´–í–û–î–´:');
    if (successful.length > 0) {
      console.log('‚úÖ –ù–∞–π–¥–µ–Ω—ã —Ä–∞–±–æ—á–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è Kie.ai!');
      console.log('‚úÖ –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ production –∫–æ–¥–µ');
      console.log('‚úÖ –û–±–Ω–æ–≤–∏—Ç–µ KieAiService —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –º–æ–¥–µ–ª–µ–π');
    } else {
      console.log('‚ùå –†–∞–±–æ—á–∏–µ –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      console.log('üí° –í–æ–∑–º–æ–∂–Ω–æ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');
      console.log('üí° –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Kie.ai –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏');
    }
  }
}

async function main() {
  const tester = new ModelNameTester();
  
  try {
    await tester.runAllModelTests();
    tester.printResults();
    
  } catch (error) {
    console.error('\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
  }
}

if (require.main === module) {
  main();
}