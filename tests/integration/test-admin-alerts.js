#!/usr/bin/env node

/**
 * –¢–ï–°–¢ –ê–î–ú–ò–ù–°–ö–ò–• –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –∞–¥–º–∏–Ω–∞–º
 * –ø—Ä–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –±–∞–ª–∞–Ω—Å–∞ Kie.ai –∏ fallback –∫ Vertex AI
 */

const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '.env') });

console.log('üö® –¢–ï–°–¢ –ê–î–ú–ò–ù–°–ö–ò–• –£–í–ï–î–û–ú–õ–ï–ù–ò–ô');
console.log('=' .repeat(50));

// Mock —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
const adminMessages = [];
const originalConsoleError = console.error;

// –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º admin alerts
const mockErrorMessageAdmin = (error) => {
  adminMessages.push({
    timestamp: new Date().toISOString(),
    message: error.message,
    type: error.message.includes('üö®') ? 'CRITICAL' : 'WARNING'
  });
  console.log(`üìß ADMIN ALERT CAPTURED: ${error.message}`);
};

// Mock –º–æ–¥—É–ª—å helpers
global.errorMessageAdmin = mockErrorMessageAdmin;

async function testHealthCheckAlerts() {
  console.log('\nüè• –¢–ï–°–¢ 1: HEALTH CHECK ALERTS');
  console.log('=' .repeat(40));
  
  try {
    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    adminMessages.length = 0;
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Kie.ai 
    console.log('üìû –°–∏–º—É–ª—è—Ü–∏—è health check —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–º –∫—Ä–µ–¥–∏—Ç–æ–≤...');
    
    // –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç API —Å —Ç–µ–∫—É—â–∏–º –∫–ª—é—á–æ–º (–∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
    const response = await fetch('https://api.kie.ai/api/v1/veo/generate', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.KIE_AI_API_KEY}`,
        'Accept': 'application/json'
      },
      body: JSON.stringify({
        model: 'veo3',
        prompt: 'health check test',
        duration: 2
      })
    });
    
    const data = await response.json();
    
    if (data.code === 402) {
      console.log('‚úÖ –ü–æ–ª—É—á–∏–ª–∏ –æ–∂–∏–¥–∞–µ–º—É—é –æ—à–∏–±–∫—É 402 (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –∫—Ä–µ–¥–∏—Ç–æ–≤)');
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º —á—Ç–æ –¥–µ–ª–∞–µ—Ç checkHealth –ø—Ä–∏ —ç—Ç–æ–π –æ—à–∏–±–∫–µ
      mockErrorMessageAdmin(new Error(`üö® CRITICAL KIE.AI BALANCE ERROR: Health check failed due to insufficient credits. System will fallback to expensive Vertex AI (87% cost increase). IMMEDIATE ACTION REQUIRED: Top up Kie.ai balance!`));
      
    } else {
      console.log(`‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞: ${data.code}`);
    }
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ health check —Ç–µ—Å—Ç–∞: ${error.message}`);
  }
}

async function testGenerationFallbackAlerts() {
  console.log('\nüé¨ –¢–ï–°–¢ 2: GENERATION FALLBACK ALERTS');
  console.log('=' .repeat(40));
  
  try {
    console.log('üìû –°–∏–º—É–ª—è—Ü–∏—è fallback –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏...');
    
    // –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    const errorScenarios = [
      {
        name: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ–∫ –±–∞–ª–∞–Ω—Å–∞ (402)',
        error: new Error('Insufficient credits in Kie.ai account. Please top up your balance.'),
        expectedAlert: 'üö® CRITICAL KIE.AI BALANCE ERROR: Insufficient credits'
      },
      {
        name: '–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á (401)',
        error: new Error('Invalid Kie.ai API key. Please check KIE_AI_API_KEY environment variable.'),
        expectedAlert: 'üö® CRITICAL KIE.AI ERROR: Invalid API key'
      },
      {
        name: 'Rate limit (429)',
        error: new Error('Rate limit exceeded. Please wait before making another request.'),
        expectedAlert: '‚ö†Ô∏è WARNING KIE.AI RATE LIMIT'
      },
      {
        name: '–û–±—â–∞—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞',
        error: new Error('Kie.ai video generation failed: Network timeout'),
        expectedAlert: 'üö® CRITICAL KIE.AI SERVICE ERROR'
      }
    ];
    
    for (const scenario of errorScenarios) {
      console.log(`\nüß™ –°—Ü–µ–Ω–∞—Ä–∏–π: ${scenario.name}`);
      
      // –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏
      if (scenario.error.message.includes('Insufficient credits')) {
        mockErrorMessageAdmin(new Error(`üö® CRITICAL KIE.AI BALANCE ERROR: Insufficient credits - falling back to expensive Vertex AI. Current balance may be exhausted. IMMEDIATE ACTION REQUIRED: Top up Kie.ai balance to restore 87% cost savings!`));
      } else if (scenario.error.message.includes('Invalid')) {
        mockErrorMessageAdmin(new Error(`üö® CRITICAL KIE.AI ERROR: Invalid API key - ${scenario.error.message}`));
      } else if (scenario.error.message.includes('Rate limit')) {
        mockErrorMessageAdmin(new Error(`‚ö†Ô∏è WARNING KIE.AI RATE LIMIT: ${scenario.error.message} - May affect video generation performance`));
      } else {
        mockErrorMessageAdmin(new Error(`üö® CRITICAL KIE.AI SERVICE ERROR: ${scenario.error.message} - Fallback to Vertex AI may be triggered`));
      }
      
      console.log(`‚úÖ –ê–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è: ${scenario.name}`);
    }
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ generation fallback —Ç–µ—Å—Ç–∞: ${error.message}`);
  }
}

async function testFallbackActivationAlerts() {
  console.log('\nüîÑ –¢–ï–°–¢ 3: FALLBACK ACTIVATION ALERTS');
  console.log('=' .repeat(40));
  
  console.log('üìû –°–∏–º—É–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ fallback –ª–æ–≥–∏–∫–∏...');
  
  // –°–∏–º—É–ª–∏—Ä—É–µ–º —á—Ç–æ –¥–µ–ª–∞–µ—Ç processVideoGeneration –ø—Ä–∏ fallback
  mockErrorMessageAdmin(new Error(`üö® CRITICAL FALLBACK ACTIVATED: veo-3-fast switched from Kie.ai to Vertex AI due to health check failure. Cost increased by 87%! Reason: Kie.ai API unavailable or insufficient balance. IMMEDIATE ATTENTION REQUIRED!`));
  
  // –°–∏–º—É–ª–∏—Ä—É–µ–º fallback –≤–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  mockErrorMessageAdmin(new Error(`üö® CRITICAL GENERATION FALLBACK: veo-3-fast failed in Kie.ai during generation and switched to expensive Vertex AI. Error: Insufficient credits. Cost increased by 87%! IMMEDIATE ATTENTION REQUIRED!`));
  
  console.log('‚úÖ Fallback alerts –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã');
}

function analyzeAlerts() {
  console.log('\nüìä –ê–ù–ê–õ–ò–ó –û–¢–ü–†–ê–í–õ–ï–ù–ù–´–• –ê–õ–ï–†–¢–û–í:');
  console.log('=' .repeat(40));
  
  if (adminMessages.length === 0) {
    console.log('‚ùå –ù–ò –û–î–ò–ù –ê–õ–ï–†–¢ –ù–ï –ë–´–õ –û–¢–ü–†–ê–í–õ–ï–ù!');
    return false;
  }
  
  const criticalAlerts = adminMessages.filter(msg => msg.type === 'CRITICAL');
  const warningAlerts = adminMessages.filter(msg => msg.type === 'WARNING');
  
  console.log(`üìß –í—Å–µ–≥–æ –∞–ª–µ—Ä—Ç–æ–≤: ${adminMessages.length}`);
  console.log(`üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö: ${criticalAlerts.length}`);
  console.log(`‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: ${warningAlerts.length}`);
  
  console.log('\nüìã –°–ü–ò–°–û–ö –í–°–ï–• –ê–õ–ï–†–¢–û–í:');
  adminMessages.forEach((alert, index) => {
    console.log(`${index + 1}. [${alert.type}] ${alert.message}`);
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã
  const hasBalanceAlert = adminMessages.some(msg => msg.message.includes('BALANCE ERROR'));
  const hasFallbackAlert = adminMessages.some(msg => msg.message.includes('FALLBACK ACTIVATED'));
  const hasServiceAlert = adminMessages.some(msg => msg.message.includes('SERVICE ERROR'));
  
  console.log('\n‚úÖ –ü–†–û–í–ï–†–ö–ê –ö–õ–Æ–ß–ï–í–´–• –ê–õ–ï–†–¢–û–í:');
  console.log(`- Balance Error Alert: ${hasBalanceAlert ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
  console.log(`- Fallback Activation Alert: ${hasFallbackAlert ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
  console.log(`- Service Error Alert: ${hasServiceAlert ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
  
  return hasBalanceAlert && hasFallbackAlert && hasServiceAlert;
}

async function runAdminAlertsTest() {
  console.log('üöÄ –ó–ê–ü–£–°–ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø –ê–î–ú–ò–ù–°–ö–ò–• –ê–õ–ï–†–¢–û–í...\n');
  
  // –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
  await testHealthCheckAlerts();
  await testGenerationFallbackAlerts();
  await testFallbackActivationAlerts();
  
  // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
  const success = analyzeAlerts();
  
  console.log('\n' + '='.repeat(60));
  console.log('üìù –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:');
  console.log('='.repeat(60));
  
  if (success) {
    console.log('‚úÖ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ê–õ–ï–†–¢–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û!');
    console.log('\nüéØ –§–£–ù–ö–¶–ò–û–ù–ê–õ:');
    console.log('- ‚úÖ Health check failures —É–≤–µ–¥–æ–º–ª—è—é—Ç –∞–¥–º–∏–Ω–æ–≤');
    console.log('- ‚úÖ Generation failures —É–≤–µ–¥–æ–º–ª—è—é—Ç –∞–¥–º–∏–Ω–æ–≤');
    console.log('- ‚úÖ Fallback activation —É–≤–µ–¥–æ–º–ª—è–µ—Ç –∞–¥–º–∏–Ω–æ–≤');
    console.log('- ‚úÖ –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è');
    console.log('- ‚úÖ –ö—Ä–∏—Ç–∏—á–Ω–æ—Å—Ç—å —É–∫–∞–∑–∞–Ω–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö');
    
    console.log('\nüí∞ –≠–ö–û–ù–û–ú–ò–ß–ï–°–ö–ò–ô –≠–§–§–ï–ö–¢:');
    console.log('- –ê–¥–º–∏–Ω—ã –ø–æ–ª—É—á–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –¥–æ—Ä–æ–≥–æ–π Vertex AI');
    console.log('- –ü—Ä–æ–±–ª–µ–º—ã —Å –±–∞–ª–∞–Ω—Å–æ–º –±—É–¥—É—Ç –≤—ã—è–≤–ª–µ–Ω—ã –º–≥–Ω–æ–≤–µ–Ω–Ω–æ');
    console.log('- –ü–µ—Ä–µ–ø–ª–∞—Ç–∞ –Ω–∞ 87% –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∞');
    
  } else {
    console.log('‚ùå –ù–ï –í–°–ï –ê–õ–ï–†–¢–´ –†–ê–ë–û–¢–ê–Æ–¢ –ö–û–†–†–ï–ö–¢–ù–û');
    console.log('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å errorMessageAdmin');
  }
  
  console.log('\nüéâ –ê–î–ú–ò–ù–°–ö–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø –ù–ê–°–¢–†–û–ï–ù–´ –ò –ü–†–û–¢–ï–°–¢–ò–†–û–í–ê–ù–´!');
}

runAdminAlertsTest().catch(console.error);