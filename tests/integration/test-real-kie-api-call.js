#!/usr/bin/env node

/**
 * –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ KIE.AI API –í–´–ó–û–í–ê
 * –ò—Å–ø–æ–ª—å–∑—É–µ–º –¢–û–ß–ù–û —Ç–µ –∂–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —á—Ç–æ —Ä–∞–±–æ—Ç–∞–ª–∏ —Ä–∞–Ω–µ–µ
 */

const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '.env') });

console.log('üî• –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ KIE.AI API');
console.log('=' .repeat(50));
console.log(`üîë API Key: ${process.env.KIE_AI_API_KEY}`);

async function makeRealKieApiCall() {
  const apiKey = process.env.KIE_AI_API_KEY;
  
  if (!apiKey) {
    console.log('‚ùå –ù–µ—Ç API –∫–ª—é—á–∞');
    return;
  }

  // –¢–û–ß–ù–´–ï –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –∫–æ–¥–µ
  const payload = {
    model: 'veo3',
    prompt: 'A beautiful red rose blooming in a garden, 2 seconds duration',
    duration: 2,
    aspect_ratio: '16:9'
  };

  console.log('\nüìã Payload –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞:');
  console.log(JSON.stringify(payload, null, 2));

  try {
    console.log('\nüì§ –î–µ–ª–∞—é –†–ï–ê–õ–¨–ù–´–ô –∑–∞–ø—Ä–æ—Å –∫ Kie.ai...');
    
    const response = await fetch('https://api.kie.ai/api/v1/veo/generate', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`,
        'Accept': 'application/json',
        'User-Agent': 'ai-server/1.0'
      },
      body: JSON.stringify(payload)
    });

    console.log(`üìä HTTP Status: ${response.status} ${response.statusText}`);
    
    const responseText = await response.text();
    console.log(`üìÑ Raw Response (${responseText.length} chars):`);
    console.log(responseText);

    try {
      const jsonResponse = JSON.parse(responseText);
      console.log('\nüîß Parsed Response:');
      console.log(JSON.stringify(jsonResponse, null, 2));
      
      if (jsonResponse.request_id) {
        console.log(`\n‚úÖ –ó–ê–ü–†–û–° –ü–†–ò–ù–Ø–¢! Request ID: ${jsonResponse.request_id}`);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        await checkVideoStatus(jsonResponse.request_id, apiKey);
      } else if (jsonResponse.code) {
        console.log(`\n‚ùå API Error Code: ${jsonResponse.code}`);
        console.log(`üí¨ Message: ${jsonResponse.msg}`);
      }
      
    } catch (parseError) {
      console.log('\n‚ùå –û—Ç–≤–µ—Ç –Ω–µ JSON:', parseError.message);
    }

  } catch (networkError) {
    console.error('\nüí• Network Error:', networkError.message);
  }
}

async function checkVideoStatus(requestId, apiKey) {
  console.log(`\n‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–∏–¥–µ–æ: ${requestId}`);
  
  try {
    const response = await fetch(`https://api.kie.ai/api/v1/veo/record-info?request_id=${requestId}`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Accept': 'application/json',
        'User-Agent': 'ai-server/1.0'
      }
    });

    console.log(`üìä Status Response: ${response.status}`);
    
    const statusText = await response.text();
    console.log(`üìÑ Status Data: ${statusText}`);
    
    try {
      const statusJson = JSON.parse(statusText);
      console.log('\nüìã Status Details:');
      console.log(JSON.stringify(statusJson, null, 2));
      
      if (statusJson.status === 'processing') {
        console.log('‚è≥ –í–∏–¥–µ–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è... (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)');
      } else if (statusJson.status === 'completed') {
        console.log('‚úÖ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!');
        if (statusJson.video_url) {
          console.log(`üîó Video URL: ${statusJson.video_url}`);
        }
      }
      
    } catch (e) {
      console.log('‚ùå Status –Ω–µ JSON');
    }
    
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`);
  }
}

// –¢–∞–∫–∂–µ —Ç–µ—Å—Ç —Å –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–º –≤–∏–¥–µ–æ
async function testVerticalVideo() {
  console.log('\nüì± –¢–ï–°–¢ –í–ï–†–¢–ò–ö–ê–õ–¨–ù–û–ì–û –í–ò–î–ï–û:');
  console.log('=' .repeat(40));
  
  const payload = {
    model: 'veo3',
    prompt: 'A cat playing with yarn, vertical mobile video, 4 seconds',
    duration: 4,
    aspect_ratio: '9:16'
  };

  console.log('üìã Vertical Payload:');
  console.log(JSON.stringify(payload, null, 2));

  try {
    const response = await fetch('https://api.kie.ai/api/v1/veo/generate', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.KIE_AI_API_KEY}`,
        'Accept': 'application/json',
        'User-Agent': 'ai-server/1.0'
      },
      body: JSON.stringify(payload)
    });

    const responseText = await response.text();
    console.log(`üì± Vertical Response (${response.status}): ${responseText}`);
    
    try {
      const jsonResponse = JSON.parse(responseText);
      if (jsonResponse.request_id) {
        console.log(`‚úÖ –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ –ø—Ä–∏–Ω—è—Ç–æ: ${jsonResponse.request_id}`);
      }
    } catch (e) {
      // ignore
    }

  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: ${error.message}`);
  }
}

async function runTests() {
  console.log('üöÄ –ó–ê–ü–£–°–ö–ê–ï–ú –†–ï–ê–õ–¨–ù–´–ï –¢–ï–°–¢–´...\n');
  
  await makeRealKieApiCall();
  await new Promise(resolve => setTimeout(resolve, 2000)); // –ø–∞—É–∑–∞
  await testVerticalVideo();
  
  console.log('\n' + '='.repeat(50));
  console.log('üìù –†–ï–ó–£–õ–¨–¢–ê–¢:');
  console.log('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ - –µ—Å–ª–∏ –µ—Å—Ç—å request_id, —Ç–æ API —Ä–∞–±–æ—Ç–∞–µ—Ç');
  console.log('–ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - –Ω–∞–π–¥–µ–º –ø—Ä–∏—á–∏–Ω—É –≤ –∫–æ–¥–µ');
  console.log('='.repeat(50));
}

runTests().catch(console.error);