/**
 * Test script –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Dart AI Task Manager
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–Ω—é—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –º–µ–∂–¥—É GitHub Issues –∏ Dart AI –∑–∞–¥–∞—á–∞–º–∏
 */

const axios = require('axios');

const BASE_URL = process.env.API_BASE_URL || 'http://localhost:4000';
const TEST_REPOSITORY = process.env.TEST_REPOSITORY || 'gHashTag/ai-server';

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

async function testDartAIIntegration() {
  log('\nüöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Dart AI Task Manager\n', colors.bold);

  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    log('üìä –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏', colors.blue);
    const statusResponse = await axios.get(`${BASE_URL}/api/dart-ai/status`);
    
    log(`‚úÖ –°—Ç–∞—Ç—É—Å: ${statusResponse.data.status}`, colors.green);
    log(`üì° API –Ω–∞—Å—Ç—Ä–æ–µ–Ω: ${statusResponse.data.health_check.success}`, 
        statusResponse.data.health_check.success ? colors.green : colors.red);
    log(`üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:`, colors.blue);
    log(`   ‚Ä¢ –í—Å–µ–≥–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–π: ${statusResponse.data.sync_stats.total_syncs}`);
    log(`   ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: ${statusResponse.data.sync_stats.successful_syncs}`);
    log(`   ‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${statusResponse.data.sync_stats.failed_syncs}`);

    // –¢–µ—Å—Ç 2: –°–∏–º—É–ª—è—Ü–∏—è webhook –æ—Ç Dart AI
    log('\nüîî –¢–µ—Å—Ç 2: –°–∏–º—É–ª—è—Ü–∏—è webhook –æ—Ç Dart AI', colors.blue);
    const dartTaskWebhook = {
      event: 'task.created',
      task: {
        id: `test-task-${Date.now()}`,
        title: '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∏–∑ Dart AI',
        description: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å GitHub Issues',
        status: 'open',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      },
      repository: TEST_REPOSITORY
    };

    try {
      const webhookResponse = await axios.post(
        `${BASE_URL}/webhooks/dart-ai/tasks`,
        dartTaskWebhook,
        {
          headers: {
            'x-dart-event': 'task.created',
            'x-dart-delivery': `test-${Date.now()}`,
            'Content-Type': 'application/json'
          }
        }
      );
      
      log(`‚úÖ Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${webhookResponse.data.message}`, colors.green);
      log(`üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${webhookResponse.data.result}`, colors.yellow);
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ webhook: ${error.message}`, colors.red);
      if (error.response?.data) {
        log(`üìã –î–µ—Ç–∞–ª–∏: ${JSON.stringify(error.response.data, null, 2)}`, colors.yellow);
      }
    }

    // –¢–µ—Å—Ç 3: –°–∏–º—É–ª—è—Ü–∏—è webhook –æ—Ç GitHub Issues
    log('\nüîî –¢–µ—Å—Ç 3: –°–∏–º—É–ª—è—Ü–∏—è webhook –æ—Ç GitHub Issues', colors.blue);
    const githubIssueWebhook = {
      action: 'opened',
      issue: {
        number: Math.floor(Math.random() * 1000) + 100,
        title: '–¢–µ—Å—Ç–æ–≤–∞—è issue –∏–∑ GitHub',
        body: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è issue –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Dart AI',
        state: 'open',
        assignees: [],
        labels: [{ name: 'test' }, { name: 'dart-ai-sync' }],
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      },
      repository: {
        full_name: TEST_REPOSITORY
      }
    };

    try {
      const githubWebhookResponse = await axios.post(
        `${BASE_URL}/webhooks/github/issues`,
        githubIssueWebhook,
        {
          headers: {
            'x-github-event': 'issues',
            'x-github-delivery': `test-${Date.now()}`,
            'Content-Type': 'application/json'
          }
        }
      );
      
      log(`‚úÖ GitHub webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${githubWebhookResponse.data.message}`, colors.green);
      log(`üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${githubWebhookResponse.data.result}`, colors.yellow);
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ GitHub webhook: ${error.message}`, colors.red);
      if (error.response?.data) {
        log(`üìã –î–µ—Ç–∞–ª–∏: ${JSON.stringify(error.response.data, null, 2)}`, colors.yellow);
      }
    }

    // –¢–µ—Å—Ç 4: –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è GitHub Issue
    log('\nüîÑ –¢–µ—Å—Ç 4: –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è GitHub Issue', colors.blue);
    try {
      const manualSyncResponse = await axios.post(
        `${BASE_URL}/api/dart-ai/sync/github-issue`,
        {
          issue_number: 1, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—É—é issue –¥–ª—è —Ç–µ—Å—Ç–∞
          repository: TEST_REPOSITORY
        }
      );
      
      log(`‚úÖ –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: ${manualSyncResponse.data.message}`, colors.green);
      log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:`, colors.blue);
      log(`   ‚Ä¢ –£—Å–ø–µ—Ö: ${manualSyncResponse.data.result.success}`);
      log(`   ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞—á: ${manualSyncResponse.data.result.tasks_created || 0}`);
      log(`   ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: ${manualSyncResponse.data.result.tasks_updated || 0}`);
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error.message}`, colors.red);
      if (error.response?.data) {
        log(`üìã –î–µ—Ç–∞–ª–∏: ${error.response.data.message}`, colors.yellow);
      }
    }

    // –¢–µ—Å—Ç 5: –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Dart AI –∑–∞–¥–∞—á–∏
    log('\nüîÑ –¢–µ—Å—Ç 5: –†—É—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Dart AI –∑–∞–¥–∞—á–∏', colors.blue);
    try {
      const taskSyncResponse = await axios.post(
        `${BASE_URL}/api/dart-ai/sync/task`,
        {
          task_id: 'test-task-123',
          repository: TEST_REPOSITORY
        }
      );
      
      log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á–∏: ${taskSyncResponse.data.message}`, colors.green);
      log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:`, colors.blue);
      log(`   ‚Ä¢ –£—Å–ø–µ—Ö: ${taskSyncResponse.data.result.success}`);
      log(`   ‚Ä¢ –°–æ–∑–¥–∞–Ω–æ issues: ${taskSyncResponse.data.result.issues_created || 0}`);
      log(`   ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ issues: ${taskSyncResponse.data.result.issues_updated || 0}`);
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏: ${error.message}`, colors.red);
      if (error.response?.data) {
        log(`üìã –î–µ—Ç–∞–ª–∏: ${error.response.data.message}`, colors.yellow);
      }
    }

    // –¢–µ—Å—Ç 6: –ú–∞—Å—Å–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è GitHub Issues
    log('\nüîÑ –¢–µ—Å—Ç 6: –ú–∞—Å—Å–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è GitHub Issues', colors.blue);
    try {
      const bulkSyncResponse = await axios.post(
        `${BASE_URL}/api/dart-ai/sync/bulk-issues`,
        {
          repository: TEST_REPOSITORY,
          state: 'open',
          limit: 5
        }
      );
      
      log(`‚úÖ –ú–∞—Å—Å–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: ${bulkSyncResponse.data.message}`, colors.green);
      log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:`, colors.blue);
      log(`   ‚Ä¢ –í—Å–µ–≥–æ issues: ${bulkSyncResponse.data.results.total}`);
      log(`   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ: ${bulkSyncResponse.data.results.successful}`);
      log(`   ‚Ä¢ –ù–µ—É–¥–∞—á–Ω–æ: ${bulkSyncResponse.data.results.failed}`);
      
      if (bulkSyncResponse.data.results.errors.length > 0) {
        log(`‚ö†Ô∏è  –û—à–∏–±–∫–∏:`, colors.yellow);
        bulkSyncResponse.data.results.errors.forEach(error => {
          log(`   ‚Ä¢ ${error}`, colors.yellow);
        });
      }
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error.message}`, colors.red);
      if (error.response?.data) {
        log(`üìã –î–µ—Ç–∞–ª–∏: ${error.response.data.message}`, colors.yellow);
      }
    }

    // –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
    log('\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞', colors.blue);
    const finalStatusResponse = await axios.get(`${BASE_URL}/api/dart-ai/status`);
    log(`üìà –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`, colors.blue);
    log(`   ‚Ä¢ –í—Å–µ–≥–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–π: ${finalStatusResponse.data.sync_stats.total_syncs}`);
    log(`   ‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: ${finalStatusResponse.data.sync_stats.successful_syncs}`);
    log(`   ‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${finalStatusResponse.data.sync_stats.failed_syncs}`);
    log(`   ‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: ${finalStatusResponse.data.sync_stats.last_sync || '–ù–∏–∫–æ–≥–¥–∞'}`);

    log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!', colors.bold + colors.green);

  } catch (error) {
    log(`\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`, colors.bold + colors.red);
    if (error.response?.data) {
      log(`üìã –î–µ—Ç–∞–ª–∏ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞:`, colors.yellow);
      console.log(JSON.stringify(error.response.data, null, 2));
    }
    
    log(`\nüîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:`, colors.yellow);
    log(`   ‚Ä¢ –ó–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–∞ ${BASE_URL}`);
    log(`   ‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è DART_AI_API_KEY –∏ GITHUB_TOKEN`);
    log(`   ‚Ä¢ –î–æ—Å—Ç—É–ø–µ–Ω –ª–∏ Dart AI API`);
    
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
if (require.main === module) {
  testDartAIIntegration();
}

module.exports = { testDartAIIntegration };