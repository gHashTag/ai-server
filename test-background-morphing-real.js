/**
 * üöÄ –¢–µ—Å—Ç Background Morphing Processor —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ JPEG
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã–µ JPEG –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */

const FormData = require('form-data')
const fs = require('fs')
const axios = require('axios')
const path = require('path')

const API_BASE_URL =
  process.env.NODE_ENV === 'production'
    ? 'https://ai-server-u14194.vm.elestio.app'
    : 'http://localhost:4000'

// –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–∞–ª–∏–¥–Ω—ã–π JPEG (1x1 –ø–∏–∫—Å–µ–ª—å, —Ä–∞–∑–Ω—ã–µ —Ü–≤–µ—Ç–∞)
const createMinimalJPEG = (r, g, b) => {
  // JPEG –∑–∞–≥–æ–ª–æ–≤–æ–∫ + –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è 1x1 –ø–∏–∫—Å–µ–ª—è
  const jpegHeader = Buffer.from([
    0xff, 0xd8, 0xff, 0xe0, 0x00, 0x10, 0x4a, 0x46, 0x49, 0x46, 0x00, 0x01,
    0x01, 0x01, 0x00, 0x48, 0x00, 0x48, 0x00, 0x00, 0xff, 0xdb, 0x00, 0x43,
    0x00, 0x08, 0x06, 0x06, 0x07, 0x06, 0x05, 0x08, 0x07, 0x07, 0x07, 0x09,
    0x09, 0x08, 0x0a, 0x0c, 0x14, 0x0d, 0x0c, 0x0b, 0x0b, 0x0c, 0x19, 0x12,
    0x13, 0x0f, 0x14, 0x1d, 0x1a, 0x1f, 0x1e, 0x1d, 0x1a, 0x1c, 0x1c, 0x20,
    0x24, 0x2e, 0x27, 0x20, 0x22, 0x2c, 0x23, 0x1c, 0x1c, 0x28, 0x37, 0x29,
    0x2c, 0x30, 0x31, 0x34, 0x34, 0x34, 0x1f, 0x27, 0x39, 0x3d, 0x38, 0x32,
    0x3c, 0x2e, 0x33, 0x34, 0x32, 0xff, 0xc0, 0x00, 0x11, 0x08, 0x00, 0x01,
    0x00, 0x01, 0x01, 0x01, 0x11, 0x00, 0x02, 0x11, 0x01, 0x03, 0x11, 0x01,
    0xff, 0xc4, 0x00, 0x14, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xff, 0xc4,
    0x00, 0x14, 0x10, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xda, 0x00, 0x0c,
    0x03, 0x01, 0x00, 0x02, 0x11, 0x03, 0x11, 0x00, 0x3f, 0x00,
  ])

  // –ü—Ä–æ—Å—Ç–µ–π—à–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –Ω–µ–º–Ω–æ–≥–æ —Ä–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
  const colorVariation = Buffer.from([r, g, b, 0xff, 0xd9]) // EOI –º–∞—Ä–∫–µ—Ä

  return Buffer.concat([jpegHeader, colorVariation])
}

async function testBackgroundMorphingReal() {
  console.log('üöÄ === –¢–ï–°–¢ BACKGROUND PROCESSOR –° –†–ï–ê–õ–¨–ù–´–ú–ò JPEG ===')

  try {
    // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π ZIP —Å 3 –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –≤–∞–ª–∏–¥–Ω—ã–º–∏ JPEG
    console.log('üì¶ –°–æ–∑–¥–∞–µ–º ZIP —Å 3 –≤–∞–ª–∏–¥–Ω—ã–º–∏ JPEG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏...')
    const testZipPath = './test-background-real.zip'

    const AdmZip = require('adm-zip')
    const zip = new AdmZip()

    // –î–æ–±–∞–≤–ª—è–µ–º 3 –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö JPEG —Å —Ä–∞–∑–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏
    const images = [
      { name: 'morphing_image_001.jpg', color: [255, 0, 0] }, // –ö—Ä–∞—Å–Ω—ã–π
      { name: 'morphing_image_002.jpg', color: [0, 255, 0] }, // –ó–µ–ª–µ–Ω—ã–π
      { name: 'morphing_image_003.jpg', color: [0, 0, 255] }, // –°–∏–Ω–∏–π
    ]

    images.forEach((img, index) => {
      const jpegData = createMinimalJPEG(...img.color)
      zip.addFile(img.name, jpegData)
      console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω ${img.name}: ${jpegData.length} –±–∞–π—Ç`)
    })

    zip.writeZip(testZipPath)
    console.log(`‚úÖ ZIP —Å–æ–∑–¥–∞–Ω —Å ${images.length} –≤–∞–ª–∏–¥–Ω—ã–º–∏ JPEG`)

    // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
    console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ background morphing API...')

    const form = new FormData()
    form.append('type', 'morphing')
    form.append('telegram_id', '144022504')
    form.append('image_count', images.length.toString())
    form.append('morphing_type', 'seamless')
    form.append('model', 'kling-v1.6-pro')
    form.append('is_ru', 'true')
    form.append('bot_name', 'neuro_blogger_bot')
    form.append('username', 'telegram_bot')
    form.append('images_zip', fs.createReadStream(testZipPath))

    const response = await axios.post(
      `${API_BASE_URL}/generate/morph-images`,
      form,
      {
        headers: {
          ...form.getHeaders(),
          'User-Agent': 'background-morphing-real-test/1.0',
        },
        timeout: 30000,
      }
    )

    console.log('‚úÖ API Response:', response.status, response.statusText)
    console.log('üìã Response Data:', JSON.stringify(response.data, null, 2))

    if (response.data.job_id) {
      const jobId = response.data.job_id

      console.log(`\nüîç === –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–ê–î–ê–ù–ò–Ø ${jobId} ===`)

      // 3. –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å
      await monitorJobProgress(jobId)
    }

    // –û—á–∏—Å—Ç–∫–∞
    if (fs.existsSync(testZipPath)) {
      fs.unlinkSync(testZipPath)
      console.log('üßπ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω')
    }

    console.log(`\nüéØ === –†–ï–ó–£–õ–¨–¢–ê–¢ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ===`)
    console.log(`‚úÖ Background Processor –ø—Ä–∏–Ω—è–ª –∑–∞–¥–∞–Ω–∏–µ`)
    console.log(`‚úÖ API –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`)
    console.log(`‚úÖ –í–∞–ª–∏–¥–Ω—ã–µ JPEG –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã`)
    console.log(`‚è≥ Replicate –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –º–æ—Ä—Ñ–∏–Ω–≥ –ø–∞—Ä—ã`)
    console.log(`üîÑ FFmpeg –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è —Å–∫–ª–µ–∏—Ç—å –≤–∏–¥–µ–æ`)
    console.log(`üì§ Fallback —Å–∏—Å—Ç–µ–º–∞ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –µ—Å–ª–∏ FFmpeg –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`)
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', {
      message: error.message,
      status: error.response?.status,
      statusText: error.response?.statusText,
      data: error.response?.data,
    })

    // –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüîß –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –°–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω')
      console.log('–ó–∞–ø—É—Å—Ç–∏: bun run dev')
    }
  }
}

async function monitorJobProgress(jobId) {
  console.log(`üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏—è: ${jobId}`)

  const maxChecks = 10 // –ú–∞–∫—Å–∏–º—É–º 10 –ø—Ä–æ–≤–µ—Ä–æ–∫
  const checkInterval = 10000 // 10 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏

  for (let i = 0; i < maxChecks; i++) {
    try {
      const statusResponse = await axios.get(
        `${API_BASE_URL}/generate/morph-jobs/${jobId}/status`,
        {
          timeout: 10000,
        }
      )

      const job = statusResponse.data
      console.log(`\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ ${i + 1}/${maxChecks}:`)
      console.log(`   Status: ${job.status}`)
      console.log(
        `   Progress: ${job.progress.completed_pairs}/${job.progress.total_pairs} (${job.progress.percentage}%)`
      )

      if (job.progress.current_pair) {
        console.log(`   Current: ${job.progress.current_pair}`)
      }

      if (job.progress.estimated_remaining_minutes) {
        console.log(
          `   ETA: ~${job.progress.estimated_remaining_minutes} –º–∏–Ω—É—Ç`
        )
      }

      if (job.error_message) {
        console.log(`   ‚ùå Error: ${job.error_message}`)
      }

      // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      if (job.status === 'completed') {
        console.log(`üéâ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!`)
        if (job.result) {
          console.log(
            `   –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${Math.round(
              job.result.processing_time_minutes
            )} –º–∏–Ω—É—Ç`
          )
          console.log(`   –ü–∞—Ä—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã: ${job.result.pairs_processed}`)
        }
        break
      }

      if (job.status === 'failed') {
        console.log(`‚ùå –ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ: ${job.error_message}`)
        break
      }

      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –µ—Å–ª–∏ —Å—Ç–∞—Ç—É—Å processing –∏–ª–∏ pending
      if (job.status === 'processing' || job.status === 'pending') {
        if (i < maxChecks - 1) {
          console.log(
            `‚è≥ –ñ–¥–µ–º ${checkInterval / 1000} —Å–µ–∫—É–Ω–¥ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...`
          )
          await new Promise(resolve => setTimeout(resolve, checkInterval))
        }
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${i + 1}):`, error.message)
      break
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
if (require.main === module) {
  testBackgroundMorphingReal()
    .then(() => console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ JPEG –∑–∞–≤–µ—Ä—à–µ–Ω–æ!'))
    .catch(console.error)
}
