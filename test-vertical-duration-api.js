#!/usr/bin/env node

/**
 * –ü–û–õ–ù–´–ô –¢–ï–°–¢ –í–ï–†–¢–ò–ö–ê–õ–¨–ù–û–ì–û –í–ò–î–ï–û –ò DURATION API
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É aspect ratio 9:16 –∏ duration –≤ Kie.ai
 */

const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '.env') });

console.log('üé¨ –¢–ï–°–¢ –í–ï–†–¢–ò–ö–ê–õ–¨–ù–û–ì–û –í–ò–î–ï–û –ò DURATION');
console.log('=' .repeat(50));
console.log(`üîë API Key: ${process.env.KIE_AI_API_KEY ? '–£–°–¢–ê–ù–û–í–õ–ï–ù' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);

if (!process.env.KIE_AI_API_KEY) {
  console.log('‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ KIE_AI_API_KEY –≤ .env');
  process.exit(1);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è 
const testCases = [
  {
    name: 'üéØ –¢–ï–°–¢ 1: –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ 2 —Å–µ–∫—É–Ω–¥—ã',
    model: 'veo3',
    prompt: 'A beautiful red rose blooming in a garden, cinematic lighting',
    duration: 2,
    aspectRatio: '16:9'
  },
  {
    name: 'üì± –¢–ï–°–¢ 2: –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ 4 —Å–µ–∫—É–Ω–¥—ã', 
    model: 'veo3',
    prompt: 'A cat playing with a ball of yarn, vertical phone video style',
    duration: 4,
    aspectRatio: '9:16'
  }
];

async function makeKieApiRequest(payload) {
  try {
    const response = await fetch('https://api.kie.ai/api/v1/veo/generate', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.KIE_AI_API_KEY}`,
        'Accept': 'application/json'
      },
      body: JSON.stringify(payload)
    });

    if (!response.ok) {
      const error = await response.text();
      throw new Error(`API Error ${response.status}: ${error}`);
    }

    return await response.json();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
    throw error;
  }
}

async function checkVideoStatus(requestId) {
  try {
    const response = await fetch(`https://api.kie.ai/api/v1/veo/record-info?request_id=${requestId}`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${process.env.KIE_AI_API_KEY}`,
        'Accept': 'application/json'
      }
    });

    if (!response.ok) {
      const error = await response.text();
      throw new Error(`Status API Error ${response.status}: ${error}`);
    }

    return await response.json();
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error.message);
    throw error;
  }
}

async function waitForVideo(requestId, maxWaitTime = 300000) {
  console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ (ID: ${requestId})...`);
  const startTime = Date.now();
  let attempt = 0;

  while (Date.now() - startTime < maxWaitTime) {
    attempt++;
    try {
      const status = await checkVideoStatus(requestId);
      console.log(`üìã –ü–æ–ø—ã—Ç–∫–∞ ${attempt}: –°—Ç–∞—Ç—É—Å = ${status.status}`);

      if (status.status === 'completed') {
        console.log('‚úÖ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!');
        return status;
      } else if (status.status === 'failed') {
        throw new Error(`–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: ${status.error || 'Unknown error'}`);
      }

      // –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
      await new Promise(resolve => setTimeout(resolve, 10000));
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}):`, error.message);
      await new Promise(resolve => setTimeout(resolve, 5000));
    }
  }

  throw new Error('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
}

async function runTest(testCase) {
  console.log(`\n${testCase.name}`);
  console.log('-'.repeat(40));

  const payload = {
    model: testCase.model,
    prompt: testCase.prompt,
    duration: testCase.duration,
    aspect_ratio: testCase.aspectRatio,
    resolution: testCase.aspectRatio === '9:16' ? '720x1280' : '1280x720'
  };

  console.log('üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:');
  console.log(JSON.stringify(payload, null, 2));

  try {
    // 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    console.log('\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é...');
    const response = await makeKieApiRequest(payload);
    
    if (response.request_id) {
      console.log(`‚úÖ –ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç! ID: ${response.request_id}`);
      
      // 2. –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      const result = await waitForVideo(response.request_id);
      
      if (result.video_url) {
        console.log(`üé¨ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ: ${result.video_url}`);
        
        // 3. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        console.log('\nüìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–ê:');
        console.log(`- URL: ${result.video_url}`);
        console.log(`- –ó–∞–ø—Ä–æ—à–µ–Ω–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${testCase.duration} —Å–µ–∫`);
        console.log(`- –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π aspect ratio: ${testCase.aspectRatio}`);
        console.log(`- –§–æ—Ä–º–∞—Ç: ${testCase.aspectRatio === '9:16' ? '–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π' : '–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π'}`);
        
        return {
          success: true,
          url: result.video_url,
          requestedDuration: testCase.duration,
          requestedAspectRatio: testCase.aspectRatio,
          testName: testCase.name
        };
      } else {
        throw new Error('–í–∏–¥–µ–æ URL –Ω–µ –ø–æ–ª—É—á–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ');
      }
    } else {
      throw new Error('Request ID –Ω–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç API');
    }
  } catch (error) {
    console.log(`‚ùå –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù: ${error.message}`);
    return {
      success: false,
      error: error.message,
      testName: testCase.name
    };
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
async function runAllTests() {
  console.log('üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï...\n');
  const results = [];

  for (const testCase of testCases) {
    const result = await runTest(testCase);
    results.push(result);
    
    // –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∑–∏—Ç—å API
    if (testCases.indexOf(testCase) < testCases.length - 1) {
      console.log('\n‚è∏Ô∏è –ü–∞—É–∑–∞ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º —Ç–µ—Å—Ç–æ–º...');
      await new Promise(resolve => setTimeout(resolve, 5000));
    }
  }

  // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
  console.log('\n' + '='.repeat(60));
  console.log('üìã –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢:');
  console.log('='.repeat(60));

  const successful = results.filter(r => r.success);
  const failed = results.filter(r => !r.success);

  console.log(`\n‚úÖ –£–°–ü–ï–®–ù–û: ${successful.length}/${results.length}`);
  successful.forEach(result => {
    console.log(`  - ${result.testName}`);
    console.log(`    üîó URL: ${result.url}`);
    console.log(`    ‚è±Ô∏è  Duration: ${result.requestedDuration} —Å–µ–∫`);
    console.log(`    üìê Aspect: ${result.requestedAspectRatio}`);
  });

  if (failed.length > 0) {
    console.log(`\n‚ùå –ü–†–û–í–ê–õ–ï–ù–û: ${failed.length}/${results.length}`);
    failed.forEach(result => {
      console.log(`  - ${result.testName}: ${result.error}`);
    });
  }

  console.log('\n' + '='.repeat(60));
  
  // –í—ã–≤–æ–¥—ã
  console.log('üìù –í–´–í–û–î–´:');
  
  const hasVertical = successful.some(r => r.requestedAspectRatio === '9:16');
  const hasDuration = successful.some(r => r.requestedDuration !== 8);
  
  console.log(`- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ (9:16): ${hasVertical ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
  console.log(`- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ duration –ø–∞—Ä–∞–º–µ—Ç—Ä–∞: ${hasDuration ? '‚úÖ –î–ê' : '‚ùå –ù–ï–¢'}`);
  console.log(`- –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: Kie.ai API`);
  console.log(`- –ú–æ–¥–µ–ª—å: Veo 3 Fast`);
  
  if (successful.length > 0) {
    console.log('\nüéâ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('- –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Kie.ai –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ');
    console.log('- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –∫–∞—Å—Ç–æ–º–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å');
    if (hasVertical) {
      console.log('- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö');
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
runAllTests().catch(error => {
  console.error('üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error);
  process.exit(1);
});