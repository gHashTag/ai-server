#!/usr/bin/env node

/**
 * üåê –¢–µ—Å—Ç HTTP API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Inngest Dev Server
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã (–±–µ–∑ SDK)
 */

async function testHttpApiConnection() {
  console.log('üåê –¢–µ—Å—Ç–∏—Ä—É–µ–º HTTP API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Inngest Dev Server...\n')

  const INNGEST_URL = 'http://localhost:8288/e/test-key'

  // –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–±—ã—Ç–∏–µ
  console.log('üß™ –¢–µ—Å—Ç 1: –û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ–±—ã—Ç–∏—è')

  try {
    const response1 = await fetch(INNGEST_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        name: 'test/http-connection',
        data: {
          message: 'Hello from HTTP API!',
          timestamp: new Date().toISOString(),
          test_number: 1,
        },
      }),
    })

    const result1 = await response1.json()

    if (result1.status === 200) {
      console.log('‚úÖ –ü—Ä–æ—Å—Ç–æ–µ —Å–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ')
      console.log('üìã Event ID:', result1.ids[0])
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞:', result1)
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞:', error.message)
  }

  console.log('')

  // –¢–µ—Å—Ç 2: Instagram Scraper —Å–æ–±—ã—Ç–∏–µ
  console.log('üß™ –¢–µ—Å—Ç 2: –û—Ç–ø—Ä–∞–≤–∫–∞ Instagram Scraper —Å–æ–±—ã—Ç–∏—è')

  try {
    const instagramEvent = {
      name: 'instagram/scraper-v2',
      data: {
        username_or_id: 'test_user_http',
        project_id: 999,
        max_users: 3,
        max_reels_per_user: 2,
        scrape_reels: false,
        requester_telegram_id: 'http_test_144022504',
      },
    }

    const response2 = await fetch(INNGEST_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(instagramEvent),
    })

    const result2 = await response2.json()

    if (result2.status === 200) {
      console.log('‚úÖ Instagram —Å–æ–±—ã—Ç–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ')
      console.log('üìã Event ID:', result2.ids[0])
      console.log('üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:', {
        target: instagramEvent.data.username_or_id,
        project: instagramEvent.data.project_id,
        competitors: instagramEvent.data.max_users,
      })
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞:', result2)
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞:', error.message)
  }

  console.log('')

  // –¢–µ—Å—Ç 3: Batch —Å–æ–±—ã—Ç–∏—è
  console.log('üß™ –¢–µ—Å—Ç 3: –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π (batch)')

  try {
    const batchEvents = [
      {
        name: 'test/batch-event-1',
        data: { batch_id: 1, message: 'First event' },
      },
      {
        name: 'test/batch-event-2',
        data: { batch_id: 2, message: 'Second event' },
      },
      {
        name: 'test/batch-event-3',
        data: { batch_id: 3, message: 'Third event' },
      },
    ]

    const response3 = await fetch(INNGEST_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(batchEvents),
    })

    const result3 = await response3.json()

    if (result3.status === 200) {
      console.log('‚úÖ Batch —Å–æ–±—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ')
      console.log('üìã Event IDs:', result3.ids)
      console.log('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π:', result3.ids.length)
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞:', result3)
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ HTTP –∑–∞–ø—Ä–æ—Å–∞:', error.message)
  }

  console.log('\n' + '='.repeat(60))
  console.log('üéØ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:')
  console.log('‚Ä¢ HTTP API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞: http://localhost:8288/e/{key}')
  console.log('‚Ä¢ –°–æ–±—ã—Ç–∏—è –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è')
  console.log('‚Ä¢ –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ –±–∞—Ç—á–∏')
  console.log('‚Ä¢ –ù–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è Inngest SDK - —Ç–æ–ª—å–∫–æ fetch/axios')
  console.log('‚Ä¢ Telegram –±–æ—Ç –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —ç—Ç–∏–º —Å–ø–æ—Å–æ–±–æ–º!')
  console.log('='.repeat(60))
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
testHttpApiConnection().catch(error => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
  process.exit(1)
})

module.exports = { testHttpApiConnection }
