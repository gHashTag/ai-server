/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π end-to-end —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å—é —Ü–µ–ø–æ—á–∫—É: API -> Inngest -> Database -> Response
 */

const { Pool } = require('pg')
const fetch = require('node-fetch')

// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Neon
const dbPool = new Pool({
  connectionString: 'postgresql://neondb_owner:npg_5RWzh7CwrXxE@ep-delicate-block-a1l1lt0p-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require',
  ssl: { rejectUnauthorized: false }
})

async function testEndToEnd() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤...')
  
  const testData = {
    username: 'natgeo',
    user_telegram_id: '144022504_test',
    user_chat_id: '144022504_test',
    bot_name: 'neuro_blogger_bot',
    max_reels: 3,
    min_views: 1000,
    max_age_days: 14,
    delivery_format: 'digest',
    project_id: 999
  }
  
  try {
    // üìã –≠—Ç–∞–ø 1: –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    console.log('\nüìã –≠—Ç–∞–ø 1: –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')
    await cleanupTestData(testData.user_telegram_id, testData.username)
    
    // üîó –≠—Ç–∞–ø 2: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
    console.log('\nüîó –≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î...')
    const dbConnection = await testDatabaseConnection()
    if (!dbConnection) {
      throw new Error('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')
    }
    
    // üìä –≠—Ç–∞–ø 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
    console.log('\nüìä –≠—Ç–∞–ø 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü...')
    const tablesOk = await verifyTables()
    if (!tablesOk) {
      throw new Error('–¢–∞–±–ª–∏—Ü—ã –Ω–µ –≥–æ—Ç–æ–≤—ã')
    }
    
    // üåê –≠—Ç–∞–ø 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoint
    console.log('\nüåê –≠—Ç–∞–ø 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoint...')
    const apiResult = await testAPIEndpoint(testData)
    if (!apiResult.success) {
      throw new Error(`API –æ—à–∏–±–∫–∞: ${apiResult.error}`)
    }
    
    // ‚è≥ –≠—Ç–∞–ø 5: –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    console.log('\n‚è≥ –≠—Ç–∞–ø 5: –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ Inngest...')
    await new Promise(resolve => setTimeout(resolve, 5000)) // 5 —Å–µ–∫—É–Ω–¥
    
    // üìù –≠—Ç–∞–ø 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î
    console.log('\nüìù –≠—Ç–∞–ø 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–µ–π –≤ –ë–î...')
    const dbResult = await verifyDatabaseRecords(testData)
    
    // üîç –≠—Ç–∞–ø 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ API
    console.log('\nüîç –≠—Ç–∞–ø 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ API...')
    const statusResult = await testStatusEndpoint(testData)
    
    // üì± –≠—Ç–∞–ø 8: –°–∏–º—É–ª—è—Ü–∏—è Telegram –¥–æ—Å—Ç–∞–≤–∫–∏ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞)
    console.log('\nüì± –≠—Ç–∞–ø 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Telegram...')
    await testTelegramData(testData)
    
    // üß™ –≠—Ç–∞–ø 9: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ edge cases
    console.log('\nüß™ –≠—Ç–∞–ø 9: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ edge cases...')
    await testEdgeCases(testData)
    
    // üóëÔ∏è –≠—Ç–∞–ø 10: –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    console.log('\nüóëÔ∏è –≠—Ç–∞–ø 10: –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞...')
    await cleanupTestData(testData.user_telegram_id, testData.username)
    
    console.log('\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!')
    return true
    
  } catch (error) {
    console.error('\nüí• –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù:', error.message)
    console.error('üìù –î–µ—Ç–∞–ª–∏:', error.stack)
    
    // –û—á–∏—Å—Ç–∫–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    await cleanupTestData(testData.user_telegram_id, testData.username)
    return false
  }
}

async function testDatabaseConnection() {
  try {
    const client = await dbPool.connect()
    const { rows } = await client.query('SELECT NOW() as current_time')
    client.release()
    
    console.log(`  ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ (${rows[0].current_time})`)
    return true
  } catch (error) {
    console.error(`  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: ${error.message}`)
    return false
  }
}

async function verifyTables() {
  const client = await dbPool.connect()
  
  try {
    const requiredTables = [
      'competitor_subscriptions',
      'competitor_profiles',
      'competitor_delivery_history',
      'instagram_apify_reels'
    ]
    
    let allTablesExist = true
    
    for (const table of requiredTables) {
      const { rows } = await client.query(`
        SELECT table_name FROM information_schema.tables 
        WHERE table_schema = 'public' AND table_name = $1
      `, [table])
      
      if (rows.length === 0) {
        console.log(`  ‚ùå –¢–∞–±–ª–∏—Ü–∞ ${table} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`)
        allTablesExist = false
      } else {
        console.log(`  ‚úÖ –¢–∞–±–ª–∏—Ü–∞ ${table} –Ω–∞–π–¥–µ–Ω–∞`)
      }
    }
    
    return allTablesExist
    
  } finally {
    client.release()
  }
}

async function testAPIEndpoint(testData) {
  try {
    console.log('  üåê –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API...')
    
    const response = await fetch('http://localhost:3000/api/competitor-monitoring', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(testData),
      timeout: 10000
    })
    
    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`)
    }
    
    const result = await response.json()
    
    console.log(`  ‚úÖ API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω`)
    console.log(`    Event ID: ${result.event_id}`)
    console.log(`    Competitor: @${result.competitor_username}`)
    console.log(`    Expected reels: ${result.expected_reels}`)
    
    return { success: true, data: result }
    
  } catch (error) {
    if (error.code === 'ECONNREFUSED') {
      console.log(`  ‚ö†Ô∏è API —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (—É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –∑–∞–ø—É—â–µ–Ω: npm run dev)`)
      return { success: false, error: 'Server not running' }
    }
    
    console.log(`  ‚ùå –û—à–∏–±–∫–∞ API: ${error.message}`)
    return { success: false, error: error.message }
  }
}

async function verifyDatabaseRecords(testData) {
  const client = await dbPool.connect()
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    const { rows: subscriptions } = await client.query(`
      SELECT * FROM competitor_subscriptions 
      WHERE user_telegram_id = $1 AND competitor_username = $2
    `, [testData.user_telegram_id, testData.username])
    
    if (subscriptions.length === 0) {
      console.log(`  ‚ö†Ô∏è –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–≤–æ–∑–º–æ–∂–Ω–æ, –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è)`)
      return false
    }
    
    const subscription = subscriptions[0]
    console.log(`  ‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:`)
    console.log(`    ID: ${subscription.id}`)
    console.log(`    –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç: @${subscription.competitor_username}`)
    console.log(`    –ê–∫—Ç–∏–≤–Ω–∞: ${subscription.is_active}`)
    console.log(`    –ú–∞–∫—Å —Ä–∏–ª–∑–æ–≤: ${subscription.max_reels}`)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞
    const { rows: profiles } = await client.query(`
      SELECT * FROM competitor_profiles WHERE username = $1
    `, [testData.username])
    
    if (profiles.length > 0) {
      console.log(`  ‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞ –Ω–∞–π–¥–µ–Ω:`)
      console.log(`    –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: ${profiles[0].total_subscribers}`)
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∏–ª–∑—ã
    const { rows: reels } = await client.query(`
      SELECT COUNT(*) as count FROM instagram_apify_reels 
      WHERE owner_username = $1
    `, [testData.username])
    
    console.log(`  üìä –†–∏–ª–∑–æ–≤ –≤ –ë–î –¥–ª—è @${testData.username}: ${reels[0].count}`)
    
    return true
    
  } finally {
    client.release()
  }
}

async function testStatusEndpoint(testData) {
  try {
    const url = `http://localhost:3000/api/competitor-monitoring/status/${testData.username}?user_telegram_id=${testData.user_telegram_id}&bot_name=${testData.bot_name}`
    
    console.log('  üîç –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞...')
    
    const response = await fetch(url, { timeout: 5000 })
    
    if (response.ok) {
      const result = await response.json()
      
      if (result.success && result.monitoring) {
        console.log(`  ‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω:`)
        console.log(`    –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω: ${result.monitoring}`)
        console.log(`    –†–∏–ª–∑–æ–≤ –≤ –ë–î: ${result.reels_in_database}`)
        console.log(`    –ü–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–∏–ª–∑–æ–≤: ${result.latest_reels?.length || 0}`)
        return true
      } else {
        console.log(`  ‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω`)
        return false
      }
    } else {
      console.log(`  ‚ö†Ô∏è API —Å—Ç–∞—Ç—É—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (${response.status})`)
      return false
    }
    
  } catch (error) {
    console.log(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`)
    return false
  }
}

async function testTelegramData(testData) {
  const client = await dbPool.connect()
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ –±—É–¥—Ç–æ –¥–ª—è Telegram –±–æ—Ç–∞
    const { rows: reels } = await client.query(`
      SELECT * FROM instagram_apify_reels 
      WHERE owner_username = $1 
      ORDER BY views_count DESC 
      LIMIT 1
    `, [testData.username])
    
    if (reels.length > 0) {
      const reel = reels[0]
      console.log(`  ‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è Telegram –≥–æ—Ç–æ–≤—ã:`)
      console.log(`    URL: ${reel.url}`)
      console.log(`    –ü—Ä–æ—Å–º–æ—Ç—Ä–æ–≤: ${reel.views_count?.toLocaleString() || 0}`)
      console.log(`    –õ–∞–π–∫–æ–≤: ${reel.likes_count?.toLocaleString() || 0}`)
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –≤ –±–æ—Ç–µ
      const message = `üé¨ –ù–æ–≤—ã–π —Ä–∏–ª–∑ –æ—Ç @${reel.owner_username}:\n` +
                     `üëÅ ${reel.views_count?.toLocaleString() || 0} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤\n` +
                     `‚ù§Ô∏è ${reel.likes_count?.toLocaleString() || 0} –ª–∞–π–∫–æ–≤\n` +
                     `üîó ${reel.url}`
      
      console.log(`  üì± –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –±–æ—Ç–∞ –≥–æ—Ç–æ–≤–æ (${message.length} —Å–∏–º–≤–æ–ª–æ–≤)`)
      return true
    } else {
      console.log(`  ‚ö†Ô∏è –ù–µ—Ç —Ä–∏–ª–∑–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram`)
      return false
    }
    
  } finally {
    client.release()
  }
}

async function testEdgeCases(testData) {
  try {
    console.log('  üß™ –¢–µ—Å—Ç –¥—É–±–ª–∏—Ä—É—é—â–µ–π –ø–æ–¥–ø–∏—Å–∫–∏...')
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –¥—É–±–ª–∏—Ä—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
    const duplicateResult = await testAPIEndpoint(testData)
    if (duplicateResult.success) {
      console.log(`  ‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ`)
    }
    
    console.log('  üß™ –¢–µ—Å—Ç –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...')
    
    // –¢–µ—Å—Ç —Å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    const invalidData = { ...testData, username: '', max_reels: 0 }
    const invalidResult = await testAPIEndpoint(invalidData)
    
    if (!invalidResult.success) {
      console.log(`  ‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç`)
    } else {
      console.log(`  ‚ö†Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∞ –æ—à–∏–±–∫—É`)
    }
    
  } catch (error) {
    console.log(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ edge cases: ${error.message}`)
  }
}

async function cleanupTestData(telegramId, username) {
  const client = await dbPool.connect()
  
  try {
    // –£–¥–∞–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ—Å—Ç–∞–≤–æ–∫
    await client.query(`
      DELETE FROM competitor_delivery_history 
      WHERE subscription_id IN (
        SELECT id FROM competitor_subscriptions 
        WHERE user_telegram_id = $1
      )
    `, [telegramId])
    
    // –£–¥–∞–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
    const { rowCount } = await client.query(`
      DELETE FROM competitor_subscriptions 
      WHERE user_telegram_id = $1
    `, [telegramId])
    
    if (rowCount > 0) {
      console.log(`  üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ ${rowCount} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫`)
    }
    
  } catch (error) {
    console.log(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: ${error.message}`)
  } finally {
    client.release()
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testEndToEnd()
  .then((success) => {
    if (success) {
      console.log(`
üéâ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!

üìã –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon Database
‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü
‚úÖ API endpoints
‚úÖ Inngest events
‚úÖ –ó–∞–ø–∏—Å—å –≤ –ë–î
‚úÖ –ß—Ç–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è Telegram
‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ edge cases
‚úÖ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö

üöÄ –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É!

üí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç —Å Telegram –±–æ—Ç–æ–º
2. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ (cron)
3. –†–∞–∑–≤–µ—Ä–Ω–∏—Ç–µ –≤ –ø—Ä–æ–¥–∞–∫—à–Ω
`)
      process.exit(0)
    } else {
      console.log(`
üí• –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ –ü–†–û–í–ê–õ–ï–ù!

üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Inngest –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
`)
      process.exit(1)
    }
  })
  .catch((error) => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error)
    process.exit(1)
  })
  .finally(() => {
    dbPool.end()
  })