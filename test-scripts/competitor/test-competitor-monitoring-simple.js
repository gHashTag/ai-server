/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
 * –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ Inngest —Å–æ–±—ã—Ç–∏—è
 */

// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è
async function testMonitoringFunction() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤...')
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (!process.env.SUPABASE_URL) {
    console.error('‚ùå SUPABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞')
    return
  }
  
  if (!process.env.SUPABASE_SERVICE_ROLE_KEY) {
    console.error('‚ùå SUPABASE_SERVICE_ROLE_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞')
    return
  }
  
  console.log('‚úÖ Supabase –Ω–∞—Å—Ç—Ä–æ–µ–Ω')
  
  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  const testData = {
    username: 'natgeo',
    user_telegram_id: '144022504',
    user_chat_id: '144022504', 
    bot_name: 'neuro_blogger_bot',
    max_reels: 5,
    min_views: 1000,
    max_age_days: 14,
    delivery_format: 'digest',
    project_id: 999
  }
  
  console.log('üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞:', testData)
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Supabase
    const { createClient } = require('@supabase/supabase-js')
    const supabase = createClient(
      process.env.SUPABASE_URL,
      process.env.SUPABASE_SERVICE_ROLE_KEY
    )
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—Ä–æ—Å –∫ —Ç–∞–±–ª–∏—Ü–µ)
    console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤...')
    
    const { data: subscriptions, error } = await supabase
      .from('competitor_subscriptions')
      .select('*')
      .eq('user_telegram_id', testData.user_telegram_id)
      .limit(3)
    
    if (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase:', error.message)
      return
    }
    
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase —Ä–∞–±–æ—Ç–∞–µ—Ç')
    console.log(`üë• –¢–µ–∫—É—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: ${subscriptions.length}`)
    
    if (subscriptions.length > 0) {
      console.log('üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:')
      subscriptions.forEach((sub, i) => {
        console.log(`${i + 1}. @${sub.competitor_username} (–∞–∫—Ç–∏–≤–Ω–∞: ${sub.is_active})`)
      })
    }
      
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–∏–ª–∑—ã –≤ –ë–î
    const { data: reels, error: reelsError } = await supabase
      .from('instagram_apify_reels')
      .select('*', { count: 'exact', head: true })
      .eq('owner_username', testData.username)
    
    if (reelsError) {
      console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∏–ª–∑–æ–≤:', reelsError.message)
    } else if (reels && reels.length > 0) {
      console.log(`üé¨ –†–∏–ª–∑–æ–≤ @${testData.username} –≤ –ë–î: ${reels.length}`)
    } else {
      console.log(`üì≠ –†–∏–ª–∑–æ–≤ @${testData.username} –≤ –ë–î –ø–æ–∫–∞ –Ω–µ—Ç`)
    }
    
    console.log('\nüéØ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
    console.log(`
üìù –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:

1. –ß–µ—Ä–µ–∑ API (–µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω):
   curl -X POST http://localhost:3000/api/competitor-monitoring \\
     -H "Content-Type: application/json" \\
     -d '${JSON.stringify(testData)}'

2. –ß–µ—Ä–µ–∑ Inngest –Ω–∞–ø—Ä—è–º—É—é (–≤ –∫–æ–¥–µ):
   await inngest.send({
     name: 'competitor/monitor',
     data: ${JSON.stringify(testData, null, 2)}
   })

3. –ß–µ—Ä–µ–∑ Telegram –±–æ—Ç (–¥–æ–±–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /monitor)

üîÑ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
‚Ä¢ –°–æ–∑–¥–∞—Å—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ @${testData.username}
‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç –ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ Apify
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç ${testData.max_reels} –ª—É—á—à–∏—Ö —Ä–∏–ª–∑–æ–≤ –≤ –ë–î
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç 1 –ª—É—á—à–∏–π —Ä–∏–ª–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

‚ö° –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–π–º–µ—Ç 1-2 –º–∏–Ω—É—Ç—ã
`)
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message)
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ –ë–î
async function createTestSubscription() {
  console.log('\nüß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ë–î...')
  
  try {
    const { createClient } = require('@supabase/supabase-js')
    const supabase = createClient(
      process.env.SUPABASE_URL,
      process.env.SUPABASE_SERVICE_ROLE_KEY
    )

    const subscriptionData = {
      user_telegram_id: '144022504',
      user_chat_id: '144022504',
      bot_name: 'neuro_blogger_bot',
      competitor_username: 'natgeo',
      max_reels: 5,
      min_views: 1000,
      max_age_days: 14,
      delivery_format: 'digest',
      is_active: true
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
    const { data: existing } = await supabase
      .from('competitor_subscriptions')
      .select('*')
      .eq('user_telegram_id', subscriptionData.user_telegram_id)
      .eq('competitor_username', subscriptionData.competitor_username)
      .eq('bot_name', subscriptionData.bot_name)
      .single()

    let result
    if (existing) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é
      const { data, error } = await supabase
        .from('competitor_subscriptions')
        .update(subscriptionData)
        .eq('id', existing.id)
        .select()
        .single()
      
      if (error) throw error
      result = data
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
      const { data, error } = await supabase
        .from('competitor_subscriptions')
        .insert(subscriptionData)
        .select()
        .single()
      
      if (error) throw error
      result = data
    }
    
    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:')
    console.log(`   ID: ${result.id}`)
    console.log(`   –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç: @${result.competitor_username}`)
    console.log(`   –ê–∫—Ç–∏–≤–Ω–∞: ${result.is_active}`)
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:', error.message)
  }
}

async function main() {
  await testMonitoringFunction()
  
  // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
  const createTest = process.argv.includes('--create-test')
  if (createTest) {
    await createTestSubscription()
  }
}

main().catch(console.error)