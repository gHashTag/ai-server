/**
 * üß¨ –¢–µ—Å—Ç –ú–æ—Ä—Ñ–∏–Ω–≥ –≠–Ω–¥–ø–æ–∏–Ω—Ç–∞
 * –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è /generate/morph-images
 */

const FormData = require('form-data')
const fs = require('fs')
const path = require('path')
const axios = require('axios')

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const SERVER_URL = 'http://localhost:4000'
const SECRET_KEY = process.env.SECRET_API_KEY || 'your-secret-key-here'

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const TEST_DATA = {
  type: 'morphing',
  telegram_id: '144022504',
  image_count: '3',
  morphing_type: 'seamless',
  model: 'kling-v1.6-pro',
  is_ru: 'true',
  bot_name: 'ai_koshey_bot',
  username: 'test_user', // –î–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
}

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π ZIP –∞—Ä—Ö–∏–≤ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
 */
function createTestZipFile() {
  console.log('üß¨ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ ZIP –∞—Ä—Ö–∏–≤–∞...')

  // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, —Å–æ–∑–¥–∞–¥–∏–º –ø—É—Å—Ç–æ–π ZIP —Ñ–∞–π–ª
  // –í —Ä–µ–∞–ª—å–Ω–æ–º —Ç–µ—Å—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const zipPath = path.join(__dirname, 'test_morphing_images.zip')

  if (fs.existsSync(zipPath)) {
    console.log('üß¨ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–µ—Å—Ç–æ–≤—ã–π ZIP:', zipPath)
    return zipPath
  }

  // –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π —Ñ–∞–π–ª –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É
  fs.writeFileSync(zipPath, 'PK\x03\x04\x14\x00\x00\x00\x08\x00') // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è ZIP —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
  console.log('üß¨ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π ZIP —Ñ–∞–π–ª:', zipPath)

  return zipPath
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ –º–æ—Ä—Ñ–∏–Ω–≥ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É
 */
async function testMorphingEndpoint() {
  console.log('üß¨ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç –º–æ—Ä—Ñ–∏–Ω–≥ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞...')

  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π ZIP —Ñ–∞–π–ª
    const zipPath = createTestZipFile()

    // –°–æ–∑–¥–∞–µ–º FormData
    const form = new FormData()

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–æ–ª—è
    Object.entries(TEST_DATA).forEach(([key, value]) => {
      form.append(key, value)
    })

    // –î–æ–±–∞–≤–ª—è–µ–º ZIP —Ñ–∞–π–ª
    form.append('images_zip', fs.createReadStream(zipPath))

    console.log('üß¨ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É...')
    console.log('üß¨ URL:', `${SERVER_URL}/generate/morph-images`)
    console.log('üß¨ Headers:', {
      'x-secret-key': SECRET_KEY ? '[HIDDEN]' : '[NOT SET]',
      'Content-Type': 'multipart/form-data',
    })
    console.log('üß¨ –î–∞–Ω–Ω—ã–µ:', TEST_DATA)

    const response = await axios.post(
      `${SERVER_URL}/generate/morph-images`,
      form,
      {
        headers: {
          'x-secret-key': SECRET_KEY,
          ...form.getHeaders(),
        },
        timeout: 30000,
        validateStatus: () => true, // –ù–µ –±—Ä–æ—Å–∞—Ç—å –æ—à–∏–±–∫—É –¥–ª—è –ª—é–±–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
      }
    )

    console.log('üß¨ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:')
    console.log('Status:', response.status)
    console.log('Headers:', response.headers)
    console.log('Data:', JSON.stringify(response.data, null, 2))

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (response.status === 200) {
      console.log('‚úÖ –¢–µ—Å—Ç –ü–†–û–®–ï–õ –£–°–ü–ï–®–ù–û!')
      console.log('üìã –î–µ—Ç–∞–ª–∏ —É—Å–ø–µ—Ö–∞:')
      console.log('  - –°—Ç–∞—Ç—É—Å: 200 OK')
      console.log('  - –ü–æ–ª—É—á–µ–Ω job_id:', response.data.job_id)
      console.log('  - –°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏:', response.data.status)
      console.log('  - –°–æ–æ–±—â–µ–Ω–∏–µ:', response.data.message)
    } else {
      console.log('‚ùå –¢–µ—Å—Ç –ù–ï –ü–†–û–®–ï–õ')
      console.log('üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:')
      console.log('  - HTTP –°—Ç–∞—Ç—É—Å:', response.status)
      console.log('  - –°–æ–æ–±—â–µ–Ω–∏–µ:', response.data?.message || '–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')
      console.log('  - –û—à–∏–±–∫–∞:', response.data?.error || '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è –æ—à–∏–±–∫–∏')
    }
  } catch (error) {
    console.error('‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ —Ç–µ—Å—Ç–µ:')
    console.error('–¢–∏–ø:', error.constructor.name)
    console.error('–°–æ–æ–±—â–µ–Ω–∏–µ:', error.message)

    if (error.response) {
      console.error('HTTP –°—Ç–∞—Ç—É—Å:', error.response.status)
      console.error('HTTP –î–∞–Ω–Ω—ã–µ:', error.response.data)
    }

    if (error.code) {
      console.error('–ö–æ–¥ –æ—à–∏–±–∫–∏:', error.code)
    }

    console.error('Stack trace:', error.stack)
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
 */
async function checkServerStatus() {
  console.log('üß¨ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞...')

  try {
    const response = await axios.get(`${SERVER_URL}/`, {
      timeout: 5000,
      validateStatus: () => true,
    })

    console.log('‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω:', response.status, response.statusText)
    return true
  } catch (error) {
    console.error('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message)
    console.error('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 4000')
    console.error('   –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞: bun run dev')
    return false
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞
 */
async function main() {
  console.log('üß¨='.repeat(50))
  console.log('üß¨ –¢–ï–°–¢ –ú–û–†–§–ò–ù–ì –≠–ù–î–ü–û–ò–ù–¢–ê')
  console.log('üß¨='.repeat(50))

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (!SECRET_KEY || SECRET_KEY === 'your-secret-key-here') {
    console.warn('‚ö†Ô∏è SECRET_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
    console.warn(
      '   –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é: export SECRET_API_KEY=your_actual_key'
    )
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ—Ä–≤–µ—Ä
  const serverRunning = await checkServerStatus()
  if (!serverRunning) {
    process.exit(1)
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
  await testMorphingEndpoint()

  console.log('üß¨='.repeat(50))
  console.log('üß¨ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù')
  console.log('üß¨='.repeat(50))
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
if (require.main === module) {
  main().catch(error => {
    console.error('üí• –ù–µ–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:', error)
    process.exit(1)
  })
}

module.exports = { testMorphingEndpoint, checkServerStatus }
