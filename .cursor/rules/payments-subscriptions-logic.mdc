---
description: 
globs: 
alwaysApply: true
---
# Logic: Payments and Subscriptions üí≥‚ú®

## üïâÔ∏è Single Source of Truth: `payments_v2`

_Updated: {current_date}_

**Core Principle:** The Supabase table `payments_v2` is the **sole source of truth** for all financial transactions and subscription statuses. Do not rely on the `users` table for subscription details.

**Database Enum (`operation_type`):** The database column `payments_v2.type` uses a PostgreSQL enum named `operation_type` with the following actual values:
```
MONEY_INCOME
MONEY_OUTCOME
SUBSCRIPTION_PURCHASE
SUBSCRIPTION_RENEWAL
REFUND
BONUS
REFERRAL
SYSTEM
MONEY_OUTCOME
```

**Code Enum (`PaymentType`):** The TypeScript enum `PaymentType` located in `@src/interfaces/payments.interface.ts` **correctly mirrors** these database enum values **EXCEPT** that `MONEY_OUTCOME` has been **removed** from the code-level enum.

**Current Code Logic (IMPORTANT):**
*   The code **attempts to use specific enum values** where appropriate (e.g., `PaymentType.REFUND` for refunds, `PaymentType.SYSTEM` for system operations, `PaymentType.BONUS` for bonuses).
*   **All expense/outcome operations** in the code have been **standardized to use ONLY `PaymentType.MONEY_OUTCOME`**. This includes places previously using the older `PaymentType.MONEY_OUTCOME`.
*   **CRITICAL DEPENDENCY & INCONSISTENCY:** This standardization **ASSUMES** that the SQL functions (`get_user_balance`, `get_user_balance_stats`) correctly interpret **`MONEY_OUTCOME`** as the sole subtraction type for balance calculation. Because `MONEY_OUTCOME` *still exists* in the database enum `operation_type`, there's a risk: **SQL functions might *still* be considering `MONEY_OUTCOME` as a valid subtraction type, potentially leading to incorrect balance if old data exists or if SQL isn't updated.**
*   **RECOMMENDED ACTION (DB):** Either remove `MONEY_OUTCOME` from the `operation_type` enum in Supabase OR modify SQL functions (`get_user_balance`, `get_user_balance_stats`) to *ignore* `MONEY_OUTCOME` and only use `MONEY_OUTCOME` for subtractions.

Key files for interaction:
- Core getter: `@src/core/supabase/getUserDetailsSubscription.ts`
- Balance calculation: `@src/core/supabase/getUserBalance.ts` (Relies on SQL function `get_user_balance`)
- Core interfaces:
    - `@src/interfaces/payments.interface.ts` (Defines `PaymentType` enum)
    - `@src/interfaces/subscription.interface.ts`
- Robokassa handler (in separate service): `@src/api-server/routes/robokassa.ts`

## üè∫ Duality of Purpose: `subscription_type` vs `service_type`

These two fields in `payments_v2` serve distinct purposes:

1.  **`subscription_type`** (DB type: `text`):
    *   **Purpose**: Records the **type of subscription** being purchased or granted (`NEUROPHOTO`, `NEUROBASE`, `NEUROTESTER`).
    *   **When Filled**: On rows representing a subscription purchase/grant (e.g., `type = 'SUBSCRIPTION_PURCHASE'`, `type = 'SUBSCRIPTION_RENEWAL'`, or `type = 'SYSTEM'` if granting via system).
    *   **When NULL**: On expense operations (`type = 'MONEY_OUTCOME'`) or other income types not related to a subscription grant (`BONUS`, `REFERRAL`).

2.  **`service_type`** (DB type: `text`):
    *   **Purpose**: Records the **specific service** for which stars/money were **spent** (`IMAGE_GENERATION`, `TEXT_TO_SPEECH`, etc., corresponds to `ModeEnum`).
    *   **When Filled**: Only on rows where `type = 'MONEY_OUTCOME'`.
    *   **When NULL**: On all income/system/subscription rows (`MONEY_INCOME`, `BONUS`, `REFUND`, `SYSTEM`, `SUBSCRIPTION_PURCHASE`, etc.).

**Conclusion:** `service_type = NULL` for non-expense operations is **CORRECT**. `subscription_type = NULL` for expense operations (`MONEY_OUTCOME`) is **CORRECT**.

## ‚ú® `getUserDetailsSubscription.ts`: The Oracle of User Status

This function (@src/core/supabase/getUserDetailsSubscription.ts) provides the current status:
- Fetches the last **completed** payment (`status = 'COMPLETED'`, `type` likely `SUBSCRIPTION_PURCHASE` or `SUBSCRIPTION_RENEWAL`) from `payments_v2`.
- Checks `subscription_type` (which is `text`) from that payment.
- **Special Logic `NEUROTESTER`**: If `subscription_type` is `NEUROTESTER`, `isSubscriptionActive` is set to `true` **regardless of date**.
- **Other Subscriptions**: Checks if the `payment_date` + 30 days is in the future.
- Returns `isSubscriptionActive`, `subscriptionType` (Enum derived from text), `subscriptionStartDate`.
- Also returns `stars` (from `getUserBalance`) and `isExist` (from `users` table check).
- **Does NOT return user level.**

## ‚öñÔ∏è `getUserBalance.ts`: The Keeper of Stars

This function (@src/core/supabase/getUserBalance.ts) **calls the SQL function `get_user_balance`**. The accuracy of the returned balance depends entirely on how that SQL function interprets the various `operation_type` enum values in the `payments_v2` table. It uses caching to reduce database load.

```typescript
import { TelegramId } from '@/interfaces/telegram.interface'
import { normalizeTelegramId } from '@/interfaces/telegram.interface'
import { supabase } from '@/core/supabase'
import { logger } from '@/utils/logger'

// –ö—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
type BalanceCache = {
  [key: string]: {
    balance: number
    timestamp: number
  }
}

// –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –±–∞–ª–∞–Ω—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (30 —Å–µ–∫—É–Ω–¥)
const BALANCE_CACHE_TTL = 30 * 1000

// –ö—ç—à –±–∞–ª–∞–Ω—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const balanceCache: BalanceCache = {}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ payments_v2
 * –í—ã–∑—ã–≤–∞–µ—Ç SQL-—Ñ—É–Ω–∫—Ü–∏—é get_user_balance
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î
 */
export const getUserBalance = async (
  telegram_id: TelegramId,
  bot_name?: string
): Promise<number> => {
  try {
    if (!telegram_id) {
      logger.warn('‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞ –±–µ–∑ telegram_id:', {
        description: 'Balance request without telegram_id',
        bot_name,
      })
      return 0
    }

    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º telegram_id –≤ —Å—Ç—Ä–æ–∫—É
    const normalizedId = normalizeTelegramId(telegram_id)
    const cacheKey = `${normalizedId}`
    const now = Date.now()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à–µ –∏ –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —Å—Ä–æ–∫ –∏—Ö –¥–µ–π—Å—Ç–≤–∏—è
    if (
      balanceCache[cacheKey] &&
      now - balanceCache[cacheKey].timestamp < BALANCE_CACHE_TTL
    ) {
      logger.info('üíæ –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∏–∑ –∫—ç—à–∞:', {
        description: 'Getting user balance from cache',
        telegram_id: normalizedId,
        bot_name,
        cached_balance: balanceCache[cacheKey].balance,
      })
      return balanceCache[cacheKey].balance
    }

    logger.info('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î:', {
      description: 'Getting user balance from database',
      telegram_id: normalizedId,
      bot_name,
    })

    // –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ get_user_balance
    const { data: stars, error } = await supabase.rpc('get_user_balance', {
      user_telegram_id: normalizedId.toString(), // –í–∞–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
    })

    if (error) {
      logger.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:', {
        description: 'Error getting balance',
        error: error.message,
        error_details: error,
        telegram_id: normalizedId,
      })
      // Fallback might be needed here if RPC fails, e.g., manual aggregation?
      // For now, return 0 on error.
      return 0
    }

    const balance = stars || 0

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –∫—ç—à
    balanceCache[cacheKey] = {
      balance,
      timestamp: now,
    }

    logger.info('‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω:', {
      description: 'User balance retrieved and cached',
      telegram_id: normalizedId,
      stars: balance,
      bot_name,
    })

    return balance
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤ getUserBalance:', {
      description: 'Error in getUserBalance function',
      error: error instanceof Error ? error.message : String(error),
      error_details: error,
      telegram_id,
    })
    return 0
  }
}

/**
 * –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∫—ç—à –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * –î–æ–ª–∂–µ–Ω –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π, –∏–∑–º–µ–Ω—è—é—â–∏—Ö –±–∞–ª–∞–Ω—Å
 */
export const invalidateBalanceCache = (telegram_id: TelegramId): void => {
  const normalizedId = normalizeTelegramId(telegram_id)
  const cacheKey = `${normalizedId}`

  if (balanceCache[cacheKey]) {
    delete balanceCache[cacheKey]
    logger.info('üîÑ –ö—ç—à –±–∞–ª–∞–Ω—Å–∞ –∏–Ω–≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω:', {
      description: 'Balance cache invalidated',
      telegram_id: normalizedId,
    })
  }
}
```

## üõ°Ô∏è Preventing Negative Balances and Handling Expenses

- **Operation Type Dictates Sign**: The `type` field (`MONEY_INCOME`, `BONUS`, `REFUND`, `MONEY_OUTCOME`, etc.) inherently defines the sign **IF AND ONLY IF** the SQL aggregation functions (`get_user_balance`, `get_user_balance_stats`) are correctly programmed to handle all these types. Currently, the code *writes* `MONEY_OUTCOME` for all expenses.
- **CRITICAL: No Negative Balances EVER**: The system MUST ensure that a user's final balance **NEVER drops below zero**.
- **Mandatory Pre-check**: Before performing ANY `MONEY_OUTCOME` operation, the system **MUST always check** if the user has sufficient funds using `getUserBalance`.
- **Reject if Insufficient**: If funds are insufficient, the `MONEY_OUTCOME` operation **MUST be rejected gracefully**, and **NO** `payments_v2` entry for the expense should occur.
- **Database Integrity**: Constraints/triggers can be a final safeguard but rely on application logic first.

## üõ†Ô∏è PostgreSQL Function: `create_system_payment`

- **Purpose**: Manually grant subscriptions or add funds via a system operation.
- **Location**: Needs to be created/edited manually in the **Supabase SQL Editor**.
- **CRITICAL**: Ensure this function inserts into `payments_v2` with the correct `type` (`SYSTEM` or maybe `MONEY_INCOME` - check how SQL treats `SYSTEM`), correctly sets `subscription_type` (text) when granting a subscription (leaving `service_type` as `NULL`), and uses UPPERCASE enum values (`SYSTEM`, `NEUROTESTER`, etc.).

## üìÑ Schema Details (from `docs/payments_v2_schema.md`)

```
# –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: –¢–∞–±–ª–∏—Ü–∞ `payments_v2`

–≠—Ç–æ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –æ–ø–∏—Å—ã–≤–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã `payments_v2`, –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–π –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–±–æ –≤—Å–µ—Ö —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö –≤ —Å–∏—Å—Ç–µ–º–µ.

**–í–∞–∂–Ω–æ:** –≠—Ç–∞ —Ç–∞–±–ª–∏—Ü–∞ –∑–∞–º–µ–Ω–∏–ª–∞ —É—Å—Ç–∞—Ä–µ–≤—à—É—é —Ç–∞–±–ª–∏—Ü—É `payments`. –í–µ—Å—å –Ω–æ–≤—ã–π –∫–æ–¥ –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `payments_v2`.

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã (–û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è)

| –ü–æ–ª–µ                | –¢–∏–ø                         | –û–ø–∏—Å–∞–Ω–∏–µ                                                             | –ü—Ä–∏–º–µ—Ä                  | –ü—Ä–∏–º–µ—á–∞–Ω–∏—è                                      |
| :------------------ | :-------------------------- | :------------------------------------------------------------------- | :---------------------- | :---------------------------------------------- |
| `id`                | `uuid`                      | –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø–∏—Å–∏ (Primary Key)                        |                         | –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏                      |
| `inv_id`            | `bigint`                    | –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∏–Ω–≤–æ–π—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç Robokassa). –£–Ω–∏–∫–∞–ª—å–Ω—ã–π.          | `777002`                | –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–≤—è–∑–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏     |
| `telegram_id`       | `text`                      | ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram.                                          | `'144022504'`           | –°–≤—è–∑—å —Å —Ç–∞–±–ª–∏—Ü–µ–π `users` (–ø–æ `telegram_id`)     |
| `bot_name`          | `text`                      | –ò–º—è –±–æ—Ç–∞, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ—à–ª–∞ –æ–ø–µ—Ä–∞—Ü–∏—è.                            | `'ai_koshey_bot'`       |                                                 |
| `amount`            | `numeric`                   | –°—É–º–º–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–∞–ª—é—Ç–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, RUB).                    | `10.00`                 | –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –¥–æ—Ö–æ–¥–∞/—Ä–∞—Å—Ö–æ–¥–∞       |
| `stars`             | `integer`                   | –≠–∫–≤–∏–≤–∞–ª–µ–Ω—Ç —Å—É–º–º—ã –≤ –∑–≤–µ–∑–¥–∞—Ö (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ).                         | `6`                     | –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –¥–æ—Ö–æ–¥–∞/—Ä–∞—Å—Ö–æ–¥–∞       |
| `currency`          | `text`                      | –ö–æ–¥ –≤–∞–ª—é—Ç—ã (ISO 4217).                                               | `'RUB'` or `'STARS'`    |                                                 |
| `status`            | `payment_status` (enum)     | –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ (`PENDING`, `COMPLETED`, `FAILED`).           | `'COMPLETED'`           |                                                 |
| `type`              | `payment_type` (enum)       | –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (`MONEY_INCOME`, `MONEY_OUTCOME`, `SUBSCRIPTION_PURCHASE`, `SUBSCRIPTION_RENEWAL`, `REFUND`, `BONUS`, `REFERRAL`, `SYSTEM`). | `'MONEY_INCOME'`        | –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∑–Ω–∞–∫ –≤ –∞–≥—Ä–µ–≥–∞—Ü–∏–∏ –±–∞–ª–∞–Ω—Å–∞            |
| `payment_method`    | `text`                      | –ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã.                                                        | `'Robokassa'`           | `'Telegram'`, `'Manual'`, `'System'` –∏ –¥—Ä.      |
| `description`       | `text`                      | –û–ø–∏—Å–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.                                                   | `'–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞'`  |                                                 |
| `metadata`          | `jsonb`                     | –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON.                                | `{"shp_item": "stars"}` |                                                 |
| `created_at`        | `timestamp with time zone`  | –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏.                                               |                         | –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏                   |
| `updated_at`        | `timestamp with time zone`  | –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏.                                  |                         | –û–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏                       |
| `subscription_type` | `subscription_type` (enum)  | **–¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏, –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —Å–≤—è–∑–∞–Ω —Å –Ω–µ–π.** (`NEUROPHOTO`, `NEUROBASE`, `NEUROTESTER`) | `'NEUROBASE'`           | `NULL` –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏–ª–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π –Ω–µ-–ø–æ–¥–ø–∏—Å–æ–∫ |
| `service_type`      | `mode_enum` (text/enum)     | **–¢–∏–ø —É—Å–ª—É–≥–∏, –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —Å–≤—è–∑–∞–Ω —Å —Ä–∞—Å—Ö–æ–¥–æ–º.** (`IMAGE_GENERATION`, ...) | `'IMAGE_GENERATION'`    | `NULL` –¥–ª—è –¥–æ—Ö–æ–¥–æ–≤ –∏–ª–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π      |
| `payment_date`      | `timestamp with time zone`  | –î–∞—Ç–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ (–≤–∞–∂–Ω–æ –¥–ª—è –ø–æ–¥–ø–∏—Å–æ–∫).            |                         | –ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ `status = 'COMPLETED'`         |

**Enums:**
- `payment_status`: `PENDING`, `COMPLETED`, `FAILED`, `CANCELLED`
- `operation_type` (DB enum for `type` column): `MONEY_INCOME`, `MONEY_OUTCOME`, `SUBSCRIPTION_PURCHASE`, `SUBSCRIPTION_RENEWAL`, `REFUND`, `BONUS`, `REFERRAL`, `SYSTEM`, `MONEY_OUTCOME`
- `subscription_type` (DB type: `text`): Example values: `NEUROPHOTO`, `NEUROBASE`, `NEUROTESTER`
- `mode_enum` (Used for `service_type`, DB type: `text`): Corresponds to values in `ModeEnum` interface.
```
