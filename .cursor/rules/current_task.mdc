---
description: 
globs: 
alwaysApply: true
---
# Current Task: Debug Robokassa Payment Notification for User

**Goal:** Ensure the user receives a notification upon successful payment via Robokassa, in addition to the bot owner.

**Decomposition:**

1.  **Verify Robokassa Success Callback:**
    *   Locate the endpoint/handler that receives the success callback from Robokassa. ([webhook.handler.ts](mdc:src/webhook/webhook.handler.ts) is a likely candidate).
    *   Examine the logic within this handler. Does it correctly identify the user associated with the payment?
    *   Check if there's code specifically designed to send a notification *to the user*.

2.  **Trace User Identification:**
    *   How is the `userId` or `chatId` obtained during the callback process? Is it stored in the payment metadata passed to Robokassa (e.g., in `shp_`) or retrieved from the database using the `invoiceId` (`InvId`)?
    *   Ensure this identification mechanism is functioning correctly and reliably retrieves the user's Telegram ID.

3.  **Inspect Notification Sending Logic:**
    *   Find the code block responsible for sending the success notification message (likely using `ctx.telegram.sendMessage` or a similar service method).
    *   Confirm that it *attempts* to send a message to the identified user's `chatId`.
    *   Look for any conditional logic (if statements, flags) that might be preventing the user notification from being sent under certain circumstances.
    *   Check the error handling around the `sendMessage` call for the user. Are potential errors being caught and logged?

4.  **Check Database Interaction:**
    *   Verify that the payment record in the database (e.g., in the `payment` table) is correctly updated upon successful payment and includes the necessary `userId`.
    *   Ensure the logic retrieving user details based on the `userId` from the database before sending the notification is working.

5.  **Review Recent Changes:**
    *   Examine recent commits related to payment processing ([webhook.handler.ts](mdc:src/webhook/webhook.handler.ts), payment services, user models) using [Git History](mdc:GIT_HISTORY) to see if any modifications might have unintentionally broken the user notification.

6.  **Consult README for Common Issues:**
    *   Before diving deep, check the [README.md](mdc:README.md) section "Common Testing Issues & Solutions" for potentially relevant known problems and solutions, as per our sacred rule "Память об ошибках".

7.  **Logging:**
    *   If the issue isn't immediately apparent, enhance logging within the callback handler, specifically logging the retrieved `userId`, the attempt to send the user notification, and any errors encountered.

**Next Steps:**

*   Begin by examining the Robokassa success callback handler, likely in [webhook.handler.ts](mdc:src/webhook/webhook.handler.ts), focusing on user identification and the notification sending block.
