/**
 * –¢–µ—Å—Ç Instagram API —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
 */

const axios = require('axios')

async function testWithDifferentUsers() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º Instagram API —Å —Ä–∞–∑–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏...')

  const API_KEY = 'da6f54ca68mshc06984da37c569bp1743f1jsne4c79beeb969'
  const HOST = 'real-time-instagram-scraper-api1.p.rapidapi.com'
  const BASE_URL = 'https://real-time-instagram-scraper-api1.p.rapidapi.com'

  // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const testUsers = [
    'cristiano', // –ö—Ä–∏—à—Ç–∏–∞–Ω—É –†–æ–Ω–∞–ª–¥—É
    'kyliejenner', // –ö–∞–π–ª–∏ –î–∂–µ–Ω–Ω–µ—Ä
    'selenagomez', // –°–µ–ª–µ–Ω–∞ –ì–æ–º–µ—Å
    'kimkardashian', // –ö–∏–º –ö–∞—Ä–¥–∞—à—å—è–Ω
    'arianagrande', // –ê—Ä–∏–∞–Ω–∞ –ì—Ä–∞–Ω–¥–µ
  ]

  for (const username of testUsers) {
    console.log(`\nüîç –ò—â–µ–º –ø–æ—Ö–æ–∂–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è @${username}...`)

    try {
      const response = await axios.get(`${BASE_URL}/v1/similar_users_v2`, {
        params: {
          username_or_id: username,
          count: 5,
        },
        headers: {
          'x-rapidapi-key': API_KEY,
          'x-rapidapi-host': HOST,
          'Content-Type': 'application/json',
        },
        timeout: 30000,
      })

      console.log(`‚úÖ API Response –¥–ª—è @${username}:`, response.status)
      console.log('- Status:', response.data?.status)
      console.log('- Message:', response.data?.message || 'No message')

      if (response.data?.data && typeof response.data.data !== 'string') {
        const users = response.data.data.users
        if (users && users.length > 0) {
          console.log(
            `üéâ SUCCESS! –ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ—Ö–æ–∂–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è @${username}`
          )

          console.log('üéØ –†–µ–∞–ª—å–Ω—ã–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç—ã:')
          users.slice(0, 3).forEach((user, index) => {
            const verified = user.is_verified ? '‚úÖ' : '‚ùå'
            console.log(
              `${index + 1}. @${user.username} - ${
                user.full_name || 'No name'
              } ${verified}`
            )
          })

          // –ù–ê–ô–î–ï–ù –†–ê–ë–û–ß–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨! –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
          console.log(
            `\nüöÄ –û–¢–õ–ò–ß–ù–û! @${username} —Ä–∞–±–æ—Ç–∞–µ—Ç. –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥...`
          )
          return await runFullScraping(username, users)
        }
      } else if (typeof response.data?.data === 'string') {
        console.log(`‚ö†Ô∏è API Error –¥–ª—è @${username}:`, response.data.data)
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 2000))
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è @${username}:`, error.message)
      if (error.response?.status === 429) {
        console.log('‚è≥ Rate limit, –∂–¥—ë–º 5 —Å–µ–∫—É–Ω–¥...')
        await new Promise(resolve => setTimeout(resolve, 5000))
      }
    }
  }

  console.log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞')
  return false
}

async function runFullScraping(targetUser, similarUsers) {
  console.log(`\nüî• –ó–ê–ü–£–°–ö–ê–ï–ú –ü–û–õ–ù–´–ô –ü–ê–†–°–ò–ù–ì –¥–ª—è @${targetUser}`)

  // –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏–º —Ä–µ–∞–ª—å–Ω—É—é Inngest —Ñ—É–Ω–∫—Ü–∏—é —Å —ç—Ç–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
  const { Inngest } = require('inngest')
  const inngest = new Inngest({ id: 'real-scraper-app' })

  try {
    const result = await inngest.send({
      name: 'instagram/scraper-v2',
      data: {
        username_or_id: targetUser,
        project_id: 1,
        max_users: 10,
        max_reels_per_user: 5,
        scrape_reels: true,
        requester_telegram_id: 'real_client_123',
      },
    })

    console.log('‚úÖ –ü–æ–ª–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω –≤ Inngest:', result.ids[0])
    return true
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error.message)
    return false
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
if (require.main === module) {
  testWithDifferentUsers()
    .then(success => {
      if (success) {
        console.log('\nüéâ –†–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ Instagram –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
        console.log(
          'üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ 1-2 –º–∏–Ω—É—Ç—ã –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.'
        )
      } else {
        console.log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥.')
      }
      process.exit(success ? 0 : 1)
    })
    .catch(error => {
      console.error('\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
      process.exit(1)
    })
}

module.exports = { testWithDifferentUsers }
