#!/usr/bin/env bun

import { Inngest } from 'inngest'
import {
  generateTestEvent,
  getDefaultTestData,
  allTestData,
} from './test-data-templates'

const API_URL = process.env.API_URL || 'http://localhost:4000'

console.log('API_URL', API_URL)

// –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Inngest
console.log('üîÑ Initializing Inngest client...')
const inngest = new Inngest({
  id: 'instagram-content-agent',
  eventKey:
    'K7T9iRqSGRrHyn5tCpEA7yJ3M3w60UKX4JdiImQKZQwr-9asldiO6FBBA5Bp-MEGYBX-K8SG4CgKtZvrR_YLRw',
})

console.log('‚úÖ Inngest client created successfully')

async function testAllFunctionsWithTemplates() {
  console.log('\nüöÄ Testing all Instagram functions with proper templates...')
  console.log(
    'üìä Using correct data types (string for telegram_id) and idempotency IDs'
  )

  try {
    // 1. Test findCompetitors - default case
    console.log('\n1Ô∏è‚É£ Testing findCompetitors (default)...')
    const competitorsDefault = generateTestEvent('findCompetitors', 'default')
    const competitorsResult = await inngest.send(competitorsDefault)
    console.log('‚úÖ findCompetitors (default) sent:', competitorsResult.ids[0])

    // 2. Test analyzeCompetitorReels - default case
    console.log('\n2Ô∏è‚É£ Testing analyzeCompetitorReels (default)...')
    const reelsDefault = generateTestEvent('analyzeCompetitorReels', 'default')
    const reelsResult = await inngest.send(reelsDefault)
    console.log('‚úÖ analyzeCompetitorReels (default) sent:', reelsResult.ids[0])

    // 3. Test extractTopContent - default case
    console.log('\n3Ô∏è‚É£ Testing extractTopContent (default)...')
    const topContentDefault = generateTestEvent('extractTopContent', 'default')
    const topContentResult = await inngest.send(topContentDefault)
    console.log('‚úÖ extractTopContent (default) sent:', topContentResult.ids[0])

    // 4. Test generateContentScripts - default case
    console.log('\n4Ô∏è‚É£ Testing generateContentScripts (default)...')
    const scriptsDefault = generateTestEvent(
      'generateContentScripts',
      'default'
    )
    const scriptsResult = await inngest.send(scriptsDefault)
    console.log(
      '‚úÖ generateContentScripts (default) sent:',
      scriptsResult.ids[0]
    )

    // 5. Test instagramScraperV2 - default case
    console.log('\n5Ô∏è‚É£ Testing instagramScraperV2 (default)...')
    const scraperDefault = generateTestEvent('instagramScraperV2', 'default')
    const scraperResult = await inngest.send(scraperDefault)
    console.log('‚úÖ instagramScraperV2 (default) sent:', scraperResult.ids[0])

    console.log('\nüéâ All functions tested successfully with proper templates!')
    console.log('\nüìä Event Summary:')
    console.log(
      '‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê'
    )
    console.log(
      '‚îÇ Function                ‚îÇ Status ‚îÇ Event ID                    ‚îÇ'
    )
    console.log(
      '‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§'
    )
    console.log(
      `‚îÇ findCompetitors         ‚îÇ ‚úÖ SENT ‚îÇ ${competitorsResult.ids[0]} ‚îÇ`
    )
    console.log(`‚îÇ analyzeCompetitorReels  ‚îÇ ‚úÖ SENT ‚îÇ ${reelsResult.ids[0]} ‚îÇ`)
    console.log(
      `‚îÇ extractTopContent       ‚îÇ ‚úÖ SENT ‚îÇ ${topContentResult.ids[0]} ‚îÇ`
    )
    console.log(
      `‚îÇ generateContentScripts  ‚îÇ ‚úÖ SENT ‚îÇ ${scriptsResult.ids[0]} ‚îÇ`
    )
    console.log(
      `‚îÇ instagramScraperV2      ‚îÇ ‚úÖ SENT ‚îÇ ${scraperResult.ids[0]} ‚îÇ`
    )
    console.log(
      '‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò'
    )

    console.log('\nüîç Check Inngest Dashboard: http://localhost:8288')
    console.log('üìù All events sent with proper data types and idempotency IDs')
  } catch (error) {
    console.error('‚ùå Error testing functions:', error)
    process.exit(1)
  }
}

async function testVariousTestCases() {
  console.log('\nüß™ Testing various test cases...')

  try {
    // Test minimal cases
    console.log('\nüîπ Testing minimal cases...')
    const competitorsMinimal = generateTestEvent('findCompetitors', 'minimal')
    const reelsMinimal = generateTestEvent('analyzeCompetitorReels', 'minimal')
    const topContentMinimal = generateTestEvent('extractTopContent', 'minimal')

    const minimalResults = await inngest.send([
      competitorsMinimal,
      reelsMinimal,
      topContentMinimal,
    ])

    console.log('‚úÖ Minimal cases sent:', minimalResults.ids.length, 'events')

    // Test large cases
    console.log('\nüîπ Testing large cases...')
    const competitorsLarge = generateTestEvent('findCompetitors', 'large_batch')
    const reelsExtended = generateTestEvent(
      'analyzeCompetitorReels',
      'extended_period'
    )
    const topContentLarge = generateTestEvent(
      'extractTopContent',
      'large_limit'
    )

    const largeResults = await inngest.send([
      competitorsLarge,
      reelsExtended,
      topContentLarge,
    ])

    console.log('‚úÖ Large cases sent:', largeResults.ids.length, 'events')

    console.log('\nüìä Test Cases Summary:')
    console.log('‚Ä¢ Minimal cases: 3 events')
    console.log('‚Ä¢ Large cases: 3 events')
    console.log('‚Ä¢ Default cases: 5 events')
    console.log('‚Ä¢ Total: 11 events sent')
  } catch (error) {
    console.error('‚ùå Error testing various cases:', error)
    process.exit(1)
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–µ–π—Å–æ–≤
function showAvailableTestCases() {
  console.log('\nüìã Available test cases for each function:')

  Object.entries(allTestData).forEach(([functionName, testCases]) => {
    console.log(`\nüî∏ ${functionName}:`)
    Object.keys(testCases).forEach(testCase => {
      console.log(`  - ${testCase}`)
    })
  })

  console.log('\nüí° Usage examples:')
  console.log('  generateTestEvent("findCompetitors", "default")')
  console.log(
    '  generateTestEvent("analyzeCompetitorReels", "extended_period")'
  )
  console.log('  generateTestEvent("extractTopContent", "large_limit")')
  console.log('  generateTestEvent("generateContentScripts", "real_reel")')
  console.log('  generateTestEvent("instagramScraperV2", "users_only")')
}

async function main() {
  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–µ–π—Å—ã
  showAvailableTestCases()

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
  await testAllFunctionsWithTemplates()

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∫–µ–π—Å—ã
  await testVariousTestCases()

  console.log('\nüéØ All tests completed successfully!')
  console.log('üîç Check Inngest Dashboard for results: http://localhost:8288')
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
main().catch(console.error)
