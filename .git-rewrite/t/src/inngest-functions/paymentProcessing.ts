import { inngest } from '@/core/inngest/clients'
import { updateUserBalance } from '@/core/supabase'
import { sendPaymentNotification } from '@/price/helpers'
import { createBotByName } from '@/config'
import { getTelegramIdFromInvId } from '@/core/supabase'
import { errorMessageAdmin } from '@/helpers/errorMessageAdmin'
import { errorMessage } from '@/helpers'
import { updateUserSubscription } from '@/core/supabase'
import { logger } from '@/utils/logger'
import { Telegraf } from 'telegraf'
import { MyContext } from '@/interfaces'
import { PaymentType } from '@/interfaces/payments.interface'
import { slugify } from 'inngest' // For v3 migration

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ–ø–ª–∞—Ç—ã
const PAYMENT_OPTIONS = [
  { amount: 500, stars: 217 },
  { amount: 1000, stars: 434 },
  { amount: 2000, stars: 869 },
  { amount: 5000, stars: 2173 },
  { amount: 10000, stars: 4347 },
  { amount: 10, stars: 6 },
]

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∞—Ä–∏—Ñ–æ–≤
const SUBSCRIPTION_PLANS = [
  {
    row: 0,
    text: 'üé® NeuroPhoto',
    en_price: 10,
    ru_price: 1110,
    description: 'Creating photos using neural networks.',
    stars_price: 476,
    callback_data: 'neurophoto',
  },
  {
    row: 1,
    text: 'üìö NeuroVideo',
    en_price: 33,
    ru_price: 2999,
    description: 'Self-study using neural networks with an AI avatar.',
    stars_price: 1303,
    callback_data: 'neurovideo',
  },
  {
    row: 2,
    text: 'ü§ñ NeuroBlogger',
    en_price: 833,
    ru_price: 75000,
    description: 'Training on neural networks with a mentor.',
    stars_price: 32608,
    callback_data: 'neuroblogger',
  },
]

// –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—É–º–º—ã –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
const SUBSCRIPTION_AMOUNTS = SUBSCRIPTION_PLANS.reduce((acc, plan) => {
  acc[plan.ru_price] = plan.callback_data
  return acc
}, {})

// –§—É–Ω–∫—Ü–∏—è Inngest –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
export const processPayment = inngest.createFunction(
  {
    id: slugify('payment-processing-ai-server'), // v3 requires id
    name: 'üí≥ Payment Processing AI Server', // Optional display name
    retries: 3, // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–≤—Ç–æ—Ä—ã –ø—Ä–∏ —Å–±–æ—è—Ö
    onFailure: async ({ error }) => {
      console.log('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞:', error)
      errorMessageAdmin(error)
      return { error: error.message }
    },
  },
  { event: 'payment/process-ai-server' }, // –¢—Ä–∏–≥–≥–µ—Ä–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
  async ({ event, step }) => {
    console.log('üéØ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –ø–ª–∞—Ç–µ–∂–∞:', event)
    console.log('üì¶ –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:', event.data)

    const { IncSum, inv_id } = event.data
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ –∏ –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ
    const roundedIncSum = Math.round(Number(IncSum))

    console.log('üöÄ processPayment: –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞')
    console.log('üí∞ processPayment: –∏—Å—Ö–æ–¥–Ω–∞—è —Å—É–º–º–∞', IncSum)
    console.log('üí∞ processPayment: –æ–∫—Ä—É–≥–ª–µ–Ω–Ω–∞—è —Å—É–º–º–∞', roundedIncSum)
    console.log('üìù processPayment: –∏–Ω–≤–æ–π—Å ID', inv_id)

    try {
      let stars = 0
      let subscription = ''

      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—É–º–º–∞ –æ–¥–Ω–æ–º—É –∏–∑ —Ç–∞—Ä–∏—Ñ–æ–≤ - –≤—ã–ø–æ–ª–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —à–∞–≥–µ
      const checkSubscriptionStep = await step.run(
        'check-subscription-plan',
        async () => {
          if (SUBSCRIPTION_AMOUNTS[roundedIncSum]) {
            // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–∞—Ä–∏—Ñ
            const plan = SUBSCRIPTION_PLANS.find(
              p => p.ru_price === roundedIncSum
            )
            if (plan) {
              return {
                stars: plan.stars_price,
                subscription: plan.callback_data,
              }
            }
          }
          return { stars: 0, subscription: '' }
        }
      )

      stars = checkSubscriptionStep.stars
      subscription = checkSubscriptionStep.subscription

      // 2. –ï—Å–ª–∏ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–∞—Ä–∏—Ñ—É, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ–ø–ª–∞—Ç—ã - –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —à–∞–≥–µ
      if (stars === 0) {
        const checkPaymentOptionStep = await step.run(
          'check-payment-option',
          async () => {
            const option = PAYMENT_OPTIONS.find(
              opt => opt.amount === roundedIncSum
            )
            if (option) {
              return { stars: option.stars }
            }
            return { stars: 0 }
          }
        )

        stars = checkPaymentOptionStep.stars
      }

      if (stars > 0) {
        // 3. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ - –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —à–∞–≥–µ —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏
        const userInfo = await step.run('get-user-info', async () => {
          return await getTelegramIdFromInvId(inv_id)
        })

        const { telegram_id, username, language_code, bot_name } = userInfo

        console.log('üë§ processPayment: telegram_id', telegram_id)
        console.log('üë§ processPayment: username', username)
        console.log('üåê processPayment: language_code', language_code)
        console.log('ü§ñ processPayment: bot_name', bot_name)

        // 4. –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ –≥—Ä—É–ø–ø–æ–≤–æ–π ID –¥–ª—è –±–æ—Ç–∞
        const botConfig = await step.run('get-bot-config', async () => {
          const botData = createBotByName(bot_name)
          if (!botData) {
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞ –¥–ª—è ${bot_name}`)
          }

          return {
            groupId: botData.groupId,
          }
        })

        // 5. –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞ –∏ –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ñ—É–Ω–∫—Ü–∏—é updateUserBalance
        await step.run('update-user-balance', async () => {
          const description = `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ${roundedIncSum} —Ä—É–±.`

          // –ü–µ—Ä–µ–¥–∞–µ–º inv_id –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ–±—ã —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–∏–ª–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
          const result = await updateUserBalance(
            telegram_id.toString(),
            Number(roundedIncSum),
            PaymentType.MONEY_INCOME,
            description,
            {
              payment_method: 'Robokassa',
              bot_name,
              language: language_code || 'ru',
              stars,
              currency: 'RUB',
              ru_amount: roundedIncSum,
              inv_id, // –ü–µ—Ä–µ–¥–∞–µ–º inv_id –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∑–∞–ø–∏—Å–∏
            }
          )
          if (!result) {
            throw new Error(
              `–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${telegram_id}`
            )
          }

          console.log('‚≠ê processPayment: –±–∞–ª–∞–Ω—Å —É–≤–µ–ª–∏—á–µ–Ω –Ω–∞', stars)
          return { success: true }
        })

        // 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ - –æ—Ç–¥–µ–ª—å–Ω—ã–π —à–∞–≥
        await step.run('send-notification', async () => {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å —Ç–∏–ø–∞–º–∏
          const botToken =
            process.env[
              `BOT_TOKEN_${bot_name === 'neuro_blogger_bot' ? '1' : '2'}`
            ]
          if (!botToken) {
            throw new Error(`–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è ${bot_name}`)
          }

          const bot = new Telegraf<MyContext>(botToken)

          // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é sendPaymentNotification
          await sendPaymentNotification({
            amount: roundedIncSum.toString(),
            stars,
            telegramId: telegram_id.toString(),
            language_code,
            username,
            groupId: botConfig.groupId,
            bot,
          })

          console.log('üì® processPayment: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
          return { success: true }
        })

        // 7. –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–∞—Ä–∏—Ñ—É - –æ—Ç–¥–µ–ª—å–Ω—ã–π —à–∞–≥
        if (subscription) {
          await step.run('update-subscription', async () => {
            await updateUserSubscription(telegram_id, subscription)
            console.log(
              'üîÑ processPayment: –ø–æ–¥–ø–∏—Å–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞',
              subscription
            )
            return { success: true }
          })
        }

        logger.info('üí∞ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω', {
          description: 'Payment processed successfully',
          telegram_id,
          language_code,
          amount: roundedIncSum,
          stars,
        })

        return {
          success: true,
          telegram_id,
          amount: roundedIncSum,
          stars,
          subscription: subscription || null,
          timestamp: new Date().toISOString(),
        }
      } else {
        logger.warn(
          '‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –ø–∞–∫–µ—Ç –∑–≤–µ–∑–¥',
          {
            description:
              'Payment not processed: no matching plan or star package found',
            amount: roundedIncSum,
            inv_id,
          }
        )

        return {
          success: false,
          reason:
            '–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ –∏–ª–∏ –ø–∞–∫–µ—Ç –∑–≤–µ–∑–¥ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—É–º–º—ã',
          amount: roundedIncSum,
        }
      }
    } catch (error) {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
      try {
        const { telegram_id, language_code } = await getTelegramIdFromInvId(
          inv_id
        )
        errorMessage(error as Error, telegram_id, language_code === 'ru')
        errorMessageAdmin(error as Error)
      } catch (innerError) {
        console.log(
          '‚ùå processPayment: –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ telegram_id',
          innerError
        )
        errorMessageAdmin(innerError as Error)
      }

      throw error // –ü–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –º–µ—Ö–∞–Ω–∏–∑–º–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
    }
  }
)

// "inv_id": "553912", "IncSum": "1110.00"
