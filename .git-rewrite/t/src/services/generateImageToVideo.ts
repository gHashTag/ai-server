// –í —Ñ–∞–π–ª–µ, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è generateImageToVideo –Ω–∞ api-server

import { replicate } from '@/core/replicate'
// ... –¥—Ä—É–≥–∏–µ –∏–º–ø–æ—Ä—Ç—ã ...
import { VIDEO_MODELS_CONFIG } from '@/config/models.config'
import { logger } from '@/utils/logger' // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–≥–µ—Ä
import { downloadFile } from '@/helpers/downloadFile'
import {
  getUserByTelegramId,
  updateUserLevelPlusOne,
  updateUserBalance,
} from '@/core/supabase'
import { getBotByName } from '@/core/bot'
import { processBalanceVideoOperation } from '@/price/helpers'
import { saveVideoUrlToSupabase } from '@/core/supabase/saveVideoUrlToSupabase'
import { mkdir, writeFile } from 'fs/promises'
import path from 'path'
import { errorMessageAdmin } from '@/helpers/errorMessageAdmin'
import { PaymentType } from '@/interfaces/payments.interface'
import { ModeEnum } from '@/interfaces/modes'

interface ReplicateResponse {
  id: string // ID –º–æ–∂–µ—Ç –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è –¥–ª—è replicate.run, –Ω–æ output —Ç–æ—á–Ω–æ –µ—Å—Ç—å
  output: string | string[] // Output –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ –º–∞—Å—Å–∏–≤–æ–º —Å—Ç—Ä–æ–∫
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏–≥–Ω–∞—Ç—É—Ä—É: –¥–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –º–æ—Ä—Ñ–∏–Ω–≥–∞
export const generateImageToVideo = async (
  // –û—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ + –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
  imageUrl: string | null, // null –¥–ª—è –º–æ—Ä—Ñ–∏–Ω–≥–∞
  prompt: string | null, // null –¥–ª—è –º–æ—Ä—Ñ–∏–Ω–≥–∞
  videoModel: string,
  telegram_id: string,
  username: string,
  is_ru: boolean,
  bot_name: string,
  is_morphing = false, // –ù–æ–≤—ã–π —Ñ–ª–∞–≥, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é false
  imageAUrl: string | null = null, // –ù–æ–≤—ã–π URL A –¥–ª—è –º–æ—Ä—Ñ–∏–Ω–≥–∞
  imageBUrl: string | null = null // –ù–æ–≤—ã–π URL B –¥–ª—è –º–æ—Ä—Ñ–∏–Ω–≥–∞
): Promise<{ videoUrl?: string; prediction_id?: string } | string> => {
  // –¢–∏–ø –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º
  try {
    // –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    logger.info('API Server: Start generateImageToVideo (Task)', {
      imageUrl: imageUrl ? 'present' : 'absent',
      prompt: prompt ? 'present' : 'absent',
      videoModel,
      telegram_id,
      username,
      is_ru,
      bot_name,
      is_morphing,
      imageAUrl: imageAUrl ? 'present' : 'absent',
      imageBUrl: imageBUrl ? 'present' : 'absent',
    })

    // --- –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞ ---
    if (is_morphing) {
      if (!imageAUrl || !imageBUrl) {
        throw new Error(
          '–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: imageAUrl –∏ imageBUrl –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –º–æ—Ä—Ñ–∏–Ω–≥–∞'
        )
      }
      // imageUrl –∏ prompt –Ω–µ –Ω—É–∂–Ω—ã
      logger.info('API Server (Task): Morphing mode detected', { telegram_id })
    } else {
      if (!imageUrl) {
        throw new Error(
          '–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: imageUrl –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞'
        )
      }
      if (!prompt) {
        throw new Error(
          '–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: prompt –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞'
        )
      }
      // imageAUrl –∏ imageBUrl –Ω–µ –Ω—É–∂–Ω—ã
      logger.info('API Server (Task): Standard mode detected', { telegram_id })
    }
    // –û–±—â–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
    if (!videoModel || !telegram_id || !username || !bot_name) {
      throw new Error(
        '–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—â–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã'
      )
    }

    // --- –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±–æ—Ç–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è) ---
    const userExists = await getUserByTelegramId(telegram_id)
    if (!userExists) {
      throw new Error(
        `–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.`
      )
    }
    const level = userExists.level
    if (level === 8) {
      // –ò–ª–∏ –∫–∞–∫–∞—è —Ç—É—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ä–æ–≤–Ω—è? –û—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –±—ã–ª–æ.
      await updateUserLevelPlusOne(telegram_id, level)
      logger.info('API Server (Task): User level updated', {
        telegram_id,
        oldLevel: level,
      })
    }

    const { bot } = getBotByName(bot_name) // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ

    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è, —Ç.–∫. –±–æ—Ç –Ω–µ –¥–µ–ª–∞–ª —Å–ø–∏—Å–∞–Ω–∏–µ) ---
    // –í–∞–∂–Ω–æ: –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∞—Ç–æ–º–∞—Ä–Ω–æ–π –∏–ª–∏ –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ–π,
    // —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è, –µ—Å–ª–∏ –±–æ—Ç —Ç–æ–∂–µ –ø—ã—Ç–∞–µ—Ç—Å—è —Å–ø–∏—Å–∞—Ç—å.
    // –õ–∏–±–æ —É–±—Ä–∞—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ –±–æ—Ç–∞.
    const balanceResult = await processBalanceVideoOperation({
      videoModel,
      telegram_id,
      is_ru,
      bot_name, // bot_name –Ω—É–∂–µ–Ω –¥–ª—è processBalanceVideoOperation? –ï—Å–ª–∏ –Ω–µ—Ç, —É–±—Ä–∞—Ç—å.
    })

    if (!balanceResult.success) {
      // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç.–∫. –æ—Ç–≤–µ—Ç 202 —É–∂–µ —É—à–µ–ª
      // –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      logger.error('API Server (Task): Balance check failed', {
        telegram_id,
        error: balanceResult.error,
      })
      throw new Error(
        balanceResult.error || '–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å'
      )
    }
    const { newBalance, paymentAmount } = balanceResult
    logger.info('API Server (Task): Balance sufficient and deducted', {
      telegram_id,
      paymentAmount,
      newBalance,
    })

    // --- –£–¥–∞–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è "–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ..." ---
    // await bot.telegram.sendMessage(...)

    // --- –í—ã–∑–æ–≤ Replicate (–æ—Å—Ç–∞–µ—Ç—Å—è replicate.run) ---
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å, –∏–ª–∏ –≤—ã–∑—ã–≤–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
    const runModel = async (
      model: `${string}/${string}` | `${string}/${string}:${string}`,
      input: any
    ): Promise<ReplicateResponse> => {
      logger.info('API Server (Task): Calling replicate.run', {
        model,
        inputKeys: Object.keys(input),
        telegram_id,
      })
      const result = (await replicate.run(model, {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º replicate.run
        input,
        // –ù–µ —É–∫–∞–∑—ã–≤–∞–µ–º webhook
      })) as ReplicateResponse
      logger.info('API Server (Task): replicate.run finished', { telegram_id })
      return result
    }

    // --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ Input –¥–ª—è Replicate ---
    const modelConfig = VIDEO_MODELS_CONFIG[videoModel]
    if (!modelConfig?.api?.model) {
      throw new Error(
        `üö´ –°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ ${videoModel}`
      )
    }

    let modelInput: any = {}
    const replicateModelId: string = modelConfig.api.model // –ü–æ–ª–Ω—ã–π ID –º–æ–¥–µ–ª–∏ 'owner/model:version'

    if (is_morphing) {
      // --- Input –¥–ª—è –ú–æ—Ä—Ñ–∏–Ω–≥–∞ ---
      modelInput = {
        ...modelConfig.api.input,
        // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ—Ä—Ñ–∏–Ω–≥–∞ (–ø—Ä–æ–≤–µ—Ä—å API Replicate!)
        image_a: imageAUrl, // –ü–µ—Ä–µ–¥–∞–µ–º URL
        image_b: imageBUrl, // –ü–µ—Ä–µ–¥–∞–µ–º URL
        prompt: '', // <--- –î–û–ë–ê–í–õ–ï–ù–û: –ü—É—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏—è API
      }
      logger.info('API Server (Task): Prepared Replicate input for morphing', {
        telegram_id,
        inputKeys: Object.keys(modelInput),
      })
    } else {
      // --- Input –¥–ª—è –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ (—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –ª–æ–≥–∏–∫–∞) ---
      // –°–∫–∞—á–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
      if (!imageUrl || !prompt)
        throw new Error(
          'Missing imageUrl or prompt for standard mode internal check'
        ) // –î–æ–ø. –ø—Ä–æ–≤–µ—Ä–∫–∞
      const imageBuffer = await downloadFile(imageUrl)
      modelInput = {
        ...modelConfig.api.input,
        prompt,
        aspect_ratio: userExists.aspect_ratio, // –°–æ—Ö—Ä–∞–Ω—è–µ–º aspect_ratio
        [modelConfig.imageKey]: imageBuffer, // –ü–µ—Ä–µ–¥–∞–µ–º –±—É—Ñ–µ—Ä
      }
      logger.info('API Server (Task): Prepared Replicate input for standard', {
        telegram_id,
        inputKeys: Object.keys(modelInput),
      })
    }

    // --- –ó–∞–ø—É—Å–∫ –º–æ–¥–µ–ª–∏ Replicate ---
    const result = await runModel(replicateModelId as any, modelInput) // –í—ã–∑—ã–≤–∞–µ–º replicate.run

    // --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (–æ—Å—Ç–∞–µ—Ç—Å—è) ---
    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ —Å—Ç—Ä–æ–∫—É, –∏ –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–æ–∫ –≤ output
    const videoUrl = Array.isArray(result?.output)
      ? result.output[0]
      : result?.output
    logger.info('API Server (Task): Received video URL from Replicate', {
      videoUrl: videoUrl ? 'present' : 'absent',
      telegram_id,
    })

    if (videoUrl) {
      // --- –õ–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–æ—Å—Ç–∞–µ—Ç—Å—è) ---
      const videoLocalPath = path.join(
        __dirname, // –£–±–µ–¥–∏—Å—å, —á—Ç–æ __dirname –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—É—Ç–∏
        '../uploads', // –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ uploads –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        telegram_id.toString(),
        'image-to-video',
        `${new Date().toISOString()}.mp4`
      )
      await mkdir(path.dirname(videoLocalPath), { recursive: true })

      const originalBuffer = await downloadFile(videoUrl as string)
      await writeFile(videoLocalPath, originalBuffer)
      await saveVideoUrlToSupabase(
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
        telegram_id,
        videoUrl as string,
        videoLocalPath,
        videoModel
      )
      logger.info('API Server (Task): Video saved locally and to DB', {
        telegram_id,
        videoLocalPath,
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –∏–Ω—Å—Ç–∞–Ω—Å –±–æ—Ç–∞
      await bot.telegram.sendVideo(telegram_id, { source: videoLocalPath })
      logger.info('API Server (Task): Video sent to user', { telegram_id })

      // –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
      try {
        await updateUserBalance(
          telegram_id,
          paymentAmount,
          PaymentType.MONEY_OUTCOME,
          `Image-to-Video generation (${videoModel})`,
          {
            stars: paymentAmount,
            payment_method: 'Internal',
            service_type: ModeEnum.ImageToVideo,
            bot_name: bot_name,
            language: is_ru ? 'ru' : 'en',
            cost: paymentAmount / 1.5, // —Å–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å
          }
        )
        logger.info(
          'API Server (Task): Balance updated successfully for Image-to-Video',
          { telegram_id }
        )
      } catch (balanceError) {
        logger.error(
          'API Server (Task): Error updating balance for image-to-video',
          { telegram_id, error: balanceError }
        )
        errorMessageAdmin(balanceError as Error)
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ –∏ –±–∞–ª–∞–Ω—Å–µ
      await bot.telegram.sendMessage(
        telegram_id,
        is_ru
          ? `‚úÖ –í–∞—à–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!\n\n–°–ø–∏—Å–∞–Ω–æ: ${paymentAmount.toFixed(
              2 // –ò—Å–ø–æ–ª—å–∑—É–µ–º paymentAmount –∏–∑ balanceResult
            )} ‚≠êÔ∏è\n–í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance.toFixed(2)} ‚≠êÔ∏è` // –ò—Å–ø–æ–ª—å–∑—É–µ–º newBalance –∏–∑ balanceResult
          : `‚úÖ Your video is ready!\n\nDeducted: ${paymentAmount.toFixed(
              2
            )} ‚≠êÔ∏è\nYour new balance: ${newBalance.toFixed(2)} ‚≠êÔ∏è`
        // –£–±—Ä–∞–ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ?", —Ç.–∫. —Å—Ü–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
      )
      logger.info('API Server (Task): Success message sent to user', {
        telegram_id,
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∏–¥–µ–æ –≤ –∫–∞–Ω–∞–ª Pulse
      await bot.telegram.sendVideo(
        '@neuro_blogger_pulse', // –ö–∞–Ω–∞–ª Pulse
        { source: videoLocalPath },
        {
          caption: (is_ru
            ? `${username} (ID: ${telegram_id}) ${
                is_morphing ? '—Å–º–æ—Ä—Ñ–∏–ª' : '—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª'
              } –≤–∏–¥–µ–æ.\n–ú–æ–¥–µ–ª—å: ${videoModel}\n–ë–æ—Ç: @${bot.botInfo?.username}`
            : `${username} (ID: ${telegram_id}) generated a ${
                is_morphing ? 'morph' : 'standard'
              } video.\nModel: ${videoModel}\nBot: @${bot.botInfo?.username}`
          ).slice(0, 1000), // –£–∫–æ—Ä–æ—Ç–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Pulse
        }
      )
      logger.info('API Server (Task): Video sent to Pulse channel', {
        telegram_id,
      })
    } else {
      logger.error(
        'API Server (Task): Video URL is missing in Replicate response',
        { telegram_id, result }
      )
      throw new Error(
        '–°–µ—Ä–≤–µ—Ä–Ω–∞—è –æ—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –≤–∏–¥–µ–æ –æ—Ç Replicate'
      )
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL (—Ö–æ—Ç—è –æ–Ω —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω). –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ –Ω—É–∂–Ω–æ?
    return { videoUrl: videoUrl as string }
  } catch (error) {
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
    logger.error('API Server (Task): Error in generateImageToVideo task', {
      telegram_id,
      error,
    })
    errorMessageAdmin(error instanceof Error ? error : new Error(String(error)))

    // --- –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ—Ç—Å—é–¥–∞ ---
    // const { bot } = getBotByName(bot_name); // –ù–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –±–æ—Ç–∞ —Å–Ω–æ–≤–∞
    // bot.telegram.sendMessage(...)

    // –ü–µ—Ä–µ–≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –µ–µ –º–æ–≥ –ø–æ–π–º–∞—Ç—å .catch –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –º–∞—Ä—à—Ä—É—Ç–∞
    throw error
  }
}
