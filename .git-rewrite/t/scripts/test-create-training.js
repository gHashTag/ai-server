#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ createModelTraining –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è gender –∏ bot_name
 */

import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

dotenv.config()

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY
)

// –ö–æ–ø–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é createModelTraining –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function createModelTraining(trainingData) {
  console.log('üîç –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ –ë–î:', {
    telegram_id: trainingData.telegram_id,
    model_name: trainingData.model_name,
    gender: trainingData.gender,
    bot_name: trainingData.bot_name,
    fullData: trainingData,
  })

  try {
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
    const insertData = {
      telegram_id: trainingData.telegram_id,
      model_name: trainingData.model_name,
      trigger_word: trainingData.trigger_word,
      zip_url: trainingData.zip_url,
      steps: Number(trainingData.steps),
      replicate_training_id: trainingData.replicate_training_id,
      status: trainingData.status || 'processing',
      api: trainingData.api || 'replicate',
      cancel_url: trainingData.cancel_url,
      error: trainingData.error,
      gender: trainingData.gender,
      bot_name: trainingData.bot_name,
    }

    console.log('üìù –§–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è INSERT:', insertData)

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü–µ model_trainings
    const { data: dbTraining, error } = await supabase
      .from('model_trainings')
      .insert(insertData)
      .select()
      .single()

    if (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î:', error)
      throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î: ${error.message}`)
    }

    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î:', {
      id: dbTraining.id,
      telegram_id: dbTraining.telegram_id,
      model_name: dbTraining.model_name,
      gender: dbTraining.gender,
      bot_name: dbTraining.bot_name,
    })

    return dbTraining
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î:', error)
    throw error
  }
}

async function testCreateTraining() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é createModelTraining...\n')

  const testData = {
    telegram_id: '144022504',
    model_name: 'test_model_' + Date.now(),
    trigger_word: 'TEST_TRIGGER',
    zip_url: 'https://example.com/test.zip',
    steps: 500,
    status: 'testing',
    gender: 'female',
    bot_name: 'test_bot',
    api: 'replicate',
  }

  try {
    console.log('üìã –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å –¥–∞–Ω–Ω—ã–º–∏:')
    console.log(JSON.stringify(testData, null, 2))

    const result = await createModelTraining(testData)

    console.log('\n‚úÖ –ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞! –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç:')
    console.log('- ID:', result.id ? '‚úÖ' : '‚ùå')
    console.log(
      '- telegram_id:',
      result.telegram_id ? '‚úÖ' : '‚ùå',
      `(${result.telegram_id})`
    )
    console.log(
      '- model_name:',
      result.model_name ? '‚úÖ' : '‚ùå',
      `(${result.model_name})`
    )
    console.log('- gender:', result.gender ? '‚úÖ' : '‚ùå', `(${result.gender})`)
    console.log(
      '- bot_name:',
      result.bot_name ? '‚úÖ' : '‚ùå',
      `(${result.bot_name})`
    )
    console.log(
      '- trigger_word:',
      result.trigger_word ? '‚úÖ' : '‚ùå',
      `(${result.trigger_word})`
    )

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–ø–∏—Å—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î:')
    const { data: savedRecord, error: fetchError } = await supabase
      .from('model_trainings')
      .select('*')
      .eq('id', result.id)
      .single()

    if (fetchError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏:', fetchError)
    } else {
      console.log('‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞ –≤ –ë–î:')
      console.log(
        '- gender –≤ –ë–î:',
        savedRecord.gender ? '‚úÖ' : '‚ùå',
        `(${savedRecord.gender})`
      )
      console.log(
        '- bot_name –≤ –ë–î:',
        savedRecord.bot_name ? '‚úÖ' : '‚ùå',
        `(${savedRecord.bot_name})`
      )
      console.log('- –ü–æ–ª–Ω–∞—è –∑–∞–ø–∏—Å—å:', JSON.stringify(savedRecord, null, 2))
    }

    // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
    console.log('\nüßπ –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å...')
    const { error: deleteError } = await supabase
      .from('model_trainings')
      .delete()
      .eq('id', result.id)

    if (deleteError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏:', deleteError)
    } else {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞')
    }
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
  }
}

testCreateTraining().catch(console.error)
