#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å gender –≤ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ø–æ–ª–µ gender –≤ —Ä–∞–∑–Ω—ã—Ö –≤–µ—Ä—Å–∏—è—Ö –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
 */

import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config()

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY
)

async function testGenderInNeurophoto() {
  console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å gender –≤ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ\n')

  const testTelegramId = '144022504'

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('üìã 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('telegram_id, bot_name, gender, first_name, last_name')
      .eq('telegram_id', testTelegramId)
      .single()

    if (userError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError.message)
      return
    }

    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:')
    console.log('- telegram_id:', user.telegram_id)
    console.log('- bot_name:', user.bot_name)
    console.log('- gender:', user.gender || '–ù–ï –£–ö–ê–ó–ê–ù')
    console.log('- first_name:', user.first_name)
    console.log('- last_name:', user.last_name)

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
    console.log('\nüìã 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏:')
    const { data: trainings, error: trainingsError } = await supabase
      .from('model_trainings')
      .select('*')
      .eq('telegram_id', testTelegramId)
      .order('created_at', { ascending: false })
      .limit(3)

    if (trainingsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:', trainingsError.message)
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${trainings.length} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:`)
      trainings.forEach((training, index) => {
        console.log(`\n${index + 1}. –ú–æ–¥–µ–ª—å: ${training.model_name}`)
        console.log(`   - gender: ${training.gender || '–ù–ï –£–ö–ê–ó–ê–ù'}`)
        console.log(`   - bot_name: ${training.bot_name}`)
        console.log(`   - status: ${training.status}`)
        console.log(`   - created_at: ${training.created_at}`)
      })
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–º–ø—Ç—ã –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
    console.log('\nüìã 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø—Ä–æ–º–ø—Ç—ã –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ:')
    const { data: prompts, error: promptsError } = await supabase
      .from('prompts')
      .select('*')
      .eq('telegram_id', testTelegramId)
      .in('mode', ['NeuroPhoto', 'NeuroPhotoV2'])
      .order('created_at', { ascending: false })
      .limit(5)

    if (promptsError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤:', promptsError.message)
    } else {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${prompts.length} –ø—Ä–æ–º–ø—Ç–æ–≤ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ:`)
      prompts.forEach((prompt, index) => {
        console.log(`\n${index + 1}. –ü—Ä–æ–º–ø—Ç: "${prompt.prompt}"`)
        console.log(`   - mode: ${prompt.mode}`)
        console.log(`   - model_url: ${prompt.model_url}`)
        console.log(`   - status: ${prompt.status}`)
        console.log(`   - created_at: ${prompt.created_at}`)
      })
    }

    // 4. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—É
    console.log('\nüîç 4. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º—ã:')

    const hasUserGender = user.gender !== null && user.gender !== undefined
    const hasTrainingGender = trainings.some(
      t => t.gender !== null && t.gender !== undefined
    )

    console.log('\nüìä –°—Ç–∞—Ç—É—Å gender:')
    console.log(
      `- –í —Ç–∞–±–ª–∏—Ü–µ users: ${hasUserGender ? '‚úÖ –ï–°–¢–¨' : '‚ùå –ù–ï–¢'} (${
        user.gender || 'null'
      })`
    )
    console.log(
      `- –í model_trainings: ${hasTrainingGender ? '‚úÖ –ï–°–¢–¨' : '‚ùå –ù–ï–¢'}`
    )

    if (hasTrainingGender) {
      const genderCounts = trainings.reduce((acc, t) => {
        const gender = t.gender || 'null'
        acc[gender] = (acc[gender] || 0) + 1
        return acc
      }, {})
      console.log('- –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ gender –≤ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö:', genderCounts)
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–æ–π gender –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    console.log('\nüéØ 5. –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º gender:')

    if (!hasUserGender && !hasTrainingGender) {
      console.log(
        '‚ùå –ü–†–û–ë–õ–ï–ú–ê: Gender –Ω–µ —É–∫–∞–∑–∞–Ω –Ω–∏ –≤ users, –Ω–∏ –≤ model_trainings!'
      )
      console.log(
        '   –≠—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.'
      )
      console.log('   –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ.')
    } else if (hasTrainingGender) {
      const lastTraining = trainings[0]
      console.log(
        `‚úÖ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∏–º–µ–µ—Ç gender: ${lastTraining.gender}`
      )
      console.log('   –ù–µ–π—Ä–æ—Ñ–æ—Ç–æ –¥–æ–ª–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç gender.')
    }

    // 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüí° 6. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:')
    console.log('1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ generateNeuroImageV2 - –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –ª–∏ gender?')
    console.log(
      '2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä neuroPhotoV2 - –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è –ª–∏ gender –∏–∑ req.body?'
    )
    console.log(
      '3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–æ–º–ø—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ - –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –ª–∏ gender –≤ –ø—Ä–æ–º–ø—Ç?'
    )
    console.log('4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ gender –≤ –∫–æ–¥–µ.')
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞:', error)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testGenderInNeurophoto()
