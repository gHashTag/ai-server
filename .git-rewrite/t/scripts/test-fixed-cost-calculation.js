#!/usr/bin/env node

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
process.env.NODE_ENV = 'production'
process.env.SUPABASE_URL = 'https://yuukfqcsdhkyxegfwlcb.supabase.co'
process.env.SUPABASE_SERVICE_KEY = 'test_key'
process.env.SUPABASE_SERVICE_ROLE_KEY = 'test_role_key'
process.env.SECRET_KEY = 'test_secret'
process.env.SECRET_API_KEY = 'test_api_secret'
process.env.SYNC_LABS_API_KEY = 'test_sync_labs'
process.env.NEXT_PUBLIC_MANAGEMENT_TOKEN = 'test_management_token'
process.env.NEXRENDER_PORT = '4001'
process.env.AERENDER_PATH = '/test/path'
process.env.BOT_TOKEN_1 = 'test_token_1'
process.env.BOT_TOKEN_2 = 'test_token_2'
process.env.BOT_TOKEN_3 = 'test_token_3'
process.env.BOT_TOKEN_4 = 'test_token_4'
process.env.BOT_TOKEN_5 = 'test_token_5'
process.env.BOT_TOKEN_6 = 'test_token_6'
process.env.BOT_TOKEN_7 = 'test_token_7'
process.env.BOT_TOKEN_8 = 'test_token_8'
process.env.BOT_TOKEN_TEST_1 = 'test_token_test_1'
process.env.BOT_TOKEN_TEST_2 = 'test_token_test_2'

console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏')
console.log('==============================================')

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
const { calculateModeCost } = require('../dist/price/helpers/modelsCost.js')
const { ModeEnum } = require('../dist/interfaces/modes.js')

// –¢–µ—Å—Ç–æ–≤—ã–µ —Å–ª—É—á–∞–∏
const testCases = [
  {
    name: 'DigitalAvatarBody - 1000 —à–∞–≥–æ–≤',
    params: { mode: ModeEnum.DigitalAvatarBody, steps: 1000 },
    expected: 220, // 1000 * 0.22
  },
  {
    name: 'DigitalAvatarBody - 500 —à–∞–≥–æ–≤',
    params: { mode: ModeEnum.DigitalAvatarBody, steps: 500 },
    expected: 110, // 500 * 0.22
  },
  {
    name: 'NeuroPhoto - —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å',
    params: { mode: ModeEnum.NeuroPhoto },
    expected: 7.5, // calculateFinalStarCostFromDollars(0.08) = (0.08 / 0.016) * 1.5 = 7.5
  },
]

console.log('üìä –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...\n')

let allTestsPassed = true

for (const testCase of testCases) {
  try {
    const result = calculateModeCost(testCase.params)

    console.log(`üß™ ${testCase.name}:`)
    console.log(`   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${JSON.stringify(testCase.params)}`)
    console.log(`   –û–∂–∏–¥–∞–µ–º–æ: ${testCase.expected} –∑–≤–µ–∑–¥`)
    console.log(`   –ü–æ–ª—É—á–µ–Ω–æ: ${result.stars} –∑–≤–µ–∑–¥`)

    if (Math.abs(result.stars - testCase.expected) < 0.01) {
      console.log(`   ‚úÖ –ü–†–û–ô–î–ï–ù`)
    } else {
      console.log(
        `   ‚ùå –ü–†–û–í–ê–õ–ï–ù - —Ä–∞–∑–Ω–∏—Ü–∞: ${result.stars - testCase.expected}`
      )
      allTestsPassed = false
    }
    console.log()
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ "${testCase.name}":`, error.message)
    allTestsPassed = false
  }
}

console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:')
if (allTestsPassed) {
  console.log('‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.')
} else {
  console.log(
    '‚ùå –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´! –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.'
  )
}

console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–ª—É—á–∞—è –∏–∑ –ë–î:')
console.log('–ó–∞–ø–∏—Å—å –∏–∑ –ë–î: 25,425 –∑–≤–µ–∑–¥ –∑–∞ 1000 —à–∞–≥–æ–≤')
console.log('–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: 220 –∑–≤–µ–∑–¥ –∑–∞ 1000 —à–∞–≥–æ–≤')
console.log('–ü–µ—Ä–µ–ø–ª–∞—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª—è–ª–∞:', 25425 - 220, '–∑–≤–µ–∑–¥')
console.log('–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ—à–∏–±–∫–∏:', (25425 / 220).toFixed(2) + 'x')

console.log('\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!')
