#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è JOIN –∑–∞–ø—Ä–æ—Å–∞ –º–µ–∂–¥—É model_trainings –∏ users
 */

import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

dotenv.config()

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY
)

async function testJoinFix() {
  console.log('üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ JOIN –∑–∞–ø—Ä–æ—Å–∞...\n')

  const trainingId = 'czx5g9e7bxrme0cq1d48v6zcmg' // ID –∏–∑ –ª–æ–≥–æ–≤

  try {
    // 1. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –∏–∑ model_trainings
    console.log('üìã 1. –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –∏–∑ model_trainings:')
    const { data: training, error: trainingError } = await supabase
      .from('model_trainings')
      .select('*')
      .eq('replicate_training_id', trainingId)
      .single()

    if (trainingError) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', trainingError.message)
      return
    }

    console.log('‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞:')
    console.log('- telegram_id:', training.telegram_id, '(—Ç–∏–ø: bigint)')
    console.log('- bot_name:', training.bot_name)
    console.log('- gender:', training.gender)

    // 2. –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id —Å –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ–º —Ç–∏–ø–æ–≤
    console.log('\nüìã 2. –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ–º —Ç–∏–ø–æ–≤:')
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('bot_name, telegram_id, language_code')
      .eq('telegram_id', training.telegram_id.toString())
      .single()

    if (userError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userError.message)
    } else {
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω:')
      console.log('- telegram_id:', user.telegram_id, '(—Ç–∏–ø: uuid)')
      console.log('- bot_name:', user.bot_name)
      console.log('- language_code:', user.language_code)
    }

    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä—É—á–Ω–æ–π JOIN
    console.log('\nüìã 3. –†—É—á–Ω–æ–π JOIN —Ä–µ–∑—É–ª—å—Ç–∞—Ç:')
    const result = {
      ...training,
      users: user || null,
    }

    console.log('‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç:')
    console.log(JSON.stringify(result, null, 2))

    // 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ - –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ RPC —Ñ—É–Ω–∫—Ü–∏—é
    console.log('\nüìã 4. –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ JOIN:')

    // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const rpcQuery = `
      SELECT 
        mt.*,
        json_build_object(
          'bot_name', u.bot_name,
          'telegram_id', u.telegram_id,
          'language_code', u.language_code
        ) as users
      FROM model_trainings mt
      LEFT JOIN users u ON mt.telegram_id::text = u.telegram_id::text
      WHERE mt.replicate_training_id = $1
    `

    console.log('SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', rpcQuery)
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
  }
}

testJoinFix().catch(console.error)
