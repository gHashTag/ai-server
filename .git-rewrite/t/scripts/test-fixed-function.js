#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ getTrainingWithUser
 */

import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

dotenv.config()

const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_KEY
)

// –ö–æ–ø–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function getTrainingWithUser(trainingId) {
  try {
    // 1. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å –∏–∑ model_trainings
    const { data: training, error: trainingError } = await supabase
      .from('model_trainings')
      .select('*')
      .eq('replicate_training_id', trainingId)
      .single()

    if (trainingError) {
      console.error('‚ùå Training fetch error:', trainingError)
      return null
    }

    if (!training) {
      console.error('‚ùå Training not found for ID:', trainingId)
      return null
    }

    // 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegram_id —Å –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ–º —Ç–∏–ø–æ–≤
    const { data: user, error: userError } = await supabase
      .from('users')
      .select('bot_name, telegram_id, language_code')
      .eq('telegram_id', training.telegram_id.toString()) // –ü—Ä–∏–≤–æ–¥–∏–º bigint –∫ string
      .single()

    if (userError) {
      console.error('‚ùå User fetch error:', userError)
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }

    console.log('‚úÖ Training data retrieved:', {
      training_id: trainingId,
      telegram_id: training.telegram_id,
      training_bot_name: training.bot_name,
      user_bot_name: user?.bot_name,
      gender: training.gender,
    })

    // 3. –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º bot_name –∏–∑ model_trainings
    const result = {
      id: training.id,
      model_name: training.model_name,
      gender: training.gender,
      bot_name: training.bot_name || user?.bot_name || 'neuro_blogger_bot', // Fallback chain
      telegram_id: training.telegram_id.toString(), // –ü—Ä–∏–≤–æ–¥–∏–º –∫ —Å—Ç—Ä–æ–∫–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      trigger_word: training.trigger_word,
      zip_url: training.zip_url,
      steps: training.steps,
      replicate_training_id: training.replicate_training_id,
      status: training.status,
      created_at: training.created_at,
      updated_at: training.updated_at,
      users: user
        ? {
            bot_name: user.bot_name,
            telegram_id: user.telegram_id,
            language_code: user.language_code,
          }
        : null,
    }

    return result
  } catch (error) {
    console.error('‚ùå Training fetch error:', error)
    return null
  }
}

async function testFixedFunction() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é getTrainingWithUser...\n')

  const trainingId = 'czx5g9e7bxrme0cq1d48v6zcmg' // ID –∏–∑ –ª–æ–≥–æ–≤

  try {
    const result = await getTrainingWithUser(trainingId)

    if (result) {
      console.log('‚úÖ –§—É–Ω–∫—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç! –†–µ–∑—É–ª—å—Ç–∞—Ç:')
      console.log(JSON.stringify(result, null, 2))

      console.log('\nüîç –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:')
      console.log('- ID –Ω–∞–π–¥–µ–Ω:', result.id ? '‚úÖ' : '‚ùå')
      console.log(
        '- bot_name –æ–ø—Ä–µ–¥–µ–ª–µ–Ω:',
        result.bot_name ? '‚úÖ' : '‚ùå',
        `(${result.bot_name})`
      )
      console.log(
        '- gender –æ–ø—Ä–µ–¥–µ–ª–µ–Ω:',
        result.gender !== null ? '‚úÖ' : '‚ùå',
        `(${result.gender})`
      )
      console.log('- users –¥–∞–Ω–Ω—ã–µ:', result.users ? '‚úÖ' : '‚ùå')

      if (result.users) {
        console.log('  - user bot_name:', result.users.bot_name)
        console.log('  - user language_code:', result.users.language_code)
      }
    } else {
      console.log('‚ùå –§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ null')
    }
  } catch (error) {
    console.error('üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error)
  }
}

testFixedFunction().catch(console.error)
