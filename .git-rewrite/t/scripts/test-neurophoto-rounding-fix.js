#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –≤ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ
 * –ü—Ä–æ–±–ª–µ–º–∞: 7.5‚≠ê –æ–∫—Ä—É–≥–ª—è–ª–æ—Å—å –¥–æ 8‚≠ê –∏–∑-–∑–∞ Math.round –≤ updateUserBalance
 * –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: Math.round ‚Üí Math.floor –¥–ª—è —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–≥–æ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
 */

console.log('üîß –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –≤ –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ\n')

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ —Å–∏—Å—Ç–µ–º—ã
const starCost = 0.016
const interestRate = 1.5

// –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–∫–∞–∫ –≤ —Å–∏—Å—Ç–µ–º–µ)
function calculateFinalStarCostFromDollars(baseDollarCost) {
  const finalCost = (baseDollarCost / starCost) * interestRate
  return parseFloat(finalCost.toFixed(2))
}

// –°–∏–º—É–ª—è—Ü–∏—è —Å—Ç–∞—Ä–æ–≥–æ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è (Math.round)
function oldRounding(amount) {
  return Math.round(amount)
}

// –°–∏–º—É–ª—è—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ (–ë–ï–ó –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è)
function newRounding(amount) {
  return amount // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
}

console.log('üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è –¥–ª—è –Ω–µ–π—Ä–æ—Ñ–æ—Ç–æ:')
console.log('='.repeat(50))

// –¢–µ—Å—Ç –¥–ª—è NeuroPhoto
const neuroPhotoCost = calculateFinalStarCostFromDollars(0.08)
console.log(`\nüñºÔ∏è NeuroPhoto:`)
console.log(`   –¢–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${neuroPhotoCost}‚≠ê`)
console.log(`   –ë–´–õ–û (Math.round): ${oldRounding(neuroPhotoCost)}‚≠ê`)
console.log(`   –°–¢–ê–õ–û (–ë–ï–ó –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è): ${newRounding(neuroPhotoCost)}‚≠ê`)
console.log(
  `   –≠–ö–û–ù–û–ú–ò–Ø: ${oldRounding(neuroPhotoCost) - newRounding(neuroPhotoCost)}‚≠ê`
)

// –¢–µ—Å—Ç –¥–ª—è NeuroPhotoV2
const neuroPhotoV2Cost = calculateFinalStarCostFromDollars(0.14)
console.log(`\nüñºÔ∏è NeuroPhotoV2:`)
console.log(`   –¢–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${neuroPhotoV2Cost}‚≠ê`)
console.log(`   –ë–´–õ–û (Math.round): ${oldRounding(neuroPhotoV2Cost)}‚≠ê`)
console.log(`   –°–¢–ê–õ–û (–ë–ï–ó –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è): ${newRounding(neuroPhotoV2Cost)}‚≠ê`)
console.log(
  `   –≠–ö–û–ù–û–ú–ò–Ø: ${
    oldRounding(neuroPhotoV2Cost) - newRounding(neuroPhotoV2Cost)
  }‚≠ê`
)

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã
const testCases = [
  { name: 'TextToSpeech', baseCost: 0.12 },
  { name: 'NeuroAudio', baseCost: 0.12 },
  { name: 'ImageToPrompt', baseCost: 0.03 },
  { name: 'VoiceToText', baseCost: 0.08 },
]

console.log(`\nüìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã:`)
console.log('='.repeat(50))

let totalSavings = 0
let affectedServices = 0

testCases.forEach(testCase => {
  const cost = calculateFinalStarCostFromDollars(testCase.baseCost)
  const oldResult = oldRounding(cost)
  const newResult = newRounding(cost)
  const savings = oldResult - newResult

  if (savings > 0) {
    affectedServices++
    totalSavings += savings
    console.log(`\nüí∞ ${testCase.name}:`)
    console.log(`   –¢–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${cost}‚≠ê`)
    console.log(`   –ë–´–õ–û: ${oldResult}‚≠ê ‚Üí –°–¢–ê–õ–û: ${newResult}‚≠ê`)
    console.log(`   –≠–ö–û–ù–û–ú–ò–Ø: ${savings}‚≠ê`)
  } else {
    console.log(`\n‚úÖ ${testCase.name}: ${cost}‚≠ê (–æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ –Ω–µ –≤–ª–∏—è–µ—Ç)`)
  }
})

console.log(`\nüéØ –ò–¢–û–ì–ò –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:`)
console.log('='.repeat(50))
console.log(`üìä –ó–∞—Ç—Ä–æ–Ω—É—Ç–æ —Å–µ—Ä–≤–∏—Å–æ–≤: ${affectedServices}`)
console.log(`üí∞ –û–±—â–∞—è —ç–∫–æ–Ω–æ–º–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${totalSavings}‚≠ê –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—é`)
console.log(`üéâ –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–±–ª–µ–º–∞ (NeuroPhoto 7.5‚≠ê ‚Üí 8‚≠ê): –†–ï–®–ï–ù–ê!`)

console.log(`\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª—É—á–∞—è –ì—É—Ä—É:`)
console.log('='.repeat(50))
console.log(`NeuroPhoto: ${neuroPhotoCost}‚≠ê`)
console.log(`–°—Ç–∞—Ä–æ–µ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ: ${oldRounding(neuroPhotoCost)}‚≠ê ‚ùå`)
console.log(`–ù–æ–≤—ã–π –ø–æ–¥—Ö–æ–¥: ${newRounding(neuroPhotoCost)}‚≠ê ‚úÖ`)
console.log(`–†–µ–∑—É–ª—å—Ç–∞—Ç: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ–ª—å—à–µ –ù–ï –ø–µ—Ä–µ–ø–ª–∞—á–∏–≤–∞—é—Ç 0.5‚≠ê!`)
