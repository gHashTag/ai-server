#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Supabase
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü, –∏—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Å–≤—è–∑–∏
 */

import { createClient } from '@supabase/supabase-js'
import dotenv from 'dotenv'

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config()

const supabaseUrl = process.env.SUPABASE_URL
const supabaseKey = process.env.SUPABASE_SERVICE_KEY

if (!supabaseUrl || !supabaseKey) {
  console.error(
    '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è SUPABASE_URL –∏–ª–∏ SUPABASE_SERVICE_KEY'
  )
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseKey)

async function diagnoseDatabase() {
  console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...\n')

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã model_trainings
    console.log('üìã 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã model_trainings:')
    const { data: modelTrainings, error: mtError } = await supabase
      .from('model_trainings')
      .select('*')
      .limit(1)

    if (mtError) {
      console.error(
        '‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ model_trainings:',
        mtError.message
      )
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ model_trainings —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–∞')
      if (modelTrainings && modelTrainings.length > 0) {
        console.log(
          'üìä –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏:',
          JSON.stringify(modelTrainings[0], null, 2)
        )
      }
    }

    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã users
    console.log('\nüìã 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã users:')
    const { data: users, error: usersError } = await supabase
      .from('users')
      .select('*')
      .limit(1)

    if (usersError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ç–∞–±–ª–∏—Ü–µ users:', usersError.message)
    } else {
      console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–∞')
      if (users && users.length > 0) {
        console.log('üìä –ü—Ä–∏–º–µ—Ä –∑–∞–ø–∏—Å–∏:', JSON.stringify(users[0], null, 2))
      }
    }

    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º JOIN –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏ (–∫–∞–∫ –≤ getTrainingWithUser)
    console.log('\nüìã 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ JOIN –º–µ–∂–¥—É model_trainings –∏ users:')
    const { data: joinData, error: joinError } = await supabase
      .from('model_trainings')
      .select(
        `
        *,
        users (
          bot_name,
          telegram_id,
          language_code
        )
      `
      )
      .limit(1)

    if (joinError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ JOIN –∑–∞–ø—Ä–æ—Å–∞:', joinError.message)
      console.error('üìù –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', JSON.stringify(joinError, null, 2))
    } else {
      console.log('‚úÖ JOIN –∑–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ')
      if (joinData && joinData.length > 0) {
        console.log(
          'üìä –ü—Ä–∏–º–µ—Ä JOIN —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:',
          JSON.stringify(joinData[0], null, 2)
        )
      }
    }

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π JOIN (–∫–∞–∫ –≤ getModelTrainingData)
    console.log('\nüìã 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ JOIN:')
    const { data: altJoinData, error: altJoinError } = await supabase
      .from('model_trainings')
      .select('telegram_id, users(bot_name, language_code)')
      .limit(1)

    if (altJoinError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ JOIN:', altJoinError.message)
    } else {
      console.log('‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π JOIN –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ')
      if (altJoinData && altJoinData.length > 0) {
        console.log(
          'üìä –ü—Ä–∏–º–µ—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:',
          JSON.stringify(altJoinData[0], null, 2)
        )
      }
    }

    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å –ø–æ replicate_training_id
    console.log('\nüìã 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ replicate_training_id:')
    const { data: specificData, error: specificError } = await supabase
      .from('model_trainings')
      .select('*')
      .eq('replicate_training_id', 'czx5g9e7bxrme0cq1d48v6zcmg') // ID –∏–∑ –ª–æ–≥–æ–≤
      .single()

    if (specificError) {
      console.error(
        '‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏:',
        specificError.message
      )
    } else {
      console.log('‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞:', JSON.stringify(specificData, null, 2))
    }

    // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã model_trainings
    console.log('\nüìã 6. –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã model_trainings:')
    const { data: allTrainings, error: allError } = await supabase
      .from('model_trainings')
      .select('*')
      .limit(5)

    if (allError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π:', allError.message)
    } else {
      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:', allTrainings?.length || 0)
      if (allTrainings && allTrainings.length > 0) {
        console.log('üìä –ü–æ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ:', Object.keys(allTrainings[0]))

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∞–∂–Ω—ã—Ö –ø–æ–ª–µ–π
        const firstRecord = allTrainings[0]
        console.log('\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–∂–Ω—ã—Ö –ø–æ–ª–µ–π:')
        console.log('- gender:', firstRecord.gender !== undefined ? '‚úÖ' : '‚ùå')
        console.log(
          '- bot_name:',
          firstRecord.bot_name !== undefined ? '‚úÖ' : '‚ùå'
        )
        console.log(
          '- telegram_id:',
          firstRecord.telegram_id !== undefined ? '‚úÖ' : '‚ùå'
        )
        console.log(
          '- replicate_training_id:',
          firstRecord.replicate_training_id !== undefined ? '‚úÖ' : '‚ùå'
        )
      }
    }
  } catch (error) {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏:', error)
  }

  console.log('\nüèÅ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞')
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
diagnoseDatabase().catch(console.error)
