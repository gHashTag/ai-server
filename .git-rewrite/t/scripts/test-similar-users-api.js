/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –≤—ã–∑–æ–≤–∞ similar_users_v2 –¥–ª—è vyacheslav_nekludov
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π username (—Å –±—É–∫–≤–æ–π "v" –≤ –Ω–∞—á–∞–ª–µ)
 */

require('dotenv').config()
const axios = require('axios')

async function testSimilarUsersAPI() {
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –≤—ã–∑–æ–≤–∞ similar_users_v2...\n')

  // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API (–∏–∑ –∫–æ–¥–∞ InstagramAPI –∫–ª–∞—Å—Å–∞)
  const config = {
    apiKey: process.env.RAPIDAPI_INSTAGRAM_KEY,
    host:
      process.env.RAPIDAPI_INSTAGRAM_HOST ||
      'real-time-instagram-scraper-api1.p.rapidapi.com',
    baseUrl: 'https://real-time-instagram-scraper-api1.p.rapidapi.com',
  }

  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–∞ username
  const testCases = [
    {
      name: '–ü–†–ê–í–ò–õ–¨–ù–´–ô —Ü–µ–ª–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      username_or_id: 'vyacheslav_nekludov', // –ò–°–ü–†–ê–í–õ–ï–ù–û: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –±—É–∫–≤–∞ "v"
      count: 30,
    },
    {
      name: '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π (—Å—Ç–∞—Ä—ã–π) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      username_or_id: 'yacheslav_nekludov', // –±–µ–∑ "v" - –¥–æ–ª–∂–µ–Ω –¥–∞—Ç—å –æ—à–∏–±–∫—É
      count: 5,
    },
    {
      name: '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
      username_or_id: 'treff_8',
      count: 5,
    },
  ]

  console.log('‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:')
  console.log(
    `   API Key: ${
      config.apiKey ? config.apiKey.substring(0, 15) + '...' : '–ù–ï –ù–ê–ô–î–ï–ù'
    }`
  )
  console.log(`   Host: ${config.host}`)
  console.log(`   Base URL: ${config.baseUrl}\n`)

  if (!config.apiKey) {
    console.error('‚ùå RAPIDAPI_INSTAGRAM_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω!')
    return
  }

  for (const testCase of testCases) {
    console.log(`\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${testCase.name}`)
    console.log(`   Target: ${testCase.username_or_id}`)
    console.log(`   Count: ${testCase.count}`)

    try {
      console.log('üìû –í—ã–ø–æ–ª–Ω—è–µ–º API –≤—ã–∑–æ–≤...')

      // –¢–æ—á–Ω–æ —Ç–∞–∫–æ–π –∂–µ –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –≤ instagramScraper-v2.ts
      const response = await axios.get(
        `${config.baseUrl}/v1/similar_users_v2`,
        {
          params: {
            username_or_id: testCase.username_or_id,
            count: testCase.count,
          },
          headers: {
            'x-rapidapi-key': config.apiKey,
            'x-rapidapi-host': config.host,
            'Content-Type': 'application/json',
          },
          timeout: 30000,
        }
      )

      console.log('‚úÖ API –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω!')
      console.log('üìä –°—Ç–∞—Ç—É—Å:', response.status)
      console.log('üìã Headers:', {
        'x-ratelimit-remaining': response.headers['x-ratelimit-remaining'],
        'x-ratelimit-limit': response.headers['x-ratelimit-limit'],
        'content-type': response.headers['content-type'],
      })

      console.log('\nüîç –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞:')
      console.log('   –¢–∏–ø response.data:', typeof response.data)

      if (response.data) {
        console.log('   –ö–ª—é—á–∏ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è:', Object.keys(response.data))

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∫ –≤ Zod —Å—Ö–µ–º–µ
        if (response.data.success !== undefined) {
          console.log('   success:', response.data.success)
        }

        if (response.data.status) {
          console.log('   status:', response.data.status)
        }

        if (response.data.message) {
          console.log('   message:', response.data.message)
        }

        if (response.data.data) {
          console.log('   data —Ç–∏–ø:', typeof response.data.data)

          if (typeof response.data.data === 'string') {
            console.log(
              '   ‚ùå data —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–æ–∫–æ–π (–æ—à–∏–±–∫–∞ API):',
              response.data.data
            )
          } else if (response.data.data.users) {
            console.log(
              '   ‚úÖ data.users –Ω–∞–π–¥–µ–Ω–æ, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:',
              response.data.data.users.length
            )

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–∏–º–µ—Ä
            if (response.data.data.users.length > 0) {
              console.log('   üìã –ü–µ—Ä–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', {
                pk: response.data.data.users[0].pk,
                username: response.data.data.users[0].username,
                full_name: response.data.data.users[0].full_name,
                is_verified: response.data.data.users[0].is_verified,
                is_private: response.data.data.users[0].is_private,
              })
            }
          } else {
            console.log('   ‚ùå data.users –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
          }
        } else {
          console.log('   ‚ùå data –ø–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
        }
      }

      // –ö—Ä–∞—Ç–∫–∏–π –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
      if (response.data.status === 'ok') {
        console.log(`\nüéâ –£–°–ü–ï–• –¥–ª—è ${testCase.username_or_id}!`)
      } else {
        console.log(
          `\n‚ùå –û–®–ò–ë–ö–ê –¥–ª—è ${testCase.username_or_id}: ${response.data.message}`
        )
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ API –≤—ã–∑–æ–≤–∞:', error.message)

      if (error.response) {
        console.error('   –°—Ç–∞—Ç—É—Å:', error.response.status)
        console.error('   –°—Ç–∞—Ç—É—Å —Ç–µ–∫—Å—Ç:', error.response.statusText)
        console.error('   –î–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏:', error.response.data)
      } else if (error.request) {
        console.error('   –ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ –æ—Ç–≤–µ—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ')
      } else {
        console.error('   –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:', error.message)
      }
    }

    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    await new Promise(resolve => setTimeout(resolve, 2000))
  }

  console.log('\nüéØ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ:')
  console.log('   –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π username: vyacheslav_nekludov (—Å –±—É–∫–≤–æ–π "v")')
  console.log('   –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π username: yacheslav_nekludov (–±–µ–∑ –±—É–∫–≤—ã "v")')
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testSimilarUsersAPI().catch(console.error)
