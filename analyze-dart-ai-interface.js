/**
 * –ê–Ω–∞–ª–∏–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Dart AI –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö API endpoints
 */

const axios = require('axios');
require('dotenv').config();

const API_KEY = process.env.DART_AI_API_KEY;

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

async function analyzeWebInterface() {
  log('\nüîç –ê–Ω–∞–ª–∏–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Dart AI –¥–ª—è –ø–æ–∏—Å–∫–∞ API endpoints\n', colors.bold);

  try {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const response = await axios.get('https://app.dartai.com', {
      headers: {
        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
      }
    });

    log('‚úÖ –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–≥—Ä—É–∂–µ–Ω', colors.green);
    
    // –ò—â–µ–º JavaScript —Ñ–∞–π–ª—ã
    const jsFiles = response.data.match(/src="([^"]*\.js[^"]*)"/g) || [];
    const uniqueJS = [...new Set(jsFiles.map(match => match.match(/src="([^"]*)"/)[1]))];

    log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${uniqueJS.length} JavaScript —Ñ–∞–π–ª–æ–≤:`, colors.blue);
    uniqueJS.forEach(js => log(`   ‚Ä¢ ${js}`, colors.reset));

    // –ò—â–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ API endpoints –≤ HTML
    const possibleAPIs = [
      ...response.data.matchAll(/["']([^"']*api[^"']*)/gi),
      ...response.data.matchAll(/["']([^"']*\/v\d+[^"']*)/gi),
      ...response.data.matchAll(/fetch\(["']([^"']+)["']/gi),
      ...response.data.matchAll(/axios\.[a-z]+\(["']([^"']+)["']/gi)
    ];

    const uniqueAPIEndpoints = [...new Set(
      Array.from(possibleAPIs).map(match => match[1]).filter(url => 
        url.includes('api') || url.includes('/v') || url.startsWith('/')
      )
    )];

    if (uniqueAPIEndpoints.length > 0) {
      log('\nüéØ –í–æ–∑–º–æ–∂–Ω—ã–µ API endpoints –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤ HTML:', colors.yellow);
      uniqueAPIEndpoints.forEach(endpoint => log(`   ‚Ä¢ ${endpoint}`, colors.reset));
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π JS —Ñ–∞–π–ª –¥–ª—è –ø–æ–∏—Å–∫–∞ API endpoints
    if (uniqueJS.length > 0) {
      const mainJS = uniqueJS.find(js => js.includes('index') || js.includes('main')) || uniqueJS[0];
      const fullJSUrl = mainJS.startsWith('http') ? mainJS : `https://app.dartai.com${mainJS}`;
      
      log(`\nüì• –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–ª–∞–≤–Ω—ã–π JS —Ñ–∞–π–ª: ${fullJSUrl}`, colors.blue);
      
      try {
        const jsResponse = await axios.get(fullJSUrl, {
          headers: {
            'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
          }
        });

        // –ò—â–µ–º API endpoints –≤ JS –∫–æ–¥–µ
        const apiPatterns = [
          /["']([^"']*\/api\/[^"']*)/gi,
          /["']([^"']*\/v\d+\/[^"']*)/gi,
          /baseURL:\s*["']([^"']+)["']/gi,
          /apiUrl:\s*["']([^"']+)["']/gi,
          /endpoint:\s*["']([^"']+)["']/gi
        ];

        const foundAPIs = new Set();
        
        apiPatterns.forEach(pattern => {
          const matches = jsResponse.data.matchAll(pattern);
          Array.from(matches).forEach(match => foundAPIs.add(match[1]));
        });

        if (foundAPIs.size > 0) {
          log('\nüöÄ API endpoints –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤ JavaScript:', colors.green);
          Array.from(foundAPIs).forEach(api => log(`   ‚Ä¢ ${api}`, colors.reset));

          // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ endpoints
          log('\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ API endpoints...', colors.blue);
          
          for (const endpoint of foundAPIs) {
            if (endpoint.length < 100 && (endpoint.includes('/api/') || endpoint.includes('/v'))) {
              const testUrl = endpoint.startsWith('http') ? endpoint : `https://app.dartai.com${endpoint}`;
              
              try {
                const testResponse = await axios.get(testUrl, {
                  headers: {
                    'Authorization': `Bearer ${API_KEY}`,
                    'Content-Type': 'application/json',
                    'User-Agent': 'AI-Server-DartAI-Integration/1.0.0'
                  },
                  timeout: 5000,
                  validateStatus: () => true
                });

                const isJSON = testResponse.headers['content-type']?.includes('application/json');
                const statusColor = testResponse.status === 200 ? colors.green : colors.yellow;
                
                log(`   ${isJSON ? '‚úÖ' : '‚ö†Ô∏è'} ${endpoint}: ${testResponse.status} ${isJSON ? '(JSON)' : '(HTML)'}`, statusColor);
                
                if (isJSON && testResponse.data) {
                  log(`      üì¶ ${JSON.stringify(testResponse.data).slice(0, 200)}...`, colors.reset);
                }

              } catch (error) {
                log(`   ‚ùå ${endpoint}: ${error.message}`, colors.red);
              }
            }
          }
        } else {
          log('\n‚ùå API endpoints –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ JavaScript', colors.red);
        }

      } catch (jsError) {
        log(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JS: ${jsError.message}`, colors.red);
      }
    }

    // –ü–æ–ø—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ API patterns
    log('\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ API patterns...', colors.blue);
    
    const standardAPIs = [
      'https://api.dartai.com',
      'https://api.dart.ai',
      'https://app.dartai.com/api/v1',
      'https://app.dartai.com/api/v2',
      'https://dartai.com/api',
      'https://backend.dartai.com/api',
      'https://server.dartai.com/api'
    ];

    for (const apiUrl of standardAPIs) {
      try {
        const testResponse = await axios.get(`${apiUrl}/health`, {
          headers: {
            'Authorization': `Bearer ${API_KEY}`,
            'Content-Type': 'application/json'
          },
          timeout: 3000,
          validateStatus: () => true
        });

        const isJSON = testResponse.headers['content-type']?.includes('application/json');
        if (isJSON) {
          log(`‚úÖ –ù–∞–π–¥–µ–Ω JSON API: ${apiUrl} (${testResponse.status})`, colors.green);
          log(`   üì¶ ${JSON.stringify(testResponse.data)}`, colors.reset);
        }

      } catch (error) {
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–ª—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
      }
    }

  } catch (error) {
    log(`‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: ${error.message}`, colors.red);
  }

  // –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —Ä–µ—à–µ–Ω–∏—é
  log('\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:', colors.yellow);
  log('   1. API –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ User-Agent', colors.reset);
  log('   2. –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ cookies/session', colors.reset);
  log('   3. API –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å', colors.reset);
  log('   4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é Dart AI –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', colors.reset);
  log('   5. API –∫–ª—é—á –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è', colors.reset);
}

if (require.main === module) {
  analyzeWebInterface().catch(console.error);
}