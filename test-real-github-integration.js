/**
 * –†–µ–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å GitHub Issues
 * –°–æ–∑–¥–∞–µ—Ç –Ω–∞—Å—Ç–æ—è—â–∏–µ issues –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
 */

const axios = require('axios');
require('dotenv').config();

const GITHUB_TOKEN = process.env.GITHUB_TOKEN;
const REPO = process.env.DEFAULT_GITHUB_REPO || 'gHashTag/ai-server';

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

async function testRealGitHubIntegration() {
  log('\nüöÄ –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å GitHub Issues\n', colors.bold);

  if (!GITHUB_TOKEN || GITHUB_TOKEN === 'your_github_token_here') {
    log('‚ùå GitHub —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!', colors.red);
    log('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ GITHUB_TOKEN –≤ .env —Ñ–∞–π–ª–µ', colors.yellow);
    return;
  }

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ GitHub API
    log('üì° –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ GitHub API', colors.blue);
    const repoResponse = await axios.get(`https://api.github.com/repos/${REPO}`, {
      headers: {
        'Authorization': `Bearer ${GITHUB_TOKEN}`,
        'Accept': 'application/vnd.github.v3+json'
      }
    });
    
    log(`‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–æ—Å—Ç—É–ø–µ–Ω: ${repoResponse.data.full_name}`, colors.green);
    log(`üìä Issues: ${repoResponse.data.open_issues_count} –æ—Ç–∫—Ä—ã—Ç—ã—Ö`, colors.blue);

    // 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö issues
    log('\nüìã –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö issues', colors.blue);
    const issuesResponse = await axios.get(`https://api.github.com/repos/${REPO}/issues`, {
      headers: {
        'Authorization': `Bearer ${GITHUB_TOKEN}`,
        'Accept': 'application/vnd.github.v3+json'
      },
      params: {
        state: 'open',
        per_page: 5
      }
    });

    log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${issuesResponse.data.length} –æ—Ç–∫—Ä—ã—Ç—ã—Ö issues:`, colors.green);
    issuesResponse.data.forEach((issue, index) => {
      log(`   ${index + 1}. #${issue.number}: ${issue.title}`, colors.reset);
    });

    // 3. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é issue
    log('\nüìù –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π issue –¥–ª—è Dart AI', colors.blue);
    const testIssue = {
      title: '[Dart AI Test] –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏',
      body: `# –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è Dart AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏

## –û–ø–∏—Å–∞–Ω–∏–µ
–≠—Ç–∞ issue —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Dart AI Task Manager.

## –ó–∞–¥–∞—á–∏
- [ ] –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –≤ Dart AI
- [ ] –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é —Å—Ç–∞—Ç—É—Å–∞
- [ ] –£–±–µ–¥–∏—Ç—å—Å—è –≤ –¥–≤—É—Ö—Å—Ç–æ—Ä–æ–Ω–Ω–µ–π —Å–≤—è–∑–∏

## –ú–µ—Ç–∫–∏
- –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
- Dart AI
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è

---
*–°–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: ${new Date().toLocaleString('ru-RU')}*`,
      labels: ['dart-ai-sync', 'test', 'integration']
    };

    const createResponse = await axios.post(`https://api.github.com/repos/${REPO}/issues`, testIssue, {
      headers: {
        'Authorization': `Bearer ${GITHUB_TOKEN}`,
        'Content-Type': 'application/json',
        'Accept': 'application/vnd.github.v3+json'
      }
    });

    log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è issue #${createResponse.data.number}`, colors.green);
    log(`üîó URL: ${createResponse.data.html_url}`, colors.blue);

    const issueData = {
      number: createResponse.data.number,
      title: createResponse.data.title,
      body: createResponse.data.body,
      state: createResponse.data.state,
      repository: REPO,
      assignees: createResponse.data.assignees?.map(a => a.login) || [],
      labels: createResponse.data.labels?.map(l => l.name) || [],
      created_at: createResponse.data.created_at,
      updated_at: createResponse.data.updated_at,
      html_url: createResponse.data.html_url
    };

    // 4. –°–∏–º—É–ª–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Dart AI
    log('\nüîÑ –¢–µ—Å—Ç 4: –°–∏–º—É–ª—è—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Dart AI', colors.blue);
    
    const dartAITask = {
      title: issueData.title,
      description: issueData.body,
      status: 'open',
      metadata: {
        source: 'github',
        github_issue_number: issueData.number,
        github_repository: issueData.repository,
        github_url: issueData.html_url,
        github_labels: issueData.labels,
        sync_timestamp: new Date().toISOString()
      }
    };

    log('üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è Dart AI:', colors.yellow);
    log(JSON.stringify(dartAITask, null, 2), colors.reset);

    // 5. –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    log('\nüí¨ –¢–µ—Å—Ç 5: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', colors.blue);
    
    const comment = {
      body: `ü§ñ **Dart AI Sync Status**

‚úÖ **Issue –≥–æ—Ç–æ–≤–∞ –∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å Dart AI**

**–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**
- **–ó–∞–≥–æ–ª–æ–≤–æ–∫:** ${dartAITask.title}
- **–°—Ç–∞—Ç—É—Å:** ${dartAITask.status}
- **–ò—Å—Ç–æ—á–Ω–∏–∫:** GitHub Issue #${issueData.number}
- **–ú–µ—Ç–∫–∏:** ${issueData.labels.join(', ')}

**–°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:**
1. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Dart AI API –∫–ª—é—á
2. –°–æ–∑–¥–∞—Ç—å Space/–ø—Ä–æ–µ–∫—Ç –≤ Dart AI
3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å webhook –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏

---
*–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞: ${new Date().toLocaleString('ru-RU')}*`
    };

    const commentResponse = await axios.post(
      `https://api.github.com/repos/${REPO}/issues/${issueData.number}/comments`,
      comment,
      {
        headers: {
          'Authorization': `Bearer ${GITHUB_TOKEN}`,
          'Content-Type': 'application/json',
          'Accept': 'application/vnd.github.v3+json'
        }
      }
    );

    log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ issue #${issueData.number}`, colors.green);

    // 6. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', colors.blue);
    log('‚úÖ GitHub API - –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç–∞–µ—Ç', colors.green);
    log('‚úÖ Issue —Å–æ–∑–¥–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', colors.green);
    log('‚ö†Ô∏è  Dart AI API - —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞', colors.yellow);
    
    log('\nüîß –ß—Ç–æ –Ω—É–∂–Ω–æ –¥–ª—è –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:', colors.blue);
    log('   1. –ü–æ–ª—É—á–∏—Ç—å Dart AI API –∫–ª—é—á –∏–∑ https://app.dartai.com', colors.yellow);
    log('   2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å Space/–ø—Ä–æ–µ–∫—Ç –ø–æ–¥ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π gHashTag/ai-server', colors.yellow);
    log('   3. –û–±–Ω–æ–≤–∏—Ç—å DART_AI_API_KEY –≤ .env —Ñ–∞–π–ª–µ', colors.yellow);
    log('   4. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å webhooks –≤ –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö', colors.yellow);

    log(`\nüéØ –°–æ–∑–¥–∞–Ω–Ω–∞—è issue –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${issueData.html_url}`, colors.bold + colors.green);

    return {
      success: true,
      github_working: true,
      dart_ai_ready: false,
      test_issue: issueData
    };

  } catch (error) {
    log(`\nüí• –û—à–∏–±–∫–∞: ${error.message}`, colors.red);
    
    if (error.response) {
      log(`üìã HTTP Status: ${error.response.status}`, colors.yellow);
      log(`üìã Response: ${JSON.stringify(error.response.data, null, 2)}`, colors.yellow);
    }

    return {
      success: false,
      error: error.message
    };
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testRealGitHubIntegration()
    .then(result => {
      if (result.success) {
        log('\nüéâ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!', colors.bold + colors.green);
      } else {
        log('\nüí• –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π', colors.bold + colors.red);
        process.exit(1);
      }
    })
    .catch(error => {
      log(`\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, colors.bold + colors.red);
      process.exit(1);
    });
}

module.exports = { testRealGitHubIntegration };