/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π Dart AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
 */

const axios = require('axios');
require('dotenv').config();

const SERVER_URL = process.env.ORIGIN || 'http://localhost:4000';

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

async function testAPIEndpoints() {
  log('\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API endpoints Dart AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n', colors.bold);

  try {
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Dart AI
    log('üè• 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ Dart AI API...', colors.blue);
    
    try {
      const statusResponse = await axios.get(`${SERVER_URL}/api/dart-ai/status`);
      log(`‚úÖ –°—Ç–∞—Ç—É—Å API: ${statusResponse.status}`, colors.green);
      log(`üìä –û—Ç–≤–µ—Ç: ${JSON.stringify(statusResponse.data, null, 2)}`, colors.reset);
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: ${error.response?.status} ${error.message}`, colors.red);
      if (error.response?.data) {
        log(`üìã –î–µ—Ç–∞–ª–∏: ${JSON.stringify(error.response.data, null, 2)}`, colors.yellow);
      }
    }

    // –¢–µ—Å—Ç 2: –ü–æ–ø—ã—Ç–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ GitHub Issue
    log('\nüìù 2. –¢–µ—Å—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ GitHub Issue #57...', colors.blue);
    
    const issueData = {
      number: 57,
      title: '[Dart AI Integration] Test —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏',
      body: '# –¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n\n‚úÖ Dart AI API (READ-ONLY) –ø–æ–¥–∫–ª—é—á–µ–Ω\n‚úÖ –û–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: Dart AI ‚Üí GitHub\n\n**–í—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:** ' + new Date().toLocaleString('ru-RU'),
      state: 'open',
      repository: 'gHashTag/ai-server',
      assignees: [],
      labels: ['dart-ai-test', 'integration'],
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    };
    
    try {
      const syncResponse = await axios.post(`${SERVER_URL}/api/dart-ai/sync/github-issue`, issueData);
      log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è Issue: ${syncResponse.status}`, colors.green);
      log(`üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${JSON.stringify(syncResponse.data, null, 2)}`, colors.reset);
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error.response?.status} ${error.message}`, colors.red);
      if (error.response?.data) {
        log(`üìã –î–µ—Ç–∞–ª–∏: ${JSON.stringify(error.response.data, null, 2)}`, colors.yellow);
      }
    }

    // –¢–µ—Å—Ç 3: –ú–∞—Å—Å–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è GitHub Issues
    log('\nüîÑ 3. –¢–µ—Å—Ç –º–∞—Å—Å–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Dart AI ‚Üí GitHub...', colors.blue);
    
    try {
      const bulkSyncData = {
        repository: 'gHashTag/ai-server',
        limit: 3 // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 3 –∑–∞–¥–∞—á–∞–º–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
      };
      
      const bulkResponse = await axios.post(`${SERVER_URL}/api/dart-ai/sync/bulk-github-issues`, bulkSyncData);
      log(`‚úÖ –ú–∞—Å—Å–æ–≤–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: ${bulkResponse.status}`, colors.green);
      log(`üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${JSON.stringify(bulkResponse.data, null, 2)}`, colors.reset);
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: ${error.response?.status} ${error.message}`, colors.red);
      if (error.response?.data) {
        log(`üìã –î–µ—Ç–∞–ª–∏: ${JSON.stringify(error.response.data, null, 2)}`, colors.yellow);
      }
    }

    // –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–∞—Ö (–µ—Å–ª–∏ endpoint —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    log('\nüìã 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–∞—Ö Dart AI...', colors.blue);
    
    try {
      const tasksResponse = await axios.get(`${SERVER_URL}/api/dart-ai/tasks`);
      log(`‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø–æ–ª—É—á–µ–Ω: ${tasksResponse.status}`, colors.green);
      log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${tasksResponse.data.count || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`, colors.reset);
    } catch (error) {
      log(`‚ö†Ô∏è  Endpoint /api/dart-ai/tasks –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${error.response?.status}`, colors.yellow);
    }

    // –¢–µ—Å—Ç 5: Webhook —Ç–µ—Å—Ç (—Å–∏–º—É–ª—è—Ü–∏—è Dart AI webhook)
    log('\nü™ù 5. –¢–µ—Å—Ç Dart AI webhook...', colors.blue);
    
    const webhookData = {
      event: 'task.updated',
      task: {
        duid: 'test-duid-12345',
        title: '[Webhook Test] –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∏–∑ Dart AI webhook',
        description: {
          root: {
            type: 'root',
            children: [
              {
                type: 'paragraph',
                children: [{ text: '–¢–µ—Å—Ç webhook —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏' }]
              }
            ]
          }
        },
        spaceDuid: 'test-space-duid',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        statusDuid: 'open-status-duid'
      },
      timestamp: new Date().toISOString()
    };
    
    try {
      const webhookResponse = await axios.post(`${SERVER_URL}/webhooks/dart-ai/tasks`, webhookData);
      log(`‚úÖ Webhook –æ–±—Ä–∞–±–æ—Ç–∞–Ω: ${webhookResponse.status}`, colors.green);
      log(`üì¶ –†–µ–∑—É–ª—å—Ç–∞—Ç: ${JSON.stringify(webhookResponse.data, null, 2)}`, colors.reset);
    } catch (error) {
      log(`‚ùå –û—à–∏–±–∫–∞ webhook: ${error.response?.status} ${error.message}`, colors.red);
      if (error.response?.data) {
        log(`üìã –î–µ—Ç–∞–ª–∏: ${JSON.stringify(error.response.data, null, 2)}`, colors.yellow);
      }
    }

    log('\nüéØ –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', colors.bold);
    log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã', colors.green);
    log('üîó Dart AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ (READ-ONLY)', colors.green);
    log('üìù GitHub Issues –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è –∏–∑ Dart AI –∑–∞–¥–∞—á', colors.green);
    log('ü™ù Webhook endpoints –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è Dart AI', colors.green);

  } catch (error) {
    log(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, colors.bold + colors.red);
    console.error(error);
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testAPIEndpoints().catch(console.error);
}

module.exports = { testAPIEndpoints };