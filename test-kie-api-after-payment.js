#!/usr/bin/env node

/**
 * –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê KIE.AI API –ü–û–°–õ–ï –ü–û–ü–û–õ–ù–ï–ù–ò–Ø
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–¥–µ–æ
 */

const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '.env') });

console.log('üí∞ –ü–†–û–í–ï–†–ö–ê KIE.AI –ü–û–°–õ–ï –ü–û–ü–û–õ–ù–ï–ù–ò–Ø');
console.log('=' .repeat(50));

const apiKey = process.env.KIE_AI_API_KEY;
console.log(`üîë API Key: ${apiKey ? '—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' : '–ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù'}`);

async function checkCurrentBalance() {
  console.log('\nüí≥ –ü–†–û–í–ï–†–ö–ê –¢–ï–ö–£–©–ï–ì–û –ë–ê–õ–ê–ù–°–ê:');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º chat credits (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Ä–∞–±–æ—á–∏–π endpoint)
    const response = await fetch('https://api.kie.ai/api/v1/chat/credit', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Accept': 'application/json'
      }
    });

    if (response.ok) {
      const data = await response.json();
      console.log(`‚úÖ Chat Credits: ${data.data} –∫—Ä–µ–¥–∏—Ç–æ–≤`);
      
      if (data.data > 200) {
        console.log('üéâ –ë–ê–õ–ê–ù–° –ü–û–ü–û–õ–ù–ï–ù! –í–∏–¥–Ω–æ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤');
      } else {
        console.log('‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –≤—Å–µ –µ—â–µ –Ω–∏–∑–∫–∏–π');
      }
      
      return data.data;
    } else {
      console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞: ${response.status}`);
      return null;
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    return null;
  }
}

async function testVideoGeneration() {
  console.log('\nüé¨ –¢–ï–°–¢ –ì–ï–ù–ï–†–ê–¶–ò–ò –í–ò–î–ï–û:');
  
  // –¢–µ—Å—Ç 1: –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ 2 —Å–µ–∫—É–Ω–¥—ã
  console.log('\nüìπ –¢–µ—Å—Ç 1: –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ 16:9, 2 —Å–µ–∫—É–Ω–¥—ã');
  await testSingleVideo({
    model: 'veo3',
    prompt: 'A beautiful flower blooming in spring garden, 2 seconds',
    duration: 2,
    aspect_ratio: '16:9'
  });

  // –¢–µ—Å—Ç 2: –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ 4 —Å–µ–∫—É–Ω–¥—ã  
  console.log('\nüì± –¢–µ—Å—Ç 2: –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ 9:16, 4 —Å–µ–∫—É–Ω–¥—ã');
  await testSingleVideo({
    model: 'veo3',
    prompt: 'A cat playing with yarn ball, vertical mobile video, 4 seconds',
    duration: 4,
    aspect_ratio: '9:16'
  });
}

async function testSingleVideo(payload) {
  console.log(`üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: ${JSON.stringify(payload, null, 2)}`);
  
  try {
    const response = await fetch('https://api.kie.ai/api/v1/veo/generate', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${apiKey}`,
        'Accept': 'application/json'
      },
      body: JSON.stringify(payload)
    });

    const data = await response.json();
    console.log(`üìä HTTP Status: ${response.status}`);
    console.log(`üìÑ Response: ${JSON.stringify(data, null, 2)}`);

    if (data.request_id) {
      console.log(`‚úÖ –£–°–ü–ï–•! Request ID: ${data.request_id}`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
      setTimeout(async () => {
        await checkVideoStatus(data.request_id);
      }, 5000);
      
      return true;
    } else if (data.code === 402) {
      console.log(`‚ùå –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û –ö–†–ï–î–ò–¢–û–í: ${data.msg}`);
      return false;
    } else if (data.code === 422) {
      console.log(`‚ùå –ù–ï–í–ï–†–ù–ê–Ø –ú–û–î–ï–õ–¨: ${data.msg}`);
      return false;
    } else {
      console.log(`‚ùå –û–®–ò–ë–ö–ê: ${data.code} - ${data.msg}`);
      return false;
    }
  } catch (error) {
    console.log(`‚ùå Network Error: ${error.message}`);
    return false;
  }
}

async function checkVideoStatus(requestId) {
  console.log(`\n‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: ${requestId}`);
  
  try {
    const response = await fetch(`https://api.kie.ai/api/v1/veo/record-info?request_id=${requestId}`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Accept': 'application/json'
      }
    });

    if (response.ok) {
      const data = await response.json();
      console.log(`üìã –°—Ç–∞—Ç—É—Å: ${data.status}`);
      
      if (data.status === 'completed' && data.video_url) {
        console.log(`üé¨ –í–ò–î–ï–û –ì–û–¢–û–í–û: ${data.video_url}`);
      } else if (data.status === 'processing') {
        console.log(`‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è... (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)`);
      } else if (data.status === 'failed') {
        console.log(`‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: ${data.error || '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
    }
  } catch (error) {
    console.log(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`);
  }
}

async function runFullTest() {
  console.log('üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–ô –ü–†–û–í–ï–†–ö–ò...\n');
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
  const balance = await checkCurrentBalance();
  
  if (balance === null) {
    console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á.');
    return;
  }
  
  if (balance <= 200) {
    console.log('‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –≤—Å–µ –µ—â–µ –Ω–∏–∑–∫–∏–π. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ.');
  }
  
  // 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≤–∏–¥–µ–æ
  await testVideoGeneration();
  
  // 3. –í—ã–≤–æ–¥—ã
  console.log('\n' + '='.repeat(60));
  console.log('üìù –ò–¢–û–ì–ò –ü–†–û–í–ï–†–ö–ò:');
  console.log('='.repeat(60));
  
  if (balance > 200) {
    console.log('‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    console.log('‚úÖ API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç');
    console.log('‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å');
    console.log('üì± –§–æ—Ä–º–∞—Ç—ã: 16:9 (–≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ) –∏ 9:16 (–≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ) –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è');
    console.log('‚è±Ô∏è Duration: 2-10 —Å–µ–∫—É–Ω–¥ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
    console.log('üí∞ –≠–∫–æ–Ω–æ–º–∏—è: 87% –ø—Ä–æ—Ç–∏–≤ Vertex AI –∞–∫—Ç–∏–≤–Ω–∞!');
  } else {
    console.log('‚ö†Ô∏è –ë–∞–ª–∞–Ω—Å –≤—Å–µ –µ—â–µ –Ω–∏–∑–∫–∏–π');
    console.log('üîÑ –í–æ–∑–º–æ–∂–Ω–æ, fallback –Ω–∞ Vertex AI –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è');
  }
  
  console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ request_id –≤—ã—à–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏');
}

runFullTest().catch(console.error);