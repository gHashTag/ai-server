/**
 * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Dart AI (READ-ONLY) —Å GitHub
 * –û–¥–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: Dart AI ‚Üí GitHub Issues
 */

require('dotenv').config();

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à —Å–µ—Ä–≤–∏—Å (–∏–º–∏—Ç–∏—Ä—É–µ–º TypeScript import –≤ Node.js)
const DartAIService = require('./src/services/dart-ai.service.ts').DartAIService;

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

async function testIntegration() {
  log('\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π Dart AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n', colors.bold);

  try {
    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
    log('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ DartAIService...', colors.blue);
    const dartAIService = new DartAIService();

    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API
    log('\nüè• 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è Dart AI API...', colors.blue);
    const healthCheck = await dartAIService.healthCheck();
    
    if (healthCheck.success) {
      log(`‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω: ${healthCheck.message}`, colors.green);
      log(`   üìä –î–µ—Ç–∞–ª–∏: ${JSON.stringify(healthCheck.details, null, 2)}`, colors.reset);
    } else {
      log(`‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: ${healthCheck.message}`, colors.red);
      return;
    }

    // –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á
    log('\nüìã 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–¥–∞—á –∏–∑ Dart AI...', colors.blue);
    const tasksResult = await dartAIService.getTasks();
    
    if (tasksResult.success) {
      log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–∞–¥–∞—á: ${tasksResult.count}`, colors.green);
      if (tasksResult.tasks.length > 0) {
        const firstTask = tasksResult.tasks[0];
        log(`   üìù –ü–µ—Ä–≤–∞—è –∑–∞–¥–∞—á–∞: "${firstTask.title}"`, colors.reset);
        log(`   üÜî DUID: ${firstTask.duid}`, colors.reset);
        log(`   üìÖ –°–æ–∑–¥–∞–Ω–∞: ${firstTask.createdAt}`, colors.reset);
      }
    } else {
      log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á', colors.red);
      return;
    }

    // –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤
    log('\nüè¢ 3. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤ –∏–∑ Dart AI...', colors.blue);
    const spacesResult = await dartAIService.getSpaces();
    
    if (spacesResult.success) {
      log(`‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤: ${spacesResult.count}`, colors.green);
      spacesResult.spaces.forEach((space, index) => {
        log(`   ${index + 1}. "${space.title}" (${space.kind}) - ${space.duid}`, colors.reset);
      });
    } else {
      log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤', colors.red);
    }

    // –¢–µ—Å—Ç 4: –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å GitHub
    log('\nüîç 4. –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å GitHub...', colors.blue);
    const githubTasks = await dartAIService.findTasksWithGitHubMetadata();
    
    log(`üì¶ –ù–∞–π–¥–µ–Ω–æ GitHub-—Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: ${githubTasks.length}`, colors.yellow);
    githubTasks.forEach((task, index) => {
      log(`   ${index + 1}. "${task.title}" (${task.duid})`, colors.reset);
    });

    // –¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    log('\nüìä 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–∏—Å–∞...', colors.blue);
    const stats = dartAIService.getSyncStats();
    log(`üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${JSON.stringify(stats, null, 2)}`, colors.reset);

    // –¢–µ—Å—Ç 6: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ GitHub Issue –∏–∑ –ø–µ—Ä–≤–æ–π –∑–∞–¥–∞—á–∏
    if (tasksResult.tasks.length > 0) {
      log('\nüöÄ 6. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è GitHub Issue –∏–∑ –∑–∞–¥–∞—á–∏ Dart AI...', colors.blue);
      
      const testTask = tasksResult.tasks[0];
      const repository = process.env.DEFAULT_GITHUB_REPO || 'gHashTag/ai-server';
      
      log(`   üìù –°–æ–∑–¥–∞—é Issue –¥–ª—è –∑–∞–¥–∞—á–∏: "${testTask.title}"`, colors.yellow);
      log(`   üìç –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: ${repository}`, colors.yellow);
      
      try {
        const issue = await dartAIService.createGitHubIssueFromTask(testTask, repository);
        
        if (issue) {
          log(`‚úÖ GitHub Issue —Å–æ–∑–¥–∞–Ω!`, colors.green);
          log(`   üîó Issue #${issue.number}: ${issue.title}`, colors.green);
          log(`   üìç URL: https://github.com/${repository}/issues/${issue.number}`, colors.green);
        } else {
          log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å GitHub Issue', colors.yellow);
        }
      } catch (error) {
        log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è Issue: ${error.message}`, colors.red);
      }
    }

    // –¢–µ—Å—Ç 7: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–æ DUID
    if (tasksResult.tasks.length > 0) {
      log('\nüîç 7. –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ DUID...', colors.blue);
      const testDuid = tasksResult.tasks[0].duid;
      
      const task = await dartAIService.getTaskByDuid(testDuid);
      if (task) {
        log(`‚úÖ –ó–∞–¥–∞—á–∞ –ø–æ–ª—É—á–µ–Ω–∞: "${task.title}"`, colors.green);
      } else {
        log('‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', colors.red);
      }
    }

    log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!', colors.bold + colors.green);
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:', colors.yellow);
    log('   1. ‚úÖ Read-only API —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ', colors.green);
    log('   2. ‚úÖ –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å GitHub Issues –∏–∑ –∑–∞–¥–∞—á Dart AI', colors.green);
    log('   3. ‚ö†Ô∏è  –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –≤ Dart AI —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å', colors.yellow);
    log('   4. üîÑ –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é Dart AI ‚Üí GitHub', colors.blue);
    log('   5. ü™ù –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ webhooks –¥–ª—è real-time —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', colors.blue);

  } catch (error) {
    log(`üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, colors.bold + colors.red);
    console.error(error);
  }
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testIntegration().catch(console.error);
}

module.exports = { testIntegration };