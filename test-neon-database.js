/**
 * –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon database (PostgreSQL)
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ Instagram Scraper, –≤–æ–∑–º–æ–∂–Ω–æ –æ—Å–Ω–æ–≤–Ω–∞—è –ë–î
 */

const { Pool } = require('pg')

async function testNeonConnection() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon Database...')
  
  const NEON_DATABASE_URL = 'postgresql://neondb_owner:npg_5RWzh7CwrXxE@ep-delicate-block-a1l1lt0p-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require&channel_binding=require'
  
  console.log('üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon PostgreSQL...')
  console.log('üîó URL: ep-delicate-block-a1l1lt0p-pooler.ap-southeast-1.aws.neon.tech')
  
  const dbPool = new Pool({
    connectionString: NEON_DATABASE_URL,
    ssl: { rejectUnauthorized: false }
  })
  
  try {
    const client = await dbPool.connect()
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon Database —É—Å–ø–µ—à–Ω–æ!')
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã
      console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü...')
      
      const { rows: tables } = await client.query(`
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public' 
        ORDER BY table_name
      `)
      
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${tables.length} —Ç–∞–±–ª–∏—Ü:`)
      tables.forEach((table, i) => {
        console.log(`  ${i + 1}. ${table.table_name}`)
      })
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–±–ª–∏—Ü—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
      const monitoringTables = [
        'competitor_subscriptions',
        'competitor_profiles',
        'competitor_delivery_history',
        'instagram_apify_reels'
      ]
      
      const existingMonitoringTables = tables
        .map(t => t.table_name)
        .filter(name => monitoringTables.includes(name))
      
      console.log(`\nüéØ –¢–∞–±–ª–∏—Ü—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${existingMonitoringTables.length}/${monitoringTables.length}`)
      existingMonitoringTables.forEach(table => {
        console.log(`  ‚úÖ ${table}`)
      })
      
      const missingTables = monitoringTables.filter(
        table => !existingMonitoringTables.includes(table)
      )
      
      if (missingTables.length > 0) {
        console.log(`\n‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã:`)
        missingTables.forEach(table => {
          console.log(`  ‚ùå ${table}`)
        })
        
        console.log('\nüèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–∞–±–ª–∏—Ü...')
        await createMissingTables(client, missingTables)
      }
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
      if (existingMonitoringTables.includes('competitor_subscriptions') || 
          missingTables.includes('competitor_subscriptions')) {
        console.log('\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏...')
        await testSubscriptionOperations(client)
      }
      
      if (existingMonitoringTables.includes('instagram_apify_reels') || 
          missingTables.includes('instagram_apify_reels')) {
        console.log('\nüé¨ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü—ã —Ä–∏–ª–∑–æ–≤...')
        await testReelsTable(client)
      }
      
    } finally {
      client.release()
    }
    
    console.log('\nüéâ –¢–µ—Å—Ç Neon Database –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
    return true
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neon:', error.message)
    console.error('üîç –î–µ—Ç–∞–ª–∏:', error.code || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    
    if (error.message.includes('password')) {
      console.log('\nüí° –í–æ–∑–º–æ–∂–Ω–æ, –ø–∞—Ä–æ–ª—å —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π')
    } else if (error.message.includes('connect')) {
      console.log('\nüí° –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º')
    }
    
    return false
  } finally {
    await dbPool.end()
  }
}

async function createMissingTables(client, missingTables) {
  const tableDefinitions = {
    competitor_subscriptions: `
      CREATE TABLE competitor_subscriptions (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        user_telegram_id VARCHAR(255) NOT NULL,
        user_chat_id VARCHAR(255),
        bot_name VARCHAR(255) NOT NULL,
        competitor_username VARCHAR(255) NOT NULL,
        competitor_display_name VARCHAR(255),
        max_reels INTEGER DEFAULT 10,
        min_views INTEGER DEFAULT 1000,
        max_age_days INTEGER DEFAULT 7,
        delivery_time TIME DEFAULT '09:00:00',
        delivery_timezone VARCHAR(50) DEFAULT 'UTC',
        delivery_format VARCHAR(50) DEFAULT 'digest',
        is_active BOOLEAN DEFAULT true,
        last_parsed_at TIMESTAMP,
        next_parse_at TIMESTAMP,
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW(),
        UNIQUE(user_telegram_id, competitor_username, bot_name)
      )
    `,
    competitor_profiles: `
      CREATE TABLE competitor_profiles (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        username VARCHAR(255) UNIQUE NOT NULL,
        display_name VARCHAR(255),
        bio TEXT,
        followers_count INTEGER,
        following_count INTEGER,
        posts_count INTEGER,
        is_verified BOOLEAN DEFAULT false,
        is_private BOOLEAN DEFAULT false,
        last_updated TIMESTAMP DEFAULT NOW(),
        profile_pic_url TEXT,
        total_subscribers INTEGER DEFAULT 0,
        avg_views INTEGER DEFAULT 0,
        avg_likes INTEGER DEFAULT 0,
        created_at TIMESTAMP DEFAULT NOW(),
        updated_at TIMESTAMP DEFAULT NOW()
      )
    `,
    competitor_delivery_history: `
      CREATE TABLE competitor_delivery_history (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        subscription_id UUID REFERENCES competitor_subscriptions(id) ON DELETE CASCADE,
        delivered_at TIMESTAMP DEFAULT NOW(),
        reels_count INTEGER NOT NULL,
        delivery_status VARCHAR(50) DEFAULT 'sent',
        error_message TEXT,
        reels_data JSONB,
        archive_url TEXT,
        created_at TIMESTAMP DEFAULT NOW()
      )
    `,
    instagram_apify_reels: `
      CREATE TABLE instagram_apify_reels (
        id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
        reel_id VARCHAR(255) UNIQUE,
        url TEXT NOT NULL,
        video_url TEXT,
        thumbnail_url TEXT,
        caption TEXT,
        hashtags JSONB,
        owner_username VARCHAR(255),
        owner_id VARCHAR(255),
        views_count INTEGER DEFAULT 0,
        likes_count INTEGER DEFAULT 0,
        comments_count INTEGER DEFAULT 0,
        duration FLOAT,
        published_at TIMESTAMP,
        music_artist VARCHAR(255),
        music_title VARCHAR(255),
        project_id INTEGER,
        scraped_at TIMESTAMP DEFAULT NOW(),
        created_at TIMESTAMP DEFAULT NOW()
      )
    `
  }
  
  for (const tableName of missingTables) {
    if (tableDefinitions[tableName]) {
      try {
        console.log(`  üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ ${tableName}...`)
        await client.query(tableDefinitions[tableName])
        console.log(`  ‚úÖ ${tableName} —Å–æ–∑–¥–∞–Ω–∞`)
      } catch (error) {
        console.log(`  ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ${tableName}: ${error.message}`)
      }
    }
  }
  
  // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
  console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...')
  const indexes = [
    'CREATE INDEX IF NOT EXISTS idx_subscriptions_active ON competitor_subscriptions(is_active, next_parse_at)',
    'CREATE INDEX IF NOT EXISTS idx_subscriptions_user ON competitor_subscriptions(user_telegram_id, bot_name)',
    'CREATE INDEX IF NOT EXISTS idx_reels_owner ON instagram_apify_reels(owner_username)',
    'CREATE INDEX IF NOT EXISTS idx_reels_scraped ON instagram_apify_reels(scraped_at)'
  ]
  
  for (const indexSQL of indexes) {
    try {
      await client.query(indexSQL)
    } catch (error) {
      // –ò–Ω–¥–µ–∫—Å—ã –º–æ–≥—É—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å
    }
  }
}

async function testSubscriptionOperations(client) {
  const testSubscription = {
    user_telegram_id: 'test_user_' + Date.now(),
    user_chat_id: 'test_chat_' + Date.now(),
    bot_name: 'neuro_blogger_bot',
    competitor_username: 'test_competitor',
    max_reels: 5,
    min_views: 1000,
    delivery_format: 'digest',
    is_active: true
  }
  
  try {
    // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    const { rows } = await client.query(`
      INSERT INTO competitor_subscriptions 
      (user_telegram_id, user_chat_id, bot_name, competitor_username, max_reels, min_views, delivery_format, is_active)
      VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
      RETURNING id
    `, [
      testSubscription.user_telegram_id,
      testSubscription.user_chat_id,
      testSubscription.bot_name,
      testSubscription.competitor_username,
      testSubscription.max_reels,
      testSubscription.min_views,
      testSubscription.delivery_format,
      testSubscription.is_active
    ])
    
    const subscriptionId = rows[0].id
    console.log(`  ‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: ${subscriptionId}`)
    
    // –ß—Ç–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
    const { rows: readRows } = await client.query(`
      SELECT * FROM competitor_subscriptions WHERE id = $1
    `, [subscriptionId])
    
    console.log(`  ‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ—á–∏—Ç–∞–Ω–∞: @${readRows[0].competitor_username}`)
    
    // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    await client.query(`
      DELETE FROM competitor_subscriptions WHERE id = $1
    `, [subscriptionId])
    
    console.log(`  ‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞`)
    
  } catch (error) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–π: ${error.message}`)
  }
}

async function testReelsTable(client) {
  try {
    const { rows } = await client.query(`
      SELECT COUNT(*) as count FROM instagram_apify_reels
    `)
    
    console.log(`  üìä –†–∏–ª–∑–æ–≤ –≤ –ë–î: ${rows[0].count}`)
    
    if (rows[0].count > 0) {
      const { rows: sampleRows } = await client.query(`
        SELECT owner_username, views_count, url 
        FROM instagram_apify_reels 
        ORDER BY views_count DESC 
        LIMIT 3
      `)
      
      console.log(`  üèÜ –¢–æ–ø —Ä–∏–ª–∑—ã:`)
      sampleRows.forEach((reel, i) => {
        console.log(`    ${i + 1}. @${reel.owner_username}: ${reel.views_count?.toLocaleString() || 0} –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤`)
      })
    }
    
  } catch (error) {
    console.log(`  ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∏–ª–∑–æ–≤: ${error.message}`)
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
testNeonConnection()
  .then((success) => {
    if (success) {
      console.log('\nüéâ Neon Database –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!')
      console.log(`
üìã –†–µ–∑—É–ª—å—Ç–∞—Ç:
‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã
‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç

üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ API —Å–µ—Ä–≤–µ—Ä: npm run dev
2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: node test-competitor-monitoring.js
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é

üí° –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞!
`)
    } else {
      console.log('\nüí• –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neon Database –Ω–µ —É–¥–∞–ª–æ—Å—å')
      console.log(`
üîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:
1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É
2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ Neon –ø—Ä–æ–µ–∫—Ç –∞–∫—Ç–∏–≤–µ–Ω
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å credentials
4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å –≤ Neon Dashboard
`)
    }
    
    process.exit(success ? 0 : 1)
  })
  .catch((error) => {
    console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error)
    process.exit(1)
  })