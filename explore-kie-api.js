#!/usr/bin/env node

/**
 * –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –†–ï–ê–õ–¨–ù–û–ì–û KIE.AI API
 * 
 * –í—ã—è—Å–Ω—è–µ–º:
 * 1. –ö–∞–∫–∏–µ endpoints –¥–æ—Å—Ç—É–ø–Ω—ã
 * 2. –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
 * 3. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ video generation
 */

const axios = require('axios');

console.log('üîç –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –†–ï–ê–õ–¨–ù–û–ì–û KIE.AI API\n');

class KieApiExplorer {
  constructor() {
    this.apiKey = 'f52f224a92970aa6b7c7780104a00f71';
    this.baseUrl = 'https://api.kie.ai';
    this.endpoints = [];
  }

  async exploreEndpoints() {
    console.log('üìã –ò–°–°–õ–ï–î–û–í–ê–ù–ò–ï –î–û–°–¢–£–ü–ù–´–• ENDPOINTS');
    console.log('=' * 50);
    
    // –ò–∑–≤–µ—Å—Ç–Ω—ã–µ endpoints –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const potentialEndpoints = [
      '/api/v1/chat/credit',
      '/api/v1/video/generate',
      '/api/v1/generate/video',
      '/api/v1/models',
      '/api/v1/video',
      '/v1/video/generate',
      '/v1/generate',
      '/api/video/generate',
      '/video/generate',
      '/generate/video',
      '/api/v1/chat/completions',
      '/api/v1/generations',
      '/api/v1/tasks'
    ];

    const workingEndpoints = [];
    const notFoundEndpoints = [];

    for (const endpoint of potentialEndpoints) {
      console.log(`‚è≥ –¢–µ—Å—Ç–∏—Ä—É—é: ${endpoint}`);
      
      try {
        const response = await axios.get(`${this.baseUrl}${endpoint}`, {
          headers: {
            'Authorization': `Bearer ${this.apiKey}`,
            'Content-Type': 'application/json'
          },
          timeout: 10000
        });
        
        console.log(`‚úÖ –†–ê–ë–û–¢–ê–ï–¢: ${endpoint} (—Å—Ç–∞—Ç—É—Å: ${response.status})`);
        workingEndpoints.push({
          endpoint,
          status: response.status,
          data: response.data
        });
        
      } catch (error) {
        if (error.response?.status === 404) {
          console.log(`‚ùå –ù–ï –ù–ê–ô–î–ï–ù: ${endpoint}`);
          notFoundEndpoints.push(endpoint);
        } else if (error.response?.status === 401) {
          console.log(`üîê –¢–†–ï–ë–£–ï–¢ –ê–í–¢–û–†–ò–ó–ê–¶–ò–Æ: ${endpoint}`);
          workingEndpoints.push({
            endpoint,
            status: 401,
            requiresAuth: true
          });
        } else if (error.response?.status === 405) {
          console.log(`‚ö†Ô∏è –ú–ï–¢–û–î –ù–ï –†–ê–ó–†–ï–®–ï–ù: ${endpoint} (–≤–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–µ–Ω POST)`);
          workingEndpoints.push({
            endpoint,
            status: 405,
            needsPost: true
          });
        } else {
          console.log(`‚ö†Ô∏è –û–®–ò–ë–ö–ê: ${endpoint} - ${error.response?.status} ${error.message}`);
        }
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 500));
    }

    console.log('\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:');
    console.log(`‚úÖ –†–∞–±–æ—á–∏–µ endpoints: ${workingEndpoints.length}`);
    console.log(`‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã: ${notFoundEndpoints.length}`);
    
    return workingEndpoints;
  }

  async testVideoEndpoints() {
    console.log('\nüé¨ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï VIDEO ENDPOINTS –° POST');
    console.log('=' * 50);
    
    const videoEndpoints = [
      '/api/v1/video/generate',
      '/api/v1/generate/video', 
      '/v1/video/generate',
      '/api/video/generate',
      '/video/generate'
    ];

    const testPayload = {
      model: 'veo-3-fast',
      prompt: 'A simple test video of a cat',
      duration: 2
    };

    for (const endpoint of videoEndpoints) {
      console.log(`\n‚è≥ POST —Ç–µ—Å—Ç: ${endpoint}`);
      console.log(`üì§ Payload: ${JSON.stringify(testPayload, null, 2)}`);
      
      try {
        const response = await axios.post(`${this.baseUrl}${endpoint}`, testPayload, {
          headers: {
            'Authorization': `Bearer ${this.apiKey}`,
            'Content-Type': 'application/json'
          },
          timeout: 30000
        });
        
        console.log(`‚úÖ –£–°–ü–ï–•: ${endpoint}`);
        console.log(`üìä –°—Ç–∞—Ç—É—Å: ${response.status}`);
        console.log(`üìã –û—Ç–≤–µ—Ç: ${JSON.stringify(response.data, null, 2)}`);
        
        return { endpoint, success: true, data: response.data };
        
      } catch (error) {
        if (error.response?.status === 404) {
          console.log(`‚ùå –ù–ï –ù–ê–ô–î–ï–ù: ${endpoint}`);
        } else if (error.response?.status === 400) {
          console.log(`‚ö†Ô∏è –ù–ï–í–ï–†–ù–´–ô –ó–ê–ü–†–û–°: ${endpoint}`);
          console.log(`üí° –û—à–∏–±–∫–∞: ${JSON.stringify(error.response.data, null, 2)}`);
        } else if (error.response?.status === 401) {
          console.log(`üîê –ù–ï –ê–í–¢–û–†–ò–ó–û–í–ê–ù: ${endpoint}`);
        } else {
          console.log(`‚ùå –û–®–ò–ë–ö–ê: ${endpoint} - ${error.response?.status}`);
          if (error.response?.data) {
            console.log(`üìã –î–µ—Ç–∞–ª–∏: ${JSON.stringify(error.response.data, null, 2)}`);
          }
        }
      }
      
      await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    return null;
  }

  async checkDocumentation() {
    console.log('\nüìö –ü–†–û–í–ï–†–ö–ê –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò');
    console.log('=' * 50);
    
    // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª—è—Ö –∏ endpoints
    const infoEndpoints = [
      '/api/v1/models',
      '/api/v1/info',
      '/api/v1/health',
      '/api/v1/status',
      '/health',
      '/status',
      '/info'
    ];

    for (const endpoint of infoEndpoints) {
      try {
        console.log(`‚è≥ –ü—Ä–æ–≤–µ—Ä—è—é: ${endpoint}`);
        
        const response = await axios.get(`${this.baseUrl}${endpoint}`, {
          headers: {
            'Authorization': `Bearer ${this.apiKey}`,
            'Content-Type': 'application/json'
          },
          timeout: 10000
        });
        
        console.log(`‚úÖ –ù–ê–ô–î–ï–ù–û: ${endpoint}`);
        console.log(`üìä –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(response.data, null, 2)}`);
        
      } catch (error) {
        if (error.response?.status !== 404) {
          console.log(`‚ö†Ô∏è ${endpoint}: ${error.response?.status} - ${error.message}`);
        }
      }
      
      await new Promise(resolve => setTimeout(resolve, 500));
    }
  }

  async analyzeKnownEndpoint() {
    console.log('\nüîç –ê–ù–ê–õ–ò–ó –†–ê–ë–û–¢–ê–Æ–©–ï–ì–û ENDPOINT');
    console.log('=' * 50);
    
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç–∞—é—â–∏–π endpoint /api/v1/chat/credit
    try {
      const response = await axios.get(`${this.baseUrl}/api/v1/chat/credit`, {
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json'
        }
      });
      
      console.log('‚úÖ –†–∞–±–æ—Ç–∞—é—â–∏–π endpoint: /api/v1/chat/credit');
      console.log('üìä –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞:', JSON.stringify(response.data, null, 2));
      console.log('üìã –ó–∞–≥–æ–ª–æ–≤–∫–∏:', JSON.stringify(response.headers, null, 2));
      
      console.log('\nüí° –í–´–í–û–î–´:');
      console.log('‚Ä¢ API —Ä–∞–±–æ—Ç–∞–µ—Ç —Å Bearer —Ç–æ–∫–µ–Ω–∞–º–∏');
      console.log('‚Ä¢ –ë–∞–∑–æ–≤—ã–π URL –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π: https://api.kie.ai');
      console.log('‚Ä¢ API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON –æ—Ç–≤–µ—Ç—ã');
      console.log('‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞: { code, msg, data }');
      
    } catch (error) {
      console.log('‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º endpoint');
    }
  }
}

async function main() {
  const explorer = new KieApiExplorer();
  
  try {
    // 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–±–æ—á–∏–π endpoint
    await explorer.analyzeKnownEndpoint();
    
    // 2. –ò—Å—Å–ª–µ–¥—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ endpoints
    const workingEndpoints = await explorer.exploreEndpoints();
    
    // 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º video endpoints —Å POST
    const videoResult = await explorer.testVideoEndpoints();
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
    await explorer.checkDocumentation();
    
    console.log('\nüéØ –ò–¢–û–ì–ò –ò–°–°–õ–ï–î–û–í–ê–ù–ò–Ø:');
    console.log('=' * 50);
    
    if (videoResult && videoResult.success) {
      console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π video endpoint: ${videoResult.endpoint}`);
      console.log('üéâ –ú–æ–∂–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ!');
    } else {
      console.log('‚ùå –†–∞–±–æ—á–∏–µ video endpoints –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      console.log('üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   ‚Ä¢ API –∏–∑–º–µ–Ω–∏–ª—Å—è –∏–ª–∏ endpoint –¥—Ä—É–≥–æ–π');
      console.log('   ‚Ä¢ –ù—É–∂–Ω—ã –¥—Ä—É–≥–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞');
      console.log('   ‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –¥—Ä—É–≥–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      console.log('   ‚Ä¢ Video generation –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –≤ –≤–∞—à–µ–º –ø–ª–∞–Ω–µ');
    }
    
    console.log('\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é Kie.ai');
    console.log('2. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö endpoints');
    console.log('3. –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–µ–Ω –¥—Ä—É–≥–æ–π API –ø—Ä–æ–≤–∞–π–¥–µ—Ä');
    
  } catch (error) {
    console.error('\nüí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê:', error.message);
  }
}

if (require.main === module) {
  main();
}