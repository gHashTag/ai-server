/**
 * –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ investInCompetitor
 * –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ Inngest —Å–æ–±—ã—Ç–∏—è
 */

// –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è
async function testInvestFunction() {
  console.log('üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ investInCompetitor...')
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  if (!process.env.NEON_DATABASE_URL) {
    console.error('‚ùå NEON_DATABASE_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞')
    return
  }
  
  console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞')
  
  // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
  const testData = {
    username: 'natgeo',
    user_telegram_id: '144022504',
    user_chat_id: '144022504', 
    bot_name: 'neuro_blogger_bot',
    max_reels: 5,
    min_views: 1000,
    max_age_days: 14,
    delivery_format: 'digest',
    project_id: 999
  }
  
  console.log('üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞:', testData)
  
  try {
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
    const { Pool } = require('pg')
    const dbPool = new Pool({
      connectionString: process.env.NEON_DATABASE_URL,
      ssl: { rejectUnauthorized: false }
    })
    
    const client = await dbPool.connect()
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
      const tables = await client.query(`
        SELECT table_name FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name LIKE '%competitor%'
      `)
      
      console.log('üìã –ù–∞–π–¥–µ–Ω—ã —Ç–∞–±–ª–∏—Ü—ã:', tables.rows.map(r => r.table_name))
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
      const subscriptions = await client.query(`
        SELECT * FROM competitor_subscriptions 
        WHERE user_telegram_id = $1 
        LIMIT 3
      `, [testData.user_telegram_id])
      
      console.log(`üë• –¢–µ–∫—É—â–∏—Ö –ø–æ–¥–ø–∏—Å–æ–∫: ${subscriptions.rows.length}`)
      
      if (subscriptions.rows.length > 0) {
        console.log('üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏:')
        subscriptions.rows.forEach((sub, i) => {
          console.log(`${i + 1}. @${sub.competitor_username} (–∞–∫—Ç–∏–≤–Ω–∞: ${sub.is_active})`)
        })
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–∏–ª–∑—ã –≤ –ë–î
      const reels = await client.query(`
        SELECT COUNT(*) as count, owner_username 
        FROM instagram_apify_reels 
        WHERE owner_username = $1
        GROUP BY owner_username
      `, [testData.username])
      
      if (reels.rows.length > 0) {
        console.log(`üé¨ –†–∏–ª–∑–æ–≤ @${testData.username} –≤ –ë–î: ${reels.rows[0].count}`)
      } else {
        console.log(`üì≠ –†–∏–ª–∑–æ–≤ @${testData.username} –≤ –ë–î –ø–æ–∫–∞ –Ω–µ—Ç`)
      }
      
    } finally {
      client.release()
      await dbPool.end()
    }
    
    console.log('\nüéØ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!')
    console.log(`
üìù –î–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:

1. –ß–µ—Ä–µ–∑ API (–µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω):
   curl -X POST http://localhost:3000/api/invest-competitor \\
     -H "Content-Type: application/json" \\
     -d '${JSON.stringify(testData)}'

2. –ß–µ—Ä–µ–∑ Inngest –Ω–∞–ø—Ä—è–º—É—é (–≤ –∫–æ–¥–µ):
   await inngest.send({
     name: 'competitor/invest',
     data: ${JSON.stringify(testData, null, 2)}
   })

3. –ß–µ—Ä–µ–∑ Telegram –±–æ—Ç (–¥–æ–±–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /invest)

üîÑ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
‚Ä¢ –°–æ–∑–¥–∞—Å—Ç –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ @${testData.username}
‚Ä¢ –ó–∞–ø—É—Å—Ç–∏—Ç –ø–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ Apify
‚Ä¢ –°–æ—Ö—Ä–∞–Ω–∏—Ç ${testData.max_reels} –ª—É—á—à–∏—Ö —Ä–∏–ª–∑–æ–≤ –≤ –ë–î
‚Ä¢ –û—Ç–ø—Ä–∞–≤–∏—Ç 1 –ª—É—á—à–∏–π —Ä–∏–ª–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥

‚ö° –ü–æ–ª–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–π–º–µ—Ç 1-2 –º–∏–Ω—É—Ç—ã
`)
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message)
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ –ë–î
async function createTestSubscription() {
  console.log('\nüß™ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –ë–î...')
  
  try {
    const { Pool } = require('pg')
    const dbPool = new Pool({
      connectionString: process.env.NEON_DATABASE_URL,
      ssl: { rejectUnauthorized: false }
    })
    
    const client = await dbPool.connect()
    
    try {
      const result = await client.query(`
        INSERT INTO competitor_subscriptions 
        (user_telegram_id, user_chat_id, bot_name, competitor_username, 
         max_reels, min_views, max_age_days, delivery_format)
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
        ON CONFLICT (user_telegram_id, competitor_username, bot_name) 
        DO UPDATE SET 
          is_active = true,
          updated_at = NOW()
        RETURNING *
      `, [
        '144022504',
        '144022504', 
        'neuro_blogger_bot',
        'natgeo',
        5,
        1000,
        14,
        'digest'
      ])
      
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞:')
      console.log(`   ID: ${result.rows[0].id}`)
      console.log(`   –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç: @${result.rows[0].competitor_username}`)
      console.log(`   –ê–∫—Ç–∏–≤–Ω–∞: ${result.rows[0].is_active}`)
      
    } finally {
      client.release()
      await dbPool.end()
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:', error.message)
  }
}

async function main() {
  await testInvestFunction()
  
  // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É
  const createTest = process.argv.includes('--create-test')
  if (createTest) {
    await createTestSubscription()
  }
}

main().catch(console.error)