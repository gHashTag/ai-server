const axios = require('axios')
const FormData = require('form-data')
const fs = require('fs')

/**
 * üß¨ –õ–û–ö–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ú–û–†–§–ò–ù–ì–ê (–ë–ï–ó NGROK)
 *
 * –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É:
 * - –†–∞—Å–ø–∞–∫–æ–≤–∫–∞ ZIP –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ
 * - –ü–µ—Ä–µ–¥–∞—á–∞ –ø—É—Ç–µ–π —Ñ–∞–π–ª–æ–≤ –≤ Inngest
 * - –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã output_too_large
 */

async function testMorphingLocal() {
  console.log('üß¨ === –õ–û–ö–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –ù–û–í–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –ú–û–†–§–ò–ù–ì–ê ===\n')

  if (!fs.existsSync('test_real_morphing.zip')) {
    console.error('‚ùå –§–∞–π–ª test_real_morphing.zip –Ω–µ –Ω–∞–π–¥–µ–Ω!')
    return
  }

  const formData = new FormData()

  // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
  formData.append('type', 'morphing')
  formData.append('telegram_id', '144022504') // –¢–≤–æ–π ID
  formData.append('image_count', '3')
  formData.append('morphing_type', 'seamless')
  formData.append('model', 'kling-v1.6-pro')
  formData.append('is_ru', 'true')
  formData.append('bot_name', 'clip_maker_neuro_bot')
  formData.append('username', 'test_user')

  // –î–æ–±–∞–≤–ª—è–µ–º ZIP —Ñ–∞–π–ª
  formData.append('images_zip', fs.createReadStream('test_real_morphing.zip'))

  try {
    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä...')
    console.log('üéØ URL: http://localhost:4000/generate/morph-images')
    console.log(
      'üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞:',
      fs.statSync('test_real_morphing.zip').size,
      '–±–∞–π—Ç'
    )

    const response = await axios.post(
      'http://localhost:4000/generate/morph-images',
      formData,
      {
        headers: {
          ...formData.getHeaders(),
          Accept: 'application/json',
        },
        timeout: 30000, // 30 —Å–µ–∫—É–Ω–¥
      }
    )

    console.log(
      '‚úÖ –£–°–ü–ï–•! API Response:',
      JSON.stringify(response.data, null, 2)
    )
    console.log(`üéØ Job ID: ${response.data.job_id}`)

    console.log('\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (30 —Å–µ–∫—É–Ω–¥) –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ Inngest...')
    console.log(
      'üìã –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Inngest –¥–∞—à–±–æ—Ä–¥ - —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –ë–ï–ó output_too_large!'
    )
    console.log(
      'üéâ –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: ZIP —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ, –≤ Inngest –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—É—Ç–∏!'
    )
  } catch (error) {
    if (error.response) {
      console.error(
        '‚ùå HTTP Error:',
        error.response.status,
        error.response.statusText
      )
      console.error('üìÑ Response:', error.response.data)
    } else if (error.request) {
      console.error('‚ùå –°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞:', error.message)
    } else {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error.message)
    }
  }
}

testMorphingLocal()
