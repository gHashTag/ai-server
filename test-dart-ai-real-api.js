/**
 * –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É Dart AI API
 * –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ endpoints –∏ –º–µ—Ç–æ–¥—ã
 */

const axios = require('axios');
require('dotenv').config();

const API_KEY = process.env.DART_AI_API_KEY;
const API_URL = process.env.DART_AI_API_URL || 'https://api.dartai.com';

// –¶–≤–µ—Ç–∞ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
const colors = {
  green: '\x1b[32m',
  red: '\x1b[31m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m',
  bold: '\x1b[1m'
};

function log(message, color = colors.reset) {
  console.log(`${color}${message}${colors.reset}`);
}

async function testDartAIAPI() {
  log('\nüöÄ –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É Dart AI API\n', colors.bold);

  if (!API_KEY || API_KEY === 'your_dart_ai_api_key_here') {
    log('‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!', colors.red);
    return;
  }

  log(`üîë API Key: ${API_KEY.slice(0, 20)}...`, colors.blue);
  log(`üåê API URL: ${API_URL}`, colors.blue);

  // –†–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const authHeaders = [
    { 'Authorization': `Bearer ${API_KEY}` },
    { 'Authorization': `Token ${API_KEY}` },
    { 'X-API-Key': API_KEY },
    { 'Authorization': API_KEY },
    { 'Dart-API-Key': API_KEY }
  ];

  // –í–æ–∑–º–æ–∂–Ω—ã–µ endpoints
  const endpoints = [
    '/health',
    '/status',
    '/ping',
    '/api/health',
    '/api/status',
    '/v1/health',
    '/v1/status',
    '/tasks',
    '/api/tasks',
    '/v1/tasks',
    '/projects',
    '/api/projects',
    '/v1/projects',
    '/spaces',
    '/api/spaces',
    '/v1/spaces'
  ];

  let workingEndpoints = [];
  let workingAuth = null;

  // –¢–µ—Å—Ç 1: –ù–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–π endpoint –∏ –º–µ—Ç–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  log('üì° –¢–µ—Å—Ç 1: –ü–æ–∏—Å–∫ —Ä–∞–±–æ—á–∏—Ö endpoints...', colors.blue);

  for (const headers of authHeaders) {
    for (const endpoint of endpoints) {
      try {
        const response = await axios.get(`${API_URL}${endpoint}`, {
          headers: {
            'Content-Type': 'application/json',
            'User-Agent': 'AI-Server-DartAI-Integration/1.0.0',
            ...headers
          },
          timeout: 5000
        });

        log(`‚úÖ ${endpoint}: ${response.status} ${response.statusText}`, colors.green);
        log(`üì¶ Response: ${JSON.stringify(response.data, null, 2).slice(0, 200)}...`, colors.reset);
        
        workingEndpoints.push({
          endpoint,
          status: response.status,
          data: response.data,
          headers
        });

        if (!workingAuth) {
          workingAuth = headers;
        }

      } catch (error) {
        if (error.response) {
          log(`‚ö†Ô∏è  ${endpoint}: ${error.response.status} ${error.response.statusText}`, colors.yellow);
          if (error.response.data) {
            log(`üìã Error data: ${JSON.stringify(error.response.data, null, 2).slice(0, 200)}...`, colors.yellow);
          }
        } else {
          log(`‚ùå ${endpoint}: ${error.message}`, colors.red);
        }
      }
    }
    
    if (workingEndpoints.length > 0) {
      log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π –º–µ—Ç–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${JSON.stringify(headers)}`, colors.green);
      break;
    }
  }

  if (workingEndpoints.length === 0) {
    log('\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–µ endpoints!', colors.red);
    log('üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:', colors.yellow);
    log('   ‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API URL', colors.yellow);
    log('   ‚Ä¢ –ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π API –∫–ª—é—á', colors.yellow);
    log('   ‚Ä¢ API –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', colors.yellow);
    log('   ‚Ä¢ –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –∫–ª—é—á–∞ –≤ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è', colors.yellow);
    return;
  }

  log(`\n‚úÖ –ù–∞–π–¥–µ–Ω–æ ${workingEndpoints.length} —Ä–∞–±–æ—á–∏—Ö endpoints:`, colors.green);
  workingEndpoints.forEach(ep => {
    log(`   ‚Ä¢ ${ep.endpoint} (${ep.status})`, colors.reset);
  });

  // –¢–µ—Å—Ç 2: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
  if (workingAuth) {
    log('\nüìù –¢–µ—Å—Ç 2: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É...', colors.blue);

    const taskData = {
      title: '[GitHub Integration Test] –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏',
      description: `# –¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å GitHub

–≠—Ç–∞ –∑–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –º–µ–∂–¥—É GitHub Issues –∏ Dart AI Task Manager.

## –î–µ—Ç–∞–ª–∏
- **–ò—Å—Ç–æ—á–Ω–∏–∫:** GitHub Issue #57
- **–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π:** gHashTag/ai-server  
- **–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è:** ${new Date().toLocaleString('ru-RU')}
- **API Key:** ${API_KEY.slice(0, 10)}...

## –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
- [ ] –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –≤ Dart AI
- [ ] –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
- [ ] –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ GitHub`,
      status: 'open',
      priority: 'medium',
      project: 'GitHub Integration',
      labels: ['integration', 'test', 'github-sync'],
      metadata: {
        source: 'github-integration-test',
        github_issue: 57,
        repository: 'gHashTag/ai-server',
        created_by: 'api-test'
      }
    };

    const createEndpoints = ['/tasks', '/api/tasks', '/v1/tasks'];

    for (const endpoint of createEndpoints) {
      try {
        const response = await axios.post(`${API_URL}${endpoint}`, taskData, {
          headers: {
            'Content-Type': 'application/json',
            'User-Agent': 'AI-Server-DartAI-Integration/1.0.0',
            ...workingAuth
          },
          timeout: 10000
        });

        log(`‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞ —á–µ—Ä–µ–∑ ${endpoint}:`, colors.green);
        log(`üì¶ Response: ${JSON.stringify(response.data, null, 2)}`, colors.reset);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —Ç–µ—Å—Ç–æ–≤
        const taskId = response.data.id || response.data.task_id || response.data._id;
        
        if (taskId) {
          log(`üÜî Task ID: ${taskId}`, colors.blue);
          
          // –¢–µ—Å—Ç 3: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É
          log('\nüîç –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏...', colors.blue);
          
          try {
            const getResponse = await axios.get(`${API_URL}${endpoint}/${taskId}`, {
              headers: {
                'Content-Type': 'application/json',
                ...workingAuth
              }
            });
            
            log('‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞:', colors.green);
            log(`üì¶ Task data: ${JSON.stringify(getResponse.data, null, 2)}`, colors.reset);
            
          } catch (getError) {
            log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á—É: ${getError.message}`, colors.yellow);
          }
        }

        return {
          success: true,
          working_endpoint: endpoint,
          auth_method: workingAuth,
          task_created: true,
          task_data: response.data
        };

      } catch (error) {
        log(`‚ö†Ô∏è  –°–æ–∑–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ ${endpoint}: ${error.message}`, colors.yellow);
        if (error.response?.data) {
          log(`üìã Error: ${JSON.stringify(error.response.data, null, 2)}`, colors.yellow);
        }
      }
    }
  }

  // –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤/spaces
  log('\nüèóÔ∏è  –¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤...', colors.blue);
  
  const projectEndpoints = ['/projects', '/api/projects', '/v1/projects', '/spaces', '/api/spaces', '/v1/spaces'];
  
  for (const endpoint of projectEndpoints) {
    try {
      const response = await axios.get(`${API_URL}${endpoint}`, {
        headers: {
          'Content-Type': 'application/json',
          ...workingAuth
        },
        timeout: 5000
      });

      log(`‚úÖ –ü—Ä–æ–µ–∫—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ ${endpoint}:`, colors.green);
      log(`üì¶ Projects: ${JSON.stringify(response.data, null, 2).slice(0, 500)}...`, colors.reset);
      
      break;

    } catch (error) {
      log(`‚ö†Ô∏è  ${endpoint}: ${error.message}`, colors.yellow);
    }
  }

  return {
    success: workingEndpoints.length > 0,
    working_endpoints: workingEndpoints,
    auth_method: workingAuth,
    api_accessible: true
  };
}

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testDartAIAPI()
    .then(result => {
      if (result && result.success) {
        log('\nüéâ –¢–µ—Å—Ç Dart AI API –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!', colors.bold + colors.green);
        log('üîó API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∏ –≥–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é', colors.green);
      } else {
        log('\nüí• –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏', colors.bold + colors.red);
        log('üìû –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ Dart AI –∏–ª–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É', colors.yellow);
      }
    })
    .catch(error => {
      log(`\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, colors.bold + colors.red);
      console.error(error);
    });
}

module.exports = { testDartAIAPI };