#!/usr/bin/env node

/**
 * –û–¢–õ–ê–î–ö–ê KIE.AI API - –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –û–¢–í–ï–¢–ê
 */

const path = require('path');
require('dotenv').config({ path: path.resolve(__dirname, '.env') });

console.log('üî¨ –û–¢–õ–ê–î–ö–ê KIE.AI API');
console.log('='.repeat(50));
console.log(`üîë API Key: ${process.env.KIE_AI_API_KEY?.substring(0, 10)}...`);

async function debugKieApi() {
  const payload = {
    model: 'veo3',
    prompt: 'A simple test video of a flower',
    duration: 2,
    aspect_ratio: '16:9'
  };

  console.log('\nüìã Payload:');
  console.log(JSON.stringify(payload, null, 2));

  try {
    console.log('\nüì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...');
    const response = await fetch('https://api.kie.ai/api/v1/veo/generate', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${process.env.KIE_AI_API_KEY}`,
        'Accept': 'application/json'
      },
      body: JSON.stringify(payload)
    });

    console.log(`üìä HTTP Status: ${response.status} ${response.statusText}`);
    
    // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
    console.log('\nüìã Response Headers:');
    for (const [key, value] of response.headers.entries()) {
      console.log(`  ${key}: ${value}`);
    }

    const responseText = await response.text();
    console.log(`\nüìÑ Raw Response (${responseText.length} chars):`);
    console.log(responseText);

    // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
    try {
      const jsonResponse = JSON.parse(responseText);
      console.log('\nüîß Parsed JSON Response:');
      console.log(JSON.stringify(jsonResponse, null, 2));
      
      if (jsonResponse.error) {
        console.log(`\n‚ùå API Error: ${jsonResponse.error}`);
      }
      
      if (jsonResponse.message) {
        console.log(`\nüí¨ API Message: ${jsonResponse.message}`);
      }
    } catch (parseError) {
      console.log('\n‚ùå Response –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON');
    }

  } catch (networkError) {
    console.error('\nüí• Network Error:', networkError.message);
  }
}

async function testCreditsBalance() {
  console.log('\nüí∞ –ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–ê –ö–†–ï–î–ò–¢–û–í:');
  
  try {
    const response = await fetch('https://api.kie.ai/api/v1/credits/balance', {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${process.env.KIE_AI_API_KEY}`,
        'Accept': 'application/json'
      }
    });

    console.log(`üìä Balance Status: ${response.status}`);
    
    const balanceText = await response.text();
    console.log(`üìÑ Balance Response: ${balanceText}`);
    
    try {
      const balanceJson = JSON.parse(balanceText);
      console.log('üí≥ –ë–∞–ª–∞–Ω—Å:', JSON.stringify(balanceJson, null, 2));
    } catch (e) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –±–∞–ª–∞–Ω—Å–∞');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞:', error.message);
  }
}

async function testHealthCheck() {
  console.log('\nüè• –ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø API:');
  
  try {
    const response = await fetch('https://api.kie.ai/health', {
      method: 'GET',
      headers: {
        'Accept': 'application/json'
      }
    });

    console.log(`üìä Health Status: ${response.status}`);
    
    const healthText = await response.text();
    console.log(`üìÑ Health Response: ${healthText}`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ health check:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
async function runDebug() {
  await debugKieApi();
  await testCreditsBalance();
  await testHealthCheck();
  
  console.log('\n' + '='.repeat(50));
  console.log('üìù –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:');
  console.log('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–≤–µ—Ç—ã –≤—ã—à–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å API');
  console.log('='.repeat(50));
}

runDebug().catch(console.error);